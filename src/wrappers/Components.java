package wrappers;


import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.lang.reflect.Method;

import org.testng.SkipException;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import Page_Objects.Balance_Transfer;
import Page_Objects.Billing_Transaction;
import Page_Objects.Bundle_Purchase;
import Page_Objects.CRM_Login_Page;
import Page_Objects.CRM_Logout;
import Page_Objects.Call_Forward;
import Page_Objects.Cancel_Initail_Loc;
import Page_Objects.Credit_Debit;
import Page_Objects.Data_Usage_Limit;
import Page_Objects.Disability_Services;
import Page_Objects.EU_Configurations;
import Page_Objects.Network_Feature;
import Page_Objects.OBA_Credit;
import Page_Objects.Online_TopUp;
import Page_Objects.PendingApproval;
import Page_Objects.Refund_Payment;
import Page_Objects.Registration;
import Page_Objects.Registration_FRA;
import Page_Objects.Registration_GBR;
import Page_Objects.Registration_NOR;
import Page_Objects.Registration_POL;
import Page_Objects.Registration_USA;
import Page_Objects.Send_Sim;
import Page_Objects.Settings;
import Page_Objects.Staff_TopUp;
import Page_Objects.Subscribe_History;
import Page_Objects.SwapImsi_Page;
import Page_Objects.Tickets;
import Page_Objects.Topup_Failure_History;
import Page_Objects.USA_Family_Plan;
import Page_Objects.USA_Pages;
import Page_Objects.ValueAddedServices;
import Page_Objects.Voucher_Status;
import Page_Objects.Voucher_TopUp_Page;
import report.ExtentTestManager;
import utils.Constants;
import utils.ReadExcel;
import Page_Objects.Security_Policy;
import Page_Objects.Agent_Profile;

/**
 * 
 * <h3>ApplicationWrapper</h3>
 * 
 * <p>
 * <b>Class holds all components</b> 
 * 
 * @author Lakshman A
 * @since OCT 1, 2016
 *
 */

public class Components extends ApplicationWrapper {

	protected boolean skipAllComponentsVariable=false;
	protected boolean eventInACaseFailed=false;

	@Test
	@Parameters({"testcaseName","testdatasheet","suiteType"})
	private synchronized void runComponents(String testcaseName,String testdatasheet,String suiteType) throws Exception{
		testCaseStatus=true;
		eventInACaseFailed=false;

		ReadExcel testCaseXL = new ReadExcel(testdatasheet);

		boolean testCaseSheetExist=testCaseXL.CheckTestCaseNamedSheetExist(testdatasheet,testcaseName);

		//If Sheet exist with TestCase name in TestData SpreadSheet
		if(testCaseSheetExist){

			Components componentObject = new Components();
			Method componentMethodName = null;

			for (int testCompCount = 1; testCompCount <= testCaseXL.getRowCount(testcaseName); testCompCount++) {

				String componentName = testCaseXL.getCellData(testcaseName, Constants.AppComp_Order_ColName, testCompCount);
				String componentDesc = testCaseXL.getCellData(testcaseName, Constants.AppComp_Desc_ColName, testCompCount);
				log.info("***Component Name : "+componentName+" - "+componentDesc);

				if(testCaseXL.getCellData(testcaseName, Constants.AppComp_Execute_ColName, testCompCount).equalsIgnoreCase(Constants.RUNMODE_YES)){
					log.info("Component Execute Status- [ YES ]");

					String componentDisableSteps = testCaseXL.getCellData(testcaseName, Constants.AppComp_DEvents_ColName, testCompCount);

					ExtentTestManager.startComponent(componentName, componentDesc);

					//Check for the Disable and Enable Events has proper values
					if( !(componentDisableSteps.equals(""))){
						int noOfDataSet = testCaseXL.getRowCount(componentName);
						//Adding a extra Event explaining about the Processing Record
						if(noOfDataSet >1){
							ExtentTestManager.reportStepInfo("<b><u>Total Number of Data Set : "+noOfDataSet+"</u></b>");
						}

						for(int dataSetCount = 1;dataSetCount<=noOfDataSet;dataSetCount++){

							if(testCaseXL.getCellData(componentName, Constants.TestData_Execute_ColName, dataSetCount).equalsIgnoreCase(Constants.RUNMODE_YES)){

								String testDataObj = testCaseXL.getCellData(componentName, Constants.TestData_Objective_ColName, dataSetCount);
								if(noOfDataSet > 1){
									ExtentTestManager.reportStepInfo("<u>Processing Record No: <b>"+dataSetCount+"</b></u>");
								}
								ExtentTestManager.reportStepInfo("<b>Test Data Objective</b> : "+testDataObj);

								try{
									@SuppressWarnings("rawtypes")
									Class[] paramTypes = new Class[4];
									paramTypes[0]=String.class;
									paramTypes[1]=String.class;
									paramTypes[2]=String.class;
									paramTypes[3]=int.class;

									componentMethodName = componentObject.getClass().getMethod(componentName, paramTypes);
									componentMethodName.invoke(componentObject,testdatasheet,componentName,componentDisableSteps,dataSetCount);

								}catch(NoSuchMethodException e){
									ExtentTestManager.reportStepError("No Such Component Named '"+componentName+"' in Component Class.");
								}catch(InvocationTargetException e){
									log.info("InvocationTargetException thrown. Details : "+e);
									e.printStackTrace();
								}catch(SkipException e){
									log.info("SkipException Component failed. Skipping all the Component "+e);
									e.printStackTrace();
									ExtentTestManager.reportStepSkip("<b>Skipping the '"+componentName+"' as the Step in previous Component FAILED.</b>");
								}catch(Exception e){
									log.info("Common Exception catch Component failed."+e);
									e.printStackTrace();
								}finally{
									//ExtentTestManager.appendComponent();
									log.info("Component Ends.\n");
								}
							}else if(testCaseXL.getCellData(componentName, Constants.TestData_Execute_ColName, dataSetCount).equalsIgnoreCase(Constants.RUNMODE_NO)){
								ExtentTestManager.reportStepInfo("DataSet - "+dataSetCount+" Exectute status is set to 'No' in Component Sheet. Skipping the DataSet.");
							}
						}
						ExtentTestManager.appendComponent();
						log.info("Component Ends.\n");
					}else{ 
						ExtentTestManager.reportStepFail(  "Enter valid values in the Total_Events/Disable_Events Column of Test Data Sheet ", false);
					}
				}else{
					log.info("Component Execute Status- [ No ]");
					if(sysProperty.getProperty("Report_Switched_Off_Components").equalsIgnoreCase("True")){
						ExtentTestManager.startComponent(componentName, componentDesc);
						ExtentTestManager.reportStepSkip("<b>Component '<u>"+componentName+"</u>' is Switched OFF in the TestData Sheet</b>");
						ExtentTestManager.appendComponent();
					}
				}
			}
		}
	}

	/**
	 * <b>Initialize the Total No of Steps and also initialize each Step as True</b>
	 * @param totalSteps Total No of Steps from Excel
	 * @author <b>Lakshman</b>
	 * @since <b>14-APRIL-16</b>
	 */
	private synchronized boolean[] initializeSteps(int  totalSteps){

		boolean[] stepStatus=new boolean[totalSteps];
		for(int i=0;i<(totalSteps);i++){
			stepStatus[i]=false;
		}
		return stepStatus;
	}

	/**
	 * <b>Initialize the Total No of Steps and also initialize each Step as True</b>
	 * @param totalSteps Total No of Steps from Excel
	 * @author <b>Lakshman</b>
	 * @since <b>14-APRIL-16</b>
	 */
	private synchronized int[] dropDisableSteps(int  totalSteps, String  disableSteps){

		int[] runSteps=null;
		String[] eachDisabledSteps=null;
		int z;

		try{
			//Initializing the array with the values 1,2,3,4.... upto total events
			runSteps =new int[totalSteps];
			for(int a=0;a<(totalSteps);a++){
				runSteps[a]=a+1;
			}

			if(sysProperty.getProperty("Ignore_Disable_Events").equalsIgnoreCase("false")){
				if(!( (disableSteps.equals("0") || disableSteps.equals("0.0") )) ){	
					log.info("Disable Events available...");
					//Retrieving each event seperately
					eachDisabledSteps=disableSteps.split(",");
					for(int de=0;de<eachDisabledSteps.length;de++){
						eachDisabledSteps[de]=eachDisabledSteps[de].replace(".0", "");
					}
					z=1;
					for(String  a : eachDisabledSteps ){
						int removeAction = Integer.parseInt(a)-z;

						int reorderedIndex = runSteps.length -1;
						for(int r=removeAction;r<reorderedIndex;r++){
							runSteps[r]= runSteps[r+1];
						}
						int[] appComponentEventstemp= Arrays.copyOf(runSteps, reorderedIndex);
						runSteps = appComponentEventstemp;
						z=z+1;	
					}
				}
			}else{
				log.info("Ignoring Disable_Events and running all the Events");
			}
		}catch(Exception e){
			log.info("Error inside dropDisableSteps  : "+e);
			throw e;
		}finally{
			if(eachDisabledSteps!=null){
				for(int j=0;j<eachDisabledSteps.length;j++){
					eachDisabledSteps[j]=null;
				}
				eachDisabledSteps=null;
			}
		}
		return runSteps;
	}

	private synchronized void validateComponentStatus(int[] reorderedSteps,boolean[] stepStatus,boolean defaultBreak,String ComponentName){
		try{
			boolean testStepsStatus=true;
			for(int k=0;k<reorderedSteps.length;k++){
				boolean stepValue=stepStatus[k];
				if(stepValue != true){
					testStepsStatus=false;
				}
			}
			if(defaultBreak){
				testStepsStatus=false;
			}

			if(testStepsStatus){
				ExtentTestManager.reportStepInfo("<b>'"+ComponentName+"' Component execution is Successful.</b>");
			}else{
				ExtentTestManager.reportStepInfo("<b>'"+ComponentName+"' Component execution is not Successful.</b>" );
			}

		}catch(Exception e){
			log.info("Exception in validateComponentStatus of Components  : "+e);
			e.printStackTrace();
			throw e;
		}
	}

	private synchronized String getMethodName(){
		try{
			StackTraceElement[] stacktrace = Thread.currentThread().getStackTrace();

			StackTraceElement element = stacktrace[2];
			String methodName = element.getMethodName();	

			return methodName;
		}catch(Exception e){
			e.printStackTrace();
			return "";
		}
	}

	///****************************  CRM Related Components ******************************/

	//****************************  Page Model Object to use synchronised methods ******************************/
	PendingApproval pendingApproval=new PendingApproval();
	Settings settings=new Settings();
	CRM_Logout cRM_Logout=new CRM_Logout();
	CRM_Login_Page cRM_Login_Page=new CRM_Login_Page();
	Staff_TopUp staff_TopUp=new Staff_TopUp();
	Online_TopUp online_TopUp=new Online_TopUp();
	ValueAddedServices valueAddedServices = new ValueAddedServices();
	Balance_Transfer balance_Transfer=new Balance_Transfer();
	Billing_Transaction billing_Transaction=new Billing_Transaction();
	Bundle_Purchase bundle_Purchase = new Bundle_Purchase();
	Call_Forward call_Forward = new Call_Forward();
	Cancel_Initail_Loc cancel_Initail_Loc = new Cancel_Initail_Loc();
	Credit_Debit credit_Debit = new Credit_Debit();
	Data_Usage_Limit data_Usage_Limit = new Data_Usage_Limit();
	Disability_Services disability_Services = new Disability_Services();
	EU_Configurations eU_Configurations = new EU_Configurations();
	Refund_Payment refund_Payment = new Refund_Payment();
	Registration_FRA registration_FRA=new Registration_FRA();
	Registration_GBR registration_GBR=new Registration_GBR();
	Registration_NOR registration_NOR=new Registration_NOR();
	Registration_POL registration_POL=new Registration_POL();
	Registration_USA registration_USA=new Registration_USA();
	Send_Sim send_Sim=new Send_Sim();
	SwapImsi_Page swapImsi_Page = new SwapImsi_Page();
	Tickets tickets = new Tickets();
	Topup_Failure_History topup_Failure_History= new Topup_Failure_History();
	USA_Family_Plan uSA_Family_Plan=new USA_Family_Plan();
	USA_Pages uSA_Pages =new USA_Pages();
	Voucher_Status voucher_Status = new Voucher_Status();
	Voucher_TopUp_Page voucher_TopUp_Page=new Voucher_TopUp_Page();
	Registration registration = new Registration();
	Subscribe_History subscribe_History = new Subscribe_History();
	OBA_Credit oBA_Credit = new OBA_Credit();
	Network_Feature network_Feature=new Network_Feature();
	Security_Policy security_Policy=new Security_Policy();
	Agent_Profile agent_Profile=new Agent_Profile();
		
	//****************************  Page Model Object ******************************/

	/*---------------------------LAKSHMAN CODE------------------------------------*/
	
	/**
	 * <b>To Launch the application</b>
	 * @param testdatasheet DataSheetPath from testngXML file
	 * @param compName Component Name from testngXML file
	 * @param compDesc Component Desc from testngXML file
	 * @param totalSteps1 Total Steps from testngXML file
	 * @param disableSteps disable Steps from testngXML file
	 * @author <b>Lakshman</b>
	 * @since <b>13-OCT-16</b>
	 */

	public synchronized void Launch_App(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 8;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];

				switch (stepNo) {
				case "step1": stepStatus[step] = LaunchApplication("URL",1);
				break;
				case "step2": stepStatus[step] = pageLoadCheck();
				break;
				case "step3": stepStatus[step] = waitUntilExist(cRM_Login_Page.Login_Page("txtbox_UserName"), "Username");
				break;
				case "step4": stepStatus[step] = WebEditEnterUsername(cRM_Login_Page.Login_Page("txtbox_UserName"), "Username", "Login_User_ID", 1);
				break;
				case "step5": stepStatus[step] = WebEditEnterPassword(cRM_Login_Page.Login_Page("txtbox_Password"), "Password","Login_Password", 1);  
				break;
				case "step6": stepStatus[step] = WebElementClick(cRM_Login_Page.Login_Page("btn_LogIn"), "Login");
				break;
				case "step7": stepStatus[step] = pageLoadCheck();
				break;
				case "step8": stepStatus[step] = waitUntilExist(cRM_Logout.Logout_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					testCaseStatus=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PreCon_APP_GBR_SIMBLOCK_UNBLOCK(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 13;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];

				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.settings_Page("country_DropdownValues_GBR"), "Country_Dropdown_GBR", "CountryBrand_DDValue_GBR", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;
				case "step10": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_TicketIDconfig", 1);
				break;
				case "step11": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_TicketIDconfig"), "TicketIDconfig");
				break;
				case "step12": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_TicketIDconfig"), "TicketIDconfig", "value_TicketIDconfig", 1);
				break;
				case "step13": stepStatus[step] = WebElementClick(settings.settings_Page("close_Btn"), "Close_Button");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Pre_APP_GBR_SIMBLOCK_UNBLOCK1(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 19;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];

				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.settings_Page("country_DropdownValues_GBR"), "Country_Dropdown_GBR", "CountryBrand_DDValue_GBR", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;
				case "step10": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_TicketIDconfig", 1);
				break;
				case "step11": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_TicketIDconfig"), "TicketIDconfig");
				break;
				case "step12": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_TicketIDconfig"), "TicketIDconfig", "value_TicketIDconfig", 1);
				break;

				case "step13": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_TicketIDMinLength", 1);
				break;
				case "step14": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_TicketIDMinLength"), "TicketIDMinLength");
				break;
				case "step15": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_TicketIDMinLength"), "TicketIDMinLength", "value_TicketIDMinLength", 1);
				break;

				case "step16": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_TicketIDMaxLength", 1);
				break;
				case "step17": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_TicketIDMaxLength"), "TicketIDMaxLength");
				break;
				case "step18": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_TicketIDMaxLength"), "TicketIDMaxLength", "value_TicketIDMaxLength", 1);
				break;

				case "step19": stepStatus[step] = WebElementClick(settings.settings_Page("close_Btn"), "Close_Button");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Logout_App(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 7;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];

				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExistZoomOut(cRM_Logout.Logout_Page("menu_Dropdown"),  "Homepage_Menu"); 
				break;
				case "step2": stepStatus[step] = WebElementClick(cRM_Logout.Logout_Page("menu_Dropdown"), "Homepage_Menu");
				break;
				case "step3": stepStatus[step] = PerformAction_MoveToElementAndClick(cRM_Logout.Logout_Page("logout_Button"), "Logout_Button");
				break;
				case "step4": stepStatus[step] = alertAccept("Logout Confirmation");
				break;
				case "step5": stepStatus[step] = pageLoadCheck();
				break;
				case "step6": stepStatus[step] = waitUntilExist(cRM_Login_Page.Login_Page("btn_LogIn"), "Login_Button");
				break;
				case "step7": stepStatus[step] = CloseWebBrowser();
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Perform_GBR_SIMBLOCK_UNBLOCK(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 16;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];

				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select"); 
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("simBlock_Button"), "SimBlock_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("simBlockUnblock_Button"), "Sim_BlockUnblock_Button"); 
				break;
				case "step9": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("ticketIDSIMBlock_TextBox"), "TicketID_TextBox");
				break;
				case "step10": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("ticketIDSIMBlock_TextBox"), "TicketID", "TicketID", 1);
				break;
				case "step11": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("action_Dropdown"), "Action_Dropdown", "SIM_Action", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("comments_TextBox"), "Comments_TextBox", "Comments", 1);
				break;
				case "step13": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("approve_Button"), "Approve_Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("response_Message"), "Response_Message");
				break;
				case "step15": stepStatus[step] = WebElementResxKeyValueStaticCompare(staff_TopUp.staff_TopUp_Page("response_Message"), "Response_Message", "Automation_KeyName", 1); 
				break;
				case "step16": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("close_button"), "Subscriber Logout");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Perform_GBR_SIMBLOCK_UNBLOCK1(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 13;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select"); 
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("simBlock_Button"), "SimBlock_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("simBlockUnblock_Button"), "Sim_BlockUnblock_Button"); 
				break;
				case "step9": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("ticketIDSIMBlock_TextBox"), "TicketID_TextBox");
				break;
				case "step10": stepStatus[step] = WebEditEnterValueAndCompareSame(staff_TopUp.staff_TopUp_Page("ticketIDSIMBlock_TextBox"), "TicketID", "TicketID","Expected_TicketID", 1);
				break;
				case "step11": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("action_Dropdown"), "Action_Dropdown", "SIM_Action", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterValueAndCompareSame(staff_TopUp.staff_TopUp_Page("comments_TextBox"), "Comments_TextBox","Comments","Expected_Comments", 1);
				break;
				case "step13": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("close_button"), "Subscriber Logout");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Open_SQL_Connection_GBR(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBOpenConnection(property.getProperty("SQL_Server_GBR"), property.getProperty("SQL_Server_DB_Name_GBR"), property.getProperty("SQL_Server_UID_GBR"), property.getProperty("SQL_Server_PWD_GBR")); 
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Close_SQL_Connection(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBCloseConnection(); 
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Close_SQL_Connection_TT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBCloseConnection_TT(); 
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Open_RRBS_Connection(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = RRBSDBOpenConnection("RRBS_DB_Server", "RRBS_DB_Portnumber", "RRBS_DB_Name", "RRBS_DB_Username", "RRBS_DB_Password"); 
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Close_RRBS_Connection(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = RRBSDBCloseConnection(); 
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PreCon_DB_GBR_SIMBLOCK_UNBLOCK(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 4;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBDelete("SQL_SIMBLOCK_TABLENAME", "SQL_MSISDN_CONDITION", 1); 
				break;
				case "step2": stepStatus[step] = SQLDBDelete("SQL_MSISDNBLOCK_TABLENAME", "SQL_MSISDN_CONDITION", 1); 
				break;
				case "step3": stepStatus[step] = SQLDBUpdate("SQL_MSTACCOUNT_TABLENAME", "SQL_MSTACCOUNT_COLUMNNAME", "SQL_MSTACCOUNT_COLUMNVALUE", "SQL_MSISDN_CONDITION", 1); 
				break;
				case "step4": stepStatus[step] = RRBSDBUpdate("RRBS_SUBSCRIBER_TABLENAME", "RRBS_SUBSCRIBER_COLUMNNAME", "RRBS_SUBSCRIBER_COLUMN_VALUE", "RRBS_SUBSCRIBER_CONDITION", 1); 
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postcon_GBR_SIMBLOCK_UNBLOCK(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 10;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("SIMBLOCK_TABLE","SIMBLOCK_MSISDN_COLUMN","SQL_MSISDN_CONDITION","SIMBLOCK_MSISDN_VALUE",1); 
				break;
				case "step2": stepStatus[step] = SQLDBSelect("SIMBLOCK_TABLE", "SIMBLOCK_TicketId_COLUMN", "SQL_MSISDN_CONDITION", "SIMBLOCK_TicketId_VALUE", 1); 
				break;
				case "step3": stepStatus[step] = SQLDBSelect("SIMBLOCK_TABLE", "SIMBLOCK_Reason_COLUMN", "SQL_MSISDN_CONDITION", "SIMBLOCK_Reason_VALUE", 1); 
				break;
				case "step4": stepStatus[step] = SQLDBDateCompare("SIMBLOCK_TABLE", "SIMBLOCK_SubmitDate_COLUMN", "SQL_MSISDN_CONDITION", "dd/MM/yyyy", 1); 
				break;
				case "step5": stepStatus[step] = SQLDBSelect("SIMBLOCK_TABLE", "SIMBLOCK_Status_COLUMN", "SQL_MSISDN_CONDITION", "SIMBLOCK_Status_VALUE", 1); 
				break;
				case "step6": stepStatus[step] = SQLDBSelect("SIMBLOCK_TABLE", "SIMBLOCK_SubmitedBy_COLUMN", "SQL_MSISDN_CONDITION", "SIMBLOCK_SubmitedBy_VALUE", 1); 
				break;
				case "step7": stepStatus[step] = SQLDBSelect("SIMBLOCK_TABLE","SIMBLOCK_AuthorisedBy_COLUMN", "SQL_MSISDN_CONDITION", "SIMBLOCK_AuthorisedBy_VALUE", 1); 
				break;
				case "step8": stepStatus[step] = SQLDBDateCompare("SIMBLOCK_TABLE", "SIMBLOCK_AuthorisedDate_COLUMN", "SQL_MSISDN_CONDITION", "dd/MM/yyyy", 1); 
				break;
				case "step9": stepStatus[step] = SQLDBSelect("MSTACCOUNT_TABLENAME", "MSTACCOUNT_COLUMNNAME", "SQL_MSISDN_CONDITION", "MSTACCOUNT_COLUMNVALUE", 1); 
				break;
				case "step10": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_TABLENAME", "RRBS_SUBSCRIBER_COLUMNNAME", "RRBS_SUBSCRIBER_CONDITION", "RRBS_SUBSCRIBER_COLUMN_VALUE", 1); 
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void LogoutWithoutCloseBrowser(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 6;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(cRM_Logout.Logout_Page("menu_Dropdown"),  "Homepage_Menu"); 
				break;
				case "step2": stepStatus[step] = WebElementClick(cRM_Logout.Logout_Page("menu_Dropdown"), "Homepage_Menu"); 
				break;
				case "step3": stepStatus[step] = PerformAction_MoveToElementAndClick(cRM_Logout.Logout_Page("logout_Button"), "Logout_Button"); 
				break;
				case "step4": stepStatus[step] = alertAccept(); 
				break;
				case "step5": stepStatus[step] = pageLoadCheck(); 
				break;
				case "step6": stepStatus[step] = waitUntilExist(cRM_Login_Page.Login_Page("btn_LogIn"), "Login_Button"); 
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Login_App_CSAgent(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 6;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(cRM_Login_Page.Login_Page("txtbox_UserName"), "Username");
				break;
				case "step2": stepStatus[step] = WebEditEnterUsername(cRM_Login_Page.Login_Page("txtbox_UserName"), "Username", "Login_User_ID", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterPassword(cRM_Login_Page.Login_Page("txtbox_Password"), "Password","Login_Password", 1);  
				break;
				case "step4": stepStatus[step] = WebElementClick(cRM_Login_Page.Login_Page("btn_LogIn"), "Login");
				break;
				case "step5": stepStatus[step] = pageLoadCheck(); 
				break;
				case "step6": stepStatus[step] = waitUntilExist(cRM_Logout.Logout_Page("menu_Dropdown"), "Menu_Dropdown"); 
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_GBR_SIMBLOCK_UNBLOCK_AGENT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 16;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select"); 
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("simBlock_Button"), "SimBlock_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("simBlockUnblock_Button"), "Sim_BlockUnblock_Button"); 
				break;
				case "step9": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("ticketIDSIMBlock_TextBox"), "TicketID_TextBox");
				break;
				case "step10": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("ticketIDSIMBlock_TextBox"), "TicketID", "TicketID", 1);
				break;
				case "step11": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("action_Dropdown"), "Action_Dropdown", "SIM_Action", 1); 
				break;
				case "step12": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("comments_TextBox"), "Comments_TextBox", "Comments", 1); 
				break;
				case "step13": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("submit_Button"), "Submit_Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("response_Message"), "Response_Message"); 
				break;
				case "step15": stepStatus[step] = WebElementResxKeyValueStaticCompare(staff_TopUp.staff_TopUp_Page("response_Message"), "Response_Message", "Automation_KeyName", 1); 
				break;
				case "step16": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("close_button"), "Subscriber Logout"); 
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Post_GBR_SIMBLOCK_UNBLOCK_AGENT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 8;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBSelect("SIMBLOCK_TABLE","SIMBLOCK_MSISDN_COLUMN","SQL_MSISDN_CONDITION","SIMBLOCK_MSISDN_VALUE",1); 
				break;
				case "step2": stepStatus[step] = SQLDBSelect("SIMBLOCK_TABLE", "SIMBLOCK_TicketId_COLUMN", "SQL_MSISDN_CONDITION", "SIMBLOCK_TicketId_VALUE", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("SIMBLOCK_TABLE", "SIMBLOCK_Reason_COLUMN", "SQL_MSISDN_CONDITION", "SIMBLOCK_Reason_VALUE", 1);
				break;
				case "step4": stepStatus[step] = SQLDBDateCompare("SIMBLOCK_TABLE", "SIMBLOCK_SubmitDate_COLUMN", "SQL_MSISDN_CONDITION", "dd/MM/yyyy", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("SIMBLOCK_TABLE", "SIMBLOCK_Status_COLUMN", "SQL_MSISDN_CONDITION", "SIMBLOCK_Status_VALUE", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("SIMBLOCK_TABLE", "SIMBLOCK_SubmitedBy_COLUMN", "SQL_MSISDN_CONDITION", "SIMBLOCK_SubmitedBy_VALUE", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("SIMBLOCK_TABLE","SIMBLOCK_AuthorisedBy_COLUMN", "SQL_MSISDN_CONDITION", "SIMBLOCK_AuthorisedBy_VALUE", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("SIMBLOCK_TABLE", "SIMBLOCK_AuthorisedDate_COLUMN", "SQL_MSISDN_CONDITION", "SIMBLOCK_AuthorisedDate_FORMAT", 1); 
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Login_App_Admin(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 6;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];

				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(cRM_Login_Page.Login_Page("txtbox_UserName"), "Username");
				break;
				case "step2": stepStatus[step] = WebEditEnterUsername(cRM_Login_Page.Login_Page("txtbox_UserName"), "Username", "Login_User_ID", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterPassword(cRM_Login_Page.Login_Page("txtbox_Password"), "Password","Login_Password", 1);  
				break;
				case "step4": stepStatus[step] = WebElementClick(cRM_Login_Page.Login_Page("btn_LogIn"), "Login");
				break;
				case "step5": stepStatus[step] = pageLoadCheck();
				break;
				case "step6": stepStatus[step] = waitUntilExist(cRM_Logout.Logout_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Pending_Approval_SIMBLOCK(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 17;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = storeSQLDBValueInEnv("SIMBLOCK_TABLE", "SIMBLOCK_ID_COLUMN", "SQL_MSISDN_CONDITION","EnvVaraibleName_ID", 1); 
				break;
				case "step2": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "PendingApproval_Body");
				break;
				case "step3": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "PendingApproval_Body");
				break;
				case "step4": stepStatus[step] = noAction();
				break;
				case "step5": stepStatus[step] = PerformAction_MoveToElementAndClick(pendingApproval.pendingApproval_Page("sim_block"), "Sim_Block_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Text"), "PendingApproval_Text");
				break;
				case "step7": stepStatus[step] = enterEnvValueAndClickEnter(pendingApproval.pendingApproval_Page("requestID_Text"),"EnvVaraibleName_ID","RequestID",1);
				break;
				case "step8": stepStatus[step] = waitUntilExist(pendingApproval.Sim_Block_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_SimBlockRID", "EnvVaraibleName_ID"), "PendingApproval_MSISDN");
				break;
				case "step9": stepStatus[step] = PerformAction_MoveToElementAndClick(pendingApproval.Sim_Block_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_SimBlockRID", "EnvVaraibleName_ID"), "PendingApproval_MSISDN");
				break;
				case "step10": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("approve_Button"), "Approve_Button");
				break;
				case "step11": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("approve_Button"), "Approve_Button"); 
				break;
				case "step12": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("reject_Button"), "Reject_Button"); 
				break;
				case "step13": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("reject_Button"), "Reject_Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("repsonse_Message"), "Confirm_Message"); 
				break;
				case "step15": stepStatus[step] = WebElementResxKeyValueStaticCompare(pendingApproval.pendingApproval_Page("repsonse_Message"), "Confirm_Message", "Automation_KeyName", 1); 
				break;
				case "step16": stepStatus[step] = noAction(); 
				break;
				case "step17": stepStatus[step] =  WebElementClick(staff_TopUp.staff_TopUp_Page("close_button"), "Subscriber Logout");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Pending_Approval_SIM_UNBLOCK(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 17;
		stepStatus = initializeSteps(totalSteps);

		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = storeSQLDBValueInEnv("SIMUNBLOCK_TABLE", "SIMUNBLOCK_ID_COLUMN", "SQL_MSISDN_CONDITION","EnvVaraibleName_ID", 1); 
				break;
				case "step2": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "PendingApproval_Body");
				break;
				case "step3": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "PendingApproval_Body");
				break;
				case "step4": stepStatus[step] = noAction();
				break;
				case "step5": stepStatus[step] = PerformAction_MoveToElementAndClick(pendingApproval.pendingApproval_Page("sim_unblock"), "Sim_UnBlock_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Text"), "PendingApproval_Text");
				break;
				case "step7": stepStatus[step] = enterEnvValueAndClickEnter(pendingApproval.pendingApproval_Page("requestID_Text"),"EnvVaraibleName_ID","RequestID",1);
				break;
				case "step8": stepStatus[step] = waitUntilExist(pendingApproval.Sim_Block_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_SimBlockRID", "EnvVaraibleName_ID"), "PendingApproval_MSISDN"); 
				break;
				case "step9": stepStatus[step] = WebElementClick(pendingApproval.Sim_Block_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_SimBlockRID", "EnvVaraibleName_ID"), "PendingApproval_MSISDN");
				break;
				case "step10": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("approve_Button"), "Approve_Button");
				break;
				case "step11": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("approve_Button"), "Approve_Button"); 
				break;
				case "step12": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("reject_Button"), "Reject_Button"); 
				break;
				case "step13": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("reject_Button"), "Reject_Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("repsonse_Message"), "Confirm_Message"); 
				break;
				case "step15": stepStatus[step] = WebElementResxKeyValueStaticCompare(pendingApproval.pendingApproval_Page("repsonse_Message"), "Confirm_Message", "Automation_KeyName", 1); 
				break;
				case "step16": stepStatus[step] = noAction(); 
				break;
				case "step17": stepStatus[step] =  WebElementClick(staff_TopUp.staff_TopUp_Page("close_button"), "Subscriber Logout");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postcon_GBR_SIMBLOCK_UNBLOCK2(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 6;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("MSISDNBLOCK_TABLE","MSISDNBLOCK_MSISDN_COLUMN","SQL_MSISDN_CONDITION","MSISDNBLOCK_MSISDN_VALUE",1); 
				break;
				case "step2": stepStatus[step] = SQLDBSelect("MSISDNBLOCK_TABLE", "MSISDNBLOCK_Userid_COLUMN", "SQL_MSISDN_CONDITION", "MSISDNBLOCK_Userid_VALUE", 1); 
				break;
				case "step3": stepStatus[step] = SQLDBSelect("MSISDNBLOCK_TABLE", "MSISDNBLOCK_Reason_COLUMN", "SQL_MSISDN_CONDITION", "MSISDNBLOCK_Reason_VALUE", 1); 
				break;
				case "step4": stepStatus[step] = SQLDBDateCompare("MSISDNBLOCK_TABLE", "MSISDNBLOCK_Blockdate_COLUMN", "SQL_MSISDN_CONDITION", "dd/MM/yyyy", 1); 
				break;
				case "step5": stepStatus[step] = SQLDBSelect("MSISDNBLOCK_TABLE", "MSISDNBLOCK_AccountNo_COLUMN", "SQL_MSISDN_CONDITION", "MSISDNBLOCK_AccountNo_VALUE", 1); 
				break;
				case "step6": stepStatus[step] = SQLDBSelect("MSISDNBLOCK_TABLE", "MSISDNBLOCK_TicketID_COLUMN", "SQL_MSISDN_CONDITION", "MSISDNBLOCK_TicketID_VALUE", 1);  
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Open_SQL_Connection_TT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBOpenConnection_TT(property.getProperty("TT_SQL_Server"), property.getProperty("TT_SQL_Server_DB_Name"), property.getProperty("TT_SQL_Server_UID"), property.getProperty("TT_SQL_Server_PWD")); 
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Create_New_TicketID(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 27;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBDelete_TT("TicketTool_Table", "TicketTool_Condition", 1);
				break;
				case "step2": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step3": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step4": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = waitUntilExist(staff_TopUp.TicketID_Page("createNewTicket_Button"), "Create New Ticket Button");
				break;
				case "step8": stepStatus[step] = PerformAction_MoveToElementAndClick(staff_TopUp.TicketID_Page("createNewTicket_Button"), "Create New Ticket Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(staff_TopUp.TicketID_Page("product_DropDown"), "Product Dropdown");
				break;
				case "step10": stepStatus[step] = WebListSelect(staff_TopUp.TicketID_Page("product_DropDown"), "Product Dropdown", "Product", 1);
				break;
				case "step11": stepStatus[step] = WebListSelect(staff_TopUp.TicketID_Page("category_DropDown"), "Category Dropdown", "Category", 1);
				break;
				case "step12": stepStatus[step] = WebListSelect(staff_TopUp.TicketID_Page("subCategory_DropDown"), "SubCategory Dropdown", "SubCategory", 1);
				break;
				case "step13": stepStatus[step] = WebListSelect(staff_TopUp.TicketID_Page("designation_DropDown"), "Designation Dropdown", "Designation", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(staff_TopUp.TicketID_Page("description_TextBox"), "Description", "Description", 1);
				break;
				case "step15": stepStatus[step] = WebListSelect(staff_TopUp.TicketID_Page("assignto_DropDown"), "Assignto Dropdown", "Assignto", 1);
				break;
				case "step16": stepStatus[step] = WebListSelect(staff_TopUp.TicketID_Page("priority_DropDown"), "Priority Dropdown", "Priority", 1);
				break;
				case "step17": stepStatus[step] = WebListSelect(staff_TopUp.TicketID_Page("FCR_DropDown"), "FCR Dropdown", "FCR", 1);
				break;
				case "step18": stepStatus[step] = WebListSelect(staff_TopUp.TicketID_Page("custFeedBack_DropDown"), "Customer_FeedBack", "Customer_FeedBack", 1);
				break;
				case "step19": stepStatus[step] = JavaScriptWebEditEnterCurrentDate(staff_TopUp.TicketID_Page_Date("dateTicket_field"), "Date", "Date", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(staff_TopUp.TicketID_Page("createTicket_Button"), "Create Ticket Button");
				break;
				case "step21": stepStatus[step] = VerifyIsModalPopupPresent("Popup");
				break;
				case "step22": stepStatus[step] = VerifyModalPopupDynamicText(staff_TopUp.TicketID_Page("TicketinPopup_Label"),"CreatedTicket1st_label","Content",1);
				break;
				case "step23": stepStatus[step] = StoreModalPopupDynamicSubstringValue(staff_TopUp.TicketID_Page("TicketinPopup_Label"),"CreatedTicket1st_label","TicketID_Env","StartIndex","EndIndex",1);
				break;
				case "step24": stepStatus[step] = javascriptWebElementClick(staff_TopUp.TicketID_Page("closeBox_Button"), "Close button");
				break;
				case "step25": stepStatus[step] = WebElementEnabled(staff_TopUp.staff_TopUp_Page("close_button"), "Close Page Icon");
				break;
				case "step26": stepStatus[step] = WaitUntilElementClickable(staff_TopUp.staff_TopUp_Page("close_button"), "Close Page Icon");
				break;
				case "step27": stepStatus[step] = javascriptWebElementClick(staff_TopUp.staff_TopUp_Page("close_button"), "Close Page Icon");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Perform_GBR_SIMBLOCK_UNBLOCK3(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 16;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("simBlock_Button"), "SimBlock_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("simBlockUnblock_Button"), "Sim_BlockUnblock_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("ticketIDSIMBlock_TextBox"), "TicketID_TextBox");
				break;
				case "step10": stepStatus[step] = WebEditEnterTextFromEnvVariable(staff_TopUp.staff_TopUp_Page("ticketIDSIMBlock_TextBox"), "TicketID", "TicketID_Env", 1);
				break;
				case "step11": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("action_Dropdown"), "Action_Dropdown", "SIM_Action", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("comments_TextBox"), "Comments_TextBox", "Comments", 1);
				break;
				case "step13": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("approve_Button"), "Approve_Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("response_Message"), "Response_Message");
				break;
				/*case "step15": stepStatus[step] = WebElementTextCompare(staff_TopUp.staff_TopUp_Page("response_Message"), "Response_Message", "Response_Message", 1);
				break;*/
				case "step15": stepStatus[step] = WebElementResxKeyValueStaticCompare(staff_TopUp.staff_TopUp_Page("response_Message"), "Response_Message", "Automation_KeyName", 1);
				break;
				case "step16": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void XMLTextUpdate(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 2;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = XMLTextUpdateMethod("Location","Attribute","PreCondition_Value",1);
				break;
				case "step2": stepStatus[step] = XMLTextUpdateMethod("Location","Attribute","PostCondition_Value",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}
	
	//ONLINE

	public synchronized void NAVIGATE_TO_CONFIGURATION_PAGE(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 9;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.SET_COUNTRY_SETTINGS(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"country_Dropdown","Country",1), "Country Dropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.SET_COUNTRY_SETTINGS(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"country_Dropdown","Country",1), "Country Dropdown");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.SET_COUNTRY_SETTINGS(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"country_DropdownValues","Country",1), "Brand", "CountryBrand_DDValue", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void UPDATE_CONFIGURATION_ITEMS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		log.info("Working for the dataSet : "+noOfDataSet);
		log.info("Working for the gblrecordsCounterStatic : "+gblrecordsCounterStatic);

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 4;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "CONFIG KEY SEARCH BOX", "key_Configuration", 1);
				break;
				case "step2": stepStatus[step] = doubleClickOnElement(settings.SET_CONFIG_VALUE(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"key_Configuration","SIMType","Title",1), "CONFIG KEY");
				break;
				case "step3": stepStatus[step] = enterValuesAndClickEnterBtn(settings.SET_CONFIG_VALUE(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"value_Configuration","SIMType","Title",1), "VALUE", "value_Configuration_1", 1);
				break;
				case "step4": stepStatus[step] = enterValuesAndClickEnterBtn(settings.SET_CONFIG_VALUE(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"value_Configuration","SIMType","Title",1), "VALUE", "value_Configuration_2", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void CLOSE_CONFIGURATION_PAGE(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 2;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = WebElementClick(settings.settings_Page("close_Btn"), "Close_Button");
				break;
				case "step2": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Eshop_GBR_SQL_OpenConnection(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = EshopSQLDBOpenConnection(property.getProperty("ESHOP_SQL_Server_GBR"), property.getProperty("ESHOP_SQL_Server_DB_Name_GBR"), property.getProperty("ESHOP_SQL_Server_UID_GBR"), property.getProperty("ESHOP_SQL_Server_PWD_GBR"));
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Pre_OnLineTopup_Eshop(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 6;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = EshopSQLDBUpdate("TBL_FEATUREGATEWAYMAPPING","PRIMARYGATEWAYVENDOR_COLUMNNAME","PRIMARYGATEWAYVENDOR_COLUMNVALUE","ESHOPSQLDB_UPDATE_CONDITION",1);
				break;
				case "step2": stepStatus[step] = EshopSQLDBDelete("TBL_USERCARDDETAILS","ESHOPSQLDB_DELETE_CONDITION",1);
				break;
				case "step3": stepStatus[step] = EshopSQLDBDelete("TBL_AUTHORIZENETLOG","ESHOPSQLDB_DELETE_CONDITION",1);
				break;
				case "step4": stepStatus[step] = EshopSQLDBDelete("TBL_WPTRASACTIONLOG","ESHOPSQLDB_DELETE_CONDITION",1);
				break;
				case "step5": stepStatus[step] = EshopSQLDBDelete("TBL_REDTRANSACTIONLOG","ESHOPSQLDB_DELETE_CONDITION",1);
				break;
				case "step6": stepStatus[step] = EshopSQLDBDelete("TABLE_NAME_tbleShopTransactionStatus","ESHOPSQLDB_DELETE_CONDITION",1);
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PRE_DB_SUBS_PROFILE(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = RRBSDBCommonPreCondition("ACTION","TABLE_NAME", "COLUMN_NAME", "COLUMN_VALUE", "CONDITION", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PreCon_DB_GBR_ONLINE_TOPUP(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 2;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBDelete("MVNO_TABLE", "MVNO_TABLE_CONDTION", 1);
				break;
				case "step2": stepStatus[step] = RRBSDBUpdate("RRBS_TABLE", "RRBS_AMOUNT", "RRBS_AMOUNT_VALUE", "RRBS_CONDITION", 1);
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}	

	public synchronized void PreCon_APP_GBR_ONLINE_TOPUP(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 61;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.settings_Page("country_DropdownValues_GBR"), "Country_Dropdown_GBR", "CountryBrand_DDValue_GBR", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;
				//Commenting the values since it is basic update
				case "step10": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_Sitecode", 1);
				break;
				case "step11": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_SiteCode"), "SiteCode");
				break;
				case "step12": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_SiteCode"), "SiteCode", "value_Sitecode", 1);
				break;
				case "step13": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "Key_CountryCodeGAF", 1);
				break;
				case "step14": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_CountryCodeGAF"), "CountryCodeGAF");
				break;
				case "step15": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_CountryCodeGAF"), "TicketIDconfig", "Value_CountryCodeGAF", 1);
				break;
				case "step16": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "Key_CountryPrefix", 1);
				break;
				case "step17": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_CountryPrefix"), "CountryPrefix");
				break;
				case "step18": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_CountryPrefix"), "CountryPrefix", "Value_CountryPrefix", 1);
				break;
				case "step19": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "Key_CountryCode", 1);
				break;
				case "step20": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_CountryCode"), "CountryCode");
				break;
				case "step21": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_CountryCode"), "CountryCode", "Value_CountryCode", 1);
				break;
				case "step22": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "Key_CountryName", 1);
				break;
				case "step23": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_CountryName"), "CountryName");
				break;
				case "step24": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_CountryName"), "CountryName", "Value_CountryName", 1);
				break;
				case "step25": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "Key_OnlineFeature", 1);
				break;
				case "step26": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_OnlineFeature"), "ESHOPONLINETOPUPFEATURENAME");
				break;
				case "step27": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_OnlineFeature"), "ESHOPONLINETOPUPFEATURENAME", "Value_OnlineFeature", 1);
				break;
				case "step28": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "Key_RepeatFeature", 1);
				break;
				case "step29": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_RepeatFeature"), "EshopRepeatTopupFeatureName");
				break;
				case "step30": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_RepeatFeature"), "EshopRepeatTopupFeatureName", "Value_RepeatFeature", 1);
				break;
				case "step31": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "Key_ESHOPUSERNAME", 1);
				break;
				case "step32": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_ESHOPUSERNAME"), "ESHOPUSERNAME");
				break;
				case "step33": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_ESHOPUSERNAME"), "ESHOPUSERNAME", "Value_ESHOPUSERNAME", 1);
				break;
				case "step34": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "Key_ESHOPPASSWORD", 1);
				break;
				case "step35": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_ESHOPPASSWORD"), "ESHOPPASSWORD");
				break;
				case "step36": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_ESHOPPASSWORD"), "ESHOPPASSWORD", "Value_ESHOPPASSWORD", 1);
				break;
				case "step37": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "Key_ESHOPCHANNELNAME", 1);
				break;
				case "step38": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_ESHOPCHANNELNAME"), "ESHOPCHANNELNAME");
				break;
				case "step39": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_ESHOPCHANNELNAME"), "ESHOPCHANNELNAME", "Value_ESHOPCHANNELNAME", 1);
				break;
				case "step40": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "Key_ESHOPBRAND", 1);
				break;
				case "step41": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_ESHOPBRAND"), "ESHOPBRAND");
				break;
				case "step42": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_ESHOPBRAND"), "ESHOPBRAND", "Value_ESHOPBRAND", 1);
				break;
				case "step43": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "Key_ESHOPCC", 1);
				break;
				case "step44": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_ESHOPCOUNTRYCODE"), "ESHOPCOUNTRYCODE");
				break;
				case "step45": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_ESHOPCOUNTRYCODE"), "ESHOPCOUNTRYCODE", "Value_ESHOPCC", 1);
				break;
				case "step46": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "Key_eShopShowTax", 1);
				break;
				case "step47": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_eShopShowTax"), "EShop ShowTax");
				break;
				case "step48": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_eShopShowTax"), "EShop ShowTax", "Value_eShopShowTax", 1);
				break;
				case "step49": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "Key_eShopTaxSplit", 1);
				break;
				case "step50": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_eShopTaxSplit"), "EShop TaxSplit");
				break;
				case "step51": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_eShopTaxSplit"), "EShop TaxSplit", "Value_eShopTaxSplit", 1);
				break;
				case "step52": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "Key_eShopShowVAT", 1);
				break;
				case "step53": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_eShopShowVat"), "EShop ShowVAT");
				break;
				case "step54": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_eShopShowVat"), "EShop ShowVAT", "Value_eShopShowVAT", 1);
				break;
				case "step55": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "Key_eShopVATSplit", 1);
				break;
				case "step56": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_eShopVatSplit"), "EShop VATSplit");
				break;
				case "step57": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_eShopVatSplit"), "EShop VATSplit", "Value_eShopVATSplit", 1);
				break;
				case "step58": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "Key_eShopGetSimWithCredit", 1);
				break;
				case "step59": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_eShopGetSimWithCredit"), "EShop GetSimWithCredit");
				break;
				case "step60": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_eShopGetSimWithCredit"), "EShop GetSimWithCredit", "Value_eShopGetSimWithCredit", 1);
				break;
				case "step61": stepStatus[step] = WebElementClick(settings.settings_Page("close_Btn"), "Close_Button");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Perform_GBR_ONLINE_TOPUP(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 50;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("topUp_Button"), "TopUp_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("online_TopUp_Button"), "Online_TopUp_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("topupAmount_Dropdown"), "Topup Amount Dropdown");
				break;
				case "step10": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("topupAmount_Dropdown"), "Topup Amount Dropdown", "TopupAmount", 1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("email_TextBox"), "Email", "Email", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("promoCode_TextBox"), "PromoCode", "PromoCode", 1);
				break;
				case "step13": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("promoCode_Button"), "PromoCode Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("discountMessage_label"), "Discount Message");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("discountMessage_label"), "Discount Message","PromoCode_Message",1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("promoCodeEmpty_label"), "Promo Error Message");
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("promoCodeEmpty_label"), "Promo Error Message","Promo_Empty_Message",1);
				break;
				case "step18": stepStatus[step] = WebRadioSelect(online_TopUp.Online_TopUp_Page("newCard_rdButton"), "Payment Using", "New Card");
				break;
				case "step19": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "CardType Dropdown");
				break;
				case "step20": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "CardType Dropdown", "CardType", 1);
				break;
				case "step21": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Card Name");
				break;
				case "step22": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Card Name", "CardName", 1);
				break;
				case "step23": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber1_TextBox"), "Card 1st 4 Number", "Card_Number1", 1);
				break;
				case "step24": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber2_TextBox"), "Card 2nd 4 Number", "Card_Number2", 1);
				break;
				case "step25": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber3_TextBox"), "Card 3rd 4 Number", "Card_Number3", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber4_TextBox"), "Card 4th 4 Number", "Card_Number4", 1);
				break;
				case "step27": stepStatus[step] = javaScriptDatePicker(online_TopUp.Online_TopUp_Page_ExpDate("expiryDate_TextBox"), "Expiry Date", "Expiry_Date", 1);
				break;
				case "step28": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV Number");
				break;
				case "step29": stepStatus[step] = javaScriptEnterText(online_TopUp.Online_TopUp_Page_ExpDate("cvv_TextBox"), "CVV Number", "CVV_Number", 1);
				break;
				case "step30": stepStatus[step] = WebEditClickAndEnterText(online_TopUp.Online_TopUp_Page("postcode_TextBox"), "PostCode", "PostCode", 1);
				break;
				case "step31": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("searchIcon_Button"), "Search Button");
				break;
				case "step32": stepStatus[step] = noAction();
				break;
				case "step33": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("addressList_TextBox"), "Address List", "AddressList_Select", 1);
				break;
				case "step34": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("OKIcon_Button"), "OK Button");
				break;
				case "step35": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step36": stepStatus[step] = WaitUntilElementClickable(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step37": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step38": stepStatus[step] = pageLoadCheck();
				break;
				case "step39": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("okBtn_Button"), "OK Button");
				break;
				case "step40": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Online_TopUp_Page("okBtn_Button"), "OK Button");
				break;
				case "step41": stepStatus[step] = pageLoadCheck();
				break;
				case "step42": stepStatus[step] = waitUntilExistForGivenSeconds(online_TopUp.Online_TopUp_Page("UpdateSuccessMessage"), "Success Message",70);
				break;
				case "step43": stepStatus[step] = waitUntilExistForGivenSeconds(online_TopUp.Online_TopUp_Page("responseMsg_Button"), "Response Message",70);
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("responseMsg_Button"), "Response Message","Response_Message",1);
				break;
				case "step45": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("Amount_Label"), "Amount","SuccessAmount",1);
				break;
				case "step46": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.Online_TopUp_Page("ReferenceNo_Label"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step47": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.Online_TopUp_Page("ReferenceNo_Label"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step48": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.Online_TopUp_Page("TransactionNo_Label"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step49": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.Online_TopUp_Page("TransactionNo_Label"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step50": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Online_TopUp_Page("close_button"), "Subscriber Logout");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
			e.printStackTrace();
		}
	}

	public synchronized void POST_GBR_ONLINE_TOPUP(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 22;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBSelectFromEnv("MVNO_TABLE","MVNO_TransactionID","MVNO_MSISDN_Condition","MVNO_TransactionID_Env",1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_TopupAmount","MVNO_MSISDN_Condition","MVNO_TopupAmount_Value",1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_TopupMode","MVNO_MSISDN_Condition","MVNO_TopupMode_Value",1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_Status","MVNO_MSISDN_Condition","MVNO_Status_Value",1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_ErrorDesc","MVNO_MSISDN_Condition","MVNO_ErrorDesc_Value",1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_PROMOCODE","MVNO_MSISDN_Condition","MVNO_PROMOCODE_VALUE",1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_PROMOTYPE","MVNO_MSISDN_Condition","MVNO_PROMOTYPE_VALUE",1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_PROMODISCOUNTTYPE","MVNO_MSISDN_Condition","MVNO_PROMODISCOUNTTYPE_Value",1);
				break;
				case "step9": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_PROMODISCOUNTAMOUNT","MVNO_MSISDN_Condition","MVNO_PROMODISCOUNTAMOUNT_Value",1);
				break;
				case "step10": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_TaxAmount","MVNO_MSISDN_Condition","MVNO_TaxAmount_Value",1);
				break;
				case "step11": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_SubTransactionID","MVNO_MSISDN_Condition","MVNO_SubTransactionID_Value",1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_VATtransid","MVNO_MSISDN_Condition","MVNO_VATtransid_Value",1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_VATamount","MVNO_MSISDN_Condition","MVNO_VATamount_Value",1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_VATperc","MVNO_MSISDN_Condition","MVNO_VATperc_Value",1);
				break;
				case "step15": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_TotalAmount","MVNO_MSISDN_Condition","MVNO_TotalAmount_Value",1);
				break;
				case "step16": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_TotalDiscount","MVNO_MSISDN_Condition","MVNO_TotalDiscount_Value",1);
				break;
				case "step17": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_VATType","MVNO_MSISDN_Condition","MVNO_VATType_Value",1);
				break;
				case "step18": stepStatus[step] = EShopSQLDBSelectFromEnv("ESHOP_Table","ESHOP_TransactionID","ESHOP_MSISDN_Condition","MVNO_TransactionID_Env",1);
				break;
				case "step19": stepStatus[step] = EShopSQLDBSelect("ESHOP_Table","ESHOP_SubscriberID","ESHOP_MSISDN_Condition","ESHOP_SubscriberID_VALUE",1);
				break;
				case "step20": stepStatus[step] = EShopSQLDBSelect("ESHOP_Table","ESHOP_Amount","ESHOP_MSISDN_Condition","ESHOP_Amount_Value",1);
				break;
				case "step21": stepStatus[step] = EShopSQLDBSelect("ESHOP_Table","ESHOP_Totalamount","ESHOP_MSISDN_Condition","ESHOP_Totalamount_VALUE",1);
				break;
				case "step22": stepStatus[step] = RRBSDBSelect("RRBS_TABLE","RRBS_AMOUNT","RRBS_CONDITION","RRBS_AMOUNT_VALUE",1);
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Eshop_Close_SQL_Connection(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = EshopSQLDBCloseConnection();
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Perform_GBR_ONLINE_TOPUP_NOGAF(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 57;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("topUp_Button"), "TopUp_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("online_TopUp_Button"), "Online_TopUp_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("topupAmount_Dropdown"), "Topup Amount Dropdown");
				break;
				case "step10": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("topupAmount_Dropdown"), "Topup Amount Dropdown", "TopupAmount", 1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("email_TextBox"), "Email", "Email", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("promoCode_TextBox"), "PromoCode", "PromoCode", 1);
				break;
				case "step13": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("promoCode_Button"), "PromoCode Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("discountMessage_label"), "Discount Message");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("discountMessage_label"), "Discount Message","PromoCode_Message",1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("promoCodeEmpty_label"), "Promo Error Message");
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("promoCodeEmpty_label"), "Promo Error Message","Promo_Empty_Message",1);
				break;
				case "step18": stepStatus[step] = WebRadioSelect(online_TopUp.Online_TopUp_Page("newCard_rdButton"), "Payment Using", "New Card");
				break;
				case "step19": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "CardType Dropdown");
				break;
				case "step20": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "CardType Dropdown", "CardType", 1);
				break;
				case "step21": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Card Name");
				break;
				case "step22": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Card Name", "CardName", 1);
				break;
				case "step23": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber1_TextBox"), "Card 1st 4 Number", "Card_Number1", 1);
				break;
				case "step24": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber2_TextBox"), "Card 2nd 4 Number", "Card_Number2", 1);
				break;
				case "step25": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber3_TextBox"), "Card 3rd 4 Number", "Card_Number3", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber4_TextBox"), "Card 4th 4 Number", "Card_Number4", 1);
				break;
				//case "step27": stepStatus[step] = javaScriptDatePicker(online_TopUp.Online_TopUp_Page("expiryDate_TextBox"), "Expiry Date", "Expiry_Date", 1);
				case "step27": stepStatus[step] = javaScriptDatePicker(online_TopUp.Online_TopUp_Page_ExpDate("expiryDate_TextBox"), "Expiry Date", "Expiry_Date", 1);
				break;
				case "step28": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV Number");
				break;
				case "step29": stepStatus[step] = javaScriptEnterText(online_TopUp.Online_TopUp_Page_ExpDate("cvv_TextBox"), "CVV Number", "CVV_Number", 1);
				break;
				case "step30": stepStatus[step] = WebEditClickAndEnterText(online_TopUp.Online_TopUp_Page("postcode_TextBox"), "PostCode", "PostCode", 1);
				break;
				case "step31": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("searchIcon_Button"), "Search Button");
				break;
				case "step32": stepStatus[step] = waitUntilDisappear(online_TopUp.Online_TopUp_Page("loadAddress_Icon"), "Load Address Icon");
				break;
				case "step33": stepStatus[step] = VerifyIsModalPopupPresent("Popup");
				break;
				case "step34": stepStatus[step] = VerifyModalPopupDynamicText(online_TopUp.Online_TopUp_Page("NOAddressPopup_Label"),"No Address Popup","AddressMessage_Content",1);
				break;
				case "step35": stepStatus[step] = javascriptWebElementClick(online_TopUp.Online_TopUp_Page("closeBox_Button"), "Close button");
				break;
				case "step36": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("houseNo_Textbox"), "House Number");
				break;
				case "step37": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("houseNo_Textbox"), "House No.", "House_No", 1);
				break;
				case "step38": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("streetName_Textbox"), "Street Name", "Street_Name", 1);
				break;
				case "step39": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cityName_Textbox"), "City Name", "City_Name", 1);
				break;
				case "step40": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("apartmentNo_Textbox"), "Appartment No.", "Apartment_No", 1);
				break;
				case "step41": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step42": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step43": stepStatus[step] = pageLoadCheck();
				break;
				case "step44": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("okBtn_Button"), "OK Button");
				break;
				case "step45": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("okBtn_Button"), "OK Button");
				break;
				case "step46": stepStatus[step] = pageLoadCheck();
				break;
				case "step47": stepStatus[step] = waitUntilExistForGivenSeconds(online_TopUp.Online_TopUp_Page("UpdateSuccessMessage"), "Success Message",70);
				break;
				case "step48": stepStatus[step] = waitUntilExistForGivenSeconds(online_TopUp.Online_TopUp_Page("responseMsg_Button"), "Response Message",70);
				break;
				case "step49": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("responseMsg_Button"), "Response Message","Response_Message",1);
				break;
				case "step50": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("Amount_Label"), "Amount","SuccessAmount",1);
				break;
				case "step51": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.Online_TopUp_Page("ReferenceNo_Label"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step52": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.Online_TopUp_Page("ReferenceNo_Label"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step53": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.Online_TopUp_Page("TransactionNo_Label"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step54": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.Online_TopUp_Page("TransactionNo_Label"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step55": stepStatus[step] = WebElementEnabled(staff_TopUp.staff_TopUp_Page("close_button"), "Close Page Icon");
				break;
				case "step56": stepStatus[step] = WaitUntilElementClickable(staff_TopUp.staff_TopUp_Page("close_button"), "Close Page Icon");
				break;
				case "step57": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Online_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_GBR_ONLINE_REPEAT_TOPUP(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 39;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("topUp_Button"), "TopUp_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("online_TopUp_Button"), "Online_TopUp_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("topupAmount_Dropdown"), "Topup Amount Dropdown");
				break;
				case "step10": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("topupAmount_Dropdown"), "Topup Amount Dropdown", "TopupAmount", 1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("email_TextBox"), "Email", "Email", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("promoCode_TextBox"), "PromoCode", "PromoCode", 1);
				break;
				case "step13": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("promoCode_Button"), "PromoCode Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("discountMessage_label"), "Discount Message");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("discountMessage_label"), "Discount Message","PromoCode_Message",1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("promoCodeEmpty_label"), "Promo Error Message");
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("promoCodeEmpty_label"), "Promo Error Message","Promo_Empty_Message",1);
				break;
				case "step18": stepStatus[step] = WebRadioSelect(online_TopUp.Online_TopUp_Page("existingCard_rdButton"), "Payment Using", "Existing Card");
				break;
				case "step19": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("ExCardNumberHead_Label"), "Existing Card Table");
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("ExCardNumber_Label"), "Existing Card Number","Existing_CardNo",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("ExCardName_Label"), "Existing Card Name","Existing_NameOnCard",1);
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("ExCardType_Label"), "Existing Card Type","Existing_CardType",1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("ExCardExpiryDate_Label"), "Existing Card ExpiryDate","Existing_ExpiryDate",1);
				break;
				case "step24": stepStatus[step] = javaScriptEnterText(online_TopUp.Online_TopUp_Page_ExpDate("ExCCNo_Label"), "Card CC Number","Existing_CVV_Number",1);
				break;
				case "step25": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step26": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step27": stepStatus[step] = pageLoadCheck();
				break;
				case "step28": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("okBtn_Button"), "OK Button");
				break;
				case "step29": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("okBtn_Button"), "OK Button");
				break;
				case "step30": stepStatus[step] = pageLoadCheck();
				break;
				case "step31": stepStatus[step] = waitUntilDisappear(online_TopUp.Online_TopUp_Page("load_Image"), "Loading Image");
				break;
				case "step32": stepStatus[step] = waitUntilExistForGivenSeconds(online_TopUp.Online_TopUp_Page("responseMsg_Button"), "Response Message",70);
				break;
				case "step33": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("responseMsg_Button"), "Response Message","Response_Message",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("Amount_Label"), "Amount","SuccessAmount",1);
				break;
				case "step35": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.Online_TopUp_Page("ReferenceNo_Label"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step36": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.Online_TopUp_Page("ReferenceNo_Label"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step37": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.Online_TopUp_Page("TransactionNo_Label"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step38": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.Online_TopUp_Page("TransactionNo_Label"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step39": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_GBR_ONLINE_TOPUP_OTHERS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 57;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = waitUntilDisappear(online_TopUp.Online_TopUp_Page("MenuLoading_Icon"), "Online Top-Up");
				break;
				case "step10": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("online_TopUp_Button"), "Online_TopUp_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("topupAmount_Dropdown"), "Topup Amount Dropdown");
				break;
				case "step12": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("topupAmount_Dropdown"), "Topup Amount Dropdown", "TopupAmount", 1);
				break;
				case "step13": stepStatus[step] = pageLoadCheck();
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("OthersSubmit_Button"), "Submit Button");
				break;
				case "step15": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("OthersAmount_TextBox"), "Amount", "OthersAmount", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("OthersConfirmAmount_TextBox"), "Confirm Amount", "Confirm_OthersAmount", 1);
				break;
				case "step17": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("OthersSubmit_Button"), "Submit Button");
				break;
				case "step18": stepStatus[step] = pageLoadCheck();
				break;
				case "step19": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("topupAmount_Dropdown"), "Topup Amount Dropdown");
				break;
				case "step20": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("email_TextBox"), "Email", "Email", 1);
				break;
				case "step21": stepStatus[step] = WebRadioSelect(online_TopUp.Online_TopUp_Page("newCard_rdButton"), "Payment Using", "New Card");
				break;
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "CardType Dropdown");
				break;
				case "step23": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "CardType Dropdown", "CardType", 1);
				break;
				case "step24": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Card Name");
				break;
				case "step25": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Card Name", "CardName", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber1_TextBox"), "Card 1st 4 Number", "Card_Number1", 1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber2_TextBox"), "Card 2nd 4 Number", "Card_Number2", 1);
				break;
				case "step28": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber3_TextBox"), "Card 3rd 4 Number", "Card_Number3", 1);
				break;
				case "step29": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber4_TextBox"), "Card 4th 4 Number", "Card_Number4", 1);
				break;
				//case "step30": stepStatus[step] = javaScriptDatePicker(online_TopUp.Online_TopUp_Page("expiryDate_TextBox"), "Expiry Date", "Expiry_Date", 1);
				case "step30": stepStatus[step] = javaScriptDatePicker(online_TopUp.Online_TopUp_Page_ExpDate("expiryDate_TextBox"), "Expiry Date", "Expiry_Date", 1);
				break;
				case "step31": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV Number");
				break;
				case "step32": stepStatus[step] = javaScriptEnterText(online_TopUp.Online_TopUp_Page_ExpDate("cvv_TextBox"), "CVV Number", "CVV_Number", 1);
				break;
				case "step33": stepStatus[step] = WebEditClickAndEnterText(online_TopUp.Online_TopUp_Page("postcode_TextBox"), "PostCode", "PostCode", 1);
				break;
				case "step34": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("searchIcon_Button"), "Search Button");
				break;
				case "step35": stepStatus[step] = waitUntilDisappear(online_TopUp.Online_TopUp_Page("loadAddress_Icon"), "Load Address Icon");
				break;
				case "step36": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("addressList_TextBox"), "Address List", "AddressList_Select", 1);
				break;
				case "step37": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("OKIcon_Button"), "OK Button");
				break;
				case "step38": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step39": stepStatus[step] = WaitUntilElementClickable(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step40": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step41": stepStatus[step] = pageLoadCheck();
				break;
				case "step42": stepStatus[step] = JSWebElementValueCompare(online_TopUp.Online_TopUp_Page("PaymentAmount_Label"), "PaymentAmount", "PaymentAmount", 1);
				break;
				case "step43": stepStatus[step] = JSWebElementValueCompare(online_TopUp.Online_TopUp_Page("TaxId_Label"), "TaxId", "TaxId", 1);
				break;
				case "step44": stepStatus[step] = JSWebElementValueCompare(online_TopUp.Online_TopUp_Page("VATAmount_Label"), "VATAmount", "VATAmount", 1);
				break;
				case "step45": stepStatus[step] = JSWebElementValueCompare(online_TopUp.Online_TopUp_Page("TotalPayAmount_Label"), "TotalPayAmount", "TotalPayAmount", 1);
				break;
				case "step46": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("okBtn_Button"), "OK Button");
				break;
				case "step47": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("okBtn_Button"), "OK Button");
				break;
				case "step48": stepStatus[step] = pageLoadCheck();
				break;
				case "step49": stepStatus[step] = waitUntilDisappear(online_TopUp.Online_TopUp_Page("load_Image"), "Loading Image");
				break;
				case "step50": stepStatus[step] = waitUntilExistForGivenSeconds(online_TopUp.Online_TopUp_Page("responseMsg_Button"), "Response Message",70);
				break;
				case "step51": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("responseMsg_Button"), "Response Message","Response_Message",1);
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("Amount_Label"), "Amount","SuccessAmount",1);
				break;
				case "step53": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.Online_TopUp_Page("ReferenceNo_Label"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step54": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.Online_TopUp_Page("ReferenceNo_Label"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step55": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.Online_TopUp_Page("TransactionNo_Label"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step56": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.Online_TopUp_Page("TransactionNo_Label"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step57": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_GBR_REPEAT_TOPUP_OTHERS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 46;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = waitUntilDisappear(online_TopUp.Online_TopUp_Page("MenuLoading_Icon"), "Online Top-Up");
				break;
				case "step10": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("online_TopUp_Button"), "Online_TopUp_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("topupAmount_Dropdown"), "Topup Amount Dropdown");
				break;
				case "step12": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("topupAmount_Dropdown"), "Topup Amount Dropdown", "TopupAmount", 1);
				break;
				case "step13": stepStatus[step] = pageLoadCheck();
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("OthersSubmit_Button"), "Submit Button");
				break;
				case "step15": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("OthersAmount_TextBox"), "Amount", "OthersAmount", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("OthersConfirmAmount_TextBox"), "Confirm Amount", "Confirm_OthersAmount", 1);
				break;
				case "step17": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("OthersSubmit_Button"), "Submit Button");
				break;
				case "step18": stepStatus[step] = pageLoadCheck();
				break;
				case "step19": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("topupAmount_Dropdown"), "Topup Amount Dropdown");
				break;
				case "step20": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("email_TextBox"), "Email", "Email", 1);
				break;
				case "step21": stepStatus[step] = WebRadioSelect(online_TopUp.Online_TopUp_Page("existingCard_rdButton"), "Payment Using", "Existing Card");
				break;
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("ExCardNumberHead_Label"), "Existing Card Table");
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("ExCardNumber_Label"), "Existing Card Number","Existing_CardNo",1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("ExCardName_Label"), "Existing Card Name","Existing_NameOnCard",1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("ExCardType_Label"), "Existing Card Type","Existing_CardType",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("ExCardExpiryDate_Label"), "Existing Card ExpiryDate","Existing_ExpiryDate",1);
				break;
				case "step27": stepStatus[step] = javaScriptEnterText(online_TopUp.Online_TopUp_Page_ExpDate("ExCCNo_Label"), "Card CC Number","Existing_CVV_Number",1);
				break;
				case "step28": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step29": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step30": stepStatus[step] = pageLoadCheck();
				break;
				case "step31": stepStatus[step] = JSWebElementValueCompare(online_TopUp.Online_TopUp_Page("PaymentAmount_Label"), "PaymentAmount", "PaymentAmount", 1);
				break;
				case "step32": stepStatus[step] = JSWebElementValueCompare(online_TopUp.Online_TopUp_Page("TaxId_Label"), "TaxId", "TaxId", 1);
				break;
				case "step33": stepStatus[step] = JSWebElementValueCompare(online_TopUp.Online_TopUp_Page("VATAmount_Label"), "VATAmount", "VATAmount", 1);
				break;
				case "step34": stepStatus[step] = JSWebElementValueCompare(online_TopUp.Online_TopUp_Page("TotalPayAmount_Label"), "TotalPayAmount", "TotalPayAmount", 1);
				break;
				case "step35": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("okBtn_Button"), "OK Button");
				break;
				case "step36": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("okBtn_Button"), "OK Button");
				break;
				case "step37": stepStatus[step] = pageLoadCheck();
				break;
				case "step38": stepStatus[step] = waitUntilDisappear(online_TopUp.Online_TopUp_Page("load_Image"), "Loading Image");
				break;
				case "step39": stepStatus[step] = waitUntilExistForGivenSeconds(online_TopUp.Online_TopUp_Page("responseMsg_Button"), "Response Message",70);
				break;
				case "step40": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("responseMsg_Button"), "Response Message","Response_Message",1);
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("Amount_Label"), "Amount","SuccessAmount",1);
				break;
				case "step42": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.Online_TopUp_Page("ReferenceNo_Label"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step43": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.Online_TopUp_Page("ReferenceNo_Label"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step44": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.Online_TopUp_Page("TransactionNo_Label"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step45": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.Online_TopUp_Page("TransactionNo_Label"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step46": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PreCon_APP_GBR_ONLINE_TOPUP1(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 4;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_IsOtherAmtDecimal", 1);
				break;
				case "step2": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_IsOtherAmtDecimal"), "IsOtherAmtDecimal");
				break;
				case "step3": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_IsOtherAmtDecimal"), "IsOtherAmtDecimal", "value_IsOtherAmtDecimal", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(settings.settings_Page("close_Btn"), "Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Perform_GBR_SIMBLOCK_UNBLOCK2(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 17;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("simBlock_Button"), "SimBlock_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("simBlockUnblock_Button"), "Sim_BlockUnblock_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("ticketIDSIMBlock_TextBox"), "TicketID_TextBox");
				break;
				case "step10": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("ticketIDSIMBlock_TextBox"), "TicketID", "TicketID", 1);
				break;
				case "step11": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("action_Dropdown"), "Action_Dropdown", "SIM_Action", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("comments_TextBox"), "Comments_TextBox", "Comments", 1);
				break;
				case "step13": stepStatus[step] = deleteLogFile("Location","Log_FileName", 1);
				break;
				case "step14": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("approve_Button"), "Approve_Button");
				break;
				case "step15": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("response_Message"), "Response_Message");
				break;
				/*case "step16": stepStatus[step] = WebElementTextCompare(staff_TopUp.staff_TopUp_Page("response_Message"), "Response_Message", "Response_Message", 1);
				break;*/
				case "step16": stepStatus[step] = WebElementResxKeyValueStaticCompare(staff_TopUp.staff_TopUp_Page("response_Message"), "Response_Message", "Automation_KeyName", 1);
				break;
				case "step17": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((property.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((property.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PostCondition_Verify_LogFile(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = readLogFile("Location", "Log_FileNameStart", "Log_FileNameEnd", "Log_FileName" ,"Content_To_Match", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((property.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((property.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PreCondition_Delete_LogFile(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = deleteLogFile("Location","Log_FileName", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((property.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((property.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void POST_GBR_ONLINE_TOPUP_1(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 22;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBSelectFromEnv("MVNO_TABLE","MVNO_TransactionID","MVNO_MSISDN_Condition","MVNO_TransactionID_Env",1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_TopupAmount","MVNO_MSISDN_Condition","MVNO_TopupAmount_Value",1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_TopupMode","MVNO_MSISDN_Condition","MVNO_TopupMode_Value",1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_Status","MVNO_MSISDN_Condition","MVNO_Status_Value",1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_ErrorDesc","MVNO_MSISDN_Condition","MVNO_ErrorDesc_Value",1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_PROMOCODE","MVNO_MSISDN_Condition","MVNO_PROMOCODE_VALUE",1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_PROMOTYPE","MVNO_MSISDN_Condition","MVNO_PROMOTYPE_VALUE",1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_PROMODISCOUNTTYPE","MVNO_MSISDN_Condition","MVNO_PROMODISCOUNTTYPE_Value",1);
				break;
				case "step9": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_PROMODISCOUNTAMOUNT","MVNO_MSISDN_Condition","MVNO_PROMODISCOUNTAMOUNT_Value",1);
				break;
				case "step10": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_TaxAmount","MVNO_MSISDN_Condition","MVNO_TaxAmount_Value",1);
				break;
				case "step11": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_SubTransactionID","MVNO_MSISDN_Condition","MVNO_SubTransactionID_Value",1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_VATtransid","MVNO_MSISDN_Condition","MVNO_VATtransid_Value",1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_VATamount","MVNO_MSISDN_Condition","MVNO_VATamount_Value",1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_VATperc","MVNO_MSISDN_Condition","MVNO_VATperc_Value",1);
				break;
				case "step15": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_TotalAmount","MVNO_MSISDN_Condition","MVNO_TotalAmount_Value",1);
				break;
				case "step16": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_TotalDiscount","MVNO_MSISDN_Condition","MVNO_TotalDiscount_Value",1);
				break;
				case "step17": stepStatus[step] = SQLDBSelect("MVNO_TABLE","MVNO_VATType","MVNO_MSISDN_Condition","MVNO_VATType_Value",1);
				break;
				case "step18": stepStatus[step] = EShopSQLDBSelectFromEnv("ESHOP_Table","ESHOP_TransactionID","ESHOP_MSISDN_Condition","MVNO_TransactionID_Env",1);
				break;
				case "step19": stepStatus[step] = EShopSQLDBSelect("ESHOP_Table","ESHOP_SubscriberID","ESHOP_MSISDN_Condition","ESHOP_SubscriberID_VALUE",1);
				break;
				case "step20": stepStatus[step] = EShopSQLDBSelect("ESHOP_Table","ESHOP_Amount","ESHOP_MSISDN_Condition","ESHOP_Amount_Value",1);
				break;
				case "step21": stepStatus[step] = EShopSQLDBSelect("ESHOP_Table","ESHOP_Totalamount","ESHOP_MSISDN_Condition","ESHOP_Totalamount_VALUE",1);
				break;
				case "step22": stepStatus[step] = RRBSDBSelect("RRBS_TABLE","RRBS_AMOUNT","RRBS_CONDITION","RRBS_AMOUNT_VALUE",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	//Auto:

	public synchronized void PreCon_DB_GBR_AUTO_TOPUP1(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps=2;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBUpdate("CUSTOMER_TABLE","CUSTOMER_COLUMN","CUSTOMER_VALUE","CUSTOMER_CONDTION", 1);
				break;
				case "step2": stepStatus[step] = RRBSDBUpdate("RRBS_TABLE", "RRBS_COLUMN", "RRBS_VALUE", "RRBS_CONDITION", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PreCon_DB_GBR_AUTO_TOPUP(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps=2;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBUpdate("CUSTOMER_TABLE","CUSTOMER_COLUMN","CUSTOMER_VALUE","CUSTOMER_CONDTION", 1);
				break;
				case "step2": stepStatus[step] = RRBSDBUpdate("RRBS_TABLE", "RRBS_COLUMN", "RRBS_VALUE", "RRBS_CONDITION", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_GBR_AUTO_TOPUP(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 21;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Auto_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = waitUntilDisappear(online_TopUp.Auto_TopUp_Page("MenuLoading_Icon"), "Menu Loading Icon");
				break;
				case "step10": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("Auto_TopUp_Image"), "Auto TopUp Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("BalanceLimit_Dropdown"), "Topup Amount Dropdown");
				break;
				case "step12": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Auto_TopUp_Page("IsAutoTopup_Select"), "Do Automatic Recharge");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.Auto_TopUp_Page("BalanceLimit_Dropdown"), "Balance Limit", "Balance_Limit", 1);
				break;
				case "step14": stepStatus[step] = WebListSelect(online_TopUp.Auto_TopUp_Page("ATopupAmount_Dropdown"), "Topup Amount", "Topup_Amount", 1);
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.Auto_TopUp_Page("MaxLimit_Dropdown"), "Max Limit Auto Toupup", "Max_Limit", 1);
				break;
				case "step16": stepStatus[step] = WebListSelect(online_TopUp.Auto_TopUp_Page("APerWeek_Dropdown"), "Max Limit Per Week", "MaxLimit_Week", 1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(online_TopUp.Auto_TopUp_Page("UsingCard_Label"), "Using Card", "Using_Card", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("Submit_Button"), "Submit Button");
				break;
				case "step19": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("Submit_Button"), "Submit Button");
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(online_TopUp.Auto_TopUp_Page("Response_message"), "Auto Topup Message", "Response_Message", 1);
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void POST_GBR_AUTO_TOPUP(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 12;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_isautotopup_COLUMN","CUSTOMER_CONDTION","CUSTOMER_isautotopup_VALUE",1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_balancelimit_COLUMN","CUSTOMER_CONDTION","CUSTOMER_balancelimit_VALUE",1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_topupamount_COLUMN","CUSTOMER_CONDTION","CUSTOMER_topupamount_VALUE",1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_maxlimit_COLUMN","CUSTOMER_CONDTION","CUSTOMER_maxlimit_VALUE",1);
				break;
				case "step5": stepStatus[step] = SQLDBDateCompare("CUSTOMER_TABLE","CUSTOMER_activatedDT_COLUMN","CUSTOMER_CONDTION","dd/MM/yyyy",1);
				break;
				case "step6": stepStatus[step] = SQLDBDateCompare("CUSTOMER_TABLE","CUSTOMER_updatedDT_COLUMN","CUSTOMER_CONDTION","dd/MM/yyyy",1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_autotopupmode_COLUMN","CUSTOMER_CONDTION","CUSTOMER_autotopupmode_VALUE",1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_autodays_COLUMN","CUSTOMER_CONDTION","CUSTOMER_autodays_VALUE",1);
				break;
				case "step9": stepStatus[step] = SQLDBDateCompare("CUSTOMER_TABLE","CUSTOMER_AutoStartDate_COLUMN","CUSTOMER_CONDTION","dd/MM/yyyy",1);
				break;
				case "step10": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_isMax_COLUMN","CUSTOMER_CONDTION","CUSTOMER_isMax_VALUE",1);
				break;
				case "step11": stepStatus[step] = SQLDBFutureDateCompare("CUSTOMER_TABLE","CUSTOMER_AutoEndDate_COLUMN","CUSTOMER_CONDTION","dd/MM/yyyy","CUSTOMER_AutoEndDate_VALUE",1);
				break;
				case "step12": stepStatus[step] = RRBSDBSelect("RRBS_TABLE","RRBS_COLUMN","RRBS_CONDITION","RRBS_VALUE",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_GBR_AUTO_TOPUP_REFRESH(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Auto_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = waitUntilDisappear(online_TopUp.Auto_TopUp_Page("MenuLoading_Icon"), "Menu Loading Icon");
				break;
				case "step10": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("Auto_TopUp_Image"), "Auto TopUp Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("BalanceLimit_Dropdown"), "Topup Amount Dropdown");
				break;
				case "step12": stepStatus[step] = WebListSelect(online_TopUp.Auto_TopUp_Page("BalanceLimit_Dropdown"), "Balance Limit", "Balance_Limit", 1);
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.Auto_TopUp_Page("ATopupAmount_Dropdown"), "Topup Amount", "Topup_Amount", 1);
				break;
				case "step14": stepStatus[step] = WebListSelect(online_TopUp.Auto_TopUp_Page("MaxLimit_Dropdown"), "Max Limit Auto Toupup", "Max_Limit", 1);
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.Auto_TopUp_Page("APerWeek_Dropdown"), "Max Limit Per Week", "MaxLimit_Week", 1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(online_TopUp.Auto_TopUp_Page("UsingCard_Label"), "Using Card", "Using_Card", 1);
				break;
				case "step17": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("Refresh_Button"), "Refresh Button");
				break;
				case "step18": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("Refresh_Button"), "Refresh Button");
				break;
				case "step19": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("BalanceLimit_Dropdown"), "Topup Amount Dropdown");
				break;
				case "step20": stepStatus[step] = WebListSelectedValue(online_TopUp.Auto_TopUp_Page("BalanceLimit_Dropdown"), "Balance Limit", "Balance_Limit_Check", 1);
				break;
				case "step21": stepStatus[step] = WebListSelectedValue(online_TopUp.Auto_TopUp_Page("ATopupAmount_Dropdown"), "Auto ToupUp Amount", "Topup_Amount_Check", 1);
				break;
				case "step22": stepStatus[step] = WebListSelectedValue(online_TopUp.Auto_TopUp_Page("MaxLimit_Dropdown"), "Max Limit", "Max_Limit_Check", 1);
				break;
				case "step23": stepStatus[step] = WebListSelectedValue(online_TopUp.Auto_TopUp_Page("APerWeek_Dropdown"), "MaxLimit Per Week", "MaxLimit_Week_Check", 1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(online_TopUp.Auto_TopUp_Page("UsingCard_Label"), "Using Card", "Using_Card", 1);
				break;
				case "step25": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DB_COMMON_PRECONDITION(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = DBCommonPreCondition("DB_TYPE","ACTION","TABLE_NAME", "COLUMN_NAME", "COLUMN_VALUE", "CONDITION", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void UPDATE_MSTAUTOTPUP_BY_DM(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBCommonPreCondition("ACTION","TABLE_NAME", "COLUMN_NAME", "COLUMN_VALUE", "CONDITION", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PRECONDITION_DELETE_ALL_FILES(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = deleteAllFileInPath("PATH_FROM_ENV", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void START_STOP_WINSERVICE(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 2;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = WinserviceStartStopUsingSC("SERVER_IP", "ACTION_START", "WINSERVICE_NAME", 1);
				break;
				case "step2": stepStatus[step] = WinserviceStartStopUsingSC("SERVER_IP", "ACTION_STOP", "WINSERVICE_NAME", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void VALIDATE_SERVICE_LOG(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = WaitUntilPatternAppearsInLog("PATH_FROM_ENV", "FILE_NAME", "LINE_CONTENT", "PATTERN_TO_CHECK","ENV_VARIABLE", "DATE_FORMAT_OF_NAME", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DB_COMMON_POSTCONDITION(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = DBCommonPostCondition("DATABASE", "FORMAT", "TABLE_NAME", "COLUMN_NAME", "CONDITION", "EXPECTED_VALUE", "DAYS_TO_ADD", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void SQL_UPDATE_DELETE(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBCommonPreCondition("ACTION","TABLE_NAME", "COLUMN_NAME", "COLUMN_VALUE", "CONDITION", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void VALIDATE_SERVICE_LOG_1(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = WaitUntilPatternAppearsInLog("PATH_FROM_ENV", "FILE_NAME", "LINE_CONTENT", "PATTERN_TO_CHECK","ENV_VARIABLE", "DATE_FORMAT_OF_NAME", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DB_COMMON_POSTCONDITION_1(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = DBCommonPostCondition("DATABASE", "FORMAT", "TABLE_NAME", "COLUMN_NAME", "CONDITION", "EXPECTED_VALUE", "DAYS_TO_ADD", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_NUMBER_SAFE_CUSTODY(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 36;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(valueAddedServices.SafeCustody("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(valueAddedServices.SafeCustody("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("VAS_Icon"), "VAS Icon");
				break;
				case "step8": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("VAS_Icon"), "VAS Icon");
				break;
				case "step9": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("safeCustody_Icon"), "Number Safe Custody Icon");
				break;
				case "step10": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lblStatus"), "Number Lock Status");
				break;
				case "step11": stepStatus[step] = WebElementTextCompare(valueAddedServices.SafeCustody("lblStatus"), "Status","Status",1);
				break;
				case "step12": stepStatus[step] = WebElementValueCompare(valueAddedServices.SafeCustody("txtEmail"), "Email","Email",1);
				break;
				case "step13": stepStatus[step] = WebElementEnterCurrentDate(valueAddedServices.SafeCustody("input_StartDate_JS"), "StartDate","StartDate_Format","StartDate_EnvVariable",1);
				break;
				case "step14": stepStatus[step] = WebListSelect(valueAddedServices.SafeCustody("lst_SafeDateYear"), "Safe Holding Period - Year", "HoldPeriod_StartYear", 1);
				break;
				case "step15": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lst_SafeDateMonth"), "Safe Holding Period - Month");
				break;
				case "step16": stepStatus[step] = WebListSelect(valueAddedServices.SafeCustody("lst_SafeDateMonth"), "Safe Holding Period - Month", "HoldPeriod_StartMonth", 1);
				break;
				case "step17": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lbl_EndDate"), "End Date");
				break;
				case "step18": stepStatus[step] = WebElementFutureMonthValueComapre(valueAddedServices.SafeCustody("lbl_EndDate"), "End Date", "EndDate_Format", "EndDate_Month","EndDate_EnvVariable", 1);
				break;
				case "step19": stepStatus[step] = WebElementValueCompare(valueAddedServices.SafeCustody("lbl_SafeHoldingFee"), "Safe Holding Fee","Safe_Holding_Fee",1);
				break;
				case "step20": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("btnConfirm"), "Activate");
				break;
				case "step21": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("btnConfirm"), "Activate");
				break;
				case "step22": stepStatus[step] = deleteLogFile("Location", "Log_FileName", 1);
				break;
				case "step23": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lblConfirmStatus"), "Status");
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(valueAddedServices.SafeCustody("lblConfirmStatus"), "Status","Confirm_Status",1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(valueAddedServices.SafeCustody("lblConfirmEmail"), "Status","Confirm_Email",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompareFromEnv(valueAddedServices.SafeCustody("lblConfirmStartDate"), "Start Date", "StartDate_EnvVariable", 1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(valueAddedServices.SafeCustody("lblConfirmSafeDate"), "Safe Holding Peroid","Confirm_HoldingPeriod",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompareFromEnv(valueAddedServices.SafeCustody("lblConfirmEndDate"), "End Date", "EndDate_EnvVariable", 1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(valueAddedServices.SafeCustody("lblConfirmSafeHoldingFee"), "Safe Holding Fee","Confirm_HoldingFee",1);
				break;
				case "step30": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("btnSubmit"), "Confirm");
				break;
				case "step31": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("btnSubmit"), "Confirm");
				break;
				case "step32": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("NumberLockerMsg"), "Number Lock Response");
				break;
				case "step33": stepStatus[step] = WebElementTextCompare(valueAddedServices.SafeCustody("NumberLockerMsg"), "Number Lock Response","Response_Message",1);
				break;
				case "step34": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("close_button"), "Subscriber Logout");
				break;
				case "step35": stepStatus[step] = PerformAction_MoveToElementAndClick(valueAddedServices.SafeCustody("close_button"), "Subscriber Logout");
				break;
				case "step36": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void POST_NUMBERLOCK_SELECT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLAllSelect("TYPE", "TABLE_NAME", "COLUMN_NAME", "CONDITION", "COLUMN_VALUE","DAYS_TO_ADD","ENVVARIABLE", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PRE_SAVE_VALUE_IN_ENV_FROM_DB(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBSelectStoreValueInEnvVar("TABLE_NAME", "COLUMN_NAME", "CONDITION", "ENV_VARIABLE", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void VALIDATE_NUMBER_SAFE_CUSTODY(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 15;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(valueAddedServices.SafeCustody("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(valueAddedServices.SafeCustody("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("VAS_Icon"), "VAS Icon");
				break;
				case "step8": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("VAS_Icon"), "VAS Icon");
				break;
				case "step9": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("safeCustody_Icon"), "Number Safe Custody Icon");
				break;
				case "step10": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lblStatus"), "Number Lock Status");
				break;

				case "step11": stepStatus[step] = WebElementTextCompare(valueAddedServices.SafeCustody("lblStatus"), "Status","Status",1);
				break;
				case "step12": stepStatus[step] = WebElementValueCompareFromRuntimeEnv(valueAddedServices.SafeCustody("txtEmail"), "Email","Email_EnvVariable",1);
				break;

				case "step13": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("close_button"), "Subscriber Logout");
				break;
				case "step14": stepStatus[step] = PerformAction_MoveToElementAndClick(valueAddedServices.SafeCustody("close_button"), "Subscriber Logout");
				break;
				case "step15": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void VALIDATE_EMAIL_IN_SAFE_CUSTODY(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 27;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(valueAddedServices.SafeCustody("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(valueAddedServices.SafeCustody("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("VAS_Icon"), "VAS Icon");
				break;
				case "step8": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("VAS_Icon"), "VAS Icon");
				break;
				case "step9": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("safeCustody_Icon"), "Number Safe Custody Icon");
				break;
				case "step10": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lblStatus"), "Number Lock Status");
				break;
				case "step11": stepStatus[step] = WebElementTextCompare(valueAddedServices.SafeCustody("lblStatus"), "Status","Status",1);
				break;

				case "step12": stepStatus[step] = WebElementEnterCurrentDate(valueAddedServices.SafeCustody("input_StartDate_JS"), "StartDate","StartDate_Format","StartDate_EnvVariable",1);
				break;
				case "step13": stepStatus[step] = WebListSelect(valueAddedServices.SafeCustody("lst_SafeDateYear"), "Safe Holding Period - Year", "HoldPeriod_StartYear", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lst_SafeDateMonth"), "Safe Holding Period - Month");
				break;
				case "step15": stepStatus[step] = WebListSelect(valueAddedServices.SafeCustody("lst_SafeDateMonth"), "Safe Holding Period - Month", "HoldPeriod_StartMonth", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lbl_EndDate"), "End Date");
				break;
				case "step17": stepStatus[step] = WebElementFutureMonthValueComapre(valueAddedServices.SafeCustody("lbl_EndDate"), "End Date", "EndDate_Format", "EndDate_Month","EndDate_EnvVariable", 1);
				break;
				case "step18": stepStatus[step] = WebElementValueCompare(valueAddedServices.SafeCustody("lbl_SafeHoldingFee"), "Safe Holding Fee","Safe_Holding_Fee",1);
				break;
				case "step19": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("btnConfirm"), "Activate");
				break;
				case "step20": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("btnConfirm"), "Activate");
				break;

				case "step21": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("NumberLockerMsg"), "NumberLockerMsg");
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(valueAddedServices.SafeCustody("NumberLockerMsg"), "NumberLockerMsg","Response_Message",1);
				break;

				case "step23": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lblConfirmStatus"), "Status");
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(valueAddedServices.SafeCustody("lblConfirmStatus"), "Status","Confirm_Status",1);
				break;

				case "step25": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("close_button"), "Subscriber Logout");
				break;
				case "step26": stepStatus[step] = PerformAction_MoveToElementAndClick(valueAddedServices.SafeCustody("close_button"), "Subscriber Logout");
				break;
				case "step27": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void VALIDATE_SAFE_HOLD_DATES(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 17;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(valueAddedServices.SafeCustody("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(valueAddedServices.SafeCustody("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("VAS_Icon"), "VAS Icon");
				break;
				case "step8": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("VAS_Icon"), "VAS Icon");
				break;
				case "step9": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("safeCustody_Icon"), "Number Safe Custody Icon");
				break;
				case "step10": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lblStatus"), "Number Lock Status");
				break;
				case "step11": stepStatus[step] = WebElementTextCompare(valueAddedServices.SafeCustody("lblStatus"), "Status","Status",1);
				break;
				case "step12": stepStatus[step] = waitUntilListLoads(valueAddedServices.SafeCustody("lst_SafeDateYear"), "Safe Holding Period - Years");
				break;
				case "step13": stepStatus[step] = waitUntilListLoads(valueAddedServices.SafeCustody("lst_SafeDateMonth"), "Safe Holding Period - Month");
				break;
				case "step14": stepStatus[step] = WeblistMonthVerify(valueAddedServices.SafeCustody("lst_SafeDateYear"), valueAddedServices.SafeCustody("lst_SafeDateMonth"), "Safe Holding Period - Years","Safe Holding Period - Months", "SafeHoldMonths", 1, 1);
				break;
				case "step15": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("close_button"), "Subscriber Logout");
				break;
				case "step16": stepStatus[step] = PerformAction_MoveToElementAndClick(valueAddedServices.SafeCustody("close_button"), "Subscriber Logout");
				break;
				case "step17": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void VALIDATE_SAFE_CUSTODY_FEE(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 19;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(valueAddedServices.SafeCustody("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(valueAddedServices.SafeCustody("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("VAS_Icon"), "VAS Icon");
				break;
				case "step8": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("VAS_Icon"), "VAS Icon");
				break;
				case "step9": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("safeCustody_Icon"), "Number Safe Custody Icon");
				break;
				case "step10": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lblStatus"), "Number Lock Status");
				break;
				case "step11": stepStatus[step] = WebElementEnterCurrentDate(valueAddedServices.SafeCustody("input_StartDate_JS"), "StartDate","StartDate_Format","StartDate_EnvVariable",1);
				break;
				case "step12": stepStatus[step] = WebListSelect(valueAddedServices.SafeCustody("lst_SafeDateYear"), "Safe Holding Period - Year", "HoldPeriod_StartYear", 1);
				break;
				case "step13": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lst_SafeDateMonth"), "Safe Holding Period - Month");
				break;
				case "step14": stepStatus[step] = WebListSelect(valueAddedServices.SafeCustody("lst_SafeDateMonth"), "Safe Holding Period - Month", "HoldPeriod_StartMonth", 1);
				break;
				case "step15": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lbl_EndDate"), "End Date");
				break;
				case "step16": stepStatus[step] = WebElementValueCompareFromRuntimeEnv(valueAddedServices.SafeCustody("lbl_SafeHoldingFee"), "Safe Holding Fee","Fee_EnvVariable",1);
				break;
				case "step17": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("close_button"), "Subscriber Logout");
				break;
				case "step18": stepStatus[step] = PerformAction_MoveToElementAndClick(valueAddedServices.SafeCustody("close_button"), "Subscriber Logout");
				break;
				case "step19": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void VALIDATE_NUMBER_CUSTODY_CAL(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 33;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(valueAddedServices.SafeCustody("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(valueAddedServices.SafeCustody("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("VAS_Icon"), "VAS Icon");
				break;
				case "step8": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("VAS_Icon"), "VAS Icon");
				break;
				case "step9": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("safeCustody_Icon"), "Number Safe Custody Icon");
				break;
				case "step10": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lblStatus"), "Number Lock Status");
				break;
				case "step11": stepStatus[step] = WebElementTextCompare(valueAddedServices.SafeCustody("lblStatus"), "Status","Status",1);
				break;
				case "step12": stepStatus[step] = WebElementValueCompare(valueAddedServices.SafeCustody("txtEmail"), "Email","Email",1);
				break;
				case "step13": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("input_StartDate"), "StartDate Calendar");
				break;
				case "step14": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("selectYear"), "Calendar Year");
				break;
				case "step15": stepStatus[step] = WebListSelect(valueAddedServices.SafeCustody("selectYear"), "Calendar Year","YearInCalendar",1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("selectMonth"), "Calendar Months");
				break;
				case "step17": stepStatus[step] = WebListSelect(valueAddedServices.SafeCustody("selectMonth"), "Calendar Months","MonthInCalendar",1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("selectDate31"), "Calendar Date");
				break;
				case "step19": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("selectDate31"), "Calendar Date 31");
				break;
				case "step20": stepStatus[step] = WebElementValueStoreDynamicValue(valueAddedServices.SafeCustody("input_StartDate"), "Start Date","StartDate_EnvVariable",1);
				break;
				case "step21": stepStatus[step] = WebListSelect(valueAddedServices.SafeCustody("lst_SafeDateYear"), "Safe Holding Period - Year", "HoldPeriod_StartYear", 1);
				break;
				case "step22": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lst_SafeDateMonth"), "Safe Holding Period - Month");
				break;
				case "step23": stepStatus[step] = WebListSelect(valueAddedServices.SafeCustody("lst_SafeDateMonth"), "Safe Holding Period - Month", "HoldPeriod_StartMonth", 1);
				break;
				case "step24": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lbl_EndDate"), "End Date");
				break;
				case "step25": stepStatus[step] = WebElementFutureMonthValueComapreFromEnv(valueAddedServices.SafeCustody("lbl_EndDate"), "End Date", "EndDate_Format", "EndDate_Month","StartDate_EnvVariable","EndDate_EnvVariable", 1);
				break;
				case "step26": stepStatus[step] = WebElementValueCompare(valueAddedServices.SafeCustody("lbl_SafeHoldingFee"), "Safe Holding Fee","Safe_Holding_Fee",1);
				break;
				case "step27": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("btnConfirm"), "Activate");
				break;
				case "step28": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("btnConfirm"), "Activate");
				break;
				case "step29": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lblConfirmStatus"), "Status");
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(valueAddedServices.SafeCustody("lblConfirmStatus"), "Status","Confirm_Status",1);
				break;
				case "step31": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("close_button"), "Subscriber Logout");
				break;
				case "step32": stepStatus[step] = PerformAction_MoveToElementAndClick(valueAddedServices.SafeCustody("close_button"), "Subscriber Logout");
				break;
				case "step33": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void VALIDATE_SAFE_HOLD_FEE(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 26;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(valueAddedServices.SafeCustody("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(valueAddedServices.SafeCustody("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("VAS_Icon"), "VAS Icon");
				break;
				case "step8": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("VAS_Icon"), "VAS Icon");
				break;
				case "step9": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("safeCustody_Icon"), "Number Safe Custody Icon");
				break;
				case "step10": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lblStatus"), "Number Lock Status");
				break;
				case "step11": stepStatus[step] = WebElementTextCompare(valueAddedServices.SafeCustody("lblStatus"), "Status","Status",1);
				break;
				case "step12": stepStatus[step] = WebElementValueCompare(valueAddedServices.SafeCustody("txtEmail"), "Email","Email",1);
				break;
				case "step13": stepStatus[step] = WebElementEnterCurrentDate(valueAddedServices.SafeCustody("input_StartDate"), "StartDate","StartDate_Format","StartDate_EnvVariable",1);
				break;
				case "step14": stepStatus[step] = WebListSelect(valueAddedServices.SafeCustody("lst_SafeDateYear"), "Safe Holding Period - Year", "HoldPeriod_StartYear", 1);
				break;
				case "step15": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lst_SafeDateMonth"), "Safe Holding Period - Month");
				break;
				case "step16": stepStatus[step] = WebListSelect(valueAddedServices.SafeCustody("lst_SafeDateMonth"), "Safe Holding Period - Month", "HoldPeriod_StartMonth", 1);
				break;
				case "step17": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lbl_EndDate"), "End Date");
				break;
				case "step18": stepStatus[step] = WebElementFutureMonthValueComapre(valueAddedServices.SafeCustody("lbl_EndDate"), "End Date", "EndDate_Format", "EndDate_Month","EndDate_EnvVariable", 1);
				break;
				case "step19": stepStatus[step] = WebElementValueCompare(valueAddedServices.SafeCustody("lbl_SafeHoldingFee"), "Safe Holding Fee","Safe_Holding_Fee",1);
				break;
				case "step20": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("btnConfirm"), "Activate");
				break;
				case "step21": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("btnConfirm"), "Activate");
				break;
				case "step22": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lblConfirmStatus"), "Status");
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(valueAddedServices.SafeCustody("lblConfirmStatus"), "Status","Confirm_Status",1);
				break;
				case "step24": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("close_button"), "Subscriber Logout");
				break;
				case "step25": stepStatus[step] = PerformAction_MoveToElementAndClick(valueAddedServices.SafeCustody("close_button"), "Subscriber Logout");
				break;
				case "step26": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DEACTIVATE_SAFE_CUSTODY(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 34;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(valueAddedServices.SafeCustody("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(valueAddedServices.SafeCustody("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("VAS_Icon"), "VAS Icon");
				break;
				case "step8": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("VAS_Icon"), "VAS Icon");
				break;
				case "step9": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("safeCustody_Icon"), "Number Safe Custody Icon");
				break;
				case "step10": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lblStatus"), "Number Lock Status");
				break;


				case "step11": stepStatus[step] = WebElementTextCompare(valueAddedServices.SafeCustody("lblStatus"), "Status","Status",1);
				break;
				case "step12": stepStatus[step] = WebElementValueCompare(valueAddedServices.SafeCustody("txtEmail"), "Email","Email",1);
				break;

				case "step13": stepStatus[step] = WebElementValueCompareFromRuntimeEnv(valueAddedServices.SafeCustody("input_StartDate"), "Start Date","StartDate_EnvVariable",1);
				break;
				case "step14": stepStatus[step] = WebElementValueCompare(valueAddedServices.SafeCustody("lst_SafeDateYear"), "Safe Holding Period - Year","Safe_Holding_Period_Year",1);
				break;
				case "step15": stepStatus[step] = WebElementValueCompare(valueAddedServices.SafeCustody("lst_SafeDateMonth"), "Safe Holding Period - Month","Safe_Holding_Period_Month",1);
				break;
				case "step16": stepStatus[step] = WebElementValueCompareFromRuntimeEnv(valueAddedServices.SafeCustody("lbl_EndDate"), "End Date","EndDate_EnvVariable",1);
				break;
				case "step17": stepStatus[step] = WebElementValueCompare(valueAddedServices.SafeCustody("lbl_SafeHoldingFee"), "Safe Holding Fee","Safe_Holding_Fee",1);
				break;

				case "step18": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("btnConfirm"), "Activate");
				break;
				case "step19": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("btnConfirm"), "Activate");
				break;
				case "step20": stepStatus[step] = deleteLogFile("Location", "Log_FileName", 1);
				break;
				case "step21": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("lblConfirmStatus"), "Status");
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(valueAddedServices.SafeCustody("lblConfirmStatus"), "Status","Confirm_Status",1);
				break;

				case "step23": stepStatus[step] = WebElementTextCompare(valueAddedServices.SafeCustody("lblConfirmEmail"), "Status","Confirm_Email",1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompareFromEnv(valueAddedServices.SafeCustody("lblConfirmStartDate"), "Start Date", "StartDate_EnvVariable", 1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(valueAddedServices.SafeCustody("lblConfirmSafeDate"), "Safe Holding Peroid","Confirm_HoldingPeriod",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompareFromEnv(valueAddedServices.SafeCustody("lblConfirmEndDate"), "End Date", "EndDate_EnvVariable", 1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(valueAddedServices.SafeCustody("lblConfirmSafeHoldingFee"), "Safe Holding Fee","Confirm_HoldingFee",1);
				break;

				case "step28": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("btnSubmit"), "Confirm");
				break;
				case "step29": stepStatus[step] = WebElementClick(valueAddedServices.SafeCustody("btnSubmit"), "Confirm");
				break;

				case "step30": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("NumberLockerMsg"), "Number Lock Response");
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(valueAddedServices.SafeCustody("NumberLockerMsg"), "Number Lock Response","Response_Message",1);
				break;
				case "step32": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("close_button"), "Subscriber Logout");
				break;
				case "step33": stepStatus[step] = PerformAction_MoveToElementAndClick(valueAddedServices.SafeCustody("close_button"), "Subscriber Logout");
				break;
				case "step34": stepStatus[step] = waitUntilExist(valueAddedServices.SafeCustody("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Open_USA_SQL_Connection(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBOpenConnection(property.getProperty("SQL_Server"), property.getProperty("SQL_Server_DB_Name"), property.getProperty("SQL_Server_UID"), property.getProperty("SQL_Server_PWD"));
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Validate_GBR_ONLINE_TOPUP(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("okBtn_Button"), "OK Button");
				break;
				case "step3": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("okBtn_Button"), "OK Button");
				break;
				case "step4": stepStatus[step] = pageLoadCheck();
				break;
				case "step5": stepStatus[step] = waitUntilDisappear(online_TopUp.Online_TopUp_Page("load_Image"), "Load Image");
				break;
				case "step6": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("responseMsg_Button"), "Response Message");
				break;
				case "step7": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("responseMsg_Button"), "Response Message","Response_Message",1);
				break;
				case "step8": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step9": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PreCondition_Voucher_TopUp2(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBDelete("mstCustomer_Table_Name", "mstCustome_Condition", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Do_Voucher_Topup1(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("services_Select"), "Services_Select");
				break;
				case "step3": stepStatus[step] = WebListSelect(voucher_TopUp_Page.Voucher_TopUp("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step4": stepStatus[step] = WebEditEnterText(voucher_TopUp_Page.Voucher_TopUp("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step8": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("topUp_Button"), "TopUp_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("voucher_TopUp_Button"), "voucher_TopUp_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("voucher_TopUp_Button"), "voucher_TopUp_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("voucherPin_Textbox"), "voucherPin_Textbox");
				break;
				case "step12": stepStatus[step] = WebEditEnterText(voucher_TopUp_Page.Voucher_TopUp("voucherPin_Textbox"), "voucherPin_Textbox", "Voucher_Pin", 1);
				break;
				case "step13": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("apply_Button"), "Apply_buton");
				break;
				case "step14": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("success_message"), "success_message");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(voucher_TopUp_Page.Voucher_TopUp("success_message"), "success_message", "Confirm_Message", 1);
				break;
				case "step16": stepStatus[step] = WebElementVerifyElementColor(voucher_TopUp_Page.Voucher_TopUp("success_message"), "Success_message", "Message_Color", 1);
				break;
				case "step17": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("invalidPin_message"), "Invalid PIN Message");
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(voucher_TopUp_Page.Voucher_TopUp("invalidPin_message"), "Invalid PIN Message", "Confirm_Message", 1);
				break;
				/*case "step18": stepStatus[step] = WebElementResxKeyValueStaticCompare(voucher_TopUp_Page.Voucher_TopUp("invalidPin_message"),"Confirm Message" ,"Automation_KeyName", 1);
				break;*/
				case "step19": stepStatus[step] = WebElementVerifyElementColor(voucher_TopUp_Page.Voucher_TopUp("invalidPin_message"), "Invalid PIN Message", "Message_Color", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("reset_Button"), "Reset_buton");
				break;
				case "step21": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("close_button"), "Subscriber Logout");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Navigate_To_VoucherTopupPage(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 11;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("services_Select"), "Services_Select");
				break;
				case "step3": stepStatus[step] = WebListSelect(voucher_TopUp_Page.Voucher_TopUp("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step4": stepStatus[step] = WebEditEnterText(voucher_TopUp_Page.Voucher_TopUp("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step8": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("topUp_Button"), "TopUp_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("voucher_TopUp_Button"), "voucher_TopUp_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("voucher_TopUp_Button"), "voucher_TopUp_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("voucherPin_Textbox"), "voucherPin_Textbox");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Validate_VoucherTopup_Fields(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 3;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("voucherPin_Textbox"), "voucherPin_Textbox");
				break;
				case "step2": stepStatus[step] = WebEditEnterValueAndCompareSame(voucher_TopUp_Page.Voucher_TopUp("voucherPin_Textbox"),"Voucher Pin","Value","ExpectedValue", 1);
				break;
				case "step3": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("reset_Button"), "Reset_buton");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Logout_Subscriber_CRM(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 2;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("close_button"), "Subscriber Logout");
				break;
				case "step2": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("close_button"), "Subscriber Logout");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Open_SQL_Connection_POL(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBOpenConnection(property.getProperty("SQL_Server_POL"), property.getProperty("SQL_Server_DB_Name_POL"), property.getProperty("SQL_Server_UID_POL"), property.getProperty("SQL_Server_PWD_POL"));
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PreCon_DB_POL_REGISTRATION(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 3;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBDelete("CUSTOMER_TABLE","CUSTOMER_CONDTION",1);
				break;
				case "step2": stepStatus[step] = SQLDBDelete("CUSTOMERLOG_TABLE","CUSTOMER_CONDTION",1);
				break;
				case "step3": stepStatus[step] = SQLDBDelete("NFBLOCK_TABLE","CUSTOMER_CONDTION",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_POL_REGISTRATION(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 49;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(registration_POL.Registration_Page("txtNewRegistration"), "MSISDN Registration");
				break;
				case "step2": stepStatus[step] = WebEditEnterText(registration_POL.Registration_Page("txtNewRegistration"), "MSISDN Registration", "MSISDN", 1);
				break;
				case "step3": stepStatus[step] = WebElementClick(registration_POL.Registration_Page("btnNewRegister"), "Register Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(registration_POL.Registration_Page("lstPOLtitle"), "Title");
				break;
				case "step5": stepStatus[step] = WebListSelect(registration_POL.Registration_Page("lstPOLtitle"), "Title","Title",1);
				break;
				case "step6": stepStatus[step] = WebEditEnterText(registration_POL.Registration_Page("txtfirstName"), "FirstName","FirstName",1);
				break;
				case "step7": stepStatus[step] = WebEditEnterText(registration_POL.Registration_Page("txtlastName"), "LastName","LastName",1);
				break;
				case "step8": stepStatus[step] = javaScriptEnterText(registration_POL.Registration_Page("txtPolDOB"), "DOB", "DOB", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(registration_POL.Registration_Page("select_Personallang"),"Language");
				break;
				case "step10": stepStatus[step] = WebListSelect(registration_POL.Registration_Page("select_Personallang"),"Language", "Language",1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(registration_POL.Registration_Page("txtStreet"), "Street","Street",1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(registration_POL.Registration_Page("txtCity"), "City","City",1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(registration_POL.Registration_Page("txtPostCode1"), "Postcode 1","Postcode1",1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(registration_POL.Registration_Page("txtPostCode2"), "Postcode 2","Postcode2",1);
				break;
				case "step15": stepStatus[step] = WebElementClick(registration_POL.Registration_Page("Icon_SearchAddress"), "Search Button");
				break;
				case "step16": stepStatus[step] = VerifyAddressModalPopupPresent("Address Popup","Address List");
				break;
				case "step17": stepStatus[step] = WebListSelect(registration_POL.Registration_Page("listAddressResult"), "AddressResult", "AddressToChoose", 1);
				break;
				case "step18": stepStatus[step] = javascriptWebElementClick(registration_POL.Registration_Page("btnAcceptAddress"), "Accept Address");
				break;
				case "step19": stepStatus[step] = javascriptWebElementClick(registration_POL.Registration_Page("ModalSpace"), "Modal Space");
				break;
				case "step20": stepStatus[step] = waitUntilExist(registration_POL.Registration_Page("rdomobile"), "Mobile Number");
				break;
				case "step21": stepStatus[step] = WebRadioSelect(registration_POL.Registration_Page("rdomobile"), "Mobile Number","Verification");
				break;
				case "step22": stepStatus[step] = WebElementValueCompare(registration_POL.Registration_Page("LabelMSISDN"), "MSISDN without CC", "MSISDN_WithouCC", 1);
				break;
				case "step23": stepStatus[step] = WebEditEnterText(registration_POL.Registration_Page("txtsimnumber"), "Last 4 Digit - Sim Number", "SimNumber", 1);
				break;
				case "step24": stepStatus[step] = WebRadioSelect(registration_POL.Registration_Page("rdopesel"), "PESEL","Document");
				break;
				case "step25": stepStatus[step] = WebEditEnterText(registration_POL.Registration_Page("txtpesel"), "PESEL", "PESEL_No", 1);
				break;
				case "step26": stepStatus[step] = WebElementClick(registration_POL.Registration_Page("cbxMarketingSMS1"), "MarketingSMS");
				break;
				case "step27": stepStatus[step] = WebElementClick(registration_POL.Registration_Page("chktermsconditions_1"), "Termsconditions");
				break;
				case "step28": stepStatus[step] = waitUntilExist(registration_POL.Registration_Page("btnPOLnext"), "Next Button");
				break;
				case "step29": stepStatus[step] = javascriptWebElementClick(registration_POL.Registration_Page("btnPOLnext"), "Next Button");
				break;
				case "step30": stepStatus[step] = pageLoadCheck();
				break;
				case "step31": stepStatus[step] = waitUntilExist(registration_POL.Registration_Page("lblTitle"), "Title");
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(registration_POL.Registration_Page("lblTitle"), "Title", "Title", 1);
				break;
				case "step33": stepStatus[step] = WebElementTextCompare(registration_POL.Registration_Page("lblfirstname"), "FirstName", "FirstName", 1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(registration_POL.Registration_Page("lbllastname"), "Lastname", "LastName", 1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(registration_POL.Registration_Page("lblDOB"), "DOB", "DOB", 1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(registration_POL.Registration_Page("lblLanguage"), "Language", "Language", 1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(registration_POL.Registration_Page("lblStreet"), "Street", "View_Street", 1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(registration_POL.Registration_Page("lblCity"), "City", "View_City", 1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(registration_POL.Registration_Page("lblcode"), "Postcode", "View_Postcode", 1);
				break;
				case "step40": stepStatus[step] = WebElementTextCompare(registration_POL.Registration_Page("lblHouseNo"), "House", "View_House", 1);
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(registration_POL.Registration_Page("lblMSISDN_1"), "MSISDN", "MSISDN", 1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(registration_POL.Registration_Page("lblsimnumber_1"), "SimNumber", "SimNumber", 1);
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(registration_POL.Registration_Page("lblidproof"), "PESEL_No", "PESEL_No", 1);
				break;
				case "step44": stepStatus[step] = waitUntilExist(registration_POL.Registration_Page("btnPOLsubmit"), "Submit Button");
				break;
				case "step45": stepStatus[step] = javascriptWebElementClick(registration_POL.Registration_Page("btnPOLsubmit"), "Submit Button");
				break;
				case "step46": stepStatus[step] = waitUntilExist(registration_POL.Registration_Page("label_Regmessage"), "Response Message");
				break;
				case "step47": stepStatus[step] = WebElementTextCompare(registration_POL.Registration_Page("label_Regmessage"), "Response Message", "Response_Message", 1);
				break;
				case "step48": stepStatus[step] = waitUntilExist(registration_POL.Registration_Page("btnClose"), "btnClose");
				break;
				case "step49": stepStatus[step] = WebElementClick(registration_POL.Registration_Page("btnClose"), "btnClose");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PostCon_POL_REGISTRATION(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 27;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_Title","CUSTOMER_CONDTION","CUSTOMER_Title_Value", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_FirstName","CUSTOMER_CONDTION","CUSTOMER_FirstName_Value", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_lastName","CUSTOMER_CONDTION","CUSTOMER_lastName_Value", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_Postcode","CUSTOMER_CONDTION","CUSTOMER_Postcode_Value", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_houseNo","CUSTOMER_CONDTION","CUSTOMER_houseNo_Value", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_Street","CUSTOMER_CONDTION","CUSTOMER_Street_Value", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_City","CUSTOMER_CONDTION","CUSTOMER_City_Value", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_Country","CUSTOMER_CONDTION","CUSTOMER_Country_Value", 1);
				break;
				case "step9": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_Birthdd","CUSTOMER_CONDTION","CUSTOMER_Birthdd_Value", 1);
				break;
				case "step10": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_Birthmm","CUSTOMER_CONDTION","CUSTOMER_Birthmm_Value", 1);
				break;
				case "step11": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_Birthyy","CUSTOMER_CONDTION","CUSTOMER_Birthyy_Value", 1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_MSISDN","CUSTOMER_CONDTION","CUSTOMER_MSISDN_Value", 1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_SIM","CUSTOMER_CONDTION","CUSTOMER_SIM_VALUE", 1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_LANGUAGE","CUSTOMER_CONDTION","CUSTOMER_LANGUAGE_VALUE", 1);
				break;
				case "step15": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_chkTerms","CUSTOMER_CONDTION","CUSTOMER_chkTerms_Value", 1);
				break;
				case "step16": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_ModeReg","CUSTOMER_CONDTION","CUSTOMER_ModeReg_Value", 1);
				break;
				case "step17": stepStatus[step] = SQLDBSelect("CUSTOMER_TABLE","CUSTOMER_PESEL","CUSTOMER_CONDTION","CUSTOMER_PESEL_Value", 1);
				break;
				case "step18": stepStatus[step] = SQLDBDateCompare("CUSTOMER_TABLE","CUSTOMER_DateOfCreation","CUSTOMER_CONDTION","dd/MM/yyyy", 1);
				break;
				case "step19": stepStatus[step] = SQLDBDateCompare("CUSTOMER_TABLE","CUSTOMER_CreatedDate","CUSTOMER_CONDTION","dd/MM/yyyy", 1);
				break;
				case "step20": stepStatus[step] = SQLDBSelect("NFBLOCK_Table","NFBLOCK_ACCNO","CUSTOMER_CONDTION","NFBLOCK_ACCNO_Value", 1);
				break;
				case "step21": stepStatus[step] = SQLDBSelect("NFBLOCK_Table","NFBLOCK_MSISDN","CUSTOMER_CONDTION","NFBLOCK_MSISDN_Value", 1);
				break;
				case "step22": stepStatus[step] = SQLDBSelect("NFBLOCK_Table","NFBLOCK_Type","CUSTOMER_CONDTION","NFBLOCK_Type_Value", 1);
				break;
				case "step23": stepStatus[step] = SQLDBSelect("NFBLOCK_Table","NFBLOCK_Status","CUSTOMER_CONDTION","NFBLOCK_Status_Value", 1);
				break;
				case "step24": stepStatus[step] = SQLDBSelect("NFBLOCK_Table","NFBLOCK_Reason","CUSTOMER_CONDTION","NFBLOCK_Reason_Value", 1);
				break;
				case "step25": stepStatus[step] = SQLDBSelect("NFBLOCK_Table","NFBLOCK_TicketID","CUSTOMER_CONDTION","NFBLOCK_TicketID_Value", 1);
				break;
				case "step26": stepStatus[step] = SQLDBSelect("NFBLOCK_Table","NFBLOCK_Username","CUSTOMER_CONDTION","NFBLOCK_Username_Value", 1);
				break;
				case "step27": stepStatus[step] = SQLDBDateCompare("NFBLOCK_Table","NFBLOCK_SubmitDate","CUSTOMER_CONDTION","dd/MM/yyyy", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_POL_REGISTRATION_NODATA(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 11;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(registration_POL.Registration_Page("txtNewRegistration"), "MSISDN Registration");
				break;
				case "step2": stepStatus[step] = WebEditEnterText(registration_POL.Registration_Page("txtNewRegistration"), "MSISDN Registration", "MSISDN", 1);
				break;
				case "step3": stepStatus[step] = WebElementClick(registration_POL.Registration_Page("btnNewRegister"), "Register Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(registration_POL.Registration_Page("lstPOLtitle"), "Title");
				break;
				case "step5": stepStatus[step] = waitUntilExist(registration_POL.Registration_Page("btnPOLnext"), "Next Button");
				break;
				case "step6": stepStatus[step] = javascriptWebElementClick(registration_POL.Registration_Page("btnPOLnext"), "Next Button");
				break;
				case "step7": stepStatus[step] = pageLoadCheck();
				break;
				case "step8": stepStatus[step] = waitUntilExist(registration_POL.Registration_Page("label_RegErrmessage"), "Response Message");
				break;
				case "step9": stepStatus[step] = WebElementTextCompare(registration_POL.Registration_Page("label_RegErrmessage"), "Response Message", "Response_Message", 1);
				break;
				case "step10": stepStatus[step] = waitUntilExist(registration_POL.Registration_Page("btnClose"), "btnClose");
				break;
				case "step11": stepStatus[step] = WebElementClick(registration_POL.Registration_Page("btnClose"), "btnClose");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void SQL_SELECT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBCommonSelect("TYPE", "TABLE_NAME", "COLUMN_NAME", "CONDITION", "EXPECTED_VALUE","DAYS_TO_ADD", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void RRBS_UPDATE_DELETE(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = RRBSDBCommonPreCondition("ACTION","TABLE_NAME", "COLUMN_NAME", "COLUMN_VALUE", "CONDITION", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void EXIBS_UPDATE_DELETE(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = EXIBSDBCommonPreCondition("ACTION","TABLE_NAME", "COLUMN_NAME", "COLUMN_VALUE", "CONDITION", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void RRBS_SELECT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = RRBSDBCommonSelect("TYPE", "TABLE_NAME", "COLUMN_NAME", "CONDITION", "COLUMN_VALUE", "dd/MM/yyyy", "DAYS_TO_ADD", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void SQL_SELECT_STORE_IN_ENV(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = storeSQLDBValueInEnv("TABLE_NAME", "COLUMN_NAME", "CONDITION", "ENV_VARIABLE", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void CHECK_DISPLAYED_ACTIVE_BUNDLES(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 21;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = waitUntilDisappear(online_TopUp.AllInOne_TopUp_Page("MenuLoading_Icon"), "Menu Loading Icon");
				break;
				case "step10": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step15": stepStatus[step] = waitUntilListLoads(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step16": stepStatus[step] = WeblistSQLDBitemsverify(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No","Table_Name","Column_Name","Condition",1,1);
				break;
				case "step17": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinoneCancel"), "CANCEL Button");
				break;
				case "step18": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnallinoneCancel"), "CANCEL Button");
				break;
				case "step19": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step20": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step21": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void CHECK_DISPLAYED_NO_OF_MONTHS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 22;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {


				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = waitUntilDisappear(online_TopUp.AllInOne_TopUp_Page("MenuLoading_Icon"), "Menu Loading Icon");
				break;
				case "step10": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step17": stepStatus[step] = waitUntilListLoads(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step18": stepStatus[step] = WeblistNumbersVerify(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "TotalNumber",1, 1);
				break;
				case "step19": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinoneCancel"), "CANCEL Button");
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void VERIFY_DISPLAYED_BUNDLE_GRID(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 37;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = waitUntilDisappear(online_TopUp.AllInOne_TopUp_Page("MenuLoading_Icon"), "Menu Loading Icon");
				break;
				case "step10": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step19": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step20": stepStatus[step] = deleteLogFile("Location", "Log_FileName", 1);
				break;
				case "step21": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step22": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step23": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				case "step31": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdtrashIcon_1"), "Trash Icon");
				break;
				case "step32": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("tdtrashIcon_1"), "Trash Icon");
				break;
				case "step33": stepStatus[step] = WaitUntilNoLongerExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step34": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinoneCancel"), "CANCEL Button");
				break;
				case "step35": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step36": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step37": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void CHECK_BUNDLE_DESCRITPION(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 24;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = waitUntilDisappear(online_TopUp.AllInOne_TopUp_Page("MenuLoading_Icon"), "Menu Loading Icon");
				break;
				case "step10": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblHeaderbundlecategory"), "Label Bundle Category");
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblbundlecategory"), "Bundle Category", "BundleCategory", 1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompareFromEnv(online_TopUp.AllInOne_TopUp_Page("lblbundleDescription"), "Bundle Description", "BundleDesc_Env", 1);
				break;
				case "step21": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinoneCancel"), "CANCEL Button");
				break;
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step23": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step24": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_BUNDLE_PURCHASE_ALLINONE(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 63;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = waitUntilDisappear(online_TopUp.AllInOne_TopUp_Page("MenuLoading_Icon"), "Menu Loading Icon");
				break;
				case "step10": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step19": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step20": stepStatus[step] = deleteLogFile("Location", "Log_FileName", 1);
				break;
				case "step21": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step22": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step23": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				case "step31": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step32": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step35": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtpostCode"), "Postcode", "Postcode", 1);
				break;
				case "step36": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconAddressSearch"), "Search Icon");
				break;
				case "step37": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step38": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","Address",1);
				break;
				case "step39": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step40": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House Number");
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelstreetName"), "StreetName","View_Street",1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblcityName"), "City","View_City",1);
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblpostCode"), "Postcode","View_Postcode",1);
				break;
				case "step44": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step45": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step46": stepStatus[step] = pageLoadCheck();
				break;
				case "step47": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step48": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step49": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step50": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step51": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				case "step55": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				case "step57": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step58": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step59": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step61": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step62": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step63": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_BUNDLE_PURCHASE_AIO_PROMO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 66;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = waitUntilDisappear(online_TopUp.AllInOne_TopUp_Page("MenuLoading_Icon"), "Menu Loading Icon");
				break;
				case "step10": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step19": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step20": stepStatus[step] = deleteLogFile("Location", "Log_FileName", 1);
				break;
				case "step21": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step22": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step23": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				case "step31": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step32": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step33": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "PROMO CODE");
				break;
				case "step34": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "PROMO CODE","Promo_Code",1);
				break;
				case "step35": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinonePromo"), "APPLY PROMO CODE");
				break;
				case "step36": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinonePromo"), "APPLY PROMO CODE");
				break;
				case "step37": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelDiscountResponseAllInOne"), "Discount Message");
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelDiscountResponseAllInOne"), "Discount Message","Promo_Discount_Message",1);
				break;
				case "step39": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step40": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step41": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtpostCode"), "Postcode", "Postcode", 1);
				break;
				case "step42": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconAddressSearch"), "Search Icon");
				break;
				case "step43": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step44": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","Address",1);
				break;
				case "step45": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step46": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House Number");
				break;
				case "step47": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step48": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step49": stepStatus[step] = pageLoadCheck();
				break;
				case "step50": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step51": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				case "step58": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				case "step60": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step61": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step62": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step63": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step64": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step65": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step66": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void VERIFY_BUNDLE_ALERT_MESSAGE(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 27;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = waitUntilDisappear(online_TopUp.AllInOne_TopUp_Page("MenuLoading_Icon"), "Menu Loading Icon");
				break;
				case "step10": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step19": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelErrResponseAllInOne"), "Alert Message");
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelErrResponseAllInOne"), "Alert Message", "Alter_Message",1);
				break;
				case "step24": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinoneCancel"), "CANCEL Button");
				break;
				case "step25": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step26": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step27": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_BUNDLE_PURCHASE_AIO_FAMILY(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 63;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = waitUntilDisappear(online_TopUp.AllInOne_TopUp_Page("MenuLoading_Icon"), "Menu Loading Icon");
				break;
				case "step10": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step19": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step20": stepStatus[step] = deleteLogFile("Location", "Log_FileName", 1);
				break;
				case "step21": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step22": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step23": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				case "step31": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step32": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step35": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtpostCode"), "Postcode", "Postcode", 1);
				break;
				case "step36": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconAddressSearch"), "Search Icon");
				break;
				case "step37": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step38": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","Address",1);
				break;
				case "step39": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step40": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House Number");
				break;
				case "step41": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step42": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step43": stepStatus[step] = pageLoadCheck();
				break;
				case "step44": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step45": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step46": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step47": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step48": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step49": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step50": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step51": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				case "step52": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				case "step54": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step55": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step56": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step58": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneFamilyAccountId"), "Family Account ID");
				break;
				case "step59": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneFamilyAccountId"), "Family Account ID","Family_AccountID_Pattern",1);
				break;
				case "step60": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneFamilyAccountId"), "Family Account ID","Family_AccountID_Env",1);
				break;
				case "step61": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step62": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step63": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PRE_DB_AIO_STORE_ENV(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 2;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = RRBSStoreValueInEnvVar("Subs_TableName", "Subs_ColumnName", "Subs_Condition", "Subs_Env_Variable", 1);
				break;
				case "step2": stepStatus[step] = RRBSValueStoreInEnvVarFromEnvVarCondition("Family_TableName", "Family_ColumnName", "Family_ConditionColName", "Family_ConditionEnv", "FamilyID_EnvVariable", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PRE_DB_AIO_FAMILY(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = RRBSDBDeleteCondtionEnv("TABLE_NAME", "CONDITION_COLUMN_NAME", "ENV_VARIABLE_NAME", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PRE_DB_BUNDLE_UPDATE(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = RRBSDBCommonPreCondition("ACTION","TABLE_NAME", "COLUMN_NAME", "COLUMN_VALUE", "CONDITION", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void POST_DB_AIO_FAMILY(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = RRBSDBCommonSelectFromEnv("TYPE", "TABLE_NAME", "COLUMN_NAME", "CONDITION","ENV_VARIABLE_NAME", "COLUMN_VALUE", "dd/MM/yyyy", "DAYS_TO_ADD", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void POST_DB_SUBS_PROFILE(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = RRBSDBCommonSelect("TYPE", "TABLE_NAME", "COLUMN_NAME", "CONDITION", "COLUMN_VALUE", "dd/MM/yyyy", "DAYS_TO_ADD", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void POST_DB_THRESH_LIMIT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = RRBSDBCommonSelect("TYPE", "TABLE_NAME", "COLUMN_NAME", "CONDITION", "COLUMN_VALUE", "dd/MM/yyyy", "DAYS_TO_ADD", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void POST_DB_BUNDLE_BUCKETS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = RRBSDBCommonSelect("TYPE", "TABLE_NAME", "COLUMN_NAME", "CONDITION", "COLUMN_VALUE", "dd/MM/yyyy", "DAYS_TO_ADD", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void POST_DB_SUBS_PROFILE_FAMILY(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = RRBSDBCommonSelectFromEnv("TYPE", "TABLE_NAME", "COLUMN_NAME", "CONDITION","ENV_VARIABLE_NAME", "COLUMN_VALUE", "dd/MM/yyyy", "DAYS_TO_ADD", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void POST_DB_THRESH_LIMIT_FAMILY(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = RRBSDBCommonSelectFromEnv("TYPE", "TABLE_NAME", "COLUMN_NAME", "CONDITION","ENV_VARIABLE_NAME", "COLUMN_VALUE", "dd/MM/yyyy", "DAYS_TO_ADD", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void POST_DB_BUNDLE_BUCKETS_FAMILY(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = RRBSDBCommonSelectFromEnv("TYPE", "TABLE_NAME", "COLUMN_NAME", "CONDITION","ENV_VARIABLE_NAME" ,"COLUMN_VALUE", "dd/MM/yyyy", "DAYS_TO_ADD", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_BUNDLE_AIO_FAMILY_PROMO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 69;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = waitUntilDisappear(online_TopUp.AllInOne_TopUp_Page("MenuLoading_Icon"), "Menu Loading Icon");
				break;
				case "step10": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step19": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step20": stepStatus[step] = deleteLogFile("Location", "Log_FileName", 1);
				break;
				case "step21": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step22": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step23": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				case "step31": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step32": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step33": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "PROMO CODE");
				break;
				case "step34": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "PROMO CODE","Promo_Code",1);
				break;
				case "step35": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinonePromo"), "APPLY PROMO CODE");
				break;
				case "step36": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinonePromo"), "APPLY PROMO CODE");
				break;
				case "step37": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelDiscountResponseAllInOne"), "Discount Message");
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelDiscountResponseAllInOne"), "Discount Message","Promo_Discount_Message",1);
				break;
				case "step39": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step40": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step41": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtpostCode"), "Postcode", "Postcode", 1);
				break;
				case "step42": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconAddressSearch"), "Search Icon");
				break;
				case "step43": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step44": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","Address",1);
				break;
				case "step45": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step46": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House Number");
				break;
				case "step47": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step48": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step49": stepStatus[step] = pageLoadCheck();
				break;
				case "step50": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step51": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				case "step58": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				case "step60": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step61": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step62": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step63": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step64": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneFamilyAccountId"), "Family Account ID");
				break;
				case "step65": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneFamilyAccountId"), "Family Account ID","Family_AccountID_Pattern",1);
				break;
				case "step66": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneFamilyAccountId"), "Family Account ID","Family_AccountID_Env",1);
				break;
				case "step67": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step68": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step69": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PRE_DB_SL_BUNDLE(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = RRBSDBCommonPreCondition("ACTION","TABLE_NAME", "COLUMN_NAME", "COLUMN_VALUE", "CONDITION", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_SL_BUNDLE_PURCHASE_AIO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 64;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = waitUntilDisappear(online_TopUp.AllInOne_TopUp_Page("MenuLoading_Icon"), "Menu Loading Icon");
				break;
				case "step10": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelAssociated"), "Association Message");
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelAssociated"), "Association Message","Associate_Message",1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step19": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtAssociatedMsisdn"), "Associated MSISDN");
				break;
				case "step23": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtAssociatedMsisdn"), "Associated MSISDN","Associated_MSISDN",1);
				break;
				case "step24": stepStatus[step] = deleteLogFile("Location", "Log_FileName", 1);
				break;
				case "step25": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step26": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step27": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step33": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				case "step35": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step36": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step37": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step39": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtpostCode"), "Postcode", "Postcode", 1);
				break;
				case "step40": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconAddressSearch"), "Search Icon");
				break;
				case "step41": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step42": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","Address",1);
				break;
				case "step43": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step44": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House Number");
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step46": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step47": stepStatus[step] = pageLoadCheck();
				break;
				case "step48": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step49": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step50": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step51": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				case "step56": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				case "step58": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step59": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step60": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step61": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step62": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step63": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step64": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PRE_DB_BUNDLE_BUCKETS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = RRBSDBCommonPreCondition("ACTION","TABLE_NAME", "COLUMN_NAME", "COLUMN_VALUE", "CONDITION", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PRE_DB_THRESH_LIMIT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = RRBSDBCommonPreCondition("ACTION","TABLE_NAME", "COLUMN_NAME", "COLUMN_VALUE", "CONDITION", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void VERIFY_MODIFY_SUBS_BUNDLE_GRID(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 47;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Modify_Bundle("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("Bundle_Button"), "Bundle");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("Bundle_Button"), "Bundle");
				break;
				case "step9": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("ModifyBundle_Image"), "Modify bundle");
				break;
				case "step10": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("ModifyBundle_Image"), "Modify bundle");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("lstBundleCode"), "Bundle Code");
				break;
				case "step12": stepStatus[step] = waitUntilListLoads(online_TopUp.Modify_Bundle("lstBundleCode"), "Bundle Code");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.Modify_Bundle("lstBundleCode"), "Bundle Code","BundleCode",1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("lstOptionalMode"), "Service Type");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.Modify_Bundle("lstOptionalMode"), "Service Type","Service_Type",1);
				break;
				case "step16": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkCommomAllowance"), "Common Allowance");
				break;
				case "step17": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("txtCommomAllowance"), "Common Allowance");
				break;
				case "step18": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txtCommomAllowance"), "Common Allowance","Common_Allowance",1);
				break;
				case "step19": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("tdBundleName_1"), "Bundle Name");
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdBundleName_1"), "Bundle Name","BundleName",1);
				break;
				case "step21": stepStatus[step] = RRBSDateAndWebElementTextCompare(online_TopUp.Modify_Bundle("tdExpiryDate_1"),"Bundle_TableName", "Bundle_ColName", "Bundle_Condition", "Date_Format", "Expiry Date", 1);
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdOnnetZoneName_1"), "On-net Zone Name","OnnetZoneName",1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdOnnetMinutes_1"), "On-net Minutes","OnnetMinutes",1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdOnnetSMS_1"), "On-net SMS","OnnetSMS",1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdZone1Name_1"), "Zone 1 Name","Zone1Name",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdZone1FreeMinutes_1"), "Zone 1 Free Minutes","Zone1FreeMinutes",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdZone1FreeSMS_1"), "Zone 1 Free SMS","Zone1FreeSMS",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdZone2Name_1"), "Zone 2 Name","Zone2Name",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdZone2FreeMinutes_1"), "Zone 2 Free Minutes","Zone2FreeMinutes",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdZone2FreeSMS_1"), "Zone 2 Free SMS","Zone2FreeSMS",1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdZone3Name_1"), "Zone 3 Name","Zone3Name",1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdZone3FreeMinutes_1"), "Zone 3 Free Minutes","Zone3FreeMinutes",1);
				break;
				case "step33": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdZone3FreeSMS_1"), "Zone 3 Free SMS","Zone3FreeSMS",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdFreeData_1"), "Free Data","FreeData",1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdFreeMTonnet_1"), "Free MT on-net","FreeMTonnet",1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdFreeMTSMSonnet_1"), "Free MT SMS on-net","FreeMTSMSonnet",1);
				break;
				/*case "step37": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdFreeMTothercalls_1"), "Free MT other calls","FreeMTothercalls",1);
				break;*/
				case "step37": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdFreeMTSMSother_1"), "Free MT SMS other","FreeMTSMSother",1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdOnnetMTBundleType_1"), "On-net MT Bundle Type","OnnetMTBundleType",1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdAutoRenewal_1"), "Auto Renewal","AutoRenewal",1);
				break;
				case "step40": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdBundleBalance_1"), "Bundle Balance","BundleBalance",1);
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdRoamUsage_1"), "Roam Usage","RoamUsage",1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdLocalRoamUsage_1"), "Local Roam Usage","LocalRoamUsage",1);
				break;
				case "step43": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("btnReset"), "RESET");
				break;
				case "step44": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Modify_Bundle("btnReset"), "RESET");
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("close_button"), "Subscriber Logout");
				break;
				case "step46": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Modify_Bundle("close_button"), "Subscriber Logout");
				break;
				case "step47": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void POST_DB_BUCKET_DETAILS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBCommonSelect("TYPE", "TABLE_NAME", "COLUMN_NAME", "CONDITION", "COLUMN_VALUE", "DAYS_TO_ADD", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_MODIFY_SUBS_BUNDLE(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 55;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Modify_Bundle("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("Bundle_Button"), "Bundle");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("Bundle_Button"), "Bundle");
				break;
				case "step9": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("ModifyBundle_Image"), "Modify bundle");
				break;
				case "step10": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("ModifyBundle_Image"), "Modify bundle");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("lstBundleCode"), "Bundle Code");
				break;
				case "step12": stepStatus[step] = waitUntilListLoads(online_TopUp.Modify_Bundle("lstBundleCode"), "Bundle Code");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.Modify_Bundle("lstBundleCode"), "Bundle Code","BundleCode",1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("lstOptionalMode"), "Service Type");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.Modify_Bundle("lstOptionalMode"), "Service Type","Service_Type",1);
				break;
				case "step16": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkCommomAllowance"), "Common Allowance");
				break;
				case "step17": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("txtCommomAllowance"), "Common Allowance");
				break;
				case "step18": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txtCommomAllowance"), "Common Allowance","Common_Allowance",1);
				break;
				case "step19": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("tdBundleName_1"), "Bundle Name");
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("chkbox_Offnet1"), "OffNet 1 Action");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_Offnet1"), "Offnet 1 Action");
				break;
				case "step22": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Offnet1_Voice"), "Offnet 1 Voice Allowances","Offnet1_VA",1);
				break;
				case "step23": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Offnet1_SMS"), "Offnet 1 SMS Allowances","Offnet1_SA",1);
				break;
				case "step24": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_Offnet2"), "Offnet 2 Action");
				break;
				case "step25": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Offnet2_Voice"), "Offnet 2 Voice Allowances","Offnet2_VA",1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Offnet2_SMS"), "Offnet 2 SMS Allowances","Offnet2_SA",1);
				break;
				case "step27": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_Offnet3"), "Offnet 3 Action");
				break;
				case "step28": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Offnet3_Voice"), "Offnet 3 Voice Allowances","Offnet3_VA",1);
				break;
				case "step29": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Offnet3_SMS"), "Offnet 3 SMS Allowances","Offnet3_SA",1);
				break;
				case "step30": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_Onnet"), "Onnet Action");
				break;
				case "step31": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Onnet_Voice"), "Onnet Voice Allowances","Onnet_VA",1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Onnet_SMS"), "Onnet SMS Allowances","Onnet_SA",1);
				break;
				case "step33": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_MTOnnet"), "MT Onnet Action");
				break;
				case "step34": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_MTOnnet_Voice"), "MT Onnet Voice Allowances"," MTOnnet_VA",1);
				break;
				case "step35": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_MTOnnet_SMS"), "MT Onnet SMS Allowances"," MTOnnet_SA",1);
				break;
				case "step36": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_MTOffnet"), "MTOffnet");
				break;
				case "step37": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_MTOffnet_Voice"), "MT Offnet Voice Allowances"," MTOffnet_VA",1);
				break;
				case "step38": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_MTOffnet_SMS"), "MT Offnet SMS Allowances"," MTOffnet_SA",1);
				break;
				case "step39": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_DataOnnet"), "Data Onnet");
				break;
				case "step40": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_DataOnnet"), "Data Onnet","DataOnnet_AIMB",1);
				break;
				case "step41": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_DataDomesticRoaming"), "Data Domestic Roaming");
				break;
				case "step42": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_DataDomesticRoaming"), "Data Domestic Roaming","DataDomesticRoaming_AIMB",1);
				break;
				case "step43": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_DataInternationalRoaming"), "Data International Roaming");
				break;
				case "step44": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_DataInternationalRoaming"), "Data International Roaming","DataInternationalRoaming_AIMB",1);
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("btnAdminApprove"), "APPROVE");
				break;
				case "step46": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Modify_Bundle("btnAdminApprove"), "APPROVE");
				break;
				case "step47": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("btnSubmit"), "Submit");
				break;
				case "step48": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Modify_Bundle("btnSubmit"), "Submit");
				break;
				case "step49": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("lblResponseMessage"), "Response Message");
				break;
				/*case "step50": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("lblResponseMessage"), "Response Message", "Response_Message", 1);
				break;*/
				case "step50": stepStatus[step] = WebElementResxKeyValueStaticCompare(online_TopUp.Modify_Bundle("lblResponseMessage"), "Response Message", "Automation_KeyName", 1);
				break;
				case "step51": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("btnReset"), "RESET");
				break;
				case "step52": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Modify_Bundle("btnReset"), "RESET");
				break;
				case "step53": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("close_button"), "Subscriber Logout");
				break;
				case "step54": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Modify_Bundle("close_button"), "Subscriber Logout");
				break;
				case "step55": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_APPROVAL_MODIFY_BUNDLE(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 58;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("pendingApproval_Body_Type"), "PendingApproval_Body");
				break;
				case "step3": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Modify_Bundle("linkBundleBucket"), "Bundle Bucket Link");
				break;
				case "step4": stepStatus[step] = waitUntilExist(online_TopUp.Pending_MSISDN(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"strPendingMSISDN","MSISDN",1), "MSISDN");
				break;
				case "step5": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Pending_MSISDN(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"strPendingMSISDN","MSISDN",1), "MSISDN");
				break;
				case "step6": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("lstBundleCode"), "Bundle Code");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("tdBundleName_1"), "Bundle Name");
				break;
				case "step8": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdBundleName_1"), "Bundle Name","BundleName",1);
				break;
				case "step9": stepStatus[step] = RRBSDateAndWebElementTextCompare(online_TopUp.Modify_Bundle("tdExpiryDate_1"),"Bundle_TableName", "Bundle_ColName", "Bundle_Condition", "Date_Format", "Expiry Date", 1);
				break;
				case "step10": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdOnnetZoneName_1"), "On-net Zone Name","OnnetZoneName",1);
				break;
				case "step11": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdOnnetMinutes_1"), "On-net Minutes","OnnetMinutes",1);
				break;
				case "step12": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdOnnetSMS_1"), "On-net SMS","OnnetSMS",1);
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdZone1Name_1"), "Zone 1 Name","Zone1Name",1);
				break;
				case "step14": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdZone1FreeMinutes_1"), "Zone 1 Free Minutes","Zone1FreeMinutes",1);
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdZone1FreeSMS_1"), "Zone 1 Free SMS","Zone1FreeSMS",1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdZone2Name_1"), "Zone 2 Name","Zone2Name",1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdZone2FreeMinutes_1"), "Zone 2 Free Minutes","Zone2FreeMinutes",1);
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdZone2FreeSMS_1"), "Zone 2 Free SMS","Zone2FreeSMS",1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdZone3Name_1"), "Zone 3 Name","Zone3Name",1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdZone3FreeMinutes_1"), "Zone 3 Free Minutes","Zone3FreeMinutes",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdZone3FreeSMS_1"), "Zone 3 Free SMS","Zone3FreeSMS",1);
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdFreeData_1"), "Free Data","FreeData",1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdFreeMTonnet_1"), "Free MT on-net","FreeMTonnet",1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdFreeMTSMSonnet_1"), "Free MT SMS on-net","FreeMTSMSonnet",1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdFreeMTothercalls_1"), "Free MT other calls","FreeMTothercalls",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdFreeMTSMSother_1"), "Free MT SMS other","FreeMTSMSother",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdOnnetMTBundleType_1"), "On-net MT Bundle Type","OnnetMTBundleType",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdAutoRenewal_1"), "Auto Renewal","AutoRenewal",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdBundleBalance_1"), "Bundle Balance","BundleBalance",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdRoamUsage_1"), "Roam Usage","RoamUsage",1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("tdLocalRoamUsage_1"), "Local Roam Usage","LocalRoamUsage",1);
				break;
				case "step32": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("chkbox_Offnet1"), "OffNet 1 Action");
				break;
				case "step33": stepStatus[step] = WebElementValueCompare(online_TopUp.Modify_Bundle("txt_Offnet1_Voice"), "Offnet 1 Voice Allowances","Offnet1_VA",1);
				break;
				case "step34": stepStatus[step] = WebElementValueCompare(online_TopUp.Modify_Bundle("txt_Offnet1_SMS"), "Offnet 1 SMS Allowances","Offnet1_SA",1);
				break;
				case "step35": stepStatus[step] = WebElementValueCompare(online_TopUp.Modify_Bundle("txt_Offnet2_Voice"), "Offnet 2 Voice Allowances","Offnet2_VA",1);
				break;
				case "step36": stepStatus[step] = WebElementValueCompare(online_TopUp.Modify_Bundle("txt_Offnet2_SMS"), "Offnet 2 SMS Allowances","Offnet2_SA",1);
				break;
				case "step37": stepStatus[step] = WebElementValueCompare(online_TopUp.Modify_Bundle("txt_Offnet3_Voice"), "Offnet 3 Voice Allowances","Offnet3_VA",1);
				break;
				case "step38": stepStatus[step] = WebElementValueCompare(online_TopUp.Modify_Bundle("txt_Offnet3_SMS"), "Offnet 3 SMS Allowances","Offnet3_SA",1);
				break;
				case "step39": stepStatus[step] = WebElementValueCompare(online_TopUp.Modify_Bundle("txt_Onnet_Voice"), "Onnet Voice Allowances","Onnet_VA",1);
				break;
				case "step40": stepStatus[step] = WebElementValueCompare(online_TopUp.Modify_Bundle("txt_Onnet_SMS"), "Onnet SMS Allowances","Onnet_SA",1);
				break;
				case "step41": stepStatus[step] = WebElementValueCompare(online_TopUp.Modify_Bundle("txt_MTOnnet_Voice"), "MT Onnet Voice Allowances"," MTOnnet_VA",1);
				break;
				case "step42": stepStatus[step] = WebElementValueCompare(online_TopUp.Modify_Bundle("txt_MTOnnet_SMS"), "MT Onnet SMS Allowances"," MTOnnet_SA",1);
				break;
				case "step43": stepStatus[step] = WebElementValueCompare(online_TopUp.Modify_Bundle("txt_MTOffnet_Voice"), "MT Offnet Voice Allowances"," MTOffnet_VA",1);
				break;
				case "step44": stepStatus[step] = WebElementValueCompare(online_TopUp.Modify_Bundle("txt_MTOffnet_SMS"), "MT Offnet SMS Allowances"," MTOffnet_SA",1);
				break;
				case "step45": stepStatus[step] = WebElementValueCompare(online_TopUp.Modify_Bundle("txt_DataOnnet"), "Data Onnet","DataOnnet_AIMB",1);
				break;
				case "step46": stepStatus[step] = WebElementValueCompare(online_TopUp.Modify_Bundle("txt_DataDomesticRoaming"), "Data Onnet","DataOnnet_AIMB",1);
				break;
				case "step47": stepStatus[step] = WebElementValueCompare(online_TopUp.Modify_Bundle("txt_DataInternationalRoaming"), "Data Onnet","DataOnnet_AIMB",1);
				break;
				case "step48": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("btnApproveInPending"), "APPROVE");
				break;
				case "step49": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Modify_Bundle("btnApproveInPending"), "APPROVE");
				break;
				case "step50": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("btnRejectInPending"), "REJECT");
				break;
				case "step51": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Modify_Bundle("btnRejectInPending"), "REJECT");
				break;
				case "step52": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("lblResponseMessage"), "Response Message");
				break;
				/*case "step53": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("lblResponseMessage"), "Response Message", "Response_Message", 1);
				break;*/
				case "step53": stepStatus[step] = WebElementResxKeyValueStaticCompare(online_TopUp.Modify_Bundle("lblResponseMessage"), "Response Message", "Automation_KeyName", 1);
				break;
				case "step54": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("btnReset"), "RESET");
				break;
				case "step55": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Modify_Bundle("btnReset"), "RESET");
				break;
				case "step56": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("close_button"), "Subscriber Logout");
				break;
				case "step57": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Modify_Bundle("close_button"), "Subscriber Logout");
				break;
				case "step58": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_MODIFY_BUNDLE_WITH_ALERT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 24;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Modify_Bundle("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("Bundle_Button"), "Bundle");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("Bundle_Button"), "Bundle");
				break;
				case "step9": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("ModifyBundle_Image"), "Modify bundle");
				break;
				case "step10": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("ModifyBundle_Image"), "Modify bundle");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("lstBundleCode"), "Bundle Code");
				break;
				case "step12": stepStatus[step] = waitUntilListLoads(online_TopUp.Modify_Bundle("lstBundleCode"), "Bundle Code");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.Modify_Bundle("lstBundleCode"), "Bundle Code","BundleCode",1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("lstOptionalMode"), "Service Type");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.Modify_Bundle("lstOptionalMode"), "Service Type","Service_Type",1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("btnAdminApprove"), "APPROVE");
				break;
				case "step17": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Modify_Bundle("btnAdminApprove"), "APPROVE");
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("AlertMessage"), "Alert Message");
				break;
				/*case "step19": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("AlertMessage"), "Alert Message", "Response_Message", 1);
				break;*/
				case "step19": stepStatus[step] = WebElementResxKeyValueStaticCompare(online_TopUp.Modify_Bundle("AlertMessage"), "Alert Message", "Automation_KeyName", 1);
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("btnReset"), "RESET");
				break;
				case "step21": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Modify_Bundle("btnReset"), "RESET");
				break;
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("close_button"), "Subscriber Logout");
				break;
				case "step23": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Modify_Bundle("close_button"), "Subscriber Logout");
				break;
				case "step24": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void VALIDATE_MODIFY_BUNDLE_FIELDS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 49;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Modify_Bundle("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("Bundle_Button"), "Bundle");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("Bundle_Button"), "Bundle");
				break;
				case "step9": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("ModifyBundle_Image"), "Modify bundle");
				break;
				case "step10": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("ModifyBundle_Image"), "Modify bundle");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("lstBundleCode"), "Bundle Code");
				break;
				case "step12": stepStatus[step] = waitUntilListLoads(online_TopUp.Modify_Bundle("lstBundleCode"), "Bundle Code");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.Modify_Bundle("lstBundleCode"), "Bundle Code","BundleCode",1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("lstOptionalMode"), "Service Type");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.Modify_Bundle("lstOptionalMode"), "Service Type","Service_Type",1);
				break;
				case "step16": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkCommomAllowance"), "Common Allowance");
				break;
				case "step17": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("txtCommomAllowance"), "Common Allowance");
				break;
				case "step18": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txtCommomAllowance"), "Common Allowance","Common_Allowance",1);
				break;
				case "step19": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("tdBundleName_1"), "Bundle Name");
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("chkbox_Offnet1"), "OffNet 1 Action");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_Offnet1"), "Offnet 1 Action");
				break;
				case "step22": stepStatus[step] = WebEditEnterValueAndCompareSame(online_TopUp.Modify_Bundle("txt_Offnet1_Voice"), "Offnet 1 Voice Allowances","Offnet1_VA","Offnet1_VA_Check",1);
				break;
				case "step23": stepStatus[step] = WebEditEnterValueAndCompareSame(online_TopUp.Modify_Bundle("txt_Offnet1_SMS"), "Offnet 1 SMS Allowances","Offnet1_SA","Offnet1_SA_Check",1);
				break;
				case "step24": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_Offnet2"), "Offnet 2 Action");
				break;
				case "step25": stepStatus[step] = WebEditEnterValueAndCompareSame(online_TopUp.Modify_Bundle("txt_Offnet2_Voice"), "Offnet 2 Voice Allowances","Offnet2_VA","Offnet2_VA_Check",1);
				break;
				case "step26": stepStatus[step] = WebEditEnterValueAndCompareSame(online_TopUp.Modify_Bundle("txt_Offnet2_SMS"), "Offnet 2 SMS Allowances","Offnet2_SA","Offnet2_SA_Check",1);
				break;
				case "step27": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_Offnet3"), "Offnet 3 Action");
				break;
				case "step28": stepStatus[step] = WebEditEnterValueAndCompareSame(online_TopUp.Modify_Bundle("txt_Offnet3_Voice"), "Offnet 3 Voice Allowances","Offnet3_VA","Offnet3_VA_Check",1);
				break;
				case "step29": stepStatus[step] = WebEditEnterValueAndCompareSame(online_TopUp.Modify_Bundle("txt_Offnet3_SMS"), "Offnet 3 SMS Allowances","Offnet3_SA","Offnet3_SA_Check",1);
				break;
				case "step30": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_Onnet"), "Onnet Action");
				break;
				case "step31": stepStatus[step] = WebEditEnterValueAndCompareSame(online_TopUp.Modify_Bundle("txt_Onnet_Voice"), "Onnet Voice Allowances","Onnet_VA","Onnet_VA_Check",1);
				break;
				case "step32": stepStatus[step] = WebEditEnterValueAndCompareSame(online_TopUp.Modify_Bundle("txt_Onnet_SMS"), "Onnet SMS Allowances","Onnet_SA","Onnet_SA_Check",1);
				break;
				case "step33": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_MTOnnet"), "MT Onnet Action");
				break;
				case "step34": stepStatus[step] = WebEditEnterValueAndCompareSame(online_TopUp.Modify_Bundle("txt_MTOnnet_Voice"), "MT Onnet Voice Allowances"," MTOnnet_VA","MTOnnet_VA_Check",1);
				break;
				case "step35": stepStatus[step] = WebEditEnterValueAndCompareSame(online_TopUp.Modify_Bundle("txt_MTOnnet_SMS"), "MT Onnet SMS Allowances"," MTOnnet_SA","MTOnnet_SA_Check",1);
				break;
				case "step36": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_MTOffnet"), "MT  Offnet");
				break;
				case "step37": stepStatus[step] = WebEditEnterValueAndCompareSame(online_TopUp.Modify_Bundle("txt_MTOffnet_Voice"), "MT Offnet Voice Allowances"," MTOffnet_VA","MTOffnet_VA_Check",1);
				break;
				case "step38": stepStatus[step] = WebEditEnterValueAndCompareSame(online_TopUp.Modify_Bundle("txt_MTOffnet_SMS"), "MT Offnet SMS Allowances"," MTOffnet_SA","MTOffnet_SA_Check",1);
				break;
				case "step39": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_DataOnnet"), "Data Onnet");
				break;
				case "step40": stepStatus[step] = WebEditEnterValueAndCompareSame(online_TopUp.Modify_Bundle("txt_DataOnnet"), "Data Onnet","DataOnnet_AIMB","DataOnnet_AIMB_Check",1);
				break;
				case "step41": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_DataDomesticRoaming"), "Data Domestic Roaming");
				break;
				case "step42": stepStatus[step] = WebEditEnterValueAndCompareSame(online_TopUp.Modify_Bundle("txt_DataDomesticRoaming"), "Data Domestic Roaming","DataDomesticRoaming_AIMB","DataDomesticRoaming_AIMB_Check",1);
				break;
				case "step43": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_DataInternationalRoaming"), "Data International Roaming");
				break;
				case "step44": stepStatus[step] = WebEditEnterValueAndCompareSame(online_TopUp.Modify_Bundle("txt_DataInternationalRoaming"), "Data International Roaming","DataInternationalRoaming_AIMB","DataInternationalRoaming_AIMB_Check",1);
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("btnReset"), "RESET");
				break;
				case "step46": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Modify_Bundle("btnReset"), "RESET");
				break;
				case "step47": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("close_button"), "Subscriber Logout");
				break;
				case "step48": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Modify_Bundle("close_button"), "Subscriber Logout");
				break;
				case "step49": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_MODIFY_BUNDLE_RESET(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 67;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Modify_Bundle("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("Bundle_Button"), "Bundle");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("Bundle_Button"), "Bundle");
				break;
				case "step9": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("ModifyBundle_Image"), "Modify bundle");
				break;
				case "step10": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("ModifyBundle_Image"), "Modify bundle");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("lstBundleCode"), "Bundle Code");
				break;
				case "step12": stepStatus[step] = waitUntilListLoads(online_TopUp.Modify_Bundle("lstBundleCode"), "Bundle Code");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.Modify_Bundle("lstBundleCode"), "Bundle Code","BundleCode",1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("lstOptionalMode"), "Service Type");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.Modify_Bundle("lstOptionalMode"), "Service Type","Service_Type",1);
				break;
				case "step16": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkCommomAllowance"), "Common Allowance");
				break;
				case "step17": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("txtCommomAllowance"), "Common Allowance");
				break;
				case "step18": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txtCommomAllowance"), "Common Allowance","Common_Allowance",1);
				break;
				case "step19": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("tdBundleName_1"), "Bundle Name");
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("chkbox_Offnet1"), "OffNet 1 Action");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_Offnet1"), "Offnet 1 Action");
				break;
				case "step22": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Offnet1_Voice"), "Offnet 1 Voice Allowances","Offnet1_VA",1);
				break;
				case "step23": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Offnet1_SMS"), "Offnet 1 SMS Allowances","Offnet1_SA",1);
				break;
				case "step24": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_Offnet2"), "Offnet 2 Action");
				break;
				case "step25": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Offnet2_Voice"), "Offnet 2 Voice Allowances","Offnet2_VA",1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Offnet2_SMS"), "Offnet 2 SMS Allowances","Offnet2_SA",1);
				break;
				case "step27": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_Offnet3"), "Offnet 3 Action");
				break;
				case "step28": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Offnet3_Voice"), "Offnet 3 Voice Allowances","Offnet3_VA",1);
				break;
				case "step29": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Offnet3_SMS"), "Offnet 3 SMS Allowances","Offnet3_SA",1);
				break;
				case "step30": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_Onnet"), "Onnet Action");
				break;
				case "step31": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Onnet_Voice"), "Onnet Voice Allowances","Onnet_VA",1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Onnet_SMS"), "Onnet SMS Allowances","Onnet_SA",1);
				break;
				case "step33": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_MTOnnet"), "MT Onnet Action");
				break;
				case "step34": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_MTOnnet_Voice"), "MT Onnet Voice Allowances"," MTOnnet_VA",1);
				break;
				case "step35": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_MTOnnet_SMS"), "MT Onnet SMS Allowances"," MTOnnet_SA",1);
				break;
				case "step36": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_MTOffnet"), "MTOffnet");
				break;
				case "step37": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_MTOffnet_Voice"), "MT Offnet Voice Allowances"," MTOffnet_VA",1);
				break;
				case "step38": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_MTOffnet_SMS"), "MT Offnet SMS Allowances"," MTOffnet_SA",1);
				break;
				case "step39": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_DataOnnet"), "Data Onnet");
				break;
				case "step40": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_DataOnnet"), "Data Onnet","DataOnnet_AIMB",1);
				break;
				case "step41": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_DataDomesticRoaming"), "Data Domestic Roaming");
				break;
				case "step42": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_DataDomesticRoaming"), "Data Domestic Roaming","DataDomesticRoaming_AIMB",1);
				break;
				case "step43": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_DataInternationalRoaming"), "Data International Roaming");
				break;
				case "step44": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_DataInternationalRoaming"), "Data International Roaming","DataInternationalRoaming_AIMB",1);
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("btnReset"), "RESET");
				break;
				case "step46": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Modify_Bundle("btnReset"), "RESET");
				break;
				case "step47": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("tdBundleName_1"), "Bundle Name");
				break;
				case "step48": stepStatus[step] = WebListSelectedValue(online_TopUp.Modify_Bundle("lstBundleCode"), "Bundle Code","BundleName_RESET",1);
				break;
				case "step49": stepStatus[step] = WebListSelectedValue(online_TopUp.Modify_Bundle("lstOptionalMode"), "Service Type","Service_Type_RESET",1);
				break;
				case "step50": stepStatus[step] = WebElementAttributeValueCompare(online_TopUp.Modify_Bundle("txt_Offnet1_Voice"), "Offnet 1 Voice Allowances","Attribute_Name","Attribute_Value",1);
				break;
				case "step51": stepStatus[step] = WebElementAttributeValueCompare(online_TopUp.Modify_Bundle("txt_Offnet1_SMS"), "Offnet 1 SMS Allowances","Attribute_Name","Attribute_Value",1);
				break;
				case "step52": stepStatus[step] = WebElementAttributeValueCompare(online_TopUp.Modify_Bundle("txt_Offnet2_Voice"), "Offnet 2 Voice Allowances","Attribute_Name","Attribute_Value",1);
				break;
				case "step53": stepStatus[step] = WebElementAttributeValueCompare(online_TopUp.Modify_Bundle("txt_Offnet2_SMS"), "Offnet 2 SMS Allowances","Attribute_Name","Attribute_Value",1);
				break;
				case "step54": stepStatus[step] = WebElementAttributeValueCompare(online_TopUp.Modify_Bundle("txt_Offnet3_Voice"), "Offnet 3 Voice Allowances","Attribute_Name","Attribute_Value",1);
				break;
				case "step55": stepStatus[step] = WebElementAttributeValueCompare(online_TopUp.Modify_Bundle("txt_Offnet3_SMS"), "Offnet 3 SMS Allowances","Attribute_Name","Attribute_Value",1);
				break;
				case "step56": stepStatus[step] = WebElementAttributeValueCompare(online_TopUp.Modify_Bundle("txt_Onnet_Voice"), "Onnet Voice Allowances","Attribute_Name","Attribute_Value",1);
				break;
				case "step57": stepStatus[step] = WebElementAttributeValueCompare(online_TopUp.Modify_Bundle("txt_Onnet_SMS"), "Onnet SMS Allowances","Attribute_Name","Attribute_Value",1);
				break;
				case "step58": stepStatus[step] = WebElementAttributeValueCompare(online_TopUp.Modify_Bundle("txt_MTOnnet_Voice"), "MT Onnet Voice Allowances","Attribute_Name","Attribute_Value",1);
				break;
				case "step59": stepStatus[step] = WebElementAttributeValueCompare(online_TopUp.Modify_Bundle("txt_MTOnnet_SMS"), "MT Onnet SMS Allowances","Attribute_Name","Attribute_Value",1);
				break;
				case "step60": stepStatus[step] = WebElementAttributeValueCompare(online_TopUp.Modify_Bundle("txt_MTOffnet_Voice"), "MT Offnet Voice Allowances","Attribute_Name","Attribute_Value",1);
				break;
				case "step61": stepStatus[step] = WebElementAttributeValueCompare(online_TopUp.Modify_Bundle("txt_MTOffnet_SMS"), "MT Offnet SMS Allowances","Attribute_Name","Attribute_Value",1);
				break;
				case "step62": stepStatus[step] = WebElementAttributeValueCompare(online_TopUp.Modify_Bundle("txt_DataOnnet"), "Data Onnet","Attribute_Name","Attribute_Value",1);
				break;
				case "step63": stepStatus[step] = WebElementAttributeValueCompare(online_TopUp.Modify_Bundle("txt_DataDomesticRoaming"), "Data Domestic Roaming","Attribute_Name","Attribute_Value",1);
				break;
				case "step64": stepStatus[step] = WebElementAttributeValueCompare(online_TopUp.Modify_Bundle("txt_DataInternationalRoaming"), "Data International Roaming","Attribute_Name","Attribute_Value",1);
				break;
				case "step65": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("close_button"), "Subscriber Logout");
				break;
				case "step66": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Modify_Bundle("close_button"), "Subscriber Logout");
				break;
				case "step67": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_MODIFY_BUNDLE_WITH_DATE(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 61;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Modify_Bundle("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("Bundle_Button"), "Bundle");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("Bundle_Button"), "Bundle");
				break;
				case "step9": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("ModifyBundle_Image"), "Modify bundle");
				break;
				case "step10": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("ModifyBundle_Image"), "Modify bundle");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("lstBundleCode"), "Bundle Code");
				break;
				case "step12": stepStatus[step] = waitUntilListLoads(online_TopUp.Modify_Bundle("lstBundleCode"), "Bundle Code");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.Modify_Bundle("lstBundleCode"), "Bundle Code","BundleCode",1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("lstOptionalMode"), "Service Type");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.Modify_Bundle("lstOptionalMode"), "Service Type","Service_Type",1);
				break;
				case "step16": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkCommomAllowance"), "Common Allowance");
				break;
				case "step17": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("txtCommomAllowance"), "Common Allowance");
				break;
				case "step18": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txtCommomAllowance"), "Common Allowance","Common_Allowance",1);
				break;
				case "step19": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("tdBundleName_1"), "Bundle Name");
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("tdExpiryDate_1"), "Expiry Date");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("tdExpiryDate_1"), "Expiry Date");
				break;
				case "step22": stepStatus[step] = VerifyDateModalPopupPresent("Popup");
				break;
				case "step23": stepStatus[step] = javascriptWebElementClick(online_TopUp.Modify_Bundle("txtExpiryDate"), "Modal Expiry Date");
				break;
				case "step24": stepStatus[step] = JavaScriptWebEditEnterText(online_TopUp.Modify_Bundle("txtExpiryDate"), "Expiry Date","Expiry_Date",1);
				break;
				case "step25": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("btnExpireSubmit"), "Submit");
				break;
				case "step26": stepStatus[step] = javascriptWebElementClick(online_TopUp.Modify_Bundle("btnExpireSubmit"), "Submit");
				break;
				case "step27": stepStatus[step] = PerformAction_doubleClick(online_TopUp.Modify_Bundle("labelVoiceSMS"), "Voice and SMS");
				break;
				case "step28": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("chkbox_Offnet1"), "Offnet 1 Action");
				break;
				case "step29": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_Offnet1"), "Offnet 1 Action");
				break;
				case "step30": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Offnet1_Voice"), "Offnet 1 Voice Allowances","Offnet1_VA",1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Offnet1_SMS"), "Offnet 1 SMS Allowances","Offnet1_SA",1);
				break;
				case "step32": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_Offnet2"), "Offnet 2 Action");
				break;
				case "step33": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Offnet2_Voice"), "Offnet 2 Voice Allowances","Offnet2_VA",1);
				break;
				case "step34": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Offnet2_SMS"), "Offnet 2 SMS Allowances","Offnet2_SA",1);
				break;
				case "step35": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_Offnet3"), "Offnet 3 Action");
				break;
				case "step36": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Offnet3_Voice"), "Offnet 3 Voice Allowances","Offnet3_VA",1);
				break;
				case "step37": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Offnet3_SMS"), "Offnet 3 SMS Allowances","Offnet3_SA",1);
				break;
				case "step38": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_Onnet"), "Onnet Action");
				break;
				case "step39": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Onnet_Voice"), "Onnet Voice Allowances","Onnet_VA",1);
				break;
				case "step40": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_Onnet_SMS"), "Onnet SMS Allowances","Onnet_SA",1);
				break;
				case "step41": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_MTOnnet"), "MT Onnet Action");
				break;
				case "step42": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_MTOnnet_Voice"), "MT Onnet Voice Allowances"," MTOnnet_VA",1);
				break;
				case "step43": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_MTOnnet_SMS"), "MT Onnet SMS Allowances"," MTOnnet_SA",1);
				break;
				case "step44": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_MTOffnet"), "MTOffnet");
				break;
				case "step45": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_MTOffnet_Voice"), "MT Offnet Voice Allowances"," MTOffnet_VA",1);
				break;
				case "step46": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_MTOffnet_SMS"), "MT Offnet SMS Allowances"," MTOffnet_SA",1);
				break;
				case "step47": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_DataOnnet"), "Data Onnet");
				break;
				case "step48": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_DataOnnet"), "Data Onnet","DataOnnet_AIMB",1);
				break;
				case "step49": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_DataDomesticRoaming"), "Data Domestic Roaming");
				break;
				case "step50": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_DataDomesticRoaming"), "Data Domestic Roaming","DataDomesticRoaming_AIMB",1);
				break;
				case "step51": stepStatus[step] = WebElementClick(online_TopUp.Modify_Bundle("chkbox_DataInternationalRoaming"), "Data International Roaming");
				break;
				case "step52": stepStatus[step] = WebEditEnterText(online_TopUp.Modify_Bundle("txt_DataInternationalRoaming"), "Data International Roaming","DataInternationalRoaming_AIMB",1);
				break;
				case "step53": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("btnAdminApprove"), "APPROVE");
				break;
				case "step54": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Modify_Bundle("btnAdminApprove"), "APPROVE");
				break;
				case "step55": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("lblResponseMessage"), "Response Message");
				break;
				/*case "step56": stepStatus[step] = WebElementTextCompare(online_TopUp.Modify_Bundle("lblResponseMessage"), "Response Message", "Response_Message", 1);
				break;*/
				case "step56": stepStatus[step] = WebElementResxKeyValueStaticCompare(online_TopUp.Modify_Bundle("lblResponseMessage"), "Response Message", "Automation_KeyName", 1);
				break;
				case "step57": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("btnReset"), "RESET");
				break;
				case "step58": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Modify_Bundle("btnReset"), "RESET");
				break;
				case "step59": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("close_button"), "Subscriber Logout");
				break;
				case "step60": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.Modify_Bundle("close_button"), "Subscriber Logout");
				break;
				case "step61": stepStatus[step] = waitUntilExist(online_TopUp.Modify_Bundle("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void ESHOP_SQL_UPDATE_DELETE(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = ESHOPDBCommonPreCondition("ACTION","TABLE_NAME", "COLUMN_NAME", "COLUMN_VALUE", "CONDITION", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void ESHOP_SQL_UPDATE_DELETE_2(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = ESHOPDBCommonPreCondition("ACTION","TABLE_NAME", "COLUMN_NAME", "COLUMN_VALUE", "CONDITION", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_TOPUPWITHBUNDLE_AIO_CC(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 94;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtAllinoneAmount"), "Topup Amount");
				break;
				case "step12": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("txtAllinoneAmount"), "Topup Amount","TopupAmount",1);
				break;
				case "step13": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Topup Submit");
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Topup Type", "View_Topup",1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "Topup SimPlan", "View_Amount",1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "Topup BundleType", "View_Empty",1);
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "Topup AutoRenewal", "View_Empty",1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "Topup NoofMonths", "View_Empty",1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "Topup OriginalPrice", "View_TopupOriginalPrice",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "Topup DiscountPrice", "View_TopupDiscountPrice",1);
				break;
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step23": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step24": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step25": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step26": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step27": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step28": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step29": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step30": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step31": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_2"), "Type", "View_Type",1);
				break;
				case "step33": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_2"), "SimPlan", "View_SimPlan",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_2"), "BundleType", "View_BundleType",1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_2"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_2"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				case "step39": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step40": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step41": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("rbdNewCard"), "Payment Using", "New Card");
				break;
				case "step42": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstcardType"), "CardType Dropdown");
				break;
				case "step43": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstcardType"), "CardType Dropdown", "CardType", 1);
				break;
				case "step44": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtNameOncard"), "Card Name");
				break;
				case "step45": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtNameOncard"), "Card Name", "CardName", 1);
				break;
				case "step46": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("paymentCRM_cardNumber1"), "Card 1st 4 Number", "Card_Number1", 1);
				break;
				case "step47": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("paymentCRM_cardNumber2"), "Card 2nd 4 Number", "Card_Number2", 1);
				break;
				case "step48": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("paymentCRM_cardNumber3"), "Card 3rd 4 Number", "Card_Number3", 1);
				break;
				case "step49": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("paymentCRM_cardNumber4"), "Card 4th 4 Number", "Card_Number4", 1);
				break;
				case "step50": stepStatus[step] = javaScriptDatePicker(online_TopUp.AllInOne_TopUp_Page("paymentCRM_expiryDate"), "Expiry Date", "Expiry_Date", 1);
				break;
				case "step51": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("paymentCRM_cvvNumber"), "CVV Number");
				break;
				case "step52": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("paymentCRM_cvvNumber"), "CVV Number", "CVV_Number", 1);
				break;
				case "step53": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step55": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtpostCode"), "Postcode", "Postcode", 1);
				break;
				case "step56": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconAddressSearch"), "Search Icon");
				break;
				case "step57": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step58": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","Address",1);
				break;
				case "step59": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step60": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House Number");
				break;
				case "step61": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step62": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step63": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step64": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step65": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step66": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Topup Type", "Submit_Topup",1);
				break;
				case "step67": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "Topup SimPlan", "Submit_Amount",1);
				break;
				case "step68": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "Topup BundleType", "View_Empty",1);
				break;
				case "step69": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "Topup AutoRenewal", "View_Empty",1);
				break;
				case "step70": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "Topup NoofMonths", "View_Empty",1);
				break;
				case "step71": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "Topup OriginalPrice", "Submit_TopupOriginalPrice",1);
				break;
				case "step72": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "Topup DiscountPrice", "Submit_TopupDiscountPrice",1);
				break;
				case "step73": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_2"), "Type", "View_Type",1);
				break;
				case "step74": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_2"), "SimPlan", "View_SimPlan",1);
				break;
				case "step75": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_2"), "BundleType", "View_BundleType",1);
				break;
				case "step76": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step77": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_2"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step78": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_2"), "OriginalPrice", "Submit_OriginalPrice",1);
				break;
				case "step79": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_2"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				case "step80": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step81": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				case "step82": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step83": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step84": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step85": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step86": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneMSISDN"), "Response_MSISDN","Response_MSISDN",1);
				break;
				case "step87": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneAmount"), "Response_Amount","Response_Amount",1);
				break;
				case "step88": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "ReferenceNumber","ReferenceNumber",1);
				break;
				case "step89": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "ReferenceNumber","EnvReferenceNumber",1);
				break;
				case "step90": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "TransactionNumber","TransactionNumber",1);
				break;
				case "step91": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "TransactionNumber","EnvTransactionNumber",1);
				break;
				case "step92": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step93": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step94": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void TOPUP_SELECT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLAllSelect("TYPE", "TABLE_NAME", "COLUMN_NAME", "CONDITION", "COLUMN_VALUE","DAYS_TO_ADD","ENVVARIABLE", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void ESHOP_SELECT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = EShopSQLAllSelect("TYPE", "TABLE_NAME", "COLUMN_NAME", "CONDITION", "COLUMN_VALUE","DAYS_TO_ADD","ENVVARIABLE", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void ESHOP_GATEWAY_SELECT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = EShopSQLAllSelect("TYPE", "TABLE_NAME", "COLUMN_NAME", "CONDITION", "COLUMN_VALUE","DAYS_TO_ADD","ENVVARIABLE", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_BUNDLE_PURCHASE_PRECON(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 32;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step12": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step13": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step14": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step15": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step16": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step17": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step18": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step19": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step20": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step21": stepStatus[step] = sleepForFunction();
				break;
				case "step22": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Select","Select_DD",1);
				break;
				case "step23": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step24": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step25": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step26": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step27": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step28": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step29": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step30": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step31": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step32": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_CHANGE_PLAN_USA(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 23;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(uSA_Pages.ChangePlan("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(uSA_Pages.ChangePlan("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("Bundle_Icon"), "Bundle Icon");
				break;
				case "step8": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("Bundle_Icon"), "Bundle Icon");
				break;
				case "step9": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("ChangePlan_Icon"), "Change Plan Icon");
				break;
				case "step10": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("disabledcurrentPlan"), "Current Plan");
				break;
				/*case "step11": stepStatus[step] = WebElementValueCompare(uSA_Pages.ChangePlan("currentPlan"), "Current Plan","Current_Plan",1);
				break;*/
				case "step11": stepStatus[step] = WebElementValueCompare(uSA_Pages.ChangePlan("disabledcurrentPlan"), "Current Plan","Current_Plan",1);
				break;
				case "step12": stepStatus[step] = WebListSelect(uSA_Pages.ChangePlan("ddlnewPlan"), "Required Plan", "Required_Plan", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(uSA_Pages.ChangePlan("reason"), "Reason", "Reason", 1);
				break;
				//Submit Button CLick by Agent
				case "step14": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("btnSubmit"), "Submit");
				break;
				case "step15": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("btnSubmit"), "Submit");
				break;
				//Submit Button CLick for Admin
				case "step16": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("btnChangeplanAccept"), "Approve");
				break;
				case "step17": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("btnChangeplanAccept"), "Approve");
				break;
				case "step18": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("responseMessage"), "Response Message");
				break;
				/*case "step19": stepStatus[step] = WebElementTextCompare(uSA_Pages.ChangePlan("responseMessage"), "Response Message","ResponseMessage",1);
				break;*/
				case "step19": stepStatus[step] = WebElementResxKeyValueStaticCompare(uSA_Pages.ChangePlan("responseMessage"), "Response Message", "Automation_KeyName", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("btnChangeplanReset"), "Reset");
				break;
				case "step21": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("close_button"), "Subscriber Logout");
				break;
				case "step22": stepStatus[step] = PerformAction_MoveToElementAndClick(uSA_Pages.ChangePlan("close_button"), "Subscriber Logout");
				break;
				case "step23": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void POST_PLAN_CHANGE_SELECT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLAllSelect("TYPE", "TABLE_NAME", "COLUMN_NAME", "CONDITION", "COLUMN_VALUE","DAYS_TO_ADD","ENVVARIABLE", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void POST_SUBS_PROFILE_SELECT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = RRBSAllSelect("TYPE", "TABLE_NAME", "COLUMN_NAME", "CONDITION", "COLUMN_VALUE","DAYS_TO_ADD","ENVVARIABLE", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DISABLE_CHANGE_PLAN_USA(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 16;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(uSA_Pages.ChangePlan("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(uSA_Pages.ChangePlan("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("Bundle_Icon"), "Bundle Icon");
				break;
				case "step8": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("Bundle_Icon"), "Bundle Icon");
				break;
				case "step9": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("ChangePlan_Icon"), "Change Plan Icon");
				break;
				case "step10": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("disabledcurrentPlan"), "Current Plan");
				break;
				/*case "step11": stepStatus[step] = WebElementValueCompare(uSA_Pages.ChangePlan("currentPlan"), "Current Plan","Current_Plan",1);
				break;*/
				case "step11": stepStatus[step] = WebElementValueCompare(uSA_Pages.ChangePlan("disabledcurrentPlan"), "Current Plan","Current_Plan",1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("disabledMessage"), "Disable Plan Change");
				break;
				/*case "step13": stepStatus[step] = WebElementTextCompare(uSA_Pages.ChangePlan("disabledMessage"), "Disable Plan Change","Disable_Message",1);
				break;*/
				case "step13": stepStatus[step] = WebElementResxKeyValueStaticCompare(uSA_Pages.ChangePlan("disabledMessage"), "Disable Plan Change", "Automation_KeyName", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("close_button"), "Subscriber Logout");
				break;
				case "step15": stepStatus[step] = PerformAction_MoveToElementAndClick(uSA_Pages.ChangePlan("close_button"), "Subscriber Logout");
				break;
				case "step16": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void CHANGE_PLAN_APPROVAL_USA(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 17;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("pendingApproval_Body_Type"), "PendingApproval_Body");
				break;
				case "step3": stepStatus[step] = PerformAction_MoveToElementAndClick(uSA_Pages.ChangePlan("linkChangePlan"), "Change Plan Link");
				break;
				case "step4": stepStatus[step] = waitUntilExist(uSA_Pages.Pending_MSISDN(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"strPendingMSISDN","MSISDN",1), "MSISDN");
				break;
				case "step5": stepStatus[step] = PerformAction_MoveToElementAndClick(uSA_Pages.Pending_MSISDN(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"strPendingMSISDN","MSISDN",1), "MSISDN");
				break;
				case "step6": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("disabledcurrentPlan"), "Current Plan");
				break;
				case "step7": stepStatus[step] = WebElementValueCompare(uSA_Pages.ChangePlan("disabledcurrentPlan"), "Current Plan","Current_Plan",1);
				break;
				case "step8": stepStatus[step] = WebListSelectedOptionCompare(uSA_Pages.ChangePlan("ddlnewPlan"), "Required Plan","Required_Plan",1);
				break;
				case "step9": stepStatus[step] = WebElementValueCompare(uSA_Pages.ChangePlan("reason"), "Reason","Reason",1);
				break;
				case "step10": stepStatus[step] = deleteLogFile("Location","Log_FileName", 1);
				break;
				//Approve Button 
				case "step11": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("btnChangeplanApprove"), "Approve");
				break;
				case "step12": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("btnChangeplanApprove"), "Approve");
				break;
				case "step13": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("responseMessage"), "Response Message");
				break;
				/*case "step14": stepStatus[step] = WebElementTextCompare(uSA_Pages.ChangePlan("responseMessage"), "Response Message","ResponseMessage",1);
				break;*/
				case "step14": stepStatus[step] = WebElementResxKeyValueStaticCompare(uSA_Pages.ChangePlan("responseMessage"), "Response Message", "Automation_KeyName", 1);
				break;
				case "step15": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("close_button"), "Subscriber Logout");
				break;
				case "step16": stepStatus[step] = PerformAction_MoveToElementAndClick(uSA_Pages.ChangePlan("close_button"), "Subscriber Logout");
				break;
				case "step17": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void CHANGE_PLAN_REJECT_USA(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 21;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("pendingApproval_Body_Type"), "PendingApproval_Body");
				break;
				case "step3": stepStatus[step] = PerformAction_MoveToElementAndClick(uSA_Pages.ChangePlan("linkChangePlan"), "Change Plan Link");
				break;
				case "step4": stepStatus[step] = waitUntilExist(uSA_Pages.Pending_MSISDN(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"strPendingMSISDN","MSISDN",1), "MSISDN");
				break;
				case "step5": stepStatus[step] = PerformAction_MoveToElementAndClick(uSA_Pages.Pending_MSISDN(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"strPendingMSISDN","MSISDN",1), "MSISDN");
				break;
				case "step6": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("disabledcurrentPlan"), "Current Plan");
				break;
				case "step7": stepStatus[step] = WebElementValueCompare(uSA_Pages.ChangePlan("disabledcurrentPlan"), "Current Plan","Current_Plan",1);
				break;
				case "step8": stepStatus[step] = WebListSelectedOptionCompare(uSA_Pages.ChangePlan("ddlnewPlan"), "Required Plan","Required_Plan",1);
				break;
				case "step9": stepStatus[step] = WebElementValueCompare(uSA_Pages.ChangePlan("reason"), "Reason","Reason",1);
				break;
				case "step10": stepStatus[step] = deleteLogFile("Location","Log_FileName", 1);
				break;
				//Reject Button 
				case "step11": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("btnChangeplanReject"), "Reject");
				break;
				case "step12": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("btnChangeplanReject"), "Reject");
				break;
				//Reject Reason Text Box 
				case "step13": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("rejectReason_Id"), "Reject Reason");
				break;
				case "step14": stepStatus[step] = WebEditEnterText(uSA_Pages.ChangePlan("rejectReason_Id"), "Reject Reason","Reject_Reason",1);
				break;
				//Reject Button 
				case "step15": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("btnChangeplanReject"), "Reject");
				break;
				case "step16": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("btnChangeplanReject"), "Reject");
				break;
				case "step17": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("responseMessage"), "Response Message");
				break;
				/*case "step18": stepStatus[step] = WebElementTextCompare(uSA_Pages.ChangePlan("responseMessage"), "Response Message","ResponseMessage",1);
				break;*/
				case "step18": stepStatus[step] = WebElementResxKeyValueStaticCompare(uSA_Pages.ChangePlan("responseMessage"), "Response Message", "Automation_KeyName", 1);
				break;
				case "step19": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("close_button"), "Subscriber Logout");
				break;
				case "step20": stepStatus[step] = PerformAction_MoveToElementAndClick(uSA_Pages.ChangePlan("close_button"), "Subscriber Logout");
				break;
				case "step21": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void POST_PLAN_CHANGE_NOT_EXIST(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBCheckValueNotExist("TABLE_NAME", "COLUMN_NAME", "CONDITION", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void POST_PLAN_CHANGE_ROWS_COUNT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBCheckNoOfRowsExist("TABLE_NAME", "COLUMN_NAME", "CONDITION","NO_OF_ROWS", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void VALIDATE_CHANGE_PLAN_USA(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 26;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(uSA_Pages.ChangePlan("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(uSA_Pages.ChangePlan("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("Bundle_Icon"), "Bundle Icon");
				break;
				case "step8": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("Bundle_Icon"), "Bundle Icon");
				break;
				case "step9": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("ChangePlan_Icon"), "Change Plan Icon");
				break;
				case "step10": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("disabledcurrentPlan"), "Current Plan");
				break;
				case "step11": stepStatus[step] = WebElementValueCompare(uSA_Pages.ChangePlan("disabledcurrentPlan"), "Current Plan","Current_Plan",1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(uSA_Pages.ChangePlan("reason"), "Reason", "Reason", 1);
				break;
				//Submit Button CLick by Agent
				case "step13": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("btnSubmit"), "Submit");
				break;
				case "step14": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("btnSubmit"), "Submit");
				break;
				//Submit Button CLick for Admin
				case "step15": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("btnChangeplanAccept"), "Approve");
				break;
				case "step16": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("btnChangeplanAccept"), "Approve");
				break;
				case "step17": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("responseMessage"), "Response Message");
				break;
				/*case "step18": stepStatus[step] = WebElementTextCompare(uSA_Pages.ChangePlan("responseMessage"), "Response Message","ResponseMessage",1);
				break;*/
				case "step18": stepStatus[step] = WebElementResxKeyValueStaticCompare(uSA_Pages.ChangePlan("responseMessage"), "Response Message", "Automation_KeyName", 1);
				break;
				case "step19": stepStatus[step] = WebListSelect(uSA_Pages.ChangePlan("ddlnewPlan"), "Required Plan", "Required_Plan", 1);
				break;
				case "step20": stepStatus[step] = WebEditEnterText(uSA_Pages.ChangePlan("reason"), "Reason", "Reason", 1);
				break;
				case "step21": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("btnChangeplanReset"), "Reset");
				break;
				case "step22": stepStatus[step] = WebListSelectedOptionCompare(uSA_Pages.ChangePlan("ddlnewPlan"), "Required Plan","Required_Plan_RESET",1);
				break;
				case "step23": stepStatus[step] = WebElementValueCompare(uSA_Pages.ChangePlan("reason"), "Reason","Reason_RESET",1);
				break;
				case "step24": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("close_button"), "Subscriber Logout");
				break;
				case "step25": stepStatus[step] = PerformAction_MoveToElementAndClick(uSA_Pages.ChangePlan("close_button"), "Subscriber Logout");
				break;
				case "step26": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_CHANGE_PLAN_USA_1(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 23;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(uSA_Pages.ChangePlan("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(uSA_Pages.ChangePlan("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("Bundle_Icon"), "Bundle Icon");
				break;
				case "step8": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("Bundle_Icon"), "Bundle Icon");
				break;
				case "step9": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("ChangePlan_Icon"), "Change Plan Icon");
				break;
				case "step10": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("disabledcurrentPlan"), "Current Plan");
				break;
				/*case "step11": stepStatus[step] = WebElementValueCompare(uSA_Pages.ChangePlan("currentPlan"), "Current Plan","Current_Plan",1);
				break;*/
				case "step11": stepStatus[step] = WebElementValueCompare(uSA_Pages.ChangePlan("disabledcurrentPlan"), "Current Plan","Current_Plan",1);
				break;
				case "step12": stepStatus[step] = WebListSelect(uSA_Pages.ChangePlan("ddlnewPlan"), "Required Plan", "Required_Plan", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(uSA_Pages.ChangePlan("reason"), "Reason", "Reason", 1);
				break;
				//Submit Button CLick by Agent
				case "step14": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("btnSubmit"), "Submit");
				break;
				case "step15": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("btnSubmit"), "Submit");
				break;
				//Submit Button CLick for Admin
				case "step16": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("btnChangeplanAccept"), "Approve");
				break;
				case "step17": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("btnChangeplanAccept"), "Approve");
				break;
				case "step18": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("responseMessage"), "Response Message");
				break;
				/*case "step19": stepStatus[step] = WebElementTextCompare(uSA_Pages.ChangePlan("responseMessage"), "Response Message","ResponseMessage",1);
				break;*/
				case "step19": stepStatus[step] = WebElementResxKeyValueStaticCompare(uSA_Pages.ChangePlan("responseMessage"), "Response Message", "Automation_KeyName", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("btnChangeplanReset"), "Reset");
				break;
				case "step21": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("close_button"), "Subscriber Logout");
				break;
				case "step22": stepStatus[step] = PerformAction_MoveToElementAndClick(uSA_Pages.ChangePlan("close_button"), "Subscriber Logout");
				break;
				case "step23": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void VALIDATE_SERVICE_LOG_FILES(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = WaitUntilPatternAppearsInLogFiles("PATH_FROM_ENV", "START_FILE_NAME", "END_FILE_NAME","LINE_CONTENT", "PATTERN_TO_CHECK","ENV_VARIABLE", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void CHANGE_PLAN_USA_SUBS_VIEW(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 11;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(uSA_Pages.ChangePlan("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(uSA_Pages.ChangePlan("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("DOB_Icon"), "Subscriber full view");
				break;
				case "step6": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("DOB_Icon"), "Subscriber full view");
				break;
				case "step7": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("lbl_Plan"), "Plan");
				break;
				case "step8": stepStatus[step] = WebElementTextCompare(uSA_Pages.ChangePlan("lbl_Plan"), "Plan", "Plan", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("close_button"), "Subscriber Logout");
				break;
				case "step10": stepStatus[step] = PerformAction_MoveToElementAndClick(uSA_Pages.ChangePlan("close_button"), "Subscriber Logout");
				break;
				case "step11": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_TOPUP_AIO_NO_GAF(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 76;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown","Topup_Amount",1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step13": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step23": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step24": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("newCard_rdButton"), "Payment Using", "New Card");
				break;
				case "step25": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown");
				break;
				case "step26": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown", "CardType", 1);
				break;
				case "step27": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name");
				break;
				case "step28": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name", "CardName", 1);
				break;
				case "step29": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber1_TextBox"), "Card 1st 4 Number", "Card_Number1", 1);
				break;
				case "step30": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber2_TextBox"), "Card 2nd 4 Number", "Card_Number2", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber3_TextBox"), "Card 3rd 4 Number", "Card_Number3", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber4_TextBox"), "Card 4th 4 Number", "Card_Number4", 1);
				break;
				case "step33": stepStatus[step] = javaScriptDatePicker(online_TopUp.AllInOne_TopUp_Page("expiryDate_TextBoxJS"), "Expiry Date", "Expiry_Date", 1);
				break;
				case "step34": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number");
				break;
				case "step35": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number", "CVV_Number", 1);
				break;
				case "step36": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email");
				break;
				case "step37": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step39": stepStatus[step] = WebEditClickAndEnterText(online_TopUp.AllInOne_TopUp_Page("postcode_TextBox"), "PostCode", "PostCode", 1);
				break;
				case "step40": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("searchIcon_Button"), "Search Button");
				break;
				case "step41": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("modal_Popup"), "Popup");
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("modal_Popup"), "Popup","AddressMessage_Content",1);
				break;
				case "step43": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("modal_btnClose"), "Close Button");
				break;
				case "step44": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("modal_btnClose"), "Close Button");
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("houseNo_Textbox"), "House Number");
				break;
				case "step46": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("houseNo_Textbox"), "House No.", "House_No", 1);
				break;
				case "step47": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("streetName_Textbox"), "Street Name", "Street_Name", 1);
				break;
				case "step48": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cityName_Textbox"), "City Name", "City_Name", 1);
				break;
				case "step49": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("apartmentNo_Textbox"), "Appartment No.", "Apartment_No", 1);
				break;
				case "step50": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step51": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step52": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step53": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step54": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step61": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				case "step62": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step63": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				case "step64": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step65": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step66": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step67": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step68": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneMSISDN"), "MSISDN","Confirm_MSISDN",1);
				break;
				case "step69": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneAmount"), "Amount","Confirm_Amount",1);
				break;
				case "step70": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step71": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step72": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step73": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step74": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step75": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step76": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void POST_MVNO_SELECT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLAllSelect("TYPE", "TABLE_NAME", "COLUMN_NAME", "CONDITION", "COLUMN_VALUE","DAYS_TO_ADD","ENVVARIABLE", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PRECONDITION_UPDATE_CDRMASTER(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBPastDateUpdateCDR("Table_Name","Column_Name","Condition","-",0,"Envvar_ReportDB_Date",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PRECONDITION_UPDATE_EDRHISTORY(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBDateUpdateStoreinEnvVar("Table_Name_EDR","Column_Name_CDR_TimeStamp","Condition_EDR","Expected_Type_MONTHDB","Cdr_Year_Day","Call_date_Day","",0,"Env_Call_date",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void GET_USA_CHANGE_PLAN_HISTORY(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 14;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(uSA_Pages.ChangePlan("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(uSA_Pages.ChangePlan("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("Bundle_Icon"), "Bundle Icon");
				break;
				case "step8": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("Bundle_Icon"), "Bundle Icon");
				break;
				case "step9": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("ChangePlan_Icon"), "Change Plan Icon");
				break;
				case "step10": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("disabledcurrentPlan"), "Current Plan");
				break;
				case "step11": stepStatus[step] = WebElementValueCompare(uSA_Pages.ChangePlan("disabledcurrentPlan"), "Current Plan","Current_Plan",1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("planChngeHistory"), "History");
				break;
				case "step13": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("planChngeHistory"), "History");
				break;
				case "step14": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("tbl_ChangePlanHistory"), "Change Plan Histroy");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void VALIDATE_CHANGE_PLAN_HISTORY(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 7;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("tbl_ChangePlanHistory"), "Change Plan History");
				break;
				case "step2": stepStatus[step] = WebElementTextCompare(uSA_Pages.ChangePlanHistoryTable(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"tblChangePlan_Date","Row_Number",1), "Date", "Date", 1);
				break;
				case "step3": stepStatus[step] = WebElementTextCompare(uSA_Pages.ChangePlanHistoryTable(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"tblChangePlan_Time","Row_Number",1), "Time", "Time", 1);
				break;
				case "step4": stepStatus[step] = WebElementTextCompare(uSA_Pages.ChangePlanHistoryTable(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"tblChangePlan_CurrentPlan","Row_Number",1), "CurrentPlan", "CurrentPlan", 1);
				break;
				case "step5": stepStatus[step] = WebElementTextCompare(uSA_Pages.ChangePlanHistoryTable(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"tblChangePlan_PreviousPlan","Row_Number",1), "PreviousPlan", "PreviousPlan", 1);
				break;
				case "step6": stepStatus[step] = WebElementTextCompare(uSA_Pages.ChangePlanHistoryTable(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"tblChangePlan_Channel","Row_Number",1), "Channel", "Channel", 1);
				break;
				case "step7": stepStatus[step] = WebElementTextCompare(uSA_Pages.ChangePlanHistoryTable(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"tblChangePlan_Reason","Row_Number",1), "Reason", "Reason", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void CLOSE_CHANGE_PLAN_HISTORY(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 5;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("btn_OkPlanHistory"), "OK");
				break;
				case "step2": stepStatus[step] = WebElementClick(uSA_Pages.ChangePlan("btn_OkPlanHistory"), "OK");
				break;
				case "step3": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("close_button"), "Subscriber Logout");
				break;
				case "step4": stepStatus[step] = PerformAction_MoveToElementAndClick(uSA_Pages.ChangePlan("close_button"), "Subscriber Logout");
				break;
				case "step5": stepStatus[step] = waitUntilExist(uSA_Pages.ChangePlan("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void CHECK_TOPUP_AIO_NO_GAF(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 49;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown","Topup_Amount",1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step13": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step23": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step24": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("newCard_rdButton"), "Payment Using", "New Card");
				break;
				case "step25": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown");
				break;
				case "step26": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown", "CardType", 1);
				break;
				case "step27": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name");
				break;
				case "step28": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name", "CardName", 1);
				break;
				case "step29": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber1_TextBox"), "Card 1st 4 Number", "Card_Number1", 1);
				break;
				case "step30": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber2_TextBox"), "Card 2nd 4 Number", "Card_Number2", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber3_TextBox"), "Card 3rd 4 Number", "Card_Number3", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber4_TextBox"), "Card 4th 4 Number", "Card_Number4", 1);
				break;
				case "step33": stepStatus[step] = javaScriptDatePicker(online_TopUp.AllInOne_TopUp_Page("expiryDate_TextBoxJS"), "Expiry Date", "Expiry_Date", 1);
				break;
				case "step34": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number");
				break;
				case "step35": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number", "CVV_Number", 1);
				break;
				case "step36": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email");
				break;
				case "step37": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step39": stepStatus[step] = WebEditClickAndEnterText(online_TopUp.AllInOne_TopUp_Page("postcode_TextBox"), "PostCode", "PostCode", 1);
				break;
				case "step40": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("searchIcon_Button"), "Search Button");
				break;
				case "step41": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("modal_Popup"), "Popup");
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("modal_Popup"), "Popup","AddressMessage_Content",1);
				break;
				case "step43": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("modal_btnClose"), "Close Button");
				break;
				case "step44": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("modal_btnClose"), "Close Button");
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinoneCancel"), "Cancel");
				break;
				case "step46": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinoneCancel"), "Cancel");
				break;
				case "step47": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step48": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step49": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_TOPUP_AIO_WITH_GAF(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 71;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown","Topup_Amount",1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step13": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step23": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step24": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("newCard_rdButton"), "Payment Using", "New Card");
				break;
				case "step25": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown");
				break;
				case "step26": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown", "CardType", 1);
				break;
				case "step27": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name");
				break;
				case "step28": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name", "CardName", 1);
				break;
				case "step29": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber1_TextBox"), "Card 1st 4 Number", "Card_Number1", 1);
				break;
				case "step30": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber2_TextBox"), "Card 2nd 4 Number", "Card_Number2", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber3_TextBox"), "Card 3rd 4 Number", "Card_Number3", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber4_TextBox"), "Card 4th 4 Number", "Card_Number4", 1);
				break;
				case "step33": stepStatus[step] = javaScriptDatePicker(online_TopUp.AllInOne_TopUp_Page("expiryDate_TextBoxJS"), "Expiry Date", "Expiry_Date", 1);
				break;
				case "step34": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number");
				break;
				case "step35": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number", "CVV_Number", 1);
				break;
				case "step36": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email");
				break;
				case "step37": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step39": stepStatus[step] = WebEditClickAndEnterText(online_TopUp.AllInOne_TopUp_Page("postcode_TextBox"), "PostCode", "PostCode", 1);
				break;
				case "step40": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("searchIcon_Button"), "Search Button");
				break;
				case "step41": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step42": stepStatus[step] = WebListSelectFromGAFEnv(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","AddressInENV",1);
				break;
				case "step43": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step44": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House Number");
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step46": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step47": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step48": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step49": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step50": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step51": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				case "step57": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				case "step59": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step60": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step61": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step62": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step63": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneMSISDN"), "MSISDN","Confirm_MSISDN",1);
				break;
				case "step64": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneAmount"), "Amount","Confirm_Amount",1);
				break;
				case "step65": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step66": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step67": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step68": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step69": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step70": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step71": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_REPEAT_TOPUP_AIO_WITH_GAF(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 57;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown","Topup_Amount",1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step13": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step23": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step24": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("existingCard_rdButton"), "Payment Using", "Existing Card");
				break;
				case "step25": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("ExCardNumberHead_Label"), "Existing Card Table");
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardNumber_Label"), "Existing Card Number","Existing_CardNo",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardName_Label"), "Existing Card Name","Existing_NameOnCard",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardType_Label"), "Existing Card Type","Existing_CardType",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardExpiryDate_Label"), "Existing Card ExpiryDate","Existing_ExpiryDate",1);
				break;
				case "step30": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("ExCCNo_Label"), "Card CC Number","Existing_CVV_Number",1);
				break;
				case "step31": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step32": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step33": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step34": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step35": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step40": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				case "step43": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step46": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step47": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step48": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step49": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneMSISDN"), "MSISDN","Confirm_MSISDN",1);
				break;
				case "step50": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneAmount"), "Amount","Confirm_Amount",1);
				break;
				case "step51": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step52": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step53": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step54": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step55": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step56": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step57": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_REPEAT_TOPUP_AIO_GAF_PC(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 62;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown","Topup_Amount",1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step13": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step23": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step24": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "Prome Code");
				break;
				case "step25": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "Prome Code","PromeCode",1);
				break;
				case "step26": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinonePromo"), "Prome Code Apply");
				break;
				case "step27": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lbl_DiscountMessage"), "Discount Message");
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lbl_DiscountMessage"), "Discount Message", "DiscountMessage",1);
				break;
				case "step29": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("existingCard_rdButton"), "Payment Using", "Existing Card");
				break;
				case "step30": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("ExCardNumberHead_Label"), "Existing Card Table");
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardNumber_Label"), "Existing Card Number","Existing_CardNo",1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardName_Label"), "Existing Card Name","Existing_NameOnCard",1);
				break;
				case "step33": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardType_Label"), "Existing Card Type","Existing_CardType",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardExpiryDate_Label"), "Existing Card ExpiryDate","Existing_ExpiryDate",1);
				break;
				case "step35": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("ExCCNo_Label"), "Card CC Number","Existing_CVV_Number",1);
				break;
				case "step36": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step37": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step38": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step39": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step40": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step45": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step46": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step47": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				case "step48": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step49": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				case "step50": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step51": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step52": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneMSISDN"), "MSISDN","Confirm_MSISDN",1);
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneAmount"), "Amount","Confirm_Amount",1);
				break;
				case "step56": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step57": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step58": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step59": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step60": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step61": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step62": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_RTOPUP_AIO_WITH_GAF_NEG(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 44;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown","Topup_Amount",1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step13": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step23": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step24": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("existingCard_rdButton"), "Payment Using", "Existing Card");
				break;
				case "step25": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("ExCardNumberHead_Label"), "Existing Card Table");
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardNumber_Label"), "Existing Card Number","Existing_CardNo",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardName_Label"), "Existing Card Name","Existing_NameOnCard",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardType_Label"), "Existing Card Type","Existing_CardType",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardExpiryDate_Label"), "Existing Card ExpiryDate","Existing_ExpiryDate",1);
				break;
				case "step30": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("ExCCNo_Label"), "Card CC Number","Existing_CVV_Number",1);
				break;
				case "step31": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step32": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step33": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step34": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step35": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step40": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				case "step43": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void VALIDATE_RTOPUP_AIO_NEG_OUTPUT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 7;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step2": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step3": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step4": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step6": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_FTOPUP_AIO_WITH_GAF_OTHERS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 76;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown","Topup_Amount",1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("OthersAmount_TextBox"), "Topup Others Amount");
				break;
				case "step13": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("OthersAmount_TextBox"), "Topup Others Amount", "TopupOthersAmount", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("OthersConfirmAmount_TextBox"), "Topup Confirm Others Amount", "ConfirmOthersAmount", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("OthersSubmit_Button"), "Submit Others Amount");
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step17": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step18": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step19": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				case "step27": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step28": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step29": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("newCard_rdButton"), "Payment Using", "New Card");
				break;
				case "step30": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown");
				break;
				case "step31": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown", "CardType", 1);
				break;
				case "step32": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name");
				break;
				case "step33": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name", "CardName", 1);
				break;
				case "step34": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber1_TextBox"), "Card 1st 4 Number", "Card_Number1", 1);
				break;
				case "step35": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber2_TextBox"), "Card 2nd 4 Number", "Card_Number2", 1);
				break;
				case "step36": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber3_TextBox"), "Card 3rd 4 Number", "Card_Number3", 1);
				break;
				case "step37": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber4_TextBox"), "Card 4th 4 Number", "Card_Number4", 1);
				break;
				case "step38": stepStatus[step] = javaScriptDatePicker(online_TopUp.AllInOne_TopUp_Page("expiryDate_TextBoxJS"), "Expiry Date", "Expiry_Date", 1);
				break;
				case "step39": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number");
				break;
				case "step40": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number", "CVV_Number", 1);
				break;
				case "step41": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email");
				break;
				case "step42": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step44": stepStatus[step] = WebEditClickAndEnterText(online_TopUp.AllInOne_TopUp_Page("postcode_TextBox"), "PostCode", "PostCode", 1);
				break;
				case "step45": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("searchIcon_Button"), "Search Button");
				break;
				case "step46": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step47": stepStatus[step] = WebListSelectFromGAFEnv(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","AddressInENV",1);
				break;
				case "step48": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step49": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House Number");
				break;
				case "step50": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step51": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step52": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step53": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step54": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step61": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				case "step62": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step63": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				case "step64": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step65": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step66": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step67": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step68": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneMSISDN"), "MSISDN","Confirm_MSISDN",1);
				break;
				case "step69": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneAmount"), "Amount","Confirm_Amount",1);
				break;
				case "step70": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step71": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step72": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step73": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step74": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step75": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step76": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_RTOPUP_AIO_WITH_GAF_OTHERS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 62;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown","Topup_Amount",1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("OthersAmount_TextBox"), "Topup Others Amount");
				break;
				case "step13": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("OthersAmount_TextBox"), "Topup Others Amount", "TopupOthersAmount", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("OthersConfirmAmount_TextBox"), "Topup Confirm Others Amount", "ConfirmOthersAmount", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("OthersSubmit_Button"), "Submit Others Amount");
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step17": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step18": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step19": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				case "step27": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step28": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step29": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("existingCard_rdButton"), "Payment Using", "Existing Card");
				break;
				case "step30": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("ExCardNumberHead_Label"), "Existing Card Table");
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardNumber_Label"), "Existing Card Number","Existing_CardNo",1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardName_Label"), "Existing Card Name","Existing_NameOnCard",1);
				break;
				case "step33": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardType_Label"), "Existing Card Type","Existing_CardType",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardExpiryDate_Label"), "Existing Card ExpiryDate","Existing_ExpiryDate",1);
				break;
				case "step35": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("ExCCNo_Label"), "Card CC Number","Existing_CVV_Number",1);
				break;
				case "step36": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step37": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step38": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step39": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step40": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step45": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step46": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step47": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				case "step48": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step49": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				case "step50": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step51": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step52": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneMSISDN"), "MSISDN","Confirm_MSISDN",1);
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneAmount"), "Amount","Confirm_Amount",1);
				break;
				case "step56": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step57": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step58": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step59": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step60": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step61": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step62": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_ALL_IN_AIO_WITH_GAF(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 96;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				//Topup
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown","Topup_Amount",1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step13": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				//Bundle
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step19": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step22": stepStatus[step] = deleteLogFile("Location", "Log_FileName", 1);
				break;
				case "step23": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step24": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				//Topup Grid verify
				case "step25": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				// Bundle Verify
				case "step33": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_2"), "Type", "View_Type_Bundle",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_2"), "SimPlan", "View_SimPlan_Bundle",1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_2"), "BundleType", "View_BundleType_Bundle",1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal_Bundle",1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_2"), "NoofMonths", "View_NoofMonths_Bundle",1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice_Bundle",1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_2"), "DiscountPrice", "View_DiscountPrice_Bundle",1);
				break;
				//Payent mode
				case "step40": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step41": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step42": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("newCard_rdButton"), "Payment Using", "New Card");
				break;
				case "step43": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown");
				break;
				case "step44": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown", "CardType", 1);
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name");
				break;
				case "step46": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name", "CardName", 1);
				break;
				case "step47": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber1_TextBox"), "Card 1st 4 Number", "Card_Number1", 1);
				break;
				case "step48": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber2_TextBox"), "Card 2nd 4 Number", "Card_Number2", 1);
				break;
				case "step49": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber3_TextBox"), "Card 3rd 4 Number", "Card_Number3", 1);
				break;
				case "step50": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber4_TextBox"), "Card 4th 4 Number", "Card_Number4", 1);
				break;
				case "step51": stepStatus[step] = javaScriptDatePicker(online_TopUp.AllInOne_TopUp_Page("expiryDate_TextBoxJS"), "Expiry Date", "Expiry_Date", 1);
				break;
				case "step52": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number");
				break;
				case "step53": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number", "CVV_Number", 1);
				break;
				case "step54": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email");
				break;
				case "step55": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step57": stepStatus[step] = WebEditClickAndEnterText(online_TopUp.AllInOne_TopUp_Page("postcode_TextBox"), "PostCode", "PostCode", 1);
				break;
				case "step58": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("searchIcon_Button"), "Search Button");
				break;
				case "step59": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step60": stepStatus[step] = WebListSelectFromGAFEnv(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","AddressInENV",1);
				break;
				case "step61": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step62": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House Number");
				break;
				case "step63": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step64": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step65": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step66": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				//Verify Submit Topup
				case "step67": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step68": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step69": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step70": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step71": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step72": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step73": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step74": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				//Verify Submit Bundle
				case "step75": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_2"), "Type", "View_Type_Bundle",1);
				break;
				case "step76": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_2"), "SimPlan", "View_SimPlan_Bundle",1);
				break;
				case "step77": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_2"), "BundleType", "View_BundleType_Bundle",1);
				break;
				case "step78": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal_Bundle",1);
				break;
				case "step79": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_2"), "NoofMonths", "View_NoofMonths_Bundle",1);
				break;
				case "step80": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice_Bundle",1);
				break;
				case "step81": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_2"), "DiscountPrice", "Submit_DiscountPrice_Bundle",1);
				break;
				case "step82": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step83": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				case "step84": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step85": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step86": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step87": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				//Thread.sleep(10000);
				break;
				case "step88": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneMSISDN"), "MSISDN","Confirm_MSISDN",1);
				break;
				case "step89": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneAmount"), "Amount","Confirm_Amount",1);
				break;
				case "step90": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step91": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step92": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step93": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step94": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step95": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step96": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_REPEAT_ALL_IN_AIO_WITH_GAF(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 82;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				//Topup
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown","Topup_Amount",1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step13": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				//Bundle
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step19": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step22": stepStatus[step] = deleteLogFile("Location", "Log_FileName", 1);
				break;
				case "step23": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step24": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				//Topup Grid verify
				case "step25": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				// Bundle Verify
				case "step33": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_2"), "Type", "View_Type_Bundle",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_2"), "SimPlan", "View_SimPlan_Bundle",1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_2"), "BundleType", "View_BundleType_Bundle",1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal_Bundle",1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_2"), "NoofMonths", "View_NoofMonths_Bundle",1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice_Bundle",1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_2"), "DiscountPrice", "View_DiscountPrice_Bundle",1);
				break;
				//Payent mode
				case "step40": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step41": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step42": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("existingCard_rdButton"), "Payment Using", "Existing Card");
				break;
				case "step43": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("ExCardNumberHead_Label"), "Existing Card Table");
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardNumber_Label"), "Existing Card Number","Existing_CardNo",1);
				break;
				case "step45": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardName_Label"), "Existing Card Name","Existing_NameOnCard",1);
				break;
				case "step46": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardType_Label"), "Existing Card Type","Existing_CardType",1);
				break;
				case "step47": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardExpiryDate_Label"), "Existing Card ExpiryDate","Existing_ExpiryDate",1);
				break;
				case "step48": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("ExCCNo_Label"), "Card CC Number","Existing_CVV_Number",1);
				break;
				case "step49": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step50": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step51": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step52": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				//Verify Submit Topup
				case "step53": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				//Verify Submit Bundle
				case "step61": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_2"), "Type", "View_Type_Bundle",1);
				break;
				case "step62": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_2"), "SimPlan", "View_SimPlan_Bundle",1);
				break;
				case "step63": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_2"), "BundleType", "View_BundleType_Bundle",1);
				break;
				case "step64": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal_Bundle",1);
				break;
				case "step65": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_2"), "NoofMonths", "View_NoofMonths_Bundle",1);
				break;
				case "step66": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice_Bundle",1);
				break;
				case "step67": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_2"), "DiscountPrice", "Submit_DiscountPrice_Bundle",1);
				break;
				case "step68": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step69": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				case "step70": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step71": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step72": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step73": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step74": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneMSISDN"), "MSISDN","Confirm_MSISDN",1);
				break;
				case "step75": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneAmount"), "Amount","Confirm_Amount",1);
				break;
				case "step76": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step77": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step78": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step79": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step80": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step81": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step82": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PRE_TOPUP_ALL_IN_AIO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 51;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				//Topup
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown","Topup_Amount",1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step13": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step15": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step16": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step17": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("newCard_rdButton"), "Payment Using", "New Card");
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown");
				break;
				case "step19": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown", "CardType", 1);
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name");
				break;
				case "step21": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name", "CardName", 1);
				break;
				case "step22": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber1_TextBox"), "Card 1st 4 Number", "Card_Number1", 1);
				break;
				case "step23": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber2_TextBox"), "Card 2nd 4 Number", "Card_Number2", 1);
				break;
				case "step24": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber3_TextBox"), "Card 3rd 4 Number", "Card_Number3", 1);
				break;
				case "step25": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber4_TextBox"), "Card 4th 4 Number", "Card_Number4", 1);
				break;
				case "step26": stepStatus[step] = javaScriptDatePicker(online_TopUp.AllInOne_TopUp_Page("expiryDate_TextBoxJS"), "Expiry Date", "Expiry_Date", 1);
				break;
				case "step27": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number");
				break;
				case "step28": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number", "CVV_Number", 1);
				break;
				case "step29": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email");
				break;
				case "step30": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step32": stepStatus[step] = WebEditClickAndEnterText(online_TopUp.AllInOne_TopUp_Page("postcode_TextBox"), "PostCode", "PostCode", 1);
				break;
				case "step33": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("searchIcon_Button"), "Search Button");
				break;
				case "step34": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step35": stepStatus[step] = WebListSelectFromGAFEnv(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","AddressInENV",1);
				break;
				case "step36": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step37": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House Number");
				break;
				case "step38": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step39": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step40": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step41": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step42": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step43": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step46": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step47": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step48": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step49": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step50": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step51": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_ALL_IN_AIO_GAF_PROMO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 101;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				//Topup
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown","Topup_Amount",1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step13": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				//Bundle
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step19": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step22": stepStatus[step] = deleteLogFile("Location", "Log_FileName", 1);
				break;
				case "step23": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step24": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				//Topup Grid verify
				case "step25": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				// Bundle Verify
				case "step33": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_2"), "Type", "View_Type_Bundle",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_2"), "SimPlan", "View_SimPlan_Bundle",1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_2"), "BundleType", "View_BundleType_Bundle",1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal_Bundle",1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_2"), "NoofMonths", "View_NoofMonths_Bundle",1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice_Bundle",1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_2"), "DiscountPrice", "View_DiscountPrice_Bundle",1);
				break;
				//Payent mode
				case "step40": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step41": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step42": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "Prome Code");
				break;
				case "step43": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "Prome Code","PromeCode",1);
				Thread.sleep(1000);
				break;
				case "step44": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinonePromo"), "Prome Code Apply");
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lbl_DiscountMessage"), "Discount Message");
				break;
				case "step46": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lbl_DiscountMessage"), "Discount Message", "DiscountMessage",1);
				break;
				case "step47": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("newCard_rdButton"), "Payment Using", "New Card");
				break;
				case "step48": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown");
				break;
				case "step49": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown", "CardType", 1);
				break;
				case "step50": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name");
				break;
				case "step51": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name", "CardName", 1);
				break;
				case "step52": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber1_TextBox"), "Card 1st 4 Number", "Card_Number1", 1);
				break;
				case "step53": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber2_TextBox"), "Card 2nd 4 Number", "Card_Number2", 1);
				break;
				case "step54": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber3_TextBox"), "Card 3rd 4 Number", "Card_Number3", 1);
				break;
				case "step55": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber4_TextBox"), "Card 4th 4 Number", "Card_Number4", 1);
				break;
				case "step56": stepStatus[step] = javaScriptDatePicker(online_TopUp.AllInOne_TopUp_Page("expiryDate_TextBoxJS"), "Expiry Date", "Expiry_Date", 1);
				break;
				case "step57": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number");
				break;
				case "step58": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number", "CVV_Number", 1);
				break;
				case "step59": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email");
				break;
				case "step60": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step61": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step62": stepStatus[step] = WebEditClickAndEnterText(online_TopUp.AllInOne_TopUp_Page("postcode_TextBox"), "PostCode", "PostCode", 1);
				break;
				case "step63": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("searchIcon_Button"), "Search Button");
				break;
				case "step64": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step65": stepStatus[step] = WebListSelectFromGAFEnv(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","AddressInENV",1);
				break;
				case "step66": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step67": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House Number");
				break;
				case "step68": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step69": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step70": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step71": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				//Verify Submit Topup
				case "step72": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step73": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step74": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step75": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step76": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step77": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step78": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step79": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				//Verify Submit Bundle
				case "step80": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_2"), "Type", "View_Type_Bundle",1);
				break;
				case "step81": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_2"), "SimPlan", "View_SimPlan_Bundle",1);
				break;
				case "step82": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_2"), "BundleType", "View_BundleType_Bundle",1);
				break;
				case "step83": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal_Bundle",1);
				break;
				case "step84": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_2"), "NoofMonths", "View_NoofMonths_Bundle",1);
				break;
				case "step85": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice_Bundle",1);
				break;
				case "step86": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_2"), "DiscountPrice", "Submit_DiscountPrice_Bundle",1);
				break;
				case "step87": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step88": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				case "step89": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step90": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step91": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step92": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step93": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneMSISDN"), "MSISDN","Confirm_MSISDN",1);
				break;
				case "step94": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneAmount"), "Amount","Confirm_Amount",1);
				break;
				case "step95": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step96": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step97": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step98": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step99": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step100": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step101": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_TWO_BUNLDE_AIO_GAF_PROMO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 106;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = deleteLogFile("Location", "Log_FileName", 1);
				break;
				//Bundle
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				Thread.sleep(1000);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step19": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				Thread.sleep(3000);
				break;
				//Bundle 2
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step23": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType_INT", 1);
				Thread.sleep(1000);
				break;
				case "step24": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step25": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo_INT", 1);
				break;
				case "step26": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step27": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths_INT", 1);
				break;
				case "step28": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step29": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				//Topup Grid verify
				case "step30": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step33": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				// Bundle Verify
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_2"), "Type", "View_Type_Bundle",1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_2"), "SimPlan", "View_SimPlan_Bundle",1);
				break;
				case "step40": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_2"), "BundleType", "View_BundleType_Bundle",1);
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal_Bundle",1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_2"), "NoofMonths", "View_NoofMonths_Bundle",1);
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice_Bundle",1);
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_2"), "DiscountPrice", "View_DiscountPrice_Bundle",1);
				break;
				//Payent mode
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step46": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step47": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "Prome Code");
				break;
				case "step48": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "Prome Code","PromeCode",1);
				Thread.sleep(2000);
				break;
				case "step49": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinonePromo"), "Prome Code Apply");
				break;
				case "step50": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lbl_DiscountMessage"), "Discount Message");
				break;
				case "step51": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lbl_DiscountMessage"), "Discount Message", "DiscountMessage",1);
				break;
				case "step52": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("newCard_rdButton"), "Payment Using", "New Card");
				break;
				case "step53": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown");
				break;
				case "step54": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown", "CardType", 1);
				break;
				case "step55": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name");
				break;
				case "step56": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name", "CardName", 1);
				break;
				case "step57": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber1_TextBox"), "Card 1st 4 Number", "Card_Number1", 1);
				break;
				case "step58": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber2_TextBox"), "Card 2nd 4 Number", "Card_Number2", 1);
				break;
				case "step59": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber3_TextBox"), "Card 3rd 4 Number", "Card_Number3", 1);
				break;
				case "step60": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber4_TextBox"), "Card 4th 4 Number", "Card_Number4", 1);
				break;
				case "step61": stepStatus[step] = javaScriptDatePicker(online_TopUp.AllInOne_TopUp_Page("expiryDate_TextBoxJS"), "Expiry Date", "Expiry_Date", 1);
				break;
				case "step62": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number");
				break;
				case "step63": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number", "CVV_Number", 1);
				break;
				case "step64": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email");
				break;
				case "step65": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step66": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step67": stepStatus[step] = WebEditClickAndEnterText(online_TopUp.AllInOne_TopUp_Page("postcode_TextBox"), "PostCode", "PostCode", 1);
				break;
				case "step68": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("searchIcon_Button"), "Search Button");
				break;
				case "step69": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step70": stepStatus[step] = WebListSelectFromGAFEnv(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","AddressInENV",1);
				break;
				case "step71": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step72": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House Number");
				break;
				case "step73": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step74": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step75": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step76": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				//Verify Submit Topup
				case "step77": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step78": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step79": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step80": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step81": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step82": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step83": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step84": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				//Verify Submit Bundle
				case "step85": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_2"), "Type", "View_Type_Bundle",1);
				break;
				case "step86": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_2"), "SimPlan", "View_SimPlan_Bundle",1);
				break;
				case "step87": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_2"), "BundleType", "View_BundleType_Bundle",1);
				break;
				case "step88": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal_Bundle",1);
				break;
				case "step89": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_2"), "NoofMonths", "View_NoofMonths_Bundle",1);
				break;
				case "step90": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice_Bundle",1);
				break;
				case "step91": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_2"), "DiscountPrice", "Submit_DiscountPrice_Bundle",1);
				break;
				case "step92": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step93": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				case "step94": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step95": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step96": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step97": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step98": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneMSISDN"), "MSISDN","Confirm_MSISDN",1);
				break;
				case "step99": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneAmount"), "Amount","Confirm_Amount",1);
				break;
				case "step100": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step101": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step102": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step103": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step104": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step105": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step106": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_RE_ALL_IN_AIO_GAF_PROMO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 87;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				//Topup
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown","Topup_Amount",1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step13": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				//Bundle
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step19": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step22": stepStatus[step] = deleteLogFile("Location", "Log_FileName", 1);
				break;
				case "step23": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step24": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				//Topup Grid verify
				case "step25": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				// Bundle Verify
				case "step33": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_2"), "Type", "View_Type_Bundle",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_2"), "SimPlan", "View_SimPlan_Bundle",1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_2"), "BundleType", "View_BundleType_Bundle",1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal_Bundle",1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_2"), "NoofMonths", "View_NoofMonths_Bundle",1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice_Bundle",1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_2"), "DiscountPrice", "View_DiscountPrice_Bundle",1);
				break;
				//Payent mode
				case "step40": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step41": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step42": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "Prome Code");
				break;
				case "step43": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "Prome Code","PromeCode",1);
				break;
				case "step44": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinonePromo"), "Prome Code Apply");
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lbl_DiscountMessage"), "Discount Message");
				break;
				case "step46": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lbl_DiscountMessage"), "Discount Message", "DiscountMessage",1);
				break;
				case "step47": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("existingCard_rdButton"), "Payment Using", "Existing Card");
				break;
				case "step48": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("ExCardNumberHead_Label"), "Existing Card Table");
				break;
				case "step49": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardNumber_Label"), "Existing Card Number","Existing_CardNo",1);
				break;
				case "step50": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardName_Label"), "Existing Card Name","Existing_NameOnCard",1);
				break;
				case "step51": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardType_Label"), "Existing Card Type","Existing_CardType",1);
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardExpiryDate_Label"), "Existing Card ExpiryDate","Existing_ExpiryDate",1);
				break;
				case "step53": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("ExCCNo_Label"), "Card CC Number","Existing_CVV_Number",1);
				break;
				case "step54": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step55": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step56": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step57": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				//Verify Submit Topup
				case "step58": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step61": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step62": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step63": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step64": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step65": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				//Verify Submit Bundle
				case "step66": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_2"), "Type", "View_Type_Bundle",1);
				break;
				case "step67": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_2"), "SimPlan", "View_SimPlan_Bundle",1);
				break;
				case "step68": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_2"), "BundleType", "View_BundleType_Bundle",1);
				break;
				case "step69": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal_Bundle",1);
				break;
				case "step70": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_2"), "NoofMonths", "View_NoofMonths_Bundle",1);
				break;
				case "step71": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice_Bundle",1);
				break;
				case "step72": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_2"), "DiscountPrice", "Submit_DiscountPrice_Bundle",1);
				break;
				case "step73": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step74": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				case "step75": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step76": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step77": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step78": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step79": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneMSISDN"), "MSISDN","Confirm_MSISDN",1);
				break;
				case "step80": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneAmount"), "Amount","Confirm_Amount",1);
				break;
				case "step81": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step82": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step83": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step84": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step85": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step86": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step87": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_TWO_BUNLDE_RT_AIO_GAF_PC(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 92;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = deleteLogFile("Location", "Log_FileName", 1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				Thread.sleep(1000);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step19": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				Thread.sleep(3000);
				break;
				//Bundle 2
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step23": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType_INT", 1);
				Thread.sleep(1000);
				break;
				case "step24": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step25": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo_INT", 1);
				break;
				case "step26": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step27": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths_INT", 1);
				break;
				case "step28": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step29": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				//Topup Grid verify
				case "step30": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step33": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				// Bundle Verify
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_2"), "Type", "View_Type_Bundle",1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_2"), "SimPlan", "View_SimPlan_Bundle",1);
				break;
				case "step40": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_2"), "BundleType", "View_BundleType_Bundle",1);
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal_Bundle",1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_2"), "NoofMonths", "View_NoofMonths_Bundle",1);
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice_Bundle",1);
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_2"), "DiscountPrice", "View_DiscountPrice_Bundle",1);
				break;
				//Payent mode
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step46": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step47": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "Prome Code");
				break;
				case "step48": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "Prome Code","PromeCode",1);
				Thread.sleep(2000);
				break;
				case "step49": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinonePromo"), "Prome Code Apply");
				break;
				case "step50": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lbl_DiscountMessage"), "Discount Message");
				break;
				case "step51": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lbl_DiscountMessage"), "Discount Message", "DiscountMessage",1);
				break;
				case "step52": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("existingCard_rdButton"), "Payment Using", "Existing Card");
				break;
				case "step53": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("ExCardNumberHead_Label"), "Existing Card Table");
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardNumber_Label"), "Existing Card Number","Existing_CardNo",1);
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardName_Label"), "Existing Card Name","Existing_NameOnCard",1);
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardType_Label"), "Existing Card Type","Existing_CardType",1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardExpiryDate_Label"), "Existing Card ExpiryDate","Existing_ExpiryDate",1);
				break;
				case "step58": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("ExCCNo_Label"), "Card CC Number","Existing_CVV_Number",1);
				break;
				case "step59": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step60": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step61": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step62": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				//Verify Submit Topup
				case "step63": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step64": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step65": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step66": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step67": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step68": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step69": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step70": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				//Verify Submit Bundle
				case "step71": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_2"), "Type", "View_Type_Bundle",1);
				break;
				case "step72": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_2"), "SimPlan", "View_SimPlan_Bundle",1);
				break;
				case "step73": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_2"), "BundleType", "View_BundleType_Bundle",1);
				break;
				case "step74": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal_Bundle",1);
				break;
				case "step75": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_2"), "NoofMonths", "View_NoofMonths_Bundle",1);
				break;
				case "step76": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice_Bundle",1);
				break;
				case "step77": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_2"), "DiscountPrice", "Submit_DiscountPrice_Bundle",1);
				break;
				case "step78": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step79": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				case "step80": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step81": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step82": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step83": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step84": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneMSISDN"), "MSISDN","Confirm_MSISDN",1);
				break;
				case "step85": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneAmount"), "Amount","Confirm_Amount",1);
				break;
				case "step86": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step87": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step88": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step89": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step90": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step91": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step92": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_TWO_BUNLDE_AIO_GAF_PC_MB(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 77;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = deleteLogFile("Location", "Log_FileName", 1);
				break;
				//Bundle
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				Thread.sleep(1000);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step19": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				Thread.sleep(3000);
				break;
				//Bundle 2
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step23": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType_INT", 1);
				Thread.sleep(1000);
				break;
				case "step24": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step25": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo_INT", 1);
				break;
				case "step26": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step27": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths_INT", 1);
				break;
				case "step28": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step29": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				//Topup Grid verify
				case "step30": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step33": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				// Bundle Verify
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_2"), "Type", "View_Type_Bundle",1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_2"), "SimPlan", "View_SimPlan_Bundle",1);
				break;
				case "step40": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_2"), "BundleType", "View_BundleType_Bundle",1);
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal_Bundle",1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_2"), "NoofMonths", "View_NoofMonths_Bundle",1);
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice_Bundle",1);
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_2"), "DiscountPrice", "View_DiscountPrice_Bundle",1);
				break;
				//Payent mode
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step46": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step47": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "Prome Code");
				break;
				case "step48": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "Prome Code","PromeCode",1);
				Thread.sleep(2000);
				break;
				case "step49": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinonePromo"), "Prome Code Apply");
				break;
				case "step50": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lbl_DiscountMessage"), "Discount Message");
				break;
				case "step51": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lbl_DiscountMessage"), "Discount Message", "DiscountMessage",1);
				break;
				case "step52": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step53": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				//Verify Submit Topup
				case "step54": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step61": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				//Verify Submit Bundle
				case "step62": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_2"), "Type", "View_Type_Bundle",1);
				break;
				case "step63": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_2"), "SimPlan", "View_SimPlan_Bundle",1);
				break;
				case "step64": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_2"), "BundleType", "View_BundleType_Bundle",1);
				break;
				case "step65": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal_Bundle",1);
				break;
				case "step66": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_2"), "NoofMonths", "View_NoofMonths_Bundle",1);
				break;
				case "step67": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice_Bundle",1);
				break;
				case "step68": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_2"), "DiscountPrice", "Submit_DiscountPrice_Bundle",1);
				break;
				case "step69": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step70": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				case "step71": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step72": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step73": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step74": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step75": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step76": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step77": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_ALL_IN_AIO_WITH_VAT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 100;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				//Topup
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown","Topup_Amount",1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step13": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				//Bundle
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step19": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step22": stepStatus[step] = deleteLogFile("Location", "Log_FileName", 1);
				break;
				case "step23": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step24": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				//Topup Grid verify
				case "step25": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				// Bundle Verify
				case "step33": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_2"), "Type", "View_Type_Bundle",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_2"), "SimPlan", "View_SimPlan_Bundle",1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_2"), "BundleType", "View_BundleType_Bundle",1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal_Bundle",1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_2"), "NoofMonths", "View_NoofMonths_Bundle",1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice_Bundle",1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_2"), "DiscountPrice", "View_DiscountPrice_Bundle",1);
				break;

				//Payent mode

				case "step40": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step41": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step42": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("newCard_rdButton"), "Payment Using", "New Card");
				break;
				case "step43": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown");
				break;
				case "step44": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown", "CardType", 1);
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name");
				break;
				case "step46": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name", "CardName", 1);
				break;
				case "step47": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber1_TextBox"), "Card 1st 4 Number", "Card_Number1", 1);
				break;
				case "step48": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber2_TextBox"), "Card 2nd 4 Number", "Card_Number2", 1);
				break;
				case "step49": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber3_TextBox"), "Card 3rd 4 Number", "Card_Number3", 1);
				break;
				case "step50": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber4_TextBox"), "Card 4th 4 Number", "Card_Number4", 1);
				break;
				case "step51": stepStatus[step] = javaScriptDatePicker(online_TopUp.AllInOne_TopUp_Page("expiryDate_TextBoxJS"), "Expiry Date", "Expiry_Date", 1);
				break;
				case "step52": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number");
				break;
				case "step53": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number", "CVV_Number", 1);
				break;
				case "step54": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email");
				break;
				case "step55": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step57": stepStatus[step] = WebEditClickAndEnterText(online_TopUp.AllInOne_TopUp_Page("postcode_TextBox"), "PostCode", "PostCode", 1);
				break;
				case "step58": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("searchIcon_Button"), "Search Button");
				break;
				case "step59": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step60": stepStatus[step] = WebListSelectFromGAFEnv(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","AddressInENV",1);
				break;
				case "step61": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step62": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House Number");
				break;
				case "step63": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step64": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step65": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step66": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;

				//Verify Submit Topup

				case "step67": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step68": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step69": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step70": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step71": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step72": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step73": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step74": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				//Payable VAT1
				case "step75": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitPayableVAT_1"), "PayableVAT", "Submit_PayableVAT_1",1);
				break;


				//Verify Submit Bundle

				case "step76": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_2"), "Type", "View_Type_Bundle",1);
				break;
				case "step77": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_2"), "SimPlan", "View_SimPlan_Bundle",1);
				break;
				case "step78": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_2"), "BundleType", "View_BundleType_Bundle",1);
				break;
				case "step79": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal_Bundle",1);
				break;
				case "step80": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_2"), "NoofMonths", "View_NoofMonths_Bundle",1);
				break;
				case "step81": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice_Bundle",1);
				break;
				case "step82": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_2"), "DiscountPrice", "Submit_DiscountPrice_Bundle",1);
				break;
				//Payable VAT2
				case "step83": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitPayableVAT_2"), "PayableVAT", "Submit_PayableVAT_2",1);
				break;
				case "step84": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step85": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				//VAT
				case "step86": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblVAT_Amount"), "VAT Amount","VAT_Amount",1);
				break;
				case "step87": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step88": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step89": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step90": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step91": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneMSISDN"), "MSISDN","Confirm_MSISDN",1);
				break;
				case "step92": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneAmount"), "Amount","Confirm_Amount",1);
				break;
				//Final VAT
				case "step93": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinonefinalVatAmount"), "VAT Amount","Final_VAT_Amount",1);
				break;
				case "step94": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step95": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step96": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step97": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step98": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step99": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step100": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_RTP_ALL_IN_AIO_WITH_VAT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 86;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				//Topup
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown","Topup_Amount",1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step13": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				//Bundle
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step19": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step22": stepStatus[step] = deleteLogFile("Location", "Log_FileName", 1);
				break;
				case "step23": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step24": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				//Topup Grid verify
				case "step25": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				// Bundle Verify
				case "step33": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_2"), "Type", "View_Type_Bundle",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_2"), "SimPlan", "View_SimPlan_Bundle",1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_2"), "BundleType", "View_BundleType_Bundle",1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal_Bundle",1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_2"), "NoofMonths", "View_NoofMonths_Bundle",1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice_Bundle",1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_2"), "DiscountPrice", "View_DiscountPrice_Bundle",1);
				break;
				//Payent mode
				case "step40": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step41": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step42": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("existingCard_rdButton"), "Payment Using", "Existing Card");
				break;
				case "step43": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("ExCardNumberHead_Label"), "Existing Card Table");
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardNumber_Label"), "Existing Card Number","Existing_CardNo",1);
				break;
				case "step45": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardName_Label"), "Existing Card Name","Existing_NameOnCard",1);
				break;
				case "step46": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardType_Label"), "Existing Card Type","Existing_CardType",1);
				break;
				case "step47": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardExpiryDate_Label"), "Existing Card ExpiryDate","Existing_ExpiryDate",1);
				break;
				case "step48": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("ExCCNo_Label"), "Card CC Number","Existing_CVV_Number",1);
				break;
				case "step49": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step50": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step51": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step52": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				//Verify Submit Topup
				case "step53": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				//Payable VAT1
				case "step61": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitPayableVAT_1"), "PayableVAT", "Submit_PayableVAT_1",1);
				break;


				//Verify Submit Bundle

				case "step62": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_2"), "Type", "View_Type_Bundle",1);
				break;
				case "step63": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_2"), "SimPlan", "View_SimPlan_Bundle",1);
				break;
				case "step64": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_2"), "BundleType", "View_BundleType_Bundle",1);
				break;
				case "step65": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal_Bundle",1);
				break;
				case "step66": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_2"), "NoofMonths", "View_NoofMonths_Bundle",1);
				break;
				case "step67": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice_Bundle",1);
				break;
				case "step68": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_2"), "DiscountPrice", "Submit_DiscountPrice_Bundle",1);
				break;
				//Payable VAT2
				case "step69": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitPayableVAT_2"), "PayableVAT", "Submit_PayableVAT_2",1);
				break;
				case "step70": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount");
				break;
				case "step71": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total Amount","Total_Amount",1);
				break;
				//VAT
				case "step72": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblVAT_Amount"), "VAT Amount","VAT_Amount",1);
				break;
				case "step73": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step74": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step75": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step76": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step77": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneMSISDN"), "MSISDN","Confirm_MSISDN",1);
				break;
				case "step78": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneAmount"), "Amount","Confirm_Amount",1);
				break;
				//Final VAT
				case "step79": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinonefinalVatAmount"), "VAT Amount","Final_VAT_Amount",1);
				break;
				case "step80": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step81": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step82": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step83": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step84": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step85": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step86": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_ALL_IN_AIO_WITH_GAF_TAX(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 108;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				//Topup
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown","Topup_Amount",1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step13": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				//Bundle
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step19": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step22": stepStatus[step] = deleteLogFile("Location", "Log_FileName", 1);
				break;
				case "step23": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step24": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				//Topup Grid verify
				case "step25": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				// Bundle Verify
				case "step33": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_2"), "Type", "View_Type_Bundle",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_2"), "SimPlan", "View_SimPlan_Bundle",1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_2"), "BundleType", "View_BundleType_Bundle",1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal_Bundle",1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_2"), "NoofMonths", "View_NoofMonths_Bundle",1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice_Bundle",1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_2"), "DiscountPrice", "View_DiscountPrice_Bundle",1);
				break;
				//Payent mode
				case "step40": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step41": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step42": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("newCard_rdButton"), "Payment Using", "New Card");
				break;
				case "step43": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown");
				break;
				case "step44": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown", "CardType", 1);
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name");
				break;
				case "step46": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name", "CardName", 1);
				break;
				case "step47": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber1_TextBox"), "Card 1st 4 Number", "Card_Number1", 1);
				break;
				case "step48": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber2_TextBox"), "Card 2nd 4 Number", "Card_Number2", 1);
				break;
				case "step49": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber3_TextBox"), "Card 3rd 4 Number", "Card_Number3", 1);
				break;
				case "step50": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber4_TextBox"), "Card 4th 4 Number", "Card_Number4", 1);
				break;
				case "step51": stepStatus[step] = javaScriptDatePicker(online_TopUp.AllInOne_TopUp_Page("expiryDate_TextBoxJS"), "Expiry Date", "Expiry_Date", 1);
				break;
				case "step52": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number");
				break;
				case "step53": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number", "CVV_Number", 1);
				break;
				case "step54": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email");
				break;
				case "step55": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				//USA Address:
				case "step57": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House Number", "HouseNumber_USA", 1);
				break;
				case "step58": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("labelstreetName"), "Street Name", "StreetName_USA", 1);
				break;
				case "step59": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("lblcityName"), "City Name", "CityName_USA", 1);
				break;
				case "step60": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("apartmentNo_Textbox"), "Appartment No", "AppartmentNo", 1);
				break;
				case "step61": stepStatus[step] = WebEditClickAndEnterText(online_TopUp.AllInOne_TopUp_Page("postcode_TextBox"), "PostCode", "PostCode", 1);
				break;
				case "step62": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("searchIcon_Button"), "Search Button");
				break;
				case "step63": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step64": stepStatus[step] = WebListSelectFromGAFEnv(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","AddressInENV",1);
				break;
				case "step65": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step66": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lststateName"), "State Name");
				break;
				case "step67": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lststateName"), "State Name","StateName_USA",1);
				break;
				case "step68": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step69": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step70": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step71": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step72": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step73": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step74": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step75": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step76": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step77": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step78": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step79": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				case "step80": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_2"), "Type", "View_Type_Bundle",1);
				break;
				case "step81": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_2"), "SimPlan", "View_SimPlan_Bundle",1);
				break;
				case "step82": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_2"), "BundleType", "View_BundleType_Bundle",1);
				break;
				case "step83": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal_Bundle",1);
				break;
				case "step84": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_2"), "NoofMonths", "View_NoofMonths_Bundle",1);
				break;
				case "step85": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice_Bundle",1);
				break;
				case "step86": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_2"), "DiscountPrice", "Submit_DiscountPrice_Bundle",1);
				break;
				case "step87": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt2"), "Total Amount");
				break;
				case "step88": stepStatus[step] = waitUntilWebElementTextAppear(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt2"), "Total Amount");
				break;
				case "step89": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt2"), "Total Amount","Total_Amount",1);
				break;
				case "step90": stepStatus[step] = waitUntilWebElementTextAppear(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTaxAmount"), "TAX Amount");
				break;
				case "step91": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTaxAmount"), "TAX Amount","TAX_Amount",1);
				break;
				case "step92": stepStatus[step] = waitUntilWebElementTextAppear(online_TopUp.AllInOne_TopUp_Page("VAT_Amount"), "VAT Amount");
				break;
				case "step93": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("VAT_Amount"), "VAT Amount","VAT_Amount",1);
				break;
				case "step94": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step95": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step96": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step97": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step98": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneMSISDN"), "MSISDN","Confirm_MSISDN",1);
				break;
				case "step99": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneAmount"), "Amount","Confirm_Amount",1);
				break;
				case "step100": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinonefinalTaxAmount"), "Final TAX Amount","Final_TAX_Amount",1);
				break;
				case "step101": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_VAT_Amount"), "Final VAT Amount","Final_VAT_Amount",1);
				break;
				case "step102": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step103": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step104": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step105": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step106": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step107": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step108": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PRE_AIO_TOPUP_USA(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 60;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				//Topup
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown","Topup_Amount",1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step13": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				//Payent mode
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step23": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				/*case "step42": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("newCard_rdButton"), "Payment Using", "New Card");
				break;*/
				case "step24": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown");
				break;
				case "step25": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown", "CardType", 1);
				break;
				case "step26": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name");
				break;
				case "step27": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name", "CardName", 1);
				break;
				case "step28": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber1_TextBox"), "Card 1st 4 Number", "Card_Number1", 1);
				break;
				case "step29": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber2_TextBox"), "Card 2nd 4 Number", "Card_Number2", 1);
				break;
				case "step30": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber3_TextBox"), "Card 3rd 4 Number", "Card_Number3", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber4_TextBox"), "Card 4th 4 Number", "Card_Number4", 1);
				break;
				case "step32": stepStatus[step] = javaScriptDatePicker(online_TopUp.AllInOne_TopUp_Page("expiryDate_TextBoxJS"), "Expiry Date", "Expiry_Date", 1);
				break;
				case "step33": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number");
				break;
				case "step34": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number", "CVV_Number", 1);
				break;
				case "step35": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email");
				break;
				case "step36": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				//USA Address:
				case "step38": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House Number", "HouseNumber_USA", 1);
				break;
				case "step39": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("labelstreetName"), "Street Name", "StreetName_USA", 1);
				break;
				case "step40": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("lblcityName"), "City Name", "CityName_USA", 1);
				break;
				case "step41": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("apartmentNo_Textbox"), "Appartment No", "AppartmentNo", 1);
				break;
				case "step42": stepStatus[step] = WebEditClickAndEnterText(online_TopUp.AllInOne_TopUp_Page("postcode_TextBox"), "PostCode", "PostCode", 1);
				break;
				case "step43": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("searchIcon_Button"), "Search Button");
				break;
				case "step44": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step45": stepStatus[step] = WebListSelectFromGAFEnv(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","AddressInENV",1);
				break;
				case "step46": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step47": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lststateName"), "State Name");
				break;
				case "step48": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lststateName"), "State Name","StateName_USA",1);
				break;						
				case "step49": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step50": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step51": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step52": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step53": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step54": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step55": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step56": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step58": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step59": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step60": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_RTP_IN_AIO_WITH_GAF_TAX(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 89;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				//Topup
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown","Topup_Amount",1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step13": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step19": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step22": stepStatus[step] = deleteLogFile("Location", "Log_FileName", 1);
				break;
				case "step23": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step24": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				//Topup Grid verify
				case "step25": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				// Bundle Verify
				case "step33": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_2"), "Type", "View_Type_Bundle",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_2"), "SimPlan", "View_SimPlan_Bundle",1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_2"), "BundleType", "View_BundleType_Bundle",1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal_Bundle",1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_2"), "NoofMonths", "View_NoofMonths_Bundle",1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice_Bundle",1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_2"), "DiscountPrice", "View_DiscountPrice_Bundle",1);
				break;
				//Payent mode
				case "step40": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step41": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step42": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("existingCard_rdButton"), "Payment Using", "Existing Card");
				break;
				case "step43": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("ExCardNumberHead_Label"), "Existing Card Table");
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardNumber_Label"), "Existing Card Number","Existing_CardNo",1);
				break;
				case "step45": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardName_Label"), "Existing Card Name","Existing_NameOnCard",1);
				break;
				case "step46": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardType_Label"), "Existing Card Type","Existing_CardType",1);
				break;
				case "step47": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("ExCardExpiryDate_Label"), "Existing Card ExpiryDate","Existing_ExpiryDate",1);
				break;
				case "step48": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("ExCCNo_Label"), "Card CC Number","Existing_CVV_Number",1);
				break;
				case "step49": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step50": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step51": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step52": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step53": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				case "step61": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_2"), "Type", "View_Type_Bundle",1);
				break;
				case "step62": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_2"), "SimPlan", "View_SimPlan_Bundle",1);
				break;
				case "step63": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_2"), "BundleType", "View_BundleType_Bundle",1);
				break;
				case "step64": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_2"), "AutoRenewal", "View_AutoRenewal_Bundle",1);
				break;
				case "step65": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_2"), "NoofMonths", "View_NoofMonths_Bundle",1);
				break;
				case "step66": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_2"), "OriginalPrice", "View_OriginalPrice_Bundle",1);
				break;
				case "step67": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_2"), "DiscountPrice", "Submit_DiscountPrice_Bundle",1);
				break;
				case "step68": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt2"), "Total Amount");
				break;
				case "step69": stepStatus[step] = waitUntilWebElementTextAppear(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt2"), "Total Amount");
				break;
				case "step70": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt2"), "Total Amount","Total_Amount",1);
				break;
				case "step71": stepStatus[step] = waitUntilWebElementTextAppear(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTaxAmount"), "TAX Amount");
				break;
				case "step72": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTaxAmount"), "TAX Amount","TAX_Amount",1);
				break;
				case "step73": stepStatus[step] = waitUntilWebElementTextAppear(online_TopUp.AllInOne_TopUp_Page("VAT_Amount"), "VAT Amount");
				break;
				case "step74": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("VAT_Amount"), "VAT Amount","VAT_Amount",1);
				break;
				case "step75": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step76": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step77": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step78": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step79": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneMSISDN"), "MSISDN","Confirm_MSISDN",1);
				break;
				case "step80": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneAmount"), "Amount","Confirm_Amount",1);
				break;
				case "step81": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinonefinalTaxAmount"), "Final TAX Amount","Final_TAX_Amount",1);
				break;
				case "step82": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_VAT_Amount"), "Final VAT Amount","Final_VAT_Amount",1);
				break;
				case "step83": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step84": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step85": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step86": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step87": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step88": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step89": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_TOPUP_AIO_WITH_GAF_TAX(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 84;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup Amount Dropdown","Topup_Amount",1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step13": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Submit");
				break;
				case "step14": stepStatus[step] = deleteLogFile("Location", "Log_FileName", 1);
				break;
				case "step15": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				case "step23": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step24": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step25": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("newCard_rdButton"), "Payment Using", "New Card");
				break;
				case "step26": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown");
				break;
				case "step27": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown", "CardType", 1);
				break;
				case "step28": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name");
				break;
				case "step29": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name", "CardName", 1);
				break;
				case "step30": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber1_TextBox"), "Card 1st 4 Number", "Card_Number1", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber2_TextBox"), "Card 2nd 4 Number", "Card_Number2", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber3_TextBox"), "Card 3rd 4 Number", "Card_Number3", 1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber4_TextBox"), "Card 4th 4 Number", "Card_Number4", 1);
				break;
				case "step34": stepStatus[step] = javaScriptDatePicker(online_TopUp.AllInOne_TopUp_Page("expiryDate_TextBoxJS"), "Expiry Date", "Expiry_Date", 1);
				break;
				case "step35": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number");
				break;
				case "step36": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number", "CVV_Number", 1);
				break;
				case "step37": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email");
				break;
				case "step38": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				//USA Address:
				case "step40": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House Number", "HouseNumber_USA", 1);
				break;
				case "step41": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("labelstreetName"), "Street Name", "StreetName_USA", 1);
				break;
				case "step42": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("lblcityName"), "City Name", "CityName_USA", 1);
				break;
				case "step43": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("apartmentNo_Textbox"), "Appartment No", "AppartmentNo", 1);
				break;
				case "step44": stepStatus[step] = WebEditClickAndEnterText(online_TopUp.AllInOne_TopUp_Page("postcode_TextBox"), "PostCode", "PostCode", 1);
				break;
				case "step45": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("searchIcon_Button"), "Search Button");
				break;
				case "step46": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step47": stepStatus[step] = WebListSelectFromGAFEnv(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","AddressInENV",1);
				break;
				case "step48": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step49": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lststateName"), "State Name");
				break;
				case "step50": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lststateName"), "State Name","StateName_USA",1);
				break;
				case "step51": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step52": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step53": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step54": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step55": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step61": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step62": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				case "step63": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt2"), "Total Amount");
				break;
				case "step64": stepStatus[step] = waitUntilWebElementTextAppear(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt2"), "Total Amount");
				break;
				case "step65": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt2"), "Total Amount","Total_Amount",1);
				break;
				case "step66": stepStatus[step] = waitUntilWebElementTextAppear(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTaxAmount"), "TAX Amount");
				break;
				case "step67": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTaxAmount"), "TAX Amount","TAX_Amount",1);
				break;
				case "step68": stepStatus[step] = waitUntilWebElementTextAppear(online_TopUp.AllInOne_TopUp_Page("VAT_Amount"), "VAT Amount");
				break;
				case "step69": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("VAT_Amount"), "VAT Amount","VAT_Amount",1);
				break;
				case "step70": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step71": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step72": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step73": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step74": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneMSISDN"), "MSISDN","Confirm_MSISDN",1);
				break;
				case "step75": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneAmount"), "Amount","Confirm_Amount",1);
				break;
				case "step76": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinonefinalTaxAmount"), "Final TAX Amount","Final_TAX_Amount",1);
				break;
				case "step77": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_VAT_Amount"), "Final VAT Amount","Final_VAT_Amount",1);
				break;
				case "step78": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step79": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step80": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step81": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step82": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step83": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step84": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DO_BUNDLE_AIO_WITH_GAF_TAX(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 90;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "All-In-One Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step11": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step17": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step18": stepStatus[step] = deleteLogFile("Location", "Log_FileName", 1);
				break;
				case "step19": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step20": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step21": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Details Grid");
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdType_1"), "Type", "View_Type",1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdDiscountPrice_1"), "DiscountPrice", "View_DiscountPrice",1);
				break;
				case "step29": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step30": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step31": stepStatus[step] = WebRadioSelect(online_TopUp.AllInOne_TopUp_Page("newCard_rdButton"), "Payment Using", "New Card");
				break;
				case "step32": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown");
				break;
				case "step33": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("cardType_Dropdown"), "CardType Dropdown", "CardType", 1);
				break;
				case "step34": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name");
				break;
				case "step35": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardName_TextBox"), "Card Name", "CardName", 1);
				break;
				case "step36": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber1_TextBox"), "Card 1st 4 Number", "Card_Number1", 1);
				break;
				case "step37": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber2_TextBox"), "Card 2nd 4 Number", "Card_Number2", 1);
				break;
				case "step38": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber3_TextBox"), "Card 3rd 4 Number", "Card_Number3", 1);
				break;
				case "step39": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("cardNumber4_TextBox"), "Card 4th 4 Number", "Card_Number4", 1);
				break;
				case "step40": stepStatus[step] = javaScriptDatePicker(online_TopUp.AllInOne_TopUp_Page("expiryDate_TextBoxJS"), "Expiry Date", "Expiry_Date", 1);
				break;
				case "step41": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number");
				break;
				case "step42": stepStatus[step] = javaScriptEnterText(online_TopUp.AllInOne_TopUp_Page("cvv_TextBox"), "CVV Number", "CVV_Number", 1);
				break;
				case "step43": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email");
				break;
				case "step44": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step45": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				//USA Address:
				case "step46": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House Number", "HouseNumber_USA", 1);
				break;
				case "step47": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("labelstreetName"), "Street Name", "StreetName_USA", 1);
				break;
				case "step48": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("lblcityName"), "City Name", "CityName_USA", 1);
				break;
				case "step49": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("apartmentNo_Textbox"), "Appartment No", "AppartmentNo", 1);
				break;
				case "step50": stepStatus[step] = WebEditClickAndEnterText(online_TopUp.AllInOne_TopUp_Page("postcode_TextBox"), "PostCode", "PostCode", 1);
				break;
				case "step51": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("searchIcon_Button"), "Search Button");
				break;
				case "step52": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step53": stepStatus[step] = WebListSelectFromGAFEnv(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","AddressInENV",1);
				break;
				case "step54": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step55": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lststateName"), "State Name");
				break;
				case "step56": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lststateName"), "State Name","StateName_USA",1);
				break;
				case "step57": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode");
				break;
				case "step58": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step59": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step60": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step61": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Details Grid");
				break;
				case "step62": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitType_1"), "Type", "View_Type",1);
				break;
				case "step63": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitSimPlan_1"), "SimPlan", "View_SimPlan",1);
				break;
				case "step64": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitBundleType_1"), "BundleType", "View_BundleType",1);
				break;
				case "step65": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitAutoRenewal_1"), "AutoRenewal", "View_AutoRenewal",1);
				break;
				case "step66": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitNoofMonths_1"), "NoofMonths", "View_NoofMonths",1);
				break;
				case "step67": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitOriginalPrice_1"), "OriginalPrice", "View_OriginalPrice",1);
				break;
				case "step68": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("tdSubmitDiscountPrice_1"), "DiscountPrice", "Submit_DiscountPrice",1);
				break;
				case "step69": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt2"), "Total Amount");
				break;
				case "step70": stepStatus[step] = waitUntilWebElementTextAppear(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt2"), "Total Amount");
				break;
				case "step71": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt2"), "Total Amount","Total_Amount",1);
				break;
				case "step72": stepStatus[step] = waitUntilWebElementTextAppear(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTaxAmount"), "TAX Amount");
				break;
				case "step73": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTaxAmount"), "TAX Amount","TAX_Amount",1);
				break;
				case "step74": stepStatus[step] = waitUntilWebElementTextAppear(online_TopUp.AllInOne_TopUp_Page("VAT_Amount"), "VAT Amount");
				break;
				case "step75": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("VAT_Amount"), "VAT Amount","VAT_Amount",1);
				break;
				case "step76": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step77": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit Button");
				break;
				case "step78": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response");
				break;
				case "step79": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Purchase Response","Response_Message",1);
				break;
				case "step80": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneMSISDN"), "MSISDN","Confirm_MSISDN",1);
				break;
				case "step81": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneAmount"), "Amount","Confirm_Amount",1);
				break;
				case "step82": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinonefinalTaxAmount"), "Final TAX Amount","Final_TAX_Amount",1);
				break;
				case "step83": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_VAT_Amount"), "Final VAT Amount","Final_VAT_Amount",1);
				break;
				case "step84": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step85": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneReferenceNumber"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step86": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step87": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("lblAllinoneTransactionNumber"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step88": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step89": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step90": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	/*---------------------------LAKSHMAN CODE END------------------------------------*/
	
	/*---------------------------PRAVEEN CODE------------------------------------*/

	public synchronized void Open_SQL_Connection(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBOpenConnection(property.getProperty("SQL_Server"), property.getProperty("SQL_Server_DB_Name"), property.getProperty("SQL_Server_UID"), property.getProperty("SQL_Server_PWD"));
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PreCondition_SQLDB_USA_REG(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 7;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBDelete("mstcustomer_TableName", "Condition", 1);
				break;
				case "step2": stepStatus[step] = SQLDBDelete("mstnfblockreason_TableName", "Condition", 1);
				break;
				case "step3": stepStatus[step] = SQLDBDelete("mstcustomerlog_TableName", "Condition", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("MSTIVRLanguage_TableName", "MSTIVRLanguage_ColumnName", "MSTIVRLanguage_Condition", "MSTIVRLanguage_ColumnValue", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("MstPreferredLanguage_TableName", "MstPreferredLanguage_ColumnName", "MstPreferredLanguage_Condition", "MstPreferredLanguage_ColumnValue", 1);
				break;
				case "step6": stepStatus[step] = RRBSDBSelect("RRBS_TABLENAME", "COLUMNNAME_MSISDN", "RRBS_CONDITION", "COLUMNVALUE_MSISDN", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("mstmvnoaccount_TableName", "ColumnName_mstmvnoaccount", "Condition", "ColumnValue_mstmvnoaccount", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PreCondition_Edit_REG_USA(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 2;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBSelect("MSTIVRLanguage_TableName", "MSTIVRLanguage_ColumnName", "MSTIVRLanguage_Condition", "MSTIVRLanguage_ColumnValue", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("MstPreferredLanguage_TableName", "MstPreferredLanguage_ColumnName", "MstPreferredLanguage_Condition", "MstPreferredLanguage_ColumnValue", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void View_REG_Success_USA(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 38;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step3": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step4": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "MSISDN", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step7": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step8": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("view_RegBtn"), "View_Reg_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("view_RegBtn"), "View_Reg_Button");
				break;
				case "step10": stepStatus[step] = changeToCoordinates("USA_Registration");
				break;
				case "step11": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("view_Title"), "Title");
				break;
				case "step12": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_Title"), "Title", "Title", 1);
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_FirstName"), "FirstName", "First_Name", 1);
				break;
				case "step14": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_LastName"), "LastName", "Last_Name", 1);
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_DOB"), "DOB", "DOB", 1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_Email"), "Email", "Email", 1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_ConEmail"), "Confirm_Email", "ConfirmEmail", 1);
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_Contact"), "ContactNo", "Contact_Number", 1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_AccNo"), "AccountNo", "Acc_Number", 1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_Country"), "Country", "Country", 1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_PostCode"), "PostCode", "Post_Code", 1);
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_HouseNo"), "HouseNo", "House_Number", 1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_StreetAdd"), "StreetAddress", "StreetAddress", 1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_City"), "City", "City", 1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_State"), "State", "State", 1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_PUKCode"), "PUKCode", "Puk_Code", 1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_MSISDN"), "MSISDN", "MSISDN", 1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_IMSI1"), "IMSI1", "IMSI1", 1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_IMSI2"), "IMSI2", "IMSI2", 1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_ICCID"), "ICCID", "ICCID", 1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_MostCallCtry"), "Most_Call_Country", "MostCountryCall", 1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_HearAbUs"), "Hear_About_Us", "HearAboutUs", 1);
				break;
				case "step33": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_SecQues"), "SecretQuestion", "SecretQuestion", 1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_SecAns"), "SecretAnswer", "SecretAnswer", 1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_Language"), "Language", "Language", 1);
				break;
				case "step36": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("view_CloseButton"), "Close_Button");
				break;
				case "step37": stepStatus[step] = PerformAction_MoveToElementAndClick(registration_USA.registration_USA_Page("viewSubReg_CloseBtn"), "Subscriber_View_Close_Button");
				break;
				case "step38": stepStatus[step] = setScrollBarOFF("USA_Registration");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void SetEnv_Settings_GBR(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 49;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.settings_Page("country_DropdownValues_GBR"), "Country_Dropdown", "CountryBrand_DDValue", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;
				case "step10": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_SiteCode", 1);
				break;
				case "step11": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_SiteCode"), "SiteCode");
				break;
				case "step12": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_SiteCode"), "SiteCode", "value_SiteCode", 1);
				break;
				case "step13": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_CountryCode", 1);
				break;
				case "step14": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_CountryCode"), "CountryCode");
				break;
				case "step15": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_CountryCode"), "CountryCode", "value_CountryCode", 1);
				break;
				case "step16": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_CountryPrefix", 1);
				break;
				case "step17": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_CountryPrefix"), "CountryPrefix");
				break;
				case "step18": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_CountryPrefix"), "CountryPrefix", "value_CountryPrefix", 1);
				break;
				case "step19": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_CountryName", 1);
				break;
				case "step20": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_CountryName"), "CountryName");
				break;
				case "step21": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_CountryName"), "CountryName", "value_CountryName", 1);
				break;
				case "step22": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_ESMESMSEnabler", 1);
				break;
				case "step23": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_ESMESMSEnabler"), "ESMESMSEnabler");
				break;
				case "step24": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_ESMESMSEnabler"), "ESMESMSEnabler", "value_ESMESMSEnabler", 1);
				break;
				case "step25": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_SmtpAddress", 1);
				break;
				case "step26": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_SmtpAddress"), "SmtpAddress");
				break;
				case "step27": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_SmtpAddress"), "SmtpAddress", "value_SmtpAddress", 1);
				break;
				case "step28": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_SmtpPassword", 1);
				break;
				case "step29": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_SmtpPassword"), "SmtpPassword");
				break;
				case "step30": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_SmtpPassword"), "SmtpPassword", "value_SmtpPassword", 1);
				break;
				case "step31": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_SmtpPort", 1);
				break;
				case "step32": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_SmtpPort"), "SmtpPort");
				break;
				case "step33": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_SmtpPort"), "SmtpPort", "value_SmtpPort", 1);
				break;
				case "step34": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_RRBSNetworkId", 1);
				break;
				case "step35": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_RRBSNetworkID"), "RRBSNetworkID");
				break;
				case "step36": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_RRBSNetworkID"), "RRBSNetworkID", "value_RRBSNetworkId", 1);
				break;
				case "step37": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_HLREntityName", 1);
				break;
				case "step38": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_HLREntityName"), "HLREntityName");
				break;
				case "step39": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_HLREntityName"), "HLREntityName", "value_HLREntityName", 1);
				break;
				case "step40": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_MSISDNMinLength", 1);
				break;
				case "step41": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_MSISDNMinLength_Prepaid"), "MSISDNMinLength_Prepaid");
				break;
				case "step42": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_MSISDNMinLength_Prepaid"), "MSISDNMinLength_Prepaid", "value_MSISDNMinLength", 1);
				break;
				case "step43": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_MSISDNMaxLength", 1);
				break;
				case "step44": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_MSISDNMaxLength_Prepaid"), "MSISDNMaxLength_Prepaid");
				break;
				case "step45": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_MSISDNMaxLength_Prepaid"), "MSISDNMaxLength_Prepaid", "value_MSISDNMaxLength", 1);
				break;
				case "step46": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_CountryCodeGAF", 1);
				break;
				case "step47": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_CountryCodeGAF"), "CountryCodeGAF");
				break;
				case "step48": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_CountryCodeGAF"), "CountryCodeGAF", "value_CountryCodeGAF", 1);
				break;
				case "step49": stepStatus[step] = WebElementClick(settings.settings_Page("close_Btn"), "Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void SetEnv_Settings_USA(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 49;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.settings_Page("country_Dropdown_USA"), "Country_Dropdown_USA");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.settings_Page("country_Dropdown_USA"), "Country_Dropdown_USA");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.settings_Page("country_DropdownValues_USA"), "Country_Dropdown", "CountryBrand_DDValue", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;
				case "step10": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_SiteCode", 1);
				break;
				case "step11": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_SiteCode"), "SiteCode");
				break;
				case "step12": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_SiteCode"), "SiteCode", "value_SiteCode", 1);
				break;
				case "step13": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_CountryCode", 1);
				break;
				case "step14": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_CountryCode"), "CountryCode");
				break;
				case "step15": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_CountryCode"), "CountryCode", "value_CountryCode", 1);
				break;
				case "step16": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_CountryPrefix", 1);
				break;
				case "step17": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_CountryPrefix"), "CountryPrefix");
				break;
				case "step18": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_CountryPrefix"), "CountryPrefix", "value_CountryPrefix", 1);
				break;
				case "step19": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_CountryName", 1);
				break;
				case "step20": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_CountryName"), "CountryName");
				break;
				case "step21": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_CountryName"), "CountryName", "value_CountryName", 1);
				break;
				case "step22": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_ESMESMSEnabler", 1);
				break;
				case "step23": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_ESMESMSEnabler"), "ESMESMSEnabler");
				break;
				case "step24": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_ESMESMSEnabler"), "ESMESMSEnabler", "value_ESMESMSEnabler", 1);
				break;
				case "step25": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_SmtpAddress", 1);
				break;
				case "step26": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_SmtpAddress"), "SmtpAddress");
				break;
				case "step27": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_SmtpAddress"), "SmtpAddress", "value_SmtpAddress", 1);
				break;
				case "step28": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_SmtpPassword", 1);
				break;
				case "step29": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_SmtpPassword"), "SmtpPassword");
				break;
				case "step30": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_SmtpPassword"), "SmtpPassword", "value_SmtpPassword", 1);
				break;
				case "step31": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_SmtpPort", 1);
				break;
				case "step32": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_SmtpPort"), "SmtpPort");
				break;
				case "step33": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_SmtpPort"), "SmtpPort", "value_SmtpPort", 1);
				break;
				case "step34": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_RRBSNetworkId", 1);
				break;
				case "step35": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_RRBSNetworkID"), "RRBSNetworkID");
				break;
				case "step36": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_RRBSNetworkID"), "RRBSNetworkID", "value_RRBSNetworkId", 1);
				break;
				case "step37": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_HLREntityName", 1);
				break;
				case "step38": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_HLREntityName"), "HLREntityName");
				break;
				case "step39": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_HLREntityName"), "HLREntityName", "value_HLREntityName", 1);
				break;
				case "step40": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_MSISDNMinLength", 1);
				break;
				case "step41": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_MSISDNMinLength_Prepaid"), "MSISDNMinLength_Prepaid");
				break;
				case "step42": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_MSISDNMinLength_Prepaid"), "MSISDNMinLength_Prepaid", "value_MSISDNMinLength", 1);
				break;
				case "step43": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_MSISDNMaxLength", 1);
				break;
				case "step44": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_MSISDNMaxLength_Prepaid"), "MSISDNMaxLength_Prepaid");
				break;
				case "step45": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_MSISDNMaxLength_Prepaid"), "MSISDNMaxLength_Prepaid", "value_MSISDNMaxLength", 1);
				break;
				case "step46": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_CountryCodeGAF", 1);
				break;
				case "step47": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_CountryCodeGAF"), "CountryCodeGAF");
				break;
				case "step48": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_CountryCodeGAF"), "CountryCodeGAF", "value_CountryCodeGAF", 1);
				break;
				case "step49": stepStatus[step] = WebElementClick(settings.settings_Page("close_Btn"), "Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Precondition_Staff_Topup_UI(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 22;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.settings_Page("country_DropdownValues_GBR"), "Country_Dropdown_GBR", "CountryBrand_DDValue_GBR", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;
				case "step10": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_PlanChangeEnabler", 1);
				break;
				case "step11": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_PlanChangeEnabler"), "PlanChangeEnabler");
				break;
				case "step12": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_PlanChangeEnabler"), "PlanChangeEnabler", "value_PlanChangeEnabler", 1);
				break;
				case "step13": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_TicketIDconfig", 1);
				break;
				case "step14": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_TicketIDconfig"), "TicketIDconfig");
				break;
				case "step15": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_TicketIDconfig"), "TicketIDconfig", "value_TicketIDconfig", 1);
				break;
				case "step16": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_TicketIDMinLength", 1);
				break;
				case "step17": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_TicketIDMinLength"), "TicketIDMinLength");
				break;
				case "step18": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_TicketIDMinLength"), "TicketIDMinLength", "value_TicketIDMinLength", 1);
				break;
				case "step19": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_TicketIDMaxLength", 1);
				break;
				case "step20": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_TicketIDMaxLength"), "TicketIDMaxLength");
				break;
				case "step21": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_TicketIDMaxLength"), "TicketIDMaxLength", "value_TicketIDMaxLength", 1);
				break;
				case "step22": stepStatus[step] = WebElementClick(settings.settings_Page("close_Btn"), "Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Pre_Post_conditions_REG_GAF(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 14;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.settings_Page("country_Dropdown_USA"), "Country_Dropdown_USA");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.settings_Page("country_Dropdown_USA"), "Country_Dropdown_USA");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.settings_Page("country_DropdownValues_USA"), "Country_Dropdown_USA", "CountryBrand_DDValue_USA", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;
				case "step10": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_UseGAF", 1);
				break;
				case "step11": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_UseGAF"), "UseGAF");
				break;
				case "step12": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_UseGAF"), "UseGAF", "value_UseGAF_TRUE", 1);
				break;
				case "step13": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_UseGAF"), "UseGAF", "value_UseGAF_FALSE", 1);
				break;
				case "step14": stepStatus[step] = WebElementClick(settings.settings_Page("close_Btn"), "Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Pre_Conditions_REG_RES_EMAIL(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 16;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.settings_Page("country_Dropdown_USA"), "Country_Dropdown_USA");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.settings_Page("country_Dropdown_USA"), "Country_Dropdown_USA");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.settings_Page("country_DropdownValues_USA"), "Country_Dropdown_USA", "CountryBrand_DDValue_USA", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;
				case "step10": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_RESTRICTED_MAIL_IDS", 1);
				break;
				case "step11": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_RES_MAIL_IDS_Pre"), "RESTRICTED_MAIL_IDS_Prepaid");
				break;
				case "step12": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_RES_MAIL_IDS_Pre"), "RESTRICTED_MAIL_IDS_Prepaid", "value_RESTRICTED_MAIL_IDS", 1);
				break;
				case "step13": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_RESTRICTED_MAIL_ID_CHECK", 1);
				break;
				case "step14": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_RESTRICTED_MAIL_ID_CHECK_Pre"), "RESTRICTED_MAIL_ID_CHECK_Prepaid");
				break;
				case "step15": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_RESTRICTED_MAIL_ID_CHECK_Pre"), "RESTRICTED_MAIL_ID_CHECK_Prepaid", "value_RESTRICTED_MAIL_ID_CHECK", 1);
				break;
				case "step16": stepStatus[step] = WebElementClick(settings.settings_Page("close_Btn"), "Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void REG_Success_USA(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 60;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("newSubscriber_txtBox"), "New_Subscriber");
				break;
				case "step3": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("newSubscriber_txtBox"), "New_Subscriber", "MSISDN", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("register_Button"), "Registration_Button");
				break;
				case "step5": stepStatus[step] = pageLoadCheck();
				break;
				case "step6": stepStatus[step] = changeToCoordinates("USA_Registration");
				break;
				case "step7": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("title_Dropdown"), "Title_Dropdown");
				break;
				case "step8": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("title_Dropdown"), "Title", "Title", 1);
				break;
				case "step9": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("firstName_TxtBox"), "FirstName", "First_Name", 1);
				break;
				case "step10": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("lastName_TxtBox"), "LastName", "Last_Name", 1);
				break;
				case "step11": stepStatus[step] = javaScriptDatePicker(registration_USA.registration_USA_DatePicker("DOB"), "DOB", "DOB", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("email_TxtBox"), "Email", "Email", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("confirmEmail_TxtBox"), "ConfirmEmail", "ConfirmEmail", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("contactNo_TxtBox"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step15": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("country_TxtBox"), "Country", "Country", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("postCode_TxtBox"), "Post_Code", "Post_Code", 1);
				break;
				case "step17": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("findAddress_Btn"), "Find_Address");
				break;
				case "step18": stepStatus[step] = waitUntilDisappear(registration_USA.registration_USA_Page("regPostCode_Load"), "PostCode_LoadIcon");
				break;
				case "step19": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("houseNo_TxtBox"), "House_No", "House_Number", 1);
				break;
				case "step20": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("street_TxtBox"), "Street_Address", "StreetAddress", 1);
				break;
				case "step21": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("city_TxtBox"), "City", "City", 1);
				break;
				case "step22": stepStatus[step] = WebListSelectedValue(registration_USA.registration_USA_Page("state_TxtBox"), "State", "State", 1);
				break;
				case "step23": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("PUK_Number"), "Puk_Code", "Puk_Code", 1);
				break;
				case "step24": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("MSISDN_TxtBox"), "MSISDN", "MSISDN", 1);
				break;
				case "step25": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("callMost_DD"), "Most_Country_Call", "MostCountryCall", 1);
				break;
				case "step26": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("hearAb_DD"), "Hear_About_Us", "HearAboutUs", 1);
				break;
				case "step27": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("secretQues_DD"), "Secret_Question", "SecretQuestion", 1);
				break;
				case "step28": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("secretAns_TxtBox"), "Secret_Answer", "SecretAnswer", 1);
				break;
				case "step29": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("language_Dropdown"), "Select_Language", "Language", 1);
				break;
				case "step30": stepStatus[step] = WebCheckboxON(registration_USA.registration_USA_Page("terms_Checkbox"), "Check_Terms_&_Conditions");
				break;
				case "step31": stepStatus[step] = WebCheckboxON(registration_USA.registration_USA_Page("SMS_Checkbox"), "SMS_Checkbox");
				break;
				case "step32": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("next_Btn"), "Next_Button");
				break;
				case "step33": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("confirm_Title"), "Confirmation of Title");
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Title"), "Confirm_Title", "Confirm_Title", 1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_FirstName"), "Confirm_FirstName", "Confirm_First_Name", 1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_LastName"), "Confirm_LastName", "Confirm_Last_Name", 1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_DOB"), "Confirm_DOB", "Confirm_DOB", 1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Email1"), "Confirm_Email1", "Confirm_Email1", 1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Email2"), "Confirm_Email2", "Confirm_Email2", 1);
				break;
				case "step40": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_ContactNo"), "Confirm_ContactNo", "Confirm_Contact_Number", 1);
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Country"), "Confirm_Country", "Confirm_Country", 1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_PostCode"), "Confirm_PostCode", "Confirm_Post_Code", 1);
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_HouseNo"), "Confirm_HouseNo", "Confirm_House_Number", 1);
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Street"), "Confirm_Street", "Confirm_StreetAddress", 1);
				break;
				case "step45": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_City"), "Confirm_City", "Confirm_City", 1);
				break;
				case "step46": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_State"), "Confirm_State", "Confirm_State", 1);
				break;
				case "step47": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_PUK_Number"), "Confirm_PUK_Number", "Confirm_Puk_Code", 1);
				break;
				case "step48": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_MSISDN"), "Confirm_MSISDN", "Confirm_MSISDN", 1);
				break;
				case "step49": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_CallMost"), "Confirm_Most_Call_Country", "Confirm_MostCountryCall", 1);
				break;
				case "step50": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_HearAb"), "Confirm_Hear_About_Us", "Confirm_HearAboutUs", 1);
				break;
				case "step51": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_SecretQues"), "Confirm_SecretQuestion", "Confirm_SecretQuestion", 1);
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_SecretAns"), "Confirm_SecretAnswer", "Confirm_SecretAnswer", 1);
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Language"), "Confirm_Language", "Confirm_Language", 1);
				break;
				case "step54": stepStatus[step] = webCheckBoxCheckStatus(registration_USA.registration_USA_Page("confirm_SMS_Checkbox"), "Confirm_SMS_Checkbox");
				break;
				case "step55": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("submit_Button"), "Submit_Button");
				break;
				case "step56": stepStatus[step] = pageScrollUp(registration_USA.registration_USA_Page("personal_Info"), "Registration_confirmation");
				break;
				case "step57": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("confirmation_Msg"), "Registration_confirmation_message");
				break;
				case "step58": stepStatus[step] = WebElementResxKeyValueStaticCompare(registration_USA.registration_USA_Page("confirmation_Msg"), "Registration_confirmation_message", "Confirm_Message", 1);
				break;
				case "step59": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("reg_CloseBtn"), "Reg_Close_Button");
				break;
				case "step60": stepStatus[step] = setScrollBarOFF("USA_Registration");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Edit_REG_Success_USA(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 66;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step3": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step4": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "MSISDN", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step7": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step8": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("edit_RegBtn"), "Edit_Registration_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("edit_RegBtn"), "Edit_Registration_Button");
				break;
				case "step10": stepStatus[step] = pageLoadCheck();
				break;
				case "step11": stepStatus[step] = changeToCoordinates("USA_Registration");
				break;
				case "step12": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("title_Dropdown"), "Title");
				break;
				case "step13": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("title_Dropdown"), "Title", "Title", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("firstName_TxtBox"), "FirstName", "First_Name", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("lastName_TxtBox"), "LastName", "Last_Name", 1);
				break;
				case "step16": stepStatus[step] = javaScriptDatePicker(registration_USA.registration_USA_DatePicker("DOB"), "DOB", "DOB", 1);
				break;
				case "step17": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("email_TxtBox"), "Email", "Email", 1);
				break;
				case "step18": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("confirmEmail_TxtBox"), "ConfirmEmail", "ConfirmEmail", 1);
				break;
				case "step19": stepStatus[step] = webElementClearText(registration_USA.registration_USA_Page("contactNo_TxtBox"), "Contact_Number");
				break;
				case "step20": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("contactNo_TxtBox"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step21": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("country_TxtBox"), "Country", "Country", 1);
				break;
				case "step22": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("postCode_TxtBox"), "Post_Code", "Post_Code", 1);
				break;
				case "step23": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("findAddress_Btn"), "Find_Address");
				break;
				case "step24": stepStatus[step] = waitUntilDisappear(registration_USA.registration_USA_Page("regPostCode_Load"), "PostCode_LoadIcon");
				break;
				case "step25": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("houseNo_TxtBox"), "House_No", "House_Number", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("street_TxtBox"), "Street_Address", "StreetAddress", 1);
				break;
				case "step27": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("city_TxtBox"), "City", "City", 1);
				break;
				case "step28": stepStatus[step] = WebListSelectedValue(registration_USA.registration_USA_Page("state_TxtBox"), "State", "State", 1);
				break;
				case "step29": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("MSISDN_TxtBox"), "MSISDN", "MSISDN", 1);
				break;
				case "step30": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("callMost_DD"), "Most_Country_Call", "MostCountryCall", 1);
				break;
				case "step31": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("hearAb_DD"), "Hear_About_Us", "HearAboutUs", 1);
				break;
				case "step32": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("secretQues_DD"), "Secret_Question", "SecretQuestion", 1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("secretAns_TxtBox"), "Secret_Answer", "SecretAnswer", 1);
				break;
				case "step34": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("language_Dropdown"), "Select_Language", "Language", 1);
				break;
				case "step35": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("next_Btn"), "Next_Button");
				break;
				case "step36": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("confirm_Title"), "Confirmation of Title");
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Title"), "Confirm_Title", "Confirm_Title", 1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_FirstName"), "Confirm_FirstName", "Confirm_First_Name", 1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_LastName"), "Confirm_LastName", "Confirm_Last_Name", 1);
				break;
				case "step40": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_DOB"), "Confirm_DOB", "Confirm_DOB", 1);
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Email1"), "Confirm_Email1", "Confirm_Email1", 1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Email2"), "Confirm_Email2", "Confirm_Email2", 1);
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_ContactNo"), "Confirm_ContactNo", "Confirm_Contact_Number", 1);
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Country"), "Confirm_Country", "Confirm_Country", 1);
				break;
				case "step45": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_PostCode"), "Confirm_PostCode", "Confirm_Post_Code", 1);
				break;
				case "step46": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_HouseNo"), "Confirm_HouseNo", "Confirm_House_Number", 1);
				break;
				case "step47": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Street"), "Confirm_Street", "Confirm_StreetAddress", 1);
				break;
				case "step48": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_City"), "Confirm_City", "Confirm_City", 1);
				break;
				case "step49": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_State"), "Confirm_State", "Confirm_State", 1);
				break;
				case "step50": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_PUK_Number"), "Confirm_PUK_Number", "Confirm_Puk_Code", 1);
				break;
				case "step51": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_MSISDN"), "Confirm_MSISDN", "Confirm_MSISDN", 1);
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_CallMost"), "Confirm_Most_Call_Country", "Confirm_MostCountryCall", 1);
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_HearAb"), "Confirm_Hear_About_Us", "Confirm_HearAboutUs", 1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_SecretQues"), "Confirm_SecretQuestion", "Confirm_SecretQuestion", 1);
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_SecretAns"), "Confirm_SecretAnswer", "Confirm_SecretAnswer", 1);
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Language"), "Confirm_Language", "Confirm_Language", 1);
				break;
				case "step57": stepStatus[step] = webCheckBoxCheckStatus(registration_USA.registration_USA_Page("confirm_SMS_Checkbox"), "Confirm_SMS_Checkbox");
				break;
				case "step58": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("submit_Button"), "Submit_Button");
				break;
				case "step59": stepStatus[step] = pageScrollUp(registration_USA.registration_USA_Page("personal_Info"), "Registration_confirmation");
				break;
				case "step60": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("confirmation_Msg"), "Registration_confirmation_message");
				break;
				case "step61": stepStatus[step] = WebElementResxKeyValueStaticCompare(registration_USA.registration_USA_Page("confirmation_Msg"), "Registration_confirmation_message", "Confirm_Message", 1);
				break;
				case "step62": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("edit_CancelBtn"), "Cancel_Button");
				break;
				case "step63": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("view_SubMSISDN"), "Subscriber_MSISDN");
				break;
				case "step64": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_SubMSISDN"), "Subscriber_MSISDN", "Subscriber_MSISDN", 1);
				break;
				case "step65": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("view_SubICICD"), "Subscriber_ICICD", "Subscriber_ICICD", 1);
				break;
				case "step66": stepStatus[step] = setScrollBarOFF("USA_Registration");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void REG_USA_GAF_DOWN(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 7;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("newSubscriber_txtBox"), "New_Subscriber");
				break;
				case "step3": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("newSubscriber_txtBox"), "New_Subscriber", "MSISDN", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("register_Button"), "Registration_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("title_Dropdown"), "Title_Dropdown");
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("findAddress_Btn"), "FindAddress_Icon");
				break;
				case "step7": stepStatus[step] = WebElementisNotVisible(registration_USA.registration_USA_Page("findAddress_Btn"), "FindAddress_Icon");
				break;
				case "step8": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("reg_CloseBtn"), "Reg_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void REG_USA_RES_EMAIL(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 11;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("newSubscriber_txtBox"), "New_Subscriber");
				break;
				case "step3": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("newSubscriber_txtBox"), "New_Subscriber", "MSISDN", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("register_Button"), "Registration_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("title_Dropdown"), "Title_Dropdown");
				break;
				case "step6": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("email_TxtBox"), "Email", "Email", 1);
				break;
				case "step7": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("personal_Info"), "Personal_Info");
				break;
				case "step8": stepStatus[step] = WebElementisNotVisible(registration_USA.registration_USA_Page("restrict_Message"), "Restrict_Confirmation_Message");
				break; 
				case "step9": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("restrict_Message"), "Restrict_Confirmation_Message");
				break;
				case "step10": stepStatus[step] = WebElementResxKeyValueStaticCompare(registration_USA.registration_USA_Page("restrict_Message"), "Restrict_Confirmation_Message", "Restrict_ConfirmMessage", 1);
				break;
				case "step11": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("reg_CloseBtn"), "Reg_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Edit_REG_USA_RES_EMAIL(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 20;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step3": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step4": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "MSISDN", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step7": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step8": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("edit_RegBtn"), "Edit_Registration_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("edit_RegBtn"), "Edit_Registration_Button");
				break;
				case "step10": stepStatus[step] = pageLoadCheck();
				break;
				case "step11": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("title_Dropdown"), "Title");
				break;
				case "step12": stepStatus[step] = changeToCoordinates("USA_Registration");
				break;
				case "step13": stepStatus[step] = webElementClearText(registration_USA.registration_USA_Page("confirmEmail_TxtBox"), "ConfirmEmail_TxtBox");
				break;
				case "step14": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("email_TxtBox"), "Email", "Email", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("personal_Info"), "Personal_Info");
				break;
				case "step16": stepStatus[step] = WebElementisNotVisible(registration_USA.registration_USA_Page("restrict_Message"), "Restrict_Confirmation_Message");
				break;
				case "step17": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("restrict_Message"), "Restrict_Confirmation_Message");
				break;
				case "step18": stepStatus[step] = WebElementResxKeyValueStaticCompare(registration_USA.registration_USA_Page("restrict_Message"), "Restrict_Confirmation_Message", "Restrict_ConfirmMessage", 1);
				break;
				case "step19": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("reg_CloseBtn"), "Reg_Close_Button");
				break;
				case "step20": stepStatus[step] = setScrollBarOFF("USA_Registration");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void REG_Mandatory_USA(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 31;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("newSubscriber_txtBox"), "New_Subscriber");
				break;
				case "step3": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("newSubscriber_txtBox"), "New_Subscriber", "MSISDN", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("register_Button"), "Registration_Button");
				break;
				case "step5": stepStatus[step] = pageLoadCheck();
				break;
				case "step6": stepStatus[step] = changeToCoordinates("USA_Registration");
				break;
				case "step7": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("title_Dropdown"), "Title_Dropdown");
				break;
				case "step8": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("next_Btn"), "Next_Button");
				break;
				case "step9": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_HighMsg"), "Validation_Message");
				break;
				case "step10": stepStatus[step] = WebElementResxKeyValueStaticCompare(registration_USA.registration_USA_Page("val_HighMsg"), "Validation_Message", "Validation_Message", 1);
				break;
				case "step11": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_Title"), "Title_Validation");
				break;
				case "step12": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_FirstName"), "FirstName_Validation");
				break;
				case "step13": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_LastName"), "LastName_Validation");
				break;
				case "step14": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_DOB"), "DOB_Validation");
				break;
				case "step15": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_Email"), "Email_Validation");
				break;
				case "step16": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_ConfirmEmail"), "Confirm_Email_Validation");
				break;
				case "step17": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_ContactNo"), "ContactNo_Validation");
				break;
				case "step18": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_PostCode"), "PostCode_Validation");
				break;
				case "step19": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_HouseNo"), "HouseNo_Validation");
				break;
				case "step20": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_Street"), "Street_Validation");
				break;
				case "step21": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_City"), "City_Validation");
				break;
				case "step22": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_State"), "State_Validation");
				break;
				case "step23": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_PUK"), "PUK_Code_Validation");
				break;
				case "step24": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_CallMost"), "Most_Call_Country_Validation");
				break;
				case "step25": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_HearAb"), "Hear_About_Us_Validation");
				break;
				case "step26": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_SecretQues"), "Secret_Question_Validation");
				break;
				case "step27": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_SecretAns"), "Secret_Answer_Validation");
				break;
				case "step28": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_Language"), "Language_Validation");
				break;
				case "step29": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_Terms"), "Terms & Conditions_Validation");
				break;
				case "step30": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("reg_CloseBtn"), "Reg_Close_Button");
				break;
				case "step31": stepStatus[step] = setScrollBarOFF("USA_Registration");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Edit_REG_Mandatory_USA(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 53;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step3": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step4": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "MSISDN", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step7": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step8": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("edit_RegBtn"), "Edit_Registration_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("edit_RegBtn"), "Edit_Registration_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("title_Dropdown"), "Title_Dropdown");
				break;
				case "step11": stepStatus[step] = changeToCoordinates("USA_Registration");
				break;
				case "step12": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("title_Dropdown"), "Title", "Title", 1);
				break;
				case "step13": stepStatus[step] = webElementClearText(registration_USA.registration_USA_Page("firstName_TxtBox"), "FirstName");
				break;
				case "step14": stepStatus[step] = webElementClearText(registration_USA.registration_USA_Page("lastName_TxtBox"), "LastName");
				break;
				case "step15": stepStatus[step] = javaScriptDatePicker(registration_USA.registration_USA_DatePicker("DOB"), "DOB", "DOB", 1);
				break;
				case "step16": stepStatus[step] = webElementClearText(registration_USA.registration_USA_Page("email_TxtBox"), "Email");
				break;
				case "step17": stepStatus[step] = webElementClearText(registration_USA.registration_USA_Page("confirmEmail_TxtBox"), "ConfirmEmail");
				break;
				case "step18": stepStatus[step] = webElementClearText(registration_USA.registration_USA_Page("contactNo_TxtBox"), "Contact_Number");
				break;
				case "step19": stepStatus[step] = webElementClearText(registration_USA.registration_USA_Page("postCode_TxtBox"), "Post_Code");
				break;
				case "step20": stepStatus[step] = webElementClearText(registration_USA.registration_USA_Page("houseNo_TxtBox"), "House_No");
				break;
				case "step21": stepStatus[step] = webElementClearText(registration_USA.registration_USA_Page("street_TxtBox"), "Street_Address");
				break;
				case "step22": stepStatus[step] = webElementClearText(registration_USA.registration_USA_Page("city_TxtBox"), "City");
				break;
				case "step23": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("state_TxtBox"), "State", "State", 1);
				break;
				case "step24": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("callMost_DD"), "Most_Country_Call", "MostCountryCall", 1);
				break;
				case "step25": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("hearAb_DD"), "Hear_About_Us", "HearAboutUs", 1);
				break;
				case "step26": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("secretQues_DD"), "Secret_Question", "SecretQuestion", 1);
				break;
				case "step27": stepStatus[step] = webElementClearText(registration_USA.registration_USA_Page("secretAns_TxtBox"), "Secret_Answer");
				break;
				case "step28": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("language_Dropdown"), "Language", "Language", 1);
				break;
				case "step29": stepStatus[step] = WebCheckboxOFF(registration_USA.registration_USA_Page("terms_Checkbox"), "Terms_&_Conditions");
				break;
				case "step30": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("next_Btn"), "Next_Button");
				break;
				case "step31": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_HighMsg"), "Validation_Message");
				break;
				case "step32": stepStatus[step] = WebElementResxKeyValueStaticCompare(registration_USA.registration_USA_Page("val_HighMsg"), "Validation_Message", "Validation_Message", 1);
				break;
				case "step33": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_Title"), "Title_Validation");
				break;
				case "step34": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_FirstName"), "FirstName_Validation");
				break;
				case "step35": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_LastName"), "LastName_Validation");
				break;
				case "step36": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_DOB"), "DOB_Validation");
				break;
				case "step37": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_Email"), "Email_Validation");
				break;
				case "step38": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_ConfirmEmail"), "Confirm_Email_Validation");
				break;
				case "step39": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_ContactNo"), "ContactNo_Validation");
				break;
				case "step40": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_PostCode"), "PostCode_Validation");
				break;
				case "step41": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_HouseNo"), "HouseNo_Validation");
				break;
				case "step42": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_Street"), "Street_Validation");
				break;
				case "step43": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_City"), "City_Validation");
				break;
				case "step44": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_State"), "State_Validation");
				break;
				case "step45": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_PUK"), "PUK_Code_Validation");
				break;
				case "step46": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_CallMost"), "Most_Call_Country_Validation");
				break;
				case "step47": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_HearAb"), "Hear_About_Us_Validation");
				break;
				case "step48": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_SecretQues"), "Secret_Question_Validation");
				break;
				case "step49": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_SecretAns"), "Secret_Answer_Validation");
				break;
				case "step50": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_Language"), "Language_Validation");
				break;
				case "step51": stepStatus[step] = checkElementIsDisplayed(registration_USA.registration_USA_Page("val_Terms"), "Terms & Conditions_Validation");
				break;
				case "step52": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("reg_CloseBtn"), "Reg_Close_Button");
				break;
				case "step53": stepStatus[step] = setScrollBarOFF("USA_Registration");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void REG_Success_USA_MIN_MAX(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 82;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("newSubscriber_txtBox"), "New_Subscriber");
				break;
				case "step3": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("newSubscriber_txtBox"), "New_Subscriber", "MSISDN", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("register_Button"), "Registration_Button");
				break;
				case "step5": stepStatus[step] = pageLoadCheck();
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("title_Dropdown"), "Title_Dropdown");
				break;
				case "step7": stepStatus[step] = changeToCoordinates("USA_Registration");
				break;
				case "step8": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("title_Dropdown"), "Title", "Title", 1);
				break;
				case "step9": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("firstName_TxtBox"), "FirstName", "First_Name", 1);
				break;
				case "step10": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("lastName_TxtBox"), "LastName", "Last_Name", 1);
				break;
				case "step11": stepStatus[step] = javaScriptDatePicker(registration_USA.registration_USA_DatePicker("DOB"), "DOB", "DOB", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("email_TxtBox"), "Invalid_Email", "InvalidEmail", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("confirmEmail_TxtBox"), "Invalid_ConfirmEmail", "InvalidConfirmEmail", 1);
				break;
				case "step14": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("personal_Info"), "Personal_Info");
				break;
				case "step15": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("invalidEmail_ConfMsg"), "InvalidEmail_Validation_Message");
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("invalidEmail_ConfMsg"), "Invalid_Email", "InvalidEmail_ConfirmationMsg", 1);
				break;
				case "step17": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("invalidConfirmEmail_ConfMsg"), "Invalid_ConfirmEmail_Validation_Message");
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("invalidConfirmEmail_ConfMsg"), "Invalid_ConfirmEmail", "InvalidEmail_ConfirmationMsg", 1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("email_TxtBox"), "Mismatch_Email", "MismatchEmail", 1);
				break;
				case "step20": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("confirmEmail_TxtBox"), "Mismatch_ConfirmEmail", "MismatchConfirmEmail", 1);
				break;
				case "step21": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("personal_Info"), "Personal_Info");
				break;
				case "step22": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("invalidConfirmEmail_ConfMsg"), "Email_Mismatch_Validation_Message");
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("invalidConfirmEmail_ConfMsg"), "Email_Mismatch", "MismatchEmail_ConfirmationMsg", 1);
				break;
				case "step24": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("email_TxtBox"), "Email", "Email", 1);
				break;
				case "step25": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("confirmEmail_TxtBox"), "ConfirmEmail", "ConfirmEmail", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("contactNo_TxtBox"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step27": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("country_TxtBox"), "Country", "Country", 1);
				break;
				case "step28": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("postCode_TxtBox"), "Post_Code", "Post_Code", 1);
				break;
				case "step29": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("findAddress_Btn"), "Find_Address");
				break;
				case "step30": stepStatus[step] = waitUntilDisappear(registration_USA.registration_USA_Page("regPostCode_Load"), "PostCode_LoadIcon");
				break;
				case "step31": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("houseNo_TxtBox"), "House_No", "House_Number", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("street_TxtBox"), "Street_Address", "StreetAddress", 1);
				break;
				case "step33": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("city_TxtBox"), "City", "City", 1);
				break;
				case "step34": stepStatus[step] = WebListSelectedValue(registration_USA.registration_USA_Page("state_TxtBox"), "State", "State", 1);
				break;
				case "step35": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("PUK_Number"), "Puk_Code", "Puk_Code_Invalid", 1);
				break;
				case "step36": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("personal_Info"), "Personal_Info");
				break;
				case "step37": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("PUKCode_ValidMsg"), "PUKCode_Validation_Message");
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("PUKCode_ValidMsg"), "PUKCode", "PUKCode_Validation_Message", 1);
				break;
				case "step39": stepStatus[step] = webElementClearText(registration_USA.registration_USA_Page("PUK_Number"), "Puk_Code");
				break;
				case "step40": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("PUK_Number"), "Puk_Code", "Puk_Code", 1);
				break;
				case "step41": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("MSISDN_TxtBox"), "MSISDN", "MSISDN_Invalid", 1);
				break;
				case "step42": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("personal_Info"), "Personal_Info");
				break;
				case "step43": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("MSISDN_ValidMsg"), "MSISDN_Validation_Message");
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("MSISDN_ValidMsg"), "MSISDN", "MSISDN_Validation_Message", 1);
				break;
				case "step45": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("MSISDN_TxtBox"), "MSISDN", "MSISDN", 1);
				break;
				case "step46": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("MSISDN_TxtBox"), "MSISDN", "MSISDN", 1);
				break;
				case "step47": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("callMost_DD"), "Most_Country_Call", "MostCountryCall", 1);
				break;
				case "step48": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("hearAb_DD"), "Hear_About_Us", "HearAboutUs", 1);
				break;
				case "step49": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("secretQues_DD"), "Secret_Question", "SecretQuestion", 1);
				break;
				case "step50": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("secretAns_TxtBox"), "Secret_Answer", "SecretAnswer", 1);
				break;
				case "step51": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("language_Dropdown"), "Select_Language", "Language", 1);
				break;
				case "step52": stepStatus[step] = WebCheckboxON(registration_USA.registration_USA_Page("terms_Checkbox"), "Check_Terms_&_Conditions");
				break;
				case "step53": stepStatus[step] = WebCheckboxON(registration_USA.registration_USA_Page("SMS_Checkbox"), "SMS_Checkbox");
				break;
				case "step54": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("next_Btn"), "Next_Button");
				break;
				case "step55": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("confirm_Title"), "Confirmation of Title");
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Title"), "Confirm_Title", "Confirm_Title", 1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_FirstName"), "Confirm_FirstName", "Confirm_First_Name", 1);
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_LastName"), "Confirm_LastName", "Confirm_Last_Name", 1);
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_DOB"), "Confirm_DOB", "Confirm_DOB", 1);
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Email1"), "Confirm_Email1", "Confirm_Email1", 1);
				break;
				case "step61": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Email2"), "Confirm_Email2", "Confirm_Email2", 1);
				break;
				case "step62": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_ContactNo"), "Confirm_ContactNo", "Confirm_Contact_Number", 1);
				break;
				case "step63": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Country"), "Confirm_Country", "Confirm_Country", 1);
				break;
				case "step64": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_PostCode"), "Confirm_PostCode", "Confirm_Post_Code", 1);
				break;
				case "step65": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_HouseNo"), "Confirm_HouseNo", "Confirm_House_Number", 1);
				break;
				case "step66": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Street"), "Confirm_Street", "Confirm_StreetAddress", 1);
				break;
				case "step67": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_City"), "Confirm_City", "Confirm_City", 1);
				break;
				case "step68": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_State"), "Confirm_State", "Confirm_State", 1);
				break;
				case "step69": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_PUK_Number"), "Confirm_PUK_Number", "Confirm_Puk_Code", 1);
				break;
				case "step70": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_MSISDN"), "Confirm_MSISDN", "Confirm_MSISDN", 1);
				break;
				case "step71": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_CallMost"), "Confirm_Most_Call_Country", "Confirm_MostCountryCall", 1);
				break;
				case "step72": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_HearAb"), "Confirm_Hear_About_Us", "Confirm_HearAboutUs", 1);
				break;
				case "step73": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_SecretQues"), "Confirm_SecretQuestion", "Confirm_SecretQuestion", 1);
				break;
				case "step74": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_SecretAns"), "Confirm_SecretAnswer", "Confirm_SecretAnswer", 1);
				break;
				case "step75": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Language"), "Confirm_Language", "Confirm_Language", 1);
				break;
				case "step76": stepStatus[step] = webCheckBoxCheckStatus(registration_USA.registration_USA_Page("confirm_SMS_Checkbox"), "Confirm_SMS_Checkbox");
				break;
				case "step77": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("submit_Button"), "Submit_Button");
				break;
				case "step78": stepStatus[step] = pageScrollUp(registration_USA.registration_USA_Page("personal_Info"), "Registration_confirmation");
				break;
				case "step79": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("confirmation_Msg"), "Registration_confirmation_message");
				break;
				case "step80": stepStatus[step] = WebElementResxKeyValueStaticCompare(registration_USA.registration_USA_Page("confirmation_Msg"), "Registration_confirmation_message", "Confirm_Message", 1);
				break;
				case "step81": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("reg_CloseBtn"), "Reg_Close_Button");
				break;
				case "step82": stepStatus[step] = setScrollBarOFF("USA_Registration");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void ED_REG_Success_USA_MIN_CHARS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 77;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step3": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step4": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "MSISDN", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step7": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step8": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("edit_RegBtn"), "Edit_Registration_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("edit_RegBtn"), "Edit_Registration_Button");
				break;
				case "step10": stepStatus[step] = pageLoadCheck();
				break;
				case "step11": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("title_Dropdown"), "Title_Dropdown");
				break;
				case "step12": stepStatus[step] = changeToCoordinates("USA_Registration");
				break;
				case "step13": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("title_Dropdown"), "Title", "Title", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("firstName_TxtBox"), "FirstName", "First_Name", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("lastName_TxtBox"), "LastName", "Last_Name", 1);
				break;
				case "step16": stepStatus[step] = javaScriptDatePicker(registration_USA.registration_USA_DatePicker("DOB"), "DOB", "DOB", 1);
				break;
				case "step17": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("email_TxtBox"), "Invalid_Email", "InvalidEmail", 1);
				break;
				case "step18": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("confirmEmail_TxtBox"), "Invalid_ConfirmEmail", "InvalidConfirmEmail", 1);
				break;
				case "step19": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("personal_Info"), "Personal Info");
				break;
				case "step20": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("invalidEmail_ConfMsg"), "InvalidEmail_Validation_Message");
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("invalidEmail_ConfMsg"), "Invalid_Email", "InvalidEmail_ConfirmationMsg", 1);
				break;
				case "step22": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("invalidConfirmEmail_ConfMsg"), "Invalid_ConfirmEmail_Validation_Message");
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("invalidConfirmEmail_ConfMsg"), "Invalid_ConfirmEmail", "InvalidEmail_ConfirmationMsg", 1);
				break;
				case "step24": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("email_TxtBox"), "Mismatch_Email", "MismatchEmail", 1);
				break;
				case "step25": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("confirmEmail_TxtBox"), "Mismatch_ConfirmEmail", "MismatchConfirmEmail", 1);
				break;
				case "step26": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("personal_Info"), "Personal Info");
				break;
				case "step27": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("invalidConfirmEmail_ConfMsg"), "Email_Mismatch_Validation_Message");
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("invalidConfirmEmail_ConfMsg"), "Email_Mismatch", "MismatchEmail_ConfirmationMsg", 1);
				break;
				case "step29": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("email_TxtBox"), "Email", "Email", 1);
				break;
				case "step30": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("confirmEmail_TxtBox"), "ConfirmEmail", "ConfirmEmail", 1);
				break;
				case "step31": stepStatus[step] = webElementClearText(registration_USA.registration_USA_Page("contactNo_TxtBox"), "Contact_Number");
				break;
				case "step32": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("contactNo_TxtBox"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step33": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("country_TxtBox"), "Country", "Country", 1);
				break;
				case "step34": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("postCode_TxtBox"), "Post_Code", "Post_Code", 1);
				break;
				case "step35": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("findAddress_Btn"), "Find_Address");
				break;
				case "step36": stepStatus[step] = waitUntilDisappear(registration_USA.registration_USA_Page("regPostCode_Load"), "PostCode_LoadIcon");
				break;
				case "step37": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("houseNo_TxtBox"), "House_No", "House_Number", 1);
				break;
				case "step38": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("street_TxtBox"), "Street_Address", "StreetAddress", 1);
				break;
				case "step39": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("city_TxtBox"), "City", "City", 1);
				break;
				case "step40": stepStatus[step] = WebListSelectedValue(registration_USA.registration_USA_Page("state_TxtBox"), "State", "State", 1);
				break;
				case "step41": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("MSISDN_TxtBox"), "MSISDN", "MSISDN", 1);
				break;
				case "step42": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("callMost_DD"), "Most_Country_Call", "MostCountryCall", 1);
				break;
				case "step43": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("hearAb_DD"), "Hear_About_Us", "HearAboutUs", 1);
				break;
				case "step44": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("secretQues_DD"), "Secret_Question", "SecretQuestion", 1);
				break;
				case "step45": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("secretAns_TxtBox"), "Secret_Answer", "SecretAnswer", 1);
				break;
				case "step46": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("language_Dropdown"), "Select_Language", "Language", 1);
				break;
				case "step47": stepStatus[step] = WebCheckboxON(registration_USA.registration_USA_Page("terms_Checkbox"), "Check_Terms_&_Conditions");
				break;
				case "step48": stepStatus[step] = WebCheckboxON(registration_USA.registration_USA_Page("SMS_Checkbox"), "SMS_Checkbox");
				break;
				case "step49": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("next_Btn"), "Next_Button");
				break;
				case "step50": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("confirm_Title"), "Confirmation of Title");
				break;
				case "step51": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Title"), "Confirm_Title", "Confirm_Title", 1);
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_FirstName"), "Confirm_FirstName", "Confirm_First_Name", 1);
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_LastName"), "Confirm_LastName", "Confirm_Last_Name", 1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_DOB"), "Confirm_DOB", "Confirm_DOB", 1);
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Email1"), "Confirm_Email1", "Confirm_Email1", 1);
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Email2"), "Confirm_Email2", "Confirm_Email2", 1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_ContactNo"), "Confirm_ContactNo", "Confirm_Contact_Number", 1);
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Country"), "Confirm_Country", "Confirm_Country", 1);
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_PostCode"), "Confirm_PostCode", "Confirm_Post_Code", 1);
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_HouseNo"), "Confirm_HouseNo", "Confirm_House_Number", 1);
				break;
				case "step61": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Street"), "Confirm_Street", "Confirm_StreetAddress", 1);
				break;
				case "step62": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_City"), "Confirm_City", "Confirm_City", 1);
				break;
				case "step63": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_State"), "Confirm_State", "Confirm_State", 1);
				break;
				case "step64": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_PUK_Number"), "Confirm_PUK_Number", "Confirm_Puk_Code", 1);
				break;
				case "step65": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_MSISDN"), "Confirm_MSISDN", "Confirm_MSISDN", 1);
				break;
				case "step66": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_CallMost"), "Confirm_Most_Call_Country", "Confirm_MostCountryCall", 1);
				break;
				case "step67": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_HearAb"), "Confirm_Hear_About_Us", "Confirm_HearAboutUs", 1);
				break;
				case "step68": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_SecretQues"), "Confirm_SecretQuestion", "Confirm_SecretQuestion", 1);
				break;
				case "step69": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_SecretAns"), "Confirm_SecretAnswer", "Confirm_SecretAnswer", 1);
				break;
				case "step70": stepStatus[step] = WebElementTextCompare(registration_USA.registration_USA_Page("confirm_Language"), "Confirm_Language", "Confirm_Language", 1);
				break;
				case "step71": stepStatus[step] = webCheckBoxCheckStatus(registration_USA.registration_USA_Page("confirm_SMS_Checkbox"), "Confirm_SMS_Checkbox");
				break;
				case "step72": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("submit_Button"), "Submit_Button");
				break;
				case "step73": stepStatus[step] = pageScrollUp(registration_USA.registration_USA_Page("personal_Info"), "Registration_confirmation");
				break;
				case "step74": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("confirmation_Msg"), "Registration_confirmation_message");
				break;
				case "step75": stepStatus[step] = WebElementResxKeyValueStaticCompare(registration_USA.registration_USA_Page("confirmation_Msg"), "Registration_confirmation_message", "Confirm_Message", 1);
				break;
				case "step76": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("reg_CloseBtn"), "Reg_Close_Button");
				break;
				case "step77": stepStatus[step] = setScrollBarOFF("USA_Registration");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void REG_USA_ACC_ALPTS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 31;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("newSubscriber_txtBox"), "New_Subscriber");
				break;
				case "step3": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("newSubscriber_txtBox"), "New_Subscriber", "MSISDN", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("register_Button"), "Registration_Button");
				break;
				case "step5": stepStatus[step] = pageLoadCheck();
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("title_Dropdown"), "Title_Dropdown");
				break;
				case "step7": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("title_Dropdown"), "Title", "Title", 1);
				break;
				case "step8": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("country_TxtBox"), "Country", "Country", 1);
				break;
				case "step9": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("firstName_TxtBox"), "FirstName", "First_Name", 1);
				break;
				case "step10": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("firstName_TxtBox"), "FirstName", "ConfirmFirst_Name", 1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("lastName_TxtBox"), "LastName", "Last_Name", 1);
				break;
				case "step12": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("lastName_TxtBox"), "LastName", "ConfirmLast_Name", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("email_TxtBox"), "Email", "Email", 1);
				break;
				case "step14": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("email_TxtBox"), "Email", "Verify_Email", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("confirmEmail_TxtBox"), "ConfirmEmail", "ConfirmEmail", 1);
				break;
				case "step16": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("confirmEmail_TxtBox"), "ConfirmEmail", "Verify_ConfirmEmail", 1);
				break;
				case "step17": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("postCode_TxtBox"), "Post_Code", "Post_Code", 1);
				break;
				case "step18": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("postCode_TxtBox"), "Post_Code", "Confirm_Post_Code", 1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("houseNo_TxtBox"), "House_No", "House_Number", 1);
				break;
				case "step20": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("houseNo_TxtBox"), "House_No", "Confirm_House_Number", 1);
				break;
				case "step21": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("street_TxtBox"), "Street_Address", "StreetAddress", 1);
				break;
				case "step22": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("street_TxtBox"), "Street_Address", "Confirm_StreetAddress", 1);
				break;
				case "step23": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("city_TxtBox"), "City", "City", 1);
				break;
				case "step24": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("city_TxtBox"), "City", "Confirm_City", 1);
				break;
				case "step25": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("contactNo_TxtBox"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step26": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("contactNo_TxtBox"), "Contact_Number", "Confirm_Contact_Number", 1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("PUK_Number"), "Puk_Code", "Puk_Code", 1);
				break;
				case "step28": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("PUK_Number"), "Puk_Code", "Confirm_Puk_Code", 1);
				break;
				case "step29": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("secretQues_DD"), "Secret_Question", "SecretQuestion", 1);
				break;
				case "step30": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("secretAns_TxtBox"), "Secret_Answer", "SecretAnswer", 1);
				break;
				case "step31": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("secretAns_TxtBox"), "Secret_Answer", "Confirm_SecretAnswer", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Edit_REG_USA_ACC_ALPTS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 41;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step3": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step4": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "MSISDN", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step7": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step8": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("edit_RegBtn"), "Edit_Registration_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(registration_USA.registration_USA_Page("edit_RegBtn"), "Edit_Registration_Button");
				break;
				case "step10": stepStatus[step] = pageLoadCheck();
				break;
				case "step11": stepStatus[step] = changeToCoordinates("USA_Registration");
				break;
				case "step12": stepStatus[step] = waitUntilExist(registration_USA.registration_USA_Page("title_Dropdown"), "Title_Dropdown");
				break;
				case "step13": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("title_Dropdown"), "Title", "Title", 1);
				break;
				case "step14": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("country_TxtBox"), "Country", "Country", 1);
				break;
				case "step15": stepStatus[step] = webElementClearText(registration_USA.registration_USA_Page("firstName_TxtBox"), "FirstName");
				break;
				case "step16": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("firstName_TxtBox"), "FirstName", "First_Name", 1);
				break;
				case "step17": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("firstName_TxtBox"), "FirstName", "ConfirmFirst_Name", 1);
				break;
				case "step18": stepStatus[step] = webElementClearText(registration_USA.registration_USA_Page("lastName_TxtBox"), "LastName");
				break;
				case "step19": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("lastName_TxtBox"), "LastName", "Last_Name", 1);
				break;
				case "step20": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("lastName_TxtBox"), "LastName", "ConfirmLast_Name", 1);
				break;
				case "step21": stepStatus[step] = webElementClearText(registration_USA.registration_USA_Page("email_TxtBox"), "Email");
				break;
				case "step22": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("email_TxtBox"), "Email", "Email", 1);
				break;
				case "step23": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("email_TxtBox"), "Email", "Verify_Email", 1);
				break;
				case "step24": stepStatus[step] = webElementClearText(registration_USA.registration_USA_Page("confirmEmail_TxtBox"), "ConfirmEmail");
				break;
				case "step25": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("confirmEmail_TxtBox"), "ConfirmEmail", "ConfirmEmail", 1);
				break;
				case "step26": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("confirmEmail_TxtBox"), "ConfirmEmail", "Verify_ConfirmEmail", 1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("postCode_TxtBox"), "Post_Code", "Post_Code", 1);
				break;
				case "step28": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("postCode_TxtBox"), "Post_Code", "Confirm_Post_Code", 1);
				break;
				case "step29": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("houseNo_TxtBox"), "House_No", "House_Number", 1);
				break;
				case "step30": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("houseNo_TxtBox"), "House_No", "Confirm_House_Number", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("street_TxtBox"), "Street_Address", "StreetAddress", 1);
				break;
				case "step32": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("street_TxtBox"), "Street_Address", "Confirm_StreetAddress", 1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("city_TxtBox"), "City", "City", 1);
				break;
				case "step34": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("city_TxtBox"), "City", "Confirm_City", 1);
				break;
				case "step35": stepStatus[step] = webElementClearText(registration_USA.registration_USA_Page("contactNo_TxtBox"), "Contact_Number");
				break;
				case "step36": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("contactNo_TxtBox"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step37": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("contactNo_TxtBox"), "Contact_Number", "Confirm_Contact_Number", 1);
				break;
				case "step38": stepStatus[step] = WebListSelect(registration_USA.registration_USA_Page("secretQues_DD"), "Secret_Question", "SecretQuestion", 1);
				break;
				case "step39": stepStatus[step] = WebEditEnterText(registration_USA.registration_USA_Page("secretAns_TxtBox"), "Secret_Answer", "SecretAnswer", 1);
				break;
				case "step40": stepStatus[step] = WebElementValueCompare(registration_USA.registration_USA_Page("secretAns_TxtBox"), "Secret_Answer", "Confirm_SecretAnswer", 1);
				break;
				case "step41": stepStatus[step] = setScrollBarOFF("USA_Registration");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postconditions_USA_REG(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 25;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBSelect("Table_Name","Columnname_Title","Condition","Title",1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_firstname", "Condition", "First_Name", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_lastname", "Condition", "Last_Name", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_postcode", "Condition", "Post_Code", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Houseno", "Condition", "House_Number", 1); 
				break;
				case "step6": stepStatus[step] = SQLDBSelect("Table_Name","Columnname_street", "Condition", "Street", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Cityname", "Condition", "City", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Country", "Condition", "Country", 1);
				break;					
				case "step9": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_birthdd", "Condition", "DOB_Date", 1); 
				break;
				case "step10": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_birthmm", "Condition", "DOB_Month", 1);
				break;	
				case "step11": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_birthyy", "Condition", "DOB_Year", 1); 
				break;
				case "step12": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_email", "Condition", "Email", 1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Simnumber", "Condition", "Simnumber", 1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Pukcode", "Condition", "Pukcode", 1);
				break;
				case "step15": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Accountnumber", "Condition", "Accountnumber", 1);
				break;
				case "step16": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_landlineno", "Condition", "Landlineno", 1);
				break;
				case "step17": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_chkTerms", "Condition", "chkTerms", 1);
				break;
				case "step18": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_modereg", "Condition", "modereg", 1);
				break;
				case "step19": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Whereabout", "Condition", "Where_About", 1);
				break;
				case "step20": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Callcountry", "Condition", "Call_Country", 1);
				break;
				case "step21": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_chkEmail", "Condition", "chkEmail", 1);
				break;
				case "step22": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Secretquestion", "Condition", "Secretquestion", 1);
				break;
				case "step23": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Secretanswer", "Condition", "Secretanswer", 1);
				break;
				case "step24": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_preflanguage", "Condition", "Language", 1);
				break;
				case "step25": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_state", "Condition", "State", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void MarketingSMS_DB_Checks(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 6;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBSelect("Table_Name_mstnfblockreason","Columnname_MSISDN","condition_mstnfblockreason","mstnfblockreason_MSISDN",1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Name_mstnfblockreason", "Columnname_Type", "condition_mstnfblockreason", "mstnfblockreason_Type", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("Table_Name_mstnfblockreason", "Columnname_Status", "condition_mstnfblockreason", "mstnfblockreason_Status", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_Name_mstnfblockreason", "Columnname_Reason", "condition_mstnfblockreason", "mstnfblockreason_Reason", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_Name_mstnfblockreason", "Columnname_TicketID", "condition_mstnfblockreason", "mstnfblockreason_TicketID", 1); 
				break;
				case "step6": stepStatus[step] = SQLDBSelect("Table_Name_mstnfblockreason","Columnname_Username", "condition_mstnfblockreason", "User", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void SQLDB_Select_REG_Success(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name", "Condition", "Column_Value", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Edit_MarketingSMS_DB_Checks(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 6;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBSelect("Table_Name_mstnfblockreason","Columnname_MSISDN","condition_mstnfblockreason","mstnfblockreason_MSISDN",1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Name_mstnfblockreason", "Columnname_Type", "condition_mstnfblockreason", "mstnfblockreason_Type", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("Table_Name_mstnfblockreason", "Columnname_Status", "condition_mstnfblockreason", "mstnfblockreason_Status", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_Name_mstnfblockreason", "Columnname_Reason", "condition_mstnfblockreason", "mstnfblockreason_Reason", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_Name_mstnfblockreason", "Columnname_TicketID", "condition_mstnfblockreason", "mstnfblockreason_TicketID", 1); 
				break;
				case "step6": stepStatus[step] = SQLDBSelect("Table_Name_mstnfblockreason","Columnname_Username", "condition_mstnfblockreason", "User", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Edit_SQLDB_Select_REG_Success(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name", "Condition", "Column_Value", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void settings_CountryBrand(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 12;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.settings_Page("country_DropdownValues_GBR"), "Country_Dropdown", "CountryBrand_DDValue", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;
				case "step10": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Keys", "key_Search", 1);
				break;
				case "step11": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_RRBSNetworkID"), "Key_RRBSNetworkID");
				break;
				case "step12": stepStatus[step] = selectEnterTextClickEnter(settings.settings_Page("value_RRBSNetworkID"), "Value_RRBSNetworkID", "value_RRBSNetworkID", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void datePicker(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 10;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(tickets.tickets_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(tickets.tickets_Page("services_Select"), "Services_Dropdown", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(tickets.tickets_Page("mobileNo_Textbox"), "Mobile_Number", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(tickets.tickets_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(tickets.tickets_Page("create_Ticket"), "create_Ticket");
				break;
				case "step6": stepStatus[step] = WebElementClick(tickets.tickets_Page("create_Ticket"), "create_Ticket");
				break;
				case "step7": stepStatus[step] = WebElementClick(tickets.tickets_Page("country_Name"), "Country_Name");
				break;
				case "step8": stepStatus[step] = checkScrollBarIsPresent(tickets.tickets_Page("scroll_Bar"), "Filters");
				break;
				case "step9": stepStatus[step] = javaScriptDatePicker(tickets.ticketID_DatePicker("close_Date_Picker"), "New_Ticket", "datePicker_Value", 1);
				break;
				case "step10": stepStatus[step] = WebElementClick(tickets.tickets_Page("create_Button"), "Create_Button");
				break;
				case "step11": stepStatus[step] = setScrollBarOFF("Filters_Module");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void createNewTickets(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 28;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(tickets.tickets_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(tickets.tickets_Page("services_Select"), "Services_Dropdown", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(tickets.tickets_Page("mobileNo_Textbox"), "Mobile_Number", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(tickets.tickets_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(tickets.tickets_Page("create_Ticket"), "Create_Ticket");
				break;
				case "step6": stepStatus[step] = WebElementClick(tickets.tickets_Page("create_Ticket"), "Create_Ticket");
				break;
				case "step7": stepStatus[step] = waitUntilExist(tickets.tickets_Page("new_Ticket"), "New_Ticket");
				break;
				case "step8": stepStatus[step] = WebElementClick(tickets.tickets_Page("filters_Body"), "filters_Body");
				break;
				case "step9": stepStatus[step] = WebElementAttTitleCompare(tickets.tickets_Page("country_Name"), "Country_Name", "CountryName", 1);
				break;
				case "step10": stepStatus[step] = WebListSelect(tickets.tickets_Page("product_dropdown"), "Product", "ProductValue", 1);
				break;
				case "step11": stepStatus[step] = checkScrollBarIsPresent(tickets.tickets_Page("scroll_Bar"), "Filters");
				break;
				case "step12": stepStatus[step] = WebListSelect(tickets.tickets_Page("category_dropdown"), "Category", "CategoryValue", 1);
				break;
				case "step13": stepStatus[step] = WebListSelect(tickets.tickets_Page("subCategory_dropdown"), "SubCategory", "SubCategoryValue", 1);
				break;
				case "step14": stepStatus[step] = WebListSelect(tickets.tickets_Page("designation_dropdown"), "Designation", "DesignationValue", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(tickets.tickets_Page("upload_File"), "Upload_File");
				break;
				case "step16": stepStatus[step] = fileUpload(property.getProperty("FRA_Upload_FilePath"), "Create_Tickets");
				break;
				/*case "step16": stepStatus[step] = uploadFileNewTicket("Create_Tickets");
				break;*/
				case "step17": stepStatus[step] = waitUntilExist(tickets.tickets_Page("uploaded_File_Icon"), "Uploaded_File_Icon");
				break;
				case "step18": stepStatus[step] = WebListSelect(tickets.tickets_Page("assign_To_Span_dropdown"), "Assign_To", "AssignToValue", 1);
				break;
				case "step19": stepStatus[step] = WebListSelect(tickets.tickets_Page("priority_Span_dropdown"), "Priority", "PriorityValue", 1);
				break;
				case "step20": stepStatus[step] = WebListSelect(tickets.tickets_Page("FCR_dropdown"), "FCR", "FCRValue", 1);
				break;
				case "step21": stepStatus[step] = WebListSelect(tickets.tickets_Page("custFeedBack_dropdown"), "CustomerFeedBack", "CustomerFeedBackValue", 1);
				break;
				case "step22": stepStatus[step] = javaScriptDatePicker(tickets.ticketID_DatePicker("close_Date_Picker"), "New_Ticket", "datePicker_Value", 1);
				break;
				case "step23": stepStatus[step] = WebElementClick(tickets.tickets_Page("create_Button"), "Create_Button");
				break;
				case "step24": stepStatus[step] = pageLoadCheck();
				break;
				case "step25": stepStatus[step] = waitUntilExist(tickets.tickets_Page("close_Button"), "Close_Button");
				break;
				case "step26": stepStatus[step] = getTicketIDDynamicValues(tickets.tickets_Page("ticket_ID"), "Ticket_ID", "confirmationMessage", 1);
				break;
				case "step27": stepStatus[step] = WebElementClick(tickets.tickets_Page("close_Button"), "Close_Button");
				break;
				case "step28": stepStatus[step] = setScrollBarOFF("Filters_Module");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void downloadAttachment(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 12;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(tickets.tickets_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(tickets.tickets_Page("services_Select"), "Services_Dropdown", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(tickets.tickets_Page("mobileNo_Textbox"), "Mobile_Number", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(tickets.tickets_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(tickets.ticketID("Attachment_TicketID", "22657680"), "Ticket_Attachment");
				break;
				case "step6": stepStatus[step] = WebElementClick(tickets.tickets_Page("filters_Body"), "filters_Body");
				break;
				case "step7": stepStatus[step] = checkScrollBarIsPresent(tickets.tickets_Page("scroll_Bar"), "Filters");
				break;
				case "step8": stepStatus[step] = WebElementClick(tickets.ticketID("Attachment_TicketID", "22657680"), "Ticket_Attachment");
				break;
				case "step9": stepStatus[step] = setScrollBarOFF("Filters_Module");
				break;
				case "step10": stepStatus[step] = waitUntilExist(tickets.tickets_Page("attachment_Link"), "Attachment_Link");
				break;
				case "step11": stepStatus[step] = WebElementClick(tickets.tickets_Page("attachment_Link"), "Attachment_Link");
				break;
				case "step12": stepStatus[step] = ticketingAttachmentFileDownload("Ticket_Filters");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Precondition_Staff_Topup(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 9;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBDelete("TrnStaffTopup_TableName", "TrnStaffTopup_Condition", 1);
				break;
				case "step2": stepStatus[step] = RRBSDBUpdate("RRBS_SUBSCRIBER_PROFILE_TABLENAME","TOPUP_FACE_VALUE_COLUMNNAME","TOPUP_FACE_VALUE_COLUMNVALUE","RRBS_SUBSCRIBER_PROFILE_CONDITION",1);
				break;
				case "step3": stepStatus[step] = RRBSDBUpdate("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_COLUMNNAME","ACCT_BALANCE_COLUMNVALUE","RRBS_SUBSCRIBER_PROFILE_CONDITION",1);
				break;
				case "step4": stepStatus[step] = RRBSDBDelete("RRBS_SUBS_BUNDLE_BUCKETS_TABLENAME", "RRBS_SUBS_BUNDLE_BUCKETS_CONDITION", 1);
				break;
				case "step5": stepStatus[step] = RRBSDBDelete("RRBS_SUBS_THRESH_LIMIT_TABLENAME", "RRBS_SUBS_THRESH_LIMIT_CONDITION", 1);
				break;
				case "step6": stepStatus[step] = RRBSDBUpdate("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACTIVE_FLAG_COLUMNNAME","ACTIVE_FLAG_COLUMNVALUE","RRBS_SUBSCRIBER_PROFILE_CONDITION",1);
				break;
				case "step7": stepStatus[step] = RRBSDBUpdate("RRBS_SUBSCRIBER_PROFILE_TABLENAME","LIFE_CYCLE_ID_COLUMNNAME","LIFE_CYCLE_ID_COLUMNVALUE","RRBS_SUBSCRIBER_PROFILE_CONDITION",1);
				break;
				case "step8": stepStatus[step] = RRBSDBUpdate("RRBS_SUBSCRIBER_PROFILE_TABLENAME","SUBS_STATUS_COLUMNNAME","SUBS_STATUS_COLUMNVALUE","RRBS_SUBSCRIBER_PROFILE_CONDITION",1);
				break;
				case "step9": stepStatus[step] = RRBSDBUpdate("RRBS_SUBSCRIBER_PROFILE_TABLENAME","SIM_STATUS_COLUMNNAME","SIM_STATUS_COLUMNVALUE","RRBS_SUBSCRIBER_PROFILE_CONDITION",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Preconditions_USA_REG(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 46;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.settings_Page("country_Dropdown_USA"), "Country_Dropdown_USA");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.settings_Page("country_Dropdown_USA"), "Country_Dropdown_USA");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.settings_Page("country_DropdownValues_USA"), "Country_Dropdown_USA", "CountryBrand_DDValue_USA", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;
				case "step10": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_SiteCode", 1);
				break;
				case "step11": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_SiteCode"), "SiteCode");
				break;
				case "step12": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_SiteCode"), "SiteCode", "value_SiteCode", 1);
				break;
				case "step13": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_CountryCodeGAF", 1);
				break;
				case "step14": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_CountryCodeGAF"), "CountryCodeGAF");
				break;
				case "step15": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_CountryCodeGAF"), "CountryCodeGAF", "value_CountryCodeGAF", 1);
				break;
				case "step16": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_ESHOPCOUNTRYCODE", 1);
				break;
				case "step17": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_ESHOPCOUNTRYCODE"), "ESHOPCOUNTRYCODE");
				break;
				case "step18": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_ESHOPCOUNTRYCODE"), "ESHOPCOUNTRYCODE", "value_ESHOPCOUNTRYCODE", 1);
				break;
				case "step19": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_CountryPrefix", 1);
				break;
				case "step20": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_CountryPrefix"), "CountryPrefix");
				break;
				case "step21": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_CountryPrefix"), "CountryPrefix", "value_CountryPrefix", 1);
				break;
				case "step22": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_CountryCode", 1);
				break;
				case "step23": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_CountryCode"), "CountryCode");
				break;
				case "step24": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_CountryCode"), "CountryCode", "value_CountryCode", 1);
				break;
				case "step25": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_CountryName", 1);
				break;
				case "step26": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_CountryName"), "CountryName");
				break;
				case "step27": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_CountryName"), "CountryName", "value_CountryName", 1);
				break;
				case "step28": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_EmailFilePath", 1);
				break;
				case "step29": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_EmailFilePath"), "EmailFilePath");
				break;
				case "step30": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_EmailFilePath"), "EmailFilePath", "value_EmailFilePath", 1);
				break;
				case "step31": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_SMSFilePath", 1);
				break;
				case "step32": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_SMSFilePath"), "SMSFilePath");
				break;
				case "step33": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_SMSFilePath"), "SMSFilePath", "value_SMSFilePath", 1);
				break;
				case "step34": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_ESMESMSEnabler", 1);
				break;
				case "step35": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_ESMESMSEnabler"), "ESMESMSEnabler");
				break;
				case "step36": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_ESMESMSEnabler"), "ESMESMSEnabler", "value_ESMESMSEnabler", 1);
				break;
				case "step37": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_SendPrefLanguagetoRRBS", 1);
				break;
				case "step38": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_SendPrefLanguagetoRRBS"), "SendPrefLanguagetoRRBS");
				break;
				case "step39": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_SendPrefLanguagetoRRBS"), "SendPrefLanguagetoRRBS", "value_SendPrefLanguagetoRRBS", 1);
				break;
				case "step40": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_SMSMarkettingEnabler", 1);
				break;
				case "step41": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_SMSMarkettingEnabler"), "SMSMarkettingEnabler");
				break;
				case "step42": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_SMSMarkettingEnabler"), "SMSMarkettingEnabler", "value_SMSMarkettingEnabler", 1);
				break;
				case "step43": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_PrefLanguageConfig_Prepaid", 1);
				break;
				case "step44": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_PrefLanguageConfig_Prepaid"), "PrefLanguageConfig_Prepaid");
				break;
				case "step45": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_PrefLanguageConfig_Prepaid"), "PrefLanguageConfig_Prepaid", "value_PrefLanguageConfig_Prepaid", 1);
				break;
				case "step46": stepStatus[step] = WebElementClick(settings.settings_Page("close_Btn"), "Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Admin_Staff_Top_Up(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 19;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("topUp_Button"), "TopUp_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount_Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount", "Amount", 1);
				break;
				case "step12": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("bundle_Dropdown"), "Bundle", "Bundle", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("ticketID_TextBox"), "TicketID", "TicketID", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterTextFromEnvVariable(staff_TopUp.staff_TopUp_Page("ticketID_TextBox"), "TicketID", "TicketID", 1);
				break;
				case "step15": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("reason_Dropdown"), "Reason", "Reason", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("comments_TextBox_Staff"), "Comments", "Comments", 1);
				break;
				case "step17": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("approve_Button"), "Approve_Button");
				break;
				case "step18": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("confirm_Message"), "Confirm_Message");
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(staff_TopUp.staff_TopUp_Page("confirm_Message"), "Confirm_Message", "Confirmation_Message", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Staff_Top_Up_AlertMsg(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 20;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("topUp_Button"), "TopUp_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount_Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount", "Amount", 1);
				break;
				case "step12": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("bundle_Dropdown"), "Bundle", "Bundle", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("ticketID_TextBox"), "TicketID", "TicketID", 1);
				break;
				case "step14": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("reason_Dropdown"), "Reason", "Reason", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("comments_TextBox_Staff"), "Comments", "Comments", 1);
				break;
				case "step16": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("approve_Button"), "Approve_Button");
				break;
				case "step17": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("highlighted_ValMessage"), "Confirm_Message");
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(staff_TopUp.staff_TopUp_Page("highlighted_ValMessage"), "Confirm_Message", "Confirmation_Message", 1);
				break;
				case "step19": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("simBlock_ValText"), "SimBlock_Validation_Message");
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(staff_TopUp.staff_TopUp_Page("simBlock_ValText"), "Validation_Message", "Validation_Message", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void CSAgent_Top_Up(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 19;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("topUp_Button"), "TopUp_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount_Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount", "Amount", 1);
				break;
				case "step12": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("bundle_Dropdown"), "Bundle", "Bundle", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("ticketID_TextBox"), "TicketID", "TicketID", 1);
				break;
				case "step14": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("reason_Dropdown"), "Reason", "Reason", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("comments_TextBox_Staff"), "Comments", "Comments", 1);
				break;
				case "step16": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("submit_Button"), "Submit_Button");
				break;
				case "step17": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("confirm_Message"), "Confirm_Message");
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(staff_TopUp.staff_TopUp_Page("confirm_Message"), "Confirm_Message", "Confirmation_Message", 1);
				break;
				case "step19": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void TopUp_Invalid_Bundle(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 31;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("topUp_Button"), "TopUp_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount_Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount", "Amount", 1);
				break;
				case "step12": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("bundle_Dropdown"), "Bundle", "Bundle", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("ticketID_TextBox"), "TicketID", "TicketID", 1);
				break;
				case "step14": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("reason_Dropdown"), "Reason", "Reason", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("comments_TextBox_Staff"), "Comments", "Comments", 1);
				break;
				case "step16": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("approve_Button"), "Approve_Button");
				break;
				case "step17": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("confirm_Message"), "Confirm_Message");
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(staff_TopUp.staff_TopUp_Page("confirm_Message"), "Confirm_Message", "Validation_Message", 1);
				break;
				case "step19": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				case "step20": stepStatus[step] = storeSQLDBValueInEnv("TrnStaffTopup_TableName", "id_ColumnName", "TrnStaffTopup_Condition", "EnvVariableColumnName", 1);
				break;
				case "step21": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "PendingApproval_Body");
				break;
				case "step22": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "PendingApproval_Body");
				break;
				case "step23": stepStatus[step] = checkScrollBarIsPresent(pendingApproval.pendingApproval_Page_ScrollBar("scrollBar_JS"), "PendingApproval");
				break;
				case "step24": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("staff_TopUp"), "Staff_TopUp_Button");
				break;
				case "step25": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Text"), "PendingApproval_Text");
				break;
				case "step26": stepStatus[step] = getValueFromPagination(pendingApproval.staff_TopUp_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_MSISDN", Runtimevalue.getProperty("getIDValueForPendingApprovals")), pendingApproval.pendingApproval_Page("nextBtn"), pendingApproval.pendingApproval_Page("pageCount"), "PendingApproval");
				break;
				case "step27": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("ticket_Scroll"), "Ticket_ScrollBar");
				break;
				case "step28": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("reject_Button"), "Reject_Button");
				break;
				case "step29": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("confirm_Message"), "Confirm_Message");
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(staff_TopUp.staff_TopUp_Page("confirm_Message"), "Confirm_Message", "Confirmation_Message", 1);
				break;
				case "step31": stepStatus[step] = setScrollBarOFF("Pending_Approval");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Top_Up_Request_Admin_Access(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps = 13;

			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = storeSQLDBValueInEnv("TrnStaffTopup_TableName", "id_ColumnName", "TrnStaffTopup_Condition", "EnvVariableColumnName", 1);
				break;
				case "step2": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "pendingApproval_Body");
				break;
				case "step3": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "pendingApproval_Body");
				break;
				case "step4": stepStatus[step] = checkScrollBarIsPresent(pendingApproval.pendingApproval_Page_ScrollBar("scrollBar_JS"), "pendingApproval");
				break;
				case "step5": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("staff_TopUp"), "Staff_TopUp_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Text"), "pendingApproval_Text");
				break;
				case "step7": stepStatus[step] = getValueFromPagination(pendingApproval.staff_TopUp_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_MSISDN", Runtimevalue.getProperty("getIDValueForpendingApprovals")), pendingApproval.pendingApproval_Page("nextBtn"), pendingApproval.pendingApproval_Page("pageCount"), "pendingApproval");
				break;
				case "step8": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("ticket_Scroll"), "Ticket_ScrollBar");
				break;
				case "step9": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("approve_Button"), "Approve_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("reject_Button"), "Reject_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("confirm_Message"), "Confirm_Message");
				break;
				case "step12": stepStatus[step] = WebElementTextCompare(staff_TopUp.staff_TopUp_Page("confirm_Message"), "Confirm_Message", "Confirmation_Message", 1);
				break;
				case "step13": stepStatus[step] = setScrollBarOFF("Pending_Approval");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Staff_Top_Up_Validated(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps = 18;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("topUp_Button"), "TopUp_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount_Dropdown");
				break;
				case "step11": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("approve_Button"), "Approve_Button");
				break;
				case "step12": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("highlighted_ValMessage"), "Validation_Message");
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(staff_TopUp.staff_TopUp_Page("highlighted_ValMessage"), "Validation_Message", "Validation_Message", 1);
				break;
				case "step14": stepStatus[step] = checkElementIsDisplayed(staff_TopUp.staff_TopUp_Page("amountDropdown_Validation"), "Amount_Dropdown_Validation_Alert");
				break;
				case "step15": stepStatus[step] = checkElementIsDisplayed(staff_TopUp.staff_TopUp_Page("bundleDropdown_Validation"), "Bundle_Dropdown_Validation_Alert");
				break;
				case "step16": stepStatus[step] = checkElementIsDisplayed(staff_TopUp.staff_TopUp_Page("ticketID_Validation"), "TicketID_Validation_Alert");
				break;
				case "step17": stepStatus[step] = checkElementIsDisplayed(staff_TopUp.staff_TopUp_Page("reasonDropdown_Validation"), "Reason_Dropdown_Validation_Alert");
				break;
				case "step18": stepStatus[step] = checkElementIsDisplayed(staff_TopUp.staff_TopUp_Page("comments_TextBox_Validation"), "comments_TextBox_Validation_Alert");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postcondition_Staff_Topup(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=22;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBSelect("TrnStaffTopup_TableName", "Status_ColumnName", "TrnStaffTopup_Condition", "Status_ColumnValue", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("TrnStaffTopup_TableName", "Process_status_ColumnName", "TrnStaffTopup_Condition", "Process_status_ColumnValue", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("TrnStaffTopup_TableName", "AuthorisedBy_ColumnName", "TrnStaffTopup_Condition", "AuthorisedBy_ColumnValue", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("TrnStaffTopup_TableName", "OldBal_ColumnName", "TrnStaffTopup_Condition", "OldBal_ColumnValue", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("TrnStaffTopup_TableName", "NewBal_ColumnName", "TrnStaffTopup_Condition", "NewBal_ColumnValue", 1);
				break;
				case "step6": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","TOPUP_FACE_VALUE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","TOPUP_FACE_VALUE_COLUMNVALUE",1);
				break;
				case "step7": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","ACCT_BALANCE_COLUMNVALUE",1);
				break;
				case "step8": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","LAST_TOPUP_TYPE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","LAST_TOPUP_TYPE_COLUMNVALUE",1);
				break;
				case "step9": stepStatus[step] = RRBSDBCheckValueExist("RRBS_SUBSCRIBER_PROFILE_TABLENAME","LAST_TOPUP_TIME_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION" ,1);
				break;
				case "step10": stepStatus[step] = RRBSDBSelect("RRBS_SUBS_BUNDLE_BUCKETS_TABLENAME", "BUNDLE_CODE_COLUMNNAME", "RRBS_SUBS_BUNDLE_BUCKETS_CONDITION", "BUNDLE_CODE_COLUMNVALUE", 1);
				break;
				case "step11": stepStatus[step] = RRBSDBCheckValueExist("RRBS_SUBS_BUNDLE_BUCKETS_TABLENAME", "RRBS_SUBS_BUNDLE_BUCKETS_COLUMNNAME", "RRBS_SUBS_BUNDLE_BUCKETS_CONDITION", 1);
				break;
				case "step12": stepStatus[step] = RRBSDBSelect("RRBS_SUBS_THRESH_LIMIT_TABLENAME","ONNET_BUNDLE_COUNTER_COLUMNNAME","RRBS_SUBS_THRESH_LIMIT_CONDITION","ONNET_BUNDLE_COUNTER_COLUMNVALUE",1);
				break;
				case "step13": stepStatus[step] = RRBSDBSelect("RRBS_SUBS_THRESH_LIMIT_TABLENAME","OVERALL_BUNDLE_COUNTER_COLUMNNAME","RRBS_SUBS_THRESH_LIMIT_CONDITION","OVERALL_BUNDLE_COUNTER_COLUMNVALUE",1);
				break;
				case "step14": stepStatus[step] = SQLDBDateCompare("TrnStaffTopup_TableName", "AuthorisedDate_ColumnName", "TrnStaffTopup_Condition", "dd/MM/yyyy", 1);
				break;
				case "step15": stepStatus[step] = SQLDBSelect("TrnStaffTopup_TableName", "SubmitedBy_ColumnName", "TrnStaffTopup_Condition", "SubmitedBy_ColumnValue", 1);
				break;
				case "step16": stepStatus[step] = SQLDBSelect("TrnStaffTopup_TableName", "MSISDN_ColumnName", "TrnStaffTopup_Condition", "MSISDN_ColumnValue", 1);
				break;
				case "step17": stepStatus[step] = SQLDBSelect("TrnStaffTopup_TableName", "TopupAmt_ColumnName", "TrnStaffTopup_Condition", "TopupAmt_ColumnValue", 1);
				break;
				case "step18": stepStatus[step] = SQLDBSelect("TrnStaffTopup_TableName", "BundleCode_ColumnName", "TrnStaffTopup_Condition", "BundleCode_ColumnValue", 1);
				break;
				case "step19": stepStatus[step] = SQLDBSelect("TrnStaffTopup_TableName", "TicketId_ColumnName", "TrnStaffTopup_Condition", "TicketId_ColumnValue", 1);
				break;
				case "step20": stepStatus[step] = SQLDBSelect("TrnStaffTopup_TableName", "Reason_ColumnName", "TrnStaffTopup_Condition", "Reason_ColumnValue", 1);
				break;
				case "step21": stepStatus[step] = SQLDBSelect("TrnStaffTopup_TableName", "Comments_ColumnName", "TrnStaffTopup_Condition", "Comments_ColumnValue", 1);
				break;
				case "step22": stepStatus[step] = SQLDBSelectFromEnv("TrnStaffTopup_TableName", "TicketId_ColumnName", "TrnStaffTopup_Condition", "TicketId_ColumnValue", 1);
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postcondition_CSAgent_Topup(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps=9;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);
			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBSelect("TrnStaffTopup_TableName", "Status_ColumnName", "TrnStaffTopup_Condition", "Status_ColumnValue", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("TrnStaffTopup_TableName", "Msisdn_ColumnName", "TrnStaffTopup_Condition", "Msisdn_ColumnValue", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("TrnStaffTopup_TableName", "TopupAmt_ColumnName", "TrnStaffTopup_Condition", "TopupAmt_ColumnValue", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("TrnStaffTopup_TableName", "BundleCode_ColumnName", "TrnStaffTopup_Condition", "BundleCode_ColumnValue", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("TrnStaffTopup_TableName", "TicketId_ColumnName", "TrnStaffTopup_Condition", "TicketId_ColumnValue", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("TrnStaffTopup_TableName", "Reason_ColumnName", "TrnStaffTopup_Condition", "Reason_ColumnValue", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("TrnStaffTopup_TableName", "Comments_ColumnName", "TrnStaffTopup_Condition", "Comments_ColumnValue", 1);
				break;
				case "step8": stepStatus[step] = SQLDBDateCompare("TrnStaffTopup_TableName", "RequestDate_ColumnName", "TrnStaffTopup_Condition", "dd/MM/yyyy", 1); 
				break;
				case "step9": stepStatus[step] = SQLDBSelect("TrnStaffTopup_TableName", "SubmitedBy_ColumnName", "TrnStaffTopup_Condition", "SubmitedBy_ColumnValue", 1);
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		
		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Open_EXIBS_Connection(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			//int totalSteps=ReadExcel.RetrieveTotalEventsCount(Filepath, EnvironmentValue.getProperty("TESTCASE_NAME"), "Total_Events", gblAppComponentCounter);
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = EXIBSDBOpenConnection("EXIBS_DB_Server", "EXIBS_DB_Portnumber", "EXIBS_DB_Name", "EXIBS_DB_Username", "EXIBS_DB_Password");;
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Close_EXIBS_Connection(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1"  :stepStatus[step] = EXIBSDBCloseConnection();
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void XMLConfigValidInvalid(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps=2;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = XMLValueUpdate("Location", "Key", "PreCondition_Value", 1);
				break;
				case "step2": stepStatus[step] = XMLValueUpdate("Location", "Key", "PostCondition_Value", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void RRBSdb_Select(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = RRBSDBSelect("Table_Name", "Column_Name", "Condition", "Column_Value", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Eshop_SQL_Open_Connection(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = EshopSQLDBOpenConnection();
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Precondition_DeleteLog(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = deleteLogFiles("Location", "Startwith_Name", "Endwith_Name", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Precondition_DeleteLog_REG(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = deleteLogFiles("Location", "Startwith_Name", "Endwith_Name", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_SMS_LogFile_REG(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = readLogFiles("Location", "Startwith_Name", "Endwith_Name", "Value", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_StaffTopUpBal_LogFile(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = readLogTopUpBal("Location", "Startwith_Name", "Endwith_Name", "Value", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_StaffTopUpBun_LogFile(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = readLogTopUpBundle("Location", "Startwith_Name", "Endwith_Name", "Value", 1);
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Precondition_Call_Fwd_UI(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps = 34;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);
			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.settings_Page("country_Dropdown_USA"), "Country_Dropdown_USA");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.settings_Page("country_Dropdown_USA"), "Country_Dropdown_USA");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.settings_Page("country_DropdownValues_USA"), "Country_Dropdown_USA", "CountryBrand_DDValue_USA", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;
				case "step10": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_CallForwardingMode", 1);
				break;
				case "step11": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_CallForwardingMode"), "CallForwardingMode");
				break;
				case "step12": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_CallForwardingMode"), "CallForwardingMode", "value_CallForwardingMode", 1);
				break;
				case "step13": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_TicketIDconfig", 1);
				break;
				case "step14": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_TicketIDconfig"), "TicketIDconfig");
				break;
				case "step15": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_TicketIDconfig"), "TicketIDconfig", "value_TicketIDconfig", 1);
				break;
				case "step16": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_TicketIDMinLength", 1);
				break;
				case "step17": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_TicketIDMinLength"), "TicketIDMinLength");
				break;
				case "step18": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_TicketIDMinLength"), "TicketIDMinLength", "value_TicketIDMinLength", 1);
				break;
				case "step19": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_TicketIDMaxLength", 1);
				break;
				case "step20": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_TicketIDMaxLength"), "TicketIDMaxLength");
				break;
				case "step21": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_TicketIDMaxLength"), "TicketIDMaxLength", "value_TicketIDMaxLength", 1);
				break;
				case "step22": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_BASIC_SERVICE_TYPE", 1);
				break;
				case "step23": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_BASIC_SERVICE_TYPE"), "BASIC_SERVICE_TYPE");
				break;
				case "step24": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_BASIC_SERVICE_TYPE"), "BASIC_SERVICE_TYPE", "value_BASIC_SERVICE_TYPE", 1);
				break;
				case "step25": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_BASIC_SERVICE_CODE", 1);
				break;
				case "step26": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_BASIC_SERVICE_CODE"), "BASIC_SERVICE_CODE");
				break;
				case "step27": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_BASIC_SERVICE_CODE"), "BASIC_SERVICE_CODE", "value_BASIC_SERVICE_CODE", 1);
				break;
				case "step28": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_CallForward", 1);
				break;
				case "step29": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_CallForward"), "CallForward");
				break;
				case "step30": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_CallForward"), "CallForward", "value_CallForward", 1);
				break;
				case "step31": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_NO_REPL_COND_TIMER", 1);
				break;
				case "step32": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_NO_REPL_COND_TIMER"), "NO_REPL_COND_TIMER");
				break;
				case "step33": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_NO_REPL_COND_TIMER"), "NO_REPL_COND_TIMER", "value_NO_REPL_COND_TIMER", 1);
				break;
				case "step34": stepStatus[step] = WebElementClick(settings.settings_Page("close_Btn"), "Close_Button");
				break;

				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Call_Fwd_AlertMsg(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps = 12;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);
			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(call_Forward.callForwardPage("billingButton"), "Billing_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(call_Forward.callForwardPage("callFwdButton"), "call_Forward_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(call_Forward.callForwardPage("callFwdButton"), "call_Forward_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(call_Forward.callForwardPage("validationMsg"), "call_Forward_Validation_Message");
				break;
				case "step11": stepStatus[step] = WebElementTextCompare(call_Forward.callForwardPage("validationMsg"), "Validation_Message", "Validation_Message", 1);
				break;
				case "step12": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Open_HLR_Connection(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = HLRDBOpenConnection("HLR_DB_Server", "HLR_DB_Portnumber", "HLR_DB_Name", "HLR_DB_Username", "HLR_DB_Password");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Close_HLR_Connection(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1"  :stepStatus[step] = HLRDBCloseConnection();
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Precondition_Call_Fwd(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps = 4;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBDelete("mstnfblockreason_TableName", "Condition", 1);
				break;
				case "step2": stepStatus[step] = HLRDBUpdate("HLR_SUBS_CFWD_INFO_TABLENAME","COLUMNNAME_SS_STATUS","COLUMNVALUE_SS_STATUS","HLR_SUBS_CFWD_INFO_CONDITION",1);
				break;
				case "step3": stepStatus[step] = HLRDBUpdate("HLR_SUBS_CFWD_INFO_TABLENAME","COLUMNNAME_STATUS_DFTN","COLUMNVALUE_STATUS_DFTN","HLR_SUBS_CFWD_INFO_CONDITION",1);
				break;
				case "step4": stepStatus[step] = HLRDBUpdate("HLR_SUBS_CFWD_INFO_TABLENAME","COLUMNNAME_FWD_TO_NUMBER","COLUMNVALUE_FWD_TO_NUMBER","HLR_SUBS_CFWD_INFO_CONDITION",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postcondition_Call_Fwd(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps = 18;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = HLRDBSelect("HLR_SUBS_CFWD_INFO_TABLENAME","COLUMNNAME_SS_STATUS", "HLR_SUBS_CFWD_INFO_CONDITION", "COLUMNVALUE_SS_STATUS", 1);
				break;
				case "step2": stepStatus[step] = SQLDBCheckValueExist("mstnfblockreason_TableName", "ColumnName_id", "mstnfblockreason_Condition", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("mstnfblockreason_TableName", "ColumnName_ACCOUNT_NO", "mstnfblockreason_Condition", "ColumnValue_ACCOUNT_NO", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("mstnfblockreason_TableName", "ColumnName_MSISDN", "mstnfblockreason_Condition", "ColumnValue_MSISDN", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("mstnfblockreason_TableName", "ColumnName_TYPE", "mstnfblockreason_Condition", "ColumnValue_TYPE", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("mstnfblockreason_TableName", "ColumnName_STATUS", "mstnfblockreason_Condition", "ColumnValue_STATUS", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("mstnfblockreason_TableName", "ColumnName_REASON", "mstnfblockreason_Condition", "ColumnValue_REASON", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelectFromEnv("mstnfblockreason_TableName", "ColumnName_TICKETID", "mstnfblockreason_Condition", "ColumnValue_TICKETID", 1);
				break;
				case "step9": stepStatus[step] = SQLDBSelect("mstnfblockreason_TableName", "ColumnName_USERNAME", "mstnfblockreason_Condition", "ColumnValue_USERNAME", 1);
				break;
				case "step10": stepStatus[step] = SQLDBDateCompare("mstnfblockreason_TableName", "ColumnName_SUBMITDATE", "mstnfblockreason_Condition", "dd/MM/yyyy", 1);
				break;
				case "step11": stepStatus[step] = HLRDBSelect("HLR_SUBS_CFWD_INFO_TABLENAME","COLUMNNAME_SS_STATUS", "HLR_SUBS_CFWD_INFO_BUSY_CONDITION", "COLUMNVALUE_SS_STATUS", 1);
				break;
				case "step12": stepStatus[step] = HLRDBSelect("HLR_SUBS_CFWD_INFO_TABLENAME","COLUMNNAME_SS_STATUS", "HLR_SUBS_CFWD_INFO_NO_ANSWER_CONDITION", "COLUMNVALUE_SS_STATUS", 1);
				break;
				case "step13": stepStatus[step] = HLRDBSelect("HLR_SUBS_CFWD_INFO_TABLENAME","COLUMNNAME_SS_STATUS", "HLR_SUBS_CFWD_INFO_SWT_OFF_CONDITION", "COLUMNVALUE_SS_STATUS", 1);
				break;
				case "step14": stepStatus[step] = HLRDBSelect("HLR_SUBS_CFWD_INFO_TABLENAME","FWD_TO_NUMBER_ColumnName", "HLR_SUBS_CFWD_INFO_BUSY_CONDITION", "BUSY_FWD_TO_NUMBER_COLUMNValue", 1);
				break;
				case "step15": stepStatus[step] = HLRDBSelect("HLR_SUBS_CFWD_INFO_TABLENAME","FWD_TO_NUMBER_ColumnName", "HLR_SUBS_CFWD_INFO_NO_ANSWER_CONDITION", "NO_ANS_FWD_TO_NUMBER_COLUMNValue", 1);
				break;
				case "step16": stepStatus[step] = HLRDBSelect("HLR_SUBS_CFWD_INFO_TABLENAME","FWD_TO_NUMBER_ColumnName", "HLR_SUBS_CFWD_INFO_SWT_OFF_CONDITION", "SWT_OFF_FWD_TO_NUMBER_COLUMNValue", 1);
				break;
				case "step17": stepStatus[step] = HLRDBSelect("HLR_SUBS_CFWD_INFO_TABLENAME","NO_REPLY_COND_TIME_ColumnName", "HLR_SUBS_CFWD_INFO_NO_ANSWER_CONDITION", "NO_REPLY_COND_TIME_COLUMNValue", 1);
				break;
				case "step18": stepStatus[step] = SQLDBSelect("mstnfblockreason_TableName", "ColumnName_TICKETID", "mstnfblockreason_Condition", "ColumnValue_TICKETID", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Call_Forward(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 20;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(call_Forward.callForwardPage("billingButton"), "Billing_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(call_Forward.callForwardPage("callFwdButton"), "call_Forward_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(call_Forward.callForwardPage("callFwdButton"), "call_Forward_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(call_Forward.callForwardPage("ticketID"), "TicketID_TextBox");
				break;
				case "step11": stepStatus[step] = WebEditEnterTextFromEnvVariable(call_Forward.callForwardPage("ticketID"), "TicketID", "TicketID", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(call_Forward.callForwardPage("ticketID"), "TicketID", "TicketID", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(call_Forward.callForwardPage("reason"), "Reason", "Reason", 1);
				break;
				case "step14": stepStatus[step] = javascriptWebElementClick(call_Forward.callForwardPage("callForwarding"), "CallForwarding");
				break;
				case "step15": stepStatus[step] = javascriptWebElementClick(call_Forward.callForwardPage("unConditional_Chkbox"), "UnConditional_Button");
				break;
				case "step16": stepStatus[step] = WebEditEnterText(call_Forward.callForwardPage("unConditional_Txtbox"), "UnCondition_MSISDN", "UnCondition_MSISDN", 1);
				break;
				case "step17": stepStatus[step] = javascriptWebElementClick(call_Forward.callForwardPage("submitButton"), "Submit_Button");
				break;
				case "step18": stepStatus[step] = waitUntilExist(call_Forward.callForwardPage("confirm_Message"), "Confirm_Message");
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(call_Forward.callForwardPage("confirm_Message"), "Confirm_Message", "Confirmation_Message", 1);
				break;
				case "step20": stepStatus[step] = javascriptWebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_LogFile_CallFwd(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = readLogCallForward("Location", "Startwith_Name", "Endwith_Name", "Value", 1);
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Call_Forward_AllConditions(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps = 24;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(call_Forward.callForwardPage("billingButton"), "Billing_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(call_Forward.callForwardPage("callFwdButton"), "call_Forward_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(call_Forward.callForwardPage("callFwdButton"), "call_Forward_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(call_Forward.callForwardPage("ticketID"), "TicketID_TextBox");
				break;
				case "step11": stepStatus[step] = WebEditEnterText(call_Forward.callForwardPage("ticketID"), "TicketID", "TicketID", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(call_Forward.callForwardPage("reason"), "Reason", "Reason", 1);
				break;
				case "step13": stepStatus[step] = javascriptWebElementClick(call_Forward.callForwardPage("callForwarding"), "CallForwarding");
				break;
				case "step14": stepStatus[step] = javascriptWebElementClick(call_Forward.callForwardPage("unConditional_Chkbox"), "UnConditional_Button");
				break;
				case "step15": stepStatus[step] = javascriptWebElementClick(call_Forward.callForwardPage("noAnswer_Chkbox"), "NoAnswer_Button");
				break;
				case "step16": stepStatus[step] = WebEditEnterText(call_Forward.callForwardPage("noAnswer_Txtbox"), "No_Answer_MSISDN", "No_Answer", 1);
				break;
				case "step17": stepStatus[step] = javascriptWebElementClick(call_Forward.callForwardPage("switchedOff_Chkbox"), "SwitchedOff_Button");
				break;
				case "step18": stepStatus[step] = WebEditEnterText(call_Forward.callForwardPage("switchedOff_Txtbox"), "Switched_Off_MSISDN", "Switched_Off", 1);
				break;
				case "step19": stepStatus[step] = javascriptWebElementClick(call_Forward.callForwardPage("busy_Chkbox"), "Busy_Button");
				break;
				case "step20": stepStatus[step] = WebEditEnterText(call_Forward.callForwardPage("busy_Txtbox"), "Busy_MSISDN", "Busy", 1);
				break;
				case "step21": stepStatus[step] = javascriptWebElementClick(call_Forward.callForwardPage("submitButton"), "Submit_Button");
				break;
				case "step22": stepStatus[step] = javascriptWebElementClick(call_Forward.callForwardPage("confirm_Message"), "Confirm_Message");
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(call_Forward.callForwardPage("confirm_Message"), "Confirm_Message", "Confirmation_Message", 1);
				break;
				case "step24": stepStatus[step] = javascriptWebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Call_Forward_ValueExist(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps = 31;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);
			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(call_Forward.callForwardPage("billingButton"), "Billing_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(call_Forward.callForwardPage("callFwdButton"), "call_Forward_Button");
				break;
				case "step9": stepStatus[step] = javascriptWebElementClick(call_Forward.callForwardPage("callFwdButton"), "call_Forward_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(call_Forward.callForwardPage("ticketID"), "TicketID");
				break;
				case "step11": stepStatus[step] = WebEditEnterText(call_Forward.callForwardPage("ticketID"), "TicketID", "TicketID", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(call_Forward.callForwardPage("reason"), "Reason", "Reason", 1);
				break;
				case "step13": stepStatus[step] = javascriptWebElementClick(call_Forward.callForwardPage("callFwd_Enabled"), "call_Forward_Enabled_Button");
				break;
				case "step14": stepStatus[step] = javascriptWebElementClick(call_Forward.callForwardPage("submitButton"), "Submit_Button");
				break;
				case "step15": stepStatus[step] = waitUntilExist(call_Forward.callForwardPage("confirm_Message"), "Confirm_Message");
				break;
				case "step16": stepStatus[step] = WebElementResxKeyValueStaticCompare(call_Forward.callForwardPage("confirm_Message"), "Confirm_Message", "Confirmation_Message", 1);
				break;
				case "step17": stepStatus[step] = javascriptWebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				case "step18": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step19": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step20": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step21": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step22": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step23": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step24": stepStatus[step] = WebElementClick(call_Forward.callForwardPage("billingButton"), "Billing_Button");
				break;
				case "step25": stepStatus[step] = waitUntilExist(call_Forward.callForwardPage("callFwdButton"), "call_Forward_Button");
				break;
				case "step26": stepStatus[step] = WebElementClick(call_Forward.callForwardPage("callFwdButton"), "call_Forward_Button");
				break;
				case "step27": stepStatus[step] = waitUntilExist(call_Forward.callForwardPage("ticketID"), "TicketID");
				break;
				case "step28": stepStatus[step] = WebElementValueCompare(call_Forward.callForwardPage("noAnswer_Txtbox"), "No_Answer_MSISDN", "No_Answer", 1);
				break;
				case "step29": stepStatus[step] = WebElementValueCompare(call_Forward.callForwardPage("switchedOff_Txtbox"), "Switched_Off_MSISDN", "Switched_Off", 1);
				break;
				case "step30": stepStatus[step] = WebElementValueCompare(call_Forward.callForwardPage("busy_Txtbox"), "Busy_MSISDN", "Busy", 1);
				break;
				case "step31": stepStatus[step] = javascriptWebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Call_Forward_ValidationMsg(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps = 29;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(call_Forward.callForwardPage("billingButton"), "Billing_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(call_Forward.callForwardPage("callFwdButton"), "call_Forward_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(call_Forward.callForwardPage("callFwdButton"), "call_Forward_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(call_Forward.callForwardPage("ticketID"), "TicketID_TextBox");
				break;
				case "step11": stepStatus[step] = WebElementClick(call_Forward.callForwardPage("submitButton"), "Submit_Button");
				break;
				case "step12": stepStatus[step] = WebElementResxKeyValueStaticCompare(call_Forward.callForwardPage("confirm_Message"), "Validation_Message", "Field_Mandatory_Message", 1);
				break;
				case "step13": stepStatus[step] = checkElementIsDisplayed(call_Forward.callForwardPage("valTitle"), "Title_Validation_Alert");
				break;
				case "step14": stepStatus[step] = checkElementIsDisplayed(call_Forward.callForwardPage("valReason"), "Reason_Validation_Alert");
				break;
				case "step15": stepStatus[step] = WebEditEnterText(call_Forward.callForwardPage("ticketID"), "TicketID", "TicketID_Invalid", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(call_Forward.callForwardPage("reason"), "Reason", "Reason", 1);
				break;
				case "step17": stepStatus[step] = WebElementClick(call_Forward.callForwardPage("submitButton"), "Submit_Button");
				break;
				case "step18": stepStatus[step] = waitUntilExist(call_Forward.callForwardPage("confirm_Message"), "Invalid Ticket ID");
				break;
				case "step19": stepStatus[step] = WebElementResxKeyValueStaticCompare(call_Forward.callForwardPage("confirm_Message"), "Validation_Message", "Invalid Ticket ID", 1);
				break;
				case "step20": stepStatus[step] = WebEditEnterTextFromEnvVariable(call_Forward.callForwardPage("ticketID"), "TicketID", "TicketID", 1);
				break;
				case "step21": stepStatus[step] = WebEditEnterText(call_Forward.callForwardPage("reason"), "Reason", "Reason", 1);
				break;
				case "step22": stepStatus[step] = javascriptWebElementClick(call_Forward.callForwardPage("callForwarding"), "CallForwarding");
				break;
				case "step23": stepStatus[step] = WebElementClick(call_Forward.callForwardPage("submitButton"), "Submit_Button");
				break;
				case "step24": stepStatus[step] = WebElementResxKeyValueStaticCompare(call_Forward.callForwardPage("confirm_Message"), "Validation_Message", "CallFwd_Mandatory_Message", 1);
				break;
				case "step25": stepStatus[step] = javascriptWebElementClick(call_Forward.callForwardPage("noAnswer_Chkbox"), "NoAnswer_Button");
				break;
				case "step26": stepStatus[step] = WebElementClick(call_Forward.callForwardPage("submitButton"), "Submit_Button");
				break;
				case "step27": stepStatus[step] = checkElementIsDisplayed(call_Forward.callForwardPage("valNoAnswer"), "NoAnswer_Validation_Alert");
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(call_Forward.callForwardPage("confirm_Message"), "Validation_Message", "Field_Mandatory_Message", 1);
				break;
				case "step29": stepStatus[step] = javascriptWebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Precondition_Bal_TR(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps=9;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBDelete("trnbalancetransfer_TableName", "trnbalancetransfer_Condition_From", 1);
				break;
				case "step2": stepStatus[step] = SQLDBDelete("trnbalancetransfer_TableName", "trnbalancetransfer_Condition_To", 1);
				break;
				case "step3": stepStatus[step] = SQLDBUpdate("mstmvnoaccount_TableName", "scpsubmitstate_ColumnName", "scpsubmitstate_ColumnValue", "mstmvnoaccount_Condition", 1);
				break;
				case "step4": stepStatus[step] = RRBSDBUpdate("RRBS_SUBSCRIBER_PROFILE_TABLENAME","TOPUP_FACE_VALUE_COLUMNNAME","TOPUP_FACE_VALUE_COLUMNVALUE","RRBS_SUBSCRIBER_PROFILE_CONDITION",1);
				break;
				case "step5": stepStatus[step] = RRBSDBUpdate("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_COLUMNNAME","ACCT_BALANCE_COLUMNVALUE","RRBS_SUBSCRIBER_PROFILE_CONDITION",1);
				break;
				case "step6": stepStatus[step] = RRBSDBDelete("RRBS_SUBS_BUNDLE_BUCKETS_TABLENAME", "RRBS_SUBS_BUNDLE_BUCKETS_CONDITION", 1);
				break;
				case "step7": stepStatus[step] = RRBSDBDelete("RRBS_SUBS_THRESH_LIMIT_TABLENAME", "RRBS_SUBS_THRESH_LIMIT_CONDITION", 1);
				break;
				case "step8": stepStatus[step] = RRBSDBUpdate("RRBS_SUBSCRIBER_PROFILE_TABLENAME","SUBS_STATUS_COLUMNNAME","SUBS_STATUS_COLUMNVALUE","RRBS_SUBSCRIBER_PROFILE_CONDITION",1);
				break;
				case "step9": stepStatus[step] = RRBSDBUpdate("RRBS_SUBSCRIBER_PROFILE_TABLENAME","SIM_STATUS_COLUMNNAME","SIM_STATUS_COLUMNVALUE","RRBS_SUBSCRIBER_PROFILE_CONDITION",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Balance_Transfer(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps = 18;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Sim_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Sim_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("balance_Tns_Btn"), "Balance_Transfer_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("balance_Tns_Btn"), "Balance_Transfer_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("toMSISDN"), "To_MSISDN");
				break;
				case "step11": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("toMSISDN"), "To_MSISDN", "To_MSISDN", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("ticketID"), "TicketID", "TicketID", 1);
				break;
				case "step13": stepStatus[step] = WebListSelect(balance_Transfer.balanceTransferPage("reason"), "Reason", "Reason", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("comments"), "Comments", "Comments", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("approve"), "Approve_Button");
				break;
				case "step16": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("confirm_Message"), "Confirm_Message");
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(balance_Transfer.balanceTransferPage("confirm_Message"), "Confirm_Message", "Confirmation_Message", 1);
				break;
				case "step18": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postcondition_Bal_Transfer(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=19;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBSelect("trnbalancetransfer_TableName", "MsisdnFrom_ColumnName", "trnbalancetransfer_Condition", "MsisdnFrom_ColumnValue", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("trnbalancetransfer_TableName", "MsisdnTo_ColumnName", "trnbalancetransfer_Condition", "MsisdnTo_ColumnValue", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("trnbalancetransfer_TableName", "TicketId_ColumnName", "trnbalancetransfer_Condition", "TicketId_ColumnValue", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("trnbalancetransfer_TableName", "Reason_ColumnName", "trnbalancetransfer_Condition", "Reason_ColumnValue", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("trnbalancetransfer_TableName", "Comments_ColumnName", "trnbalancetransfer_Condition", "Comments_ColumnValue", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("trnbalancetransfer_TableName", "TransferAmt_ColumnName", "trnbalancetransfer_Condition", "TransferAmt_ColumnValue", 1);
				break;
				case "step7": stepStatus[step] = SQLDBDateCompare("trnbalancetransfer_TableName", "RequestDate_ColumnName", "trnbalancetransfer_Condition", "dd/MM/yyyy", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("trnbalancetransfer_TableName", "SubmitedBy_ColumnName", "trnbalancetransfer_Condition", "SubmitedBy_ColumnValue", 1);
				break;
				case "step9": stepStatus[step] = SQLDBSelect("trnbalancetransfer_TableName", "status_ColumnName", "trnbalancetransfer_Condition", "status_ColumnValue", 1);
				break;
				case "step10": stepStatus[step] = SQLDBSelect("trnbalancetransfer_TableName", "AuthorisedBy_ColumnName", "trnbalancetransfer_Condition", "AuthorisedBy_ColumnValue", 1);
				break;
				case "step11": stepStatus[step] = SQLDBDateCompare("trnbalancetransfer_TableName", "AuthorisedDate_ColumnName", "trnbalancetransfer_Condition", "dd/MM/yyyy", 1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("trnbalancetransfer_TableName", "OldBal_ColumnName", "trnbalancetransfer_Condition", "OldBal_ColumnValue", 1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("trnbalancetransfer_TableName", "NewBal_ColumnName", "trnbalancetransfer_Condition", "NewBal_ColumnValue", 1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("mstmvnoaccount_TableName", "SCPSubmitState_ColumnName", "mstmvnoaccount_Condition", "SCPSubmitState_ColumnValue", 1);
				break;
				case "step15": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","SIM_STATUS_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","SIM_STATUS_COLUMNVALUE",1);
				break;
				case "step16": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","TOPUP_FACE_VALUE_FROM_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CON_FROM","TOPUP_FACE_VALUE_FROM_COLUMNVALUE",1);
				break;
				case "step17": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_FROM_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CON_FROM","ACCT_BALANCE_FROM_COLUMNVALUE",1);
				break;
				case "step18": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","TOPUP_FACE_VALUE_TO_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CON_TO","TOPUP_FACE_VALUE_TO_COLUMNVALUE",1);
				break;
				case "step19": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_TO_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CON_TO","ACCT_BALANCE_TO_COLUMNVALUE",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Balance_Transfer_ValidationMsg(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 17;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Sim_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Sim_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("balance_Tns_Btn"), "Balance_Transfer_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("balance_Tns_Btn"), "Balance_Transfer_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("toMSISDN"), "To_MSISDN");
				break;
				case "step11": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("approve"), "Approve_Button");
				break;
				case "step12": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("validationMsgAlert"), "Validation_Alert");
				break;
				case "step13": stepStatus[step] = WebElementResxKeyValueStaticCompare(balance_Transfer.balanceTransferPage("validationMsgAlert"), "Validation_Alert_Message", "Field_Mandatory_Message", 1);
				break;
				case "step14": stepStatus[step] = checkElementIsDisplayed(balance_Transfer.balanceTransferPage("valToMSISDN"), "To_MSISDN");
				break;
				case "step15": stepStatus[step] = checkElementIsDisplayed(balance_Transfer.balanceTransferPage("valReason"), "Reason");
				break;
				case "step16": stepStatus[step] = checkElementIsDisplayed(balance_Transfer.balanceTransferPage("valComments"), "Comments");
				break;
				case "step17": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Balance_Transfer_Reset(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 18;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Sim_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Sim_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("balance_Tns_Btn"), "Balance_Transfer_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("balance_Tns_Btn"), "Balance_Transfer_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("toMSISDN"), "To_MSISDN");
				break;
				case "step11": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("toMSISDN"), "To_MSISDN", "To_MSISDN", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("ticketID"), "TicketID", "TicketID", 1);
				break;
				case "step13": stepStatus[step] = WebListSelect(balance_Transfer.balanceTransferPage("reason"), "Reason", "Reason", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("comments"), "Comments", "Comments", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("reset"), "Reset_Button");
				break;
				case "step16": stepStatus[step] = WebElementEmpty(balance_Transfer.balanceTransferPage("toMSISDN"), "To_MSISDN");
				break;
				case "step17": stepStatus[step] = WebElementEmpty(balance_Transfer.balanceTransferPage("ticketID"), "TicketID");
				break;
				case "step18": stepStatus[step] = WebListSelect(balance_Transfer.balanceTransferPage("reason"), "Reason", "Reason_Reset", 1);
				break;
				case "step19": stepStatus[step] = WebElementEmpty(balance_Transfer.balanceTransferPage("comments"), "Comments");
				break;
				case "step20": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void CS_Agent_Bal_TNS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps = 18;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Sim_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Sim_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("balance_Tns_Btn"), "Balance_Transfer_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("balance_Tns_Btn"), "Balance_Transfer_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("toMSISDN"), "To_MSISDN");
				break;
				case "step11": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("toMSISDN"), "To_MSISDN", "To_MSISDN", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("ticketID"), "TicketID", "TicketID", 1);
				break;
				case "step13": stepStatus[step] = WebListSelect(balance_Transfer.balanceTransferPage("reason"), "Reason", "Reason", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("comments"), "Comments", "Comments", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("submit"), "Submit_Button");
				break;
				case "step16": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("confirm_Message"), "Confirm_Message");
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(balance_Transfer.balanceTransferPage("confirm_Message"), "Confirm_Message", "Confirmation_Message", 1);
				break;
				case "step18": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Balance_Trns_Req_Admin_App(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 13;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = storeSQLDBValueInEnv("trnbalancetransfer_TableName", "id_ColumnName", "trnbalancetransfer_Condition", "EnvVariableColumnName", 1);
				break;
				case "step2": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "pendingApproval_Body");
				break;
				case "step3": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "pendingApproval_Body");
				break;
				case "step4": stepStatus[step] = checkScrollBarIsPresent(pendingApproval.pendingApproval_Page_ScrollBar("scrollBar_JS"), "pendingApproval");
				break;
				case "step5": stepStatus[step] = PerformAction_MoveToElementAndClick(pendingApproval.pendingApproval_Page("balanceTransfer"), "BalanceTransfer_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Text"), "pendingApproval_Text");
				break;
				case "step7": stepStatus[step] = getValueFromPagination(pendingApproval.staff_TopUp_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_MSISDN", "EnvVariableColumnName"), pendingApproval.pendingApproval_Page("nextBtn"), pendingApproval.pendingApproval_Page("pageCount"), "pendingApproval");
				break;
				case "step8": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("ticket_Scroll"), "Ticket_ScrollBar");
				break;
				case "step9": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("approve_Button"), "Approve_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("reject_Button"), "Reject_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("confirm_Message"), "Confirm_Message");
				break;
				case "step12": stepStatus[step] = WebElementTextCompare(balance_Transfer.balanceTransferPage("confirm_Message"), "Confirm_Message", "Confirmation_Message", 1);
				break;
				case "step13": stepStatus[step] = setScrollBarOFF("Pending_Approval");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Precondition_CNC_IN_LOC(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps=4;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBDelete("TRNHLRINITIALCANCELLOCATION_TableName", "TRNHLRINITIALCANCELLOCATION_Condition", 1);
				break;
				case "step2": stepStatus[step] = IMGDBSelect("IMG_SUBS_ACCOUNT_TableName","MSISDN_ColumnName", "IMG_SUBS_ACCOUNT_Condition", "MSISDN_ColumnValue", 1);
				break;
				case "step3": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TableName","MSISDN_ColumnName", "RRBS_SUBSCRIBER_PROFILE_Condition", "MSISDN_ColumnValue", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Mstmvnoaccount_TableName","MSISDN_ColumnName_MVNO", "Mstmvnoaccount_Condition", "MSISDN_ColumnValue_MVNO", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}	

	public synchronized void Open_IMG_Connection(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = IMGDBOpenConnection("IMG_DB_Server", "IMG_DB_Portnumber", "IMG_DB_Name", "IMG_DB_Username", "IMG_DB_Password");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}	

	public synchronized void Close_IMG_Connection(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1"  :stepStatus[step] = IMGDBCloseConnection();
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void CNC_INL_LTN(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps = 20;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(cancel_Initail_Loc.cancelInitalLocPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(cancel_Initail_Loc.cancelInitalLocPage("initialLocBtn"), "Cancel_Initial_Location_Btn");
				break;
				case "step9": stepStatus[step] = WebElementClick(cancel_Initail_Loc.cancelInitalLocPage("initialLocBtn"), "Cancel_Initial_Location_Btn");
				break;
				case "step10": stepStatus[step] = waitUntilExist(cancel_Initail_Loc.cancelInitalLocPage("msisdn"), "MSISDN_TextBox");
				break;
				case "step11": stepStatus[step] = WebElementClick(cancel_Initail_Loc.cancelInitalLocPage("submitButton"), "Submit_Button");
				break;
				case "step12": stepStatus[step] = waitUntilExist(cancel_Initail_Loc.cancelInitalLocPage("confirm_Message"), "Confirm_Message");
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(cancel_Initail_Loc.cancelInitalLocPage("confirm_Message"), "Confirm_Message", "Confirmation_Message", 1);
				break;
				case "step14": stepStatus[step] = WebElementClick(cancel_Initail_Loc.cancelInitalLocPage("historyBtn"), "History_Button");
				break;
				case "step15": stepStatus[step] = waitUntilExist(cancel_Initail_Loc.cancelInitalLocPage("tableView"), "History_View");
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(cancel_Initail_Loc.tableValues(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"msisdnTableValue", "MSISDN"), "MSISDN", "MSISDN", 1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(cancel_Initail_Loc.tableValues(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"imsiTableValue", "MSISDN"), "IMSI", "IMSI", 1);
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(cancel_Initail_Loc.tableValues(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"submitByTableValue", "MSISDN"), "Submitted_By", "Submit_By", 1);
				break;
				case "step19": stepStatus[step] = webElementDateCompare(cancel_Initail_Loc.tableValues(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"submitDateTableValue", "MSISDN"), "dd/MM/yyyy");
				break;
				case "step20": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void CNC_INL_AlertMsg(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps = 16;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(cancel_Initail_Loc.cancelInitalLocPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(cancel_Initail_Loc.cancelInitalLocPage("initialLocBtn"), "Cancel_Initial_Location_Btn");
				break;
				case "step9": stepStatus[step] = WebElementClick(cancel_Initail_Loc.cancelInitalLocPage("initialLocBtn"), "Cancel_Initial_Location_Btn");
				break;
				case "step10": stepStatus[step] = waitUntilExist(cancel_Initail_Loc.cancelInitalLocPage("msisdn"), "MSISDN_TextBox");
				break;
				case "step11": stepStatus[step] = waitUntilExist(cancel_Initail_Loc.cancelInitalLocPage("networkAccessDD"), "Network_Access_Dropdown");
				break;
				case "step12": stepStatus[step] = WebListSelect(cancel_Initail_Loc.cancelInitalLocPage("networkAccessDD"), "Network_Access", "Network_Access", 1);
				break;
				case "step13": stepStatus[step] = WebElementClick(cancel_Initail_Loc.cancelInitalLocPage("submitButton"), "Submit_Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(cancel_Initail_Loc.cancelInitalLocPage("confirm_Message"), "Confirm_Message");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(cancel_Initail_Loc.cancelInitalLocPage("confirm_Message"), "Confirm_Message", "Confirmation_Message", 1);
				break;
				case "step16": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void CNC_INL_ValidMsg(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 15;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(cancel_Initail_Loc.cancelInitalLocPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(cancel_Initail_Loc.cancelInitalLocPage("initialLocBtn"), "Cancel_Initial_Location_Btn");
				break;
				case "step9": stepStatus[step] = WebElementClick(cancel_Initail_Loc.cancelInitalLocPage("initialLocBtn"), "Cancel_Initial_Location_Btn");
				break;
				case "step10": stepStatus[step] = waitUntilExist(cancel_Initail_Loc.cancelInitalLocPage("msisdn"), "MSISDN_TextBox");
				break;
				case "step11": stepStatus[step] = waitUntilExist(cancel_Initail_Loc.cancelInitalLocPage("networkAccessDD"), "Network_Access_DropDown");
				break;
				case "step12": stepStatus[step] = WebListSelect(cancel_Initail_Loc.cancelInitalLocPage("networkAccessDD"), "Network Access Mode", "Network Access Mode", 1);
				break;
				case "step13": stepStatus[step] = WebElementClick(cancel_Initail_Loc.cancelInitalLocPage("submitButton"), "Submit_Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(cancel_Initail_Loc.cancelInitalLocPage("confirm_Message"), "Validation_Message");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(cancel_Initail_Loc.cancelInitalLocPage("confirm_Message"), "Validation_Message", "Validation_Message", 1);
				break;
				case "step16": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postcondition_Cancel_INL_LTN(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 7;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBCheckValueExist("TRNHLRINITIALCANCELLOCATION_TableName", "ID_ColumnName", "TRNHLRINITIALCANCELLOCATION_Condition", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("TRNHLRINITIALCANCELLOCATION_TableName", "MSISDN_ColumnName", "TRNHLRINITIALCANCELLOCATION_Condition", "MSISDN_ColumnValue", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("TRNHLRINITIALCANCELLOCATION_TableName", "IMSI_ColumnName", "TRNHLRINITIALCANCELLOCATION_Condition", "IMSI_ColumnValue", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("TRNHLRINITIALCANCELLOCATION_TableName", "NW_Acc_Mode_ColumnName", "TRNHLRINITIALCANCELLOCATION_Condition", "NW_Acc_Mode_ColumnValue", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("TRNHLRINITIALCANCELLOCATION_TableName", "Retain_LocInfo_ColumnName", "TRNHLRINITIALCANCELLOCATION_Condition", "Retain_LocInfo_ColumnValue", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("TRNHLRINITIALCANCELLOCATION_TableName", "SUBMITTEDBY_ColumnName", "TRNHLRINITIALCANCELLOCATION_Condition", "SUBMITTEDBY_ColumnValue", 1);
				break;
				case "step7": stepStatus[step] = SQLDBDateCompare("TRNHLRINITIALCANCELLOCATION_TableName", "SUBMITTEDDATE_ColumnName", "TRNHLRINITIALCANCELLOCATION_Condition", "dd/MM/yyyy", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_CNC_INT_LOC_LogFile(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = readLogTopUpBal("Location", "Startwith_Name", "Endwith_Name", "Value", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Precondition_Bill_Tns(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=14;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBCheckValueExist("TrnDebit_TableName", "Id_ColumnName", "TrnDebit_Condition", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("TrnDebit_TableName", "Msisdn_ColumnName", "TrnDebit_Condition", "Msisdn_ColumnValue", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("TrnDebit_TableName", "DebitAmt_ColumnName", "TrnDebit_Condition", "DebitAmt_ColumnValue", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("TrnDebit_TableName", "TicketId_ColumnName", "TrnDebit_Condition", "TicketId_ColumnValue", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("TrnDebit_TableName", "Reason_ColumnName", "TrnDebit_Condition", "Reason_ColumnValue", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("TrnDebit_TableName", "Comments_ColumnName", "TrnDebit_Condition", "Comments_ColumnValue", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("TrnDebit_TableName", "SubmitedBy_ColumnName", "TrnDebit_Condition", "SubmitedBy_ColumnValue", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("TrnDebit_TableName", "status_ColumnName", "TrnDebit_Condition", "status_ColumnValue", 1);
				break;
				case "step9": stepStatus[step] = SQLDBSelect("TrnDebit_TableName", "AuthorisedBy_ColumnName", "TrnDebit_Condition", "AuthorisedBy_ColumnValue", 1);
				break;
				case "step10": stepStatus[step] = SQLDBSelect("TrnDebit_TableName", "AuthorisedDate_ColumnName", "TrnDebit_Condition", "AuthorisedDate_ColumnValue", 1);
				break;
				case "step11": stepStatus[step] = SQLDBSelect("TrnDebit_TableName", "OldBal_ColumnName", "TrnDebit_Condition", "OldBal_ColumnValue", 1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("TrnDebit_TableName", "NewBal_ColumnName", "TrnDebit_Condition", "NewBal_ColumnValue", 1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("TrnDebit_TableName", "Channel_ColumnName", "TrnDebit_Condition", "Channel_ColumnValue", 1);
				break;
				case "step14": stepStatus[step] = SQLDBUpdate("TrnDebit_TableName", "AuthComments_ColumnName", "AuthComments_ColumnValue", "TrnDebit_Condition", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Bill_Transaction_Htry(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps = 16;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(billing_Transaction.billingTransactionPage("billingButton"), "BillingTnsBtn");
				break;
				case "step8": stepStatus[step] = waitUntilExist(billing_Transaction.billingTransactionPage("billingTnsBtn"), "billing_Transaction_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(billing_Transaction.billingTransactionPage("billingTnsBtn"), "billing_Transaction_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(billing_Transaction.billingTransactionPage("ticketID"), "TicketID_TextBox");
				break;
				case "step11": stepStatus[step] = WebEditEnterText(billing_Transaction.billingTransactionPage("ticketID"), "TicketID", "TicketID", 1);
				break;
				case "step12": stepStatus[step] = WebListSelect(billing_Transaction.billingTransactionPage("status"), "Status", "Status", 1);
				break;
				case "step13": stepStatus[step] = WebListSelect(billing_Transaction.billingTransactionPage("type"), "Type", "Type", 1);
				break;
				case "step14": stepStatus[step] = javaScriptDatePicker(billing_Transaction.billingTransactionPage("fromDate"), "FromDate", "FromDate", 1);
				break;
				case "step15": stepStatus[step] = javaScriptDatePicker(billing_Transaction.billingTransactionPage("toDate"), "ToDate", "ToDate", 1);
				break;
				case "step16": stepStatus[step] = WebElementClick(billing_Transaction.billingTransactionPage("search"), "Search_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Billing_TNS_TableView(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps = 22;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = storeSQLDBValueInEnv("TrnDebit_TableName", "Id_ColumnName", "TrnDebit_Condition", "Id_DynamicValue", 1);
				break;
				case "step2": stepStatus[step] = waitUntilExist(billing_Transaction.billingTransactionPage("tableView"), "Table_View");
				break;
				case "step3": stepStatus[step] = WebElementClick(billing_Transaction.tableValues(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"transactionID" , "Id_DynamicValue"), "TransactionID_Link");
				break;
				case "step4": stepStatus[step] = waitUntilExist(billing_Transaction.billingTransactionPage("verifyTnsID"), "Grid_Table_View");
				break;
				case "step5": stepStatus[step] = changeToCoordinates("billing_Transaction");
				break;
				case "step6": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("verifyTnsID"), "TransactionID", "TransId", 1);
				break;
				case "step7": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("typeVerify"), "Type", "Type", 1);
				break;
				case "step8": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("MSISDN"), "MSISDN", "MSISDN", 1);
				break;
				case "step9": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("debitAmt"), "Debit_Amount", "DebitAmt", 1);
				break;
				case "step10": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("ticketIDVerify"), "TicketID", "TicketID", 1);
				break;
				case "step11": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("reason"), "Reason", "Reason", 1);
				break;
				case "step12": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("comments"), "Comments", "Comments", 1);
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("submitBy"), "SubmittedBy", "SubmittedBy", 1);
				break;
				case "step14": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("submitDate"), "SubmittedDate", "SubmittedDate", 1);
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("authoriseDate"), "AuthorisedDate", "AuthorisedDate", 1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("authoriseStatus"), "AuthorisedStatus", "AuthorisedStatus", 1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("prevBal"), "PrevBalance", "PrevBalance", 1);
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("curBal"), "CurrBalance", "CurrBalance", 1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("channel"), "Channel", "Channel", 1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("authoriseBy"), "AuthorisedBy", "AuthorisedBy", 1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("adminCmts"), "AdminComments", "AdminComments", 1);
				break;
				case "step22": stepStatus[step] = setScrollBarOFF("billing_Transaction");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Precondition_Bill_Tns_Credit(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps=18;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);
			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBCheckValueExist("TrnRecredit_TableName", "Id_ColumnName", "TrnRecredit_Condition", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("TrnRecredit_TableName", "Msisdn_ColumnName", "TrnRecredit_Condition", "Msisdn_ColumnValue", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("TrnRecredit_TableName", "RecreditAmt_ColumnName", "TrnRecredit_Condition", "RecreditAmt_ColumnValue", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("TrnRecredit_TableName", "TicketId_ColumnName", "TrnRecredit_Condition", "TicketId_ColumnValue", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("TrnRecredit_TableName", "Reason_ColumnName", "TrnRecredit_Condition", "Reason_ColumnValue", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("TrnRecredit_TableName", "DialledMsisdn_ColumnName", "TrnRecredit_Condition", "DialledMsisdn_ColumnValue", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("TrnRecredit_TableName", "DialledDate_ColumnName", "TrnRecredit_Condition", "DialledDate_ColumnValue", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("TrnRecredit_TableName", "Duration_ColumnName", "TrnRecredit_Condition", "Duration_ColumnValue", 1);
				break;
				case "step9": stepStatus[step] = SQLDBSelect("TrnRecredit_TableName", "Comments_ColumnName", "TrnRecredit_Condition", "Comments_ColumnValue", 1);
				break;
				case "step10": stepStatus[step] = SQLDBSelect("TrnRecredit_TableName", "RequestDate_ColumnName", "TrnRecredit_Condition", "RequestDate_ColumnValue", 1);
				break;
				case "step11": stepStatus[step] = SQLDBSelect("TrnRecredit_TableName", "SubmitedBy_ColumnName", "TrnRecredit_Condition", "SubmitedBy_ColumnValue", 1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("TrnRecredit_TableName", "status_ColumnName", "TrnRecredit_Condition", "status_ColumnValue", 1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("TrnRecredit_TableName", "AuthorisedBy_ColumnName", "TrnRecredit_Condition", "AuthorisedBy_ColumnValue", 1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("TrnRecredit_TableName", "AuthorisedDate_ColumnName", "TrnRecredit_Condition", "AuthorisedDate_ColumnValue", 1);
				break;
				case "step15": stepStatus[step] = SQLDBSelect("TrnRecredit_TableName", "OldBal_ColumnName", "TrnRecredit_Condition", "OldBal_ColumnValue", 1);
				break;
				case "step16": stepStatus[step] = SQLDBSelect("TrnRecredit_TableName", "NewBal_ColumnName", "TrnRecredit_Condition", "NewBal_ColumnValue", 1);
				break;
				case "step17": stepStatus[step] = SQLDBSelect("TrnRecredit_TableName", "Channel_ColumnName", "TrnRecredit_Condition", "Channel_ColumnValue", 1);
				break;
				case "step18": stepStatus[step] = SQLDBUpdate("TrnRecredit_TableName", "AuthComments_ColumnName", "AuthComments_ColumnValue", "TrnRecredit_Condition", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Precondition_Bill_Tns_Reasons(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=3;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("MstDebitReason_TableName", "Reason1_ColumnName", "Reason1_Condition", "Reason1_ColumnValue", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("MstDebitReason_TableName", "Reason2_ColumnName", "Reason2_Condition", "Reason2_ColumnValue", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("MstRecreditReason_TableName", "Reason_ColumnName", "Reason_Condition", "Reason_ColumnValue", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Billing_TNS_TL_Credit(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps = 25;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);
			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = storeSQLDBValueInEnv("TrnRecredit_TableName", "Id_ColumnName", "TrnRecredit_Condition", "Id_DynamicValue", 1);
				break;
				case "step2": stepStatus[step] = waitUntilExist(billing_Transaction.billingTransactionPage("tableView"), "Table_View");
				break;
				case "step3": stepStatus[step] = WebElementClick(billing_Transaction.tableValues(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"transactionID" , "Id_DynamicValue"), "TransactionID_Link");
				break;
				case "step4": stepStatus[step] = waitUntilExist(billing_Transaction.billingTransactionPage("verifyTnsID"), "Grid_Table_View");
				break;
				case "step5": stepStatus[step] = changeToCoordinates("billing_Transaction");
				break;
				case "step6": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("verifyTnsID"), "TransactionID", "TransId", 1);
				break;
				case "step7": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("typeVerify"), "Type", "Type", 1);
				break;
				case "step8": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("MSISDN"), "MSISDN", "MSISDN", 1);
				break;
				case "step9": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("reCreditAmt"), "ReCreditAmt", "ReCreditAmt", 1);
				break;
				case "step10": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("ticketIDVerify"), "TicketID", "TicketID", 1);
				break;
				case "step11": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("reason"), "Reason", "Reason", 1);
				break;
				case "step12": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("dialledNo"), "DialledNo", "DialledNo", 1);
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("dialledDate"), "DialledDate", "DialledDate", 1);
				break;
				case "step14": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("duration"), "Duration", "Duration", 1);
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("comments"), "Comments", "Comments", 1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("submitBy"), "SubmittedBy", "SubmittedBy", 1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("submitDate"), "SubmittedDate", "SubmittedDate", 1);
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("authoriseDate"), "AuthorisedDate", "AuthorisedDate", 1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("authoriseBy"), "AuthorisedBy", "AuthorisedBy", 1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("authoriseStatus"), "AuthorisedStatus", "AuthorisedStatus", 1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("prevBal"), "PrevBalance", "PrevBalance", 1);
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("curBal"), "CurrBalance", "CurrBalance", 1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("channel"), "Channel", "Channel", 1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("adminCmts"), "AdminComments", "AdminComments", 1);
				break;
				case "step25": stepStatus[step] = setScrollBarOFF("billing_Transaction");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Open_MSAccess_Connection(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);
			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = msAccessDBOpenConnection(property.getProperty("USA_MDB_FilePath"));
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Close_MSAccess_Connection(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1"  :stepStatus[step] = msAccessCloseConnection();
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Precondition_CNC_IN_LOC_MS_ACS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=4;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("Prepaid_dropdown_Master_TableName","text_ColumnName", "Prepaid_dropdown_Master_Condition", "text_ColumnValue", 1);
				break;
				case "step2": stepStatus[step] = HLRDBSelect("HLR_SUBS_IMSI_ACCOUNT_TableName","IMSI_ColumnName", "HLR_SUBS_IMSI_ACCOUNT_Condition", "IMSI_ColumnValue", 1);
				break;
				case "step3": stepStatus[step] = HLRDBSelect("HLR_SUBS_MSISDN_ACCOUNT_TableName","MSISDN_ColumnName", "HLR_SUBS_MSISDN_ACCOUNT_Condition", "MSISDN_ColumnValue", 1);
				break;
				case "step4": stepStatus[step] = HLRDBSelect("HLR_ACCOUNT_TableName","ACCOUNT_ID_ColumnName", "HLR_ACCOUNT_Condition", "ACCOUNT_ID_ColumnValue", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}	

	public synchronized void CNC_INITILAL_NW_ACS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 24;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(cancel_Initail_Loc.cancelInitalLocPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(cancel_Initail_Loc.cancelInitalLocPage("initialLocBtn"), "Cancel_Initial_Location_Btn");
				break;
				case "step9": stepStatus[step] = WebElementClick(cancel_Initail_Loc.cancelInitalLocPage("initialLocBtn"), "Cancel_Initial_Location_Btn");
				break;
				case "step10": stepStatus[step] = waitUntilExist(cancel_Initail_Loc.cancelInitalLocPage("networkAccessDD"), "Network_Access_Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(cancel_Initail_Loc.cancelInitalLocPage("networkAccessDD"), "Network_Access", "Network_Access", 1);
				break;
				case "step12": stepStatus[step] = WebCheckboxON(cancel_Initail_Loc.cancelInitalLocPage("networkChkbox"), "Retain Location Information");
				break;
				case "step13": stepStatus[step] = WebElementClick(cancel_Initail_Loc.cancelInitalLocPage("submitButton"), "Submit_Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(cancel_Initail_Loc.cancelInitalLocPage("confirm_Message"), "Confirm_Message");
				break;
				case "step15": stepStatus[step] = WebElementResxKeyValueStaticCompare(cancel_Initail_Loc.cancelInitalLocPage("confirm_Message"), "Confirm_Message", "Confirmation_Message", 1);
				break;
				case "step16": stepStatus[step] = WebElementClick(cancel_Initail_Loc.cancelInitalLocPage("historyBtn"), "History_Button");
				break;
				case "step17": stepStatus[step] = waitUntilExist(cancel_Initail_Loc.cancelInitalLocPage("tableView"), "History_View");
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(cancel_Initail_Loc.tableValues(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"msisdnTableValue", "MSISDN"), "MSISDN", "MSISDN", 1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(cancel_Initail_Loc.tableValues(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"imsiTableValue", "MSISDN"), "IMSI", "IMSI", 1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(cancel_Initail_Loc.tableValues(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"submitByTableValue", "MSISDN"), "Submitted_By", "Submit_By", 1);
				break;
				case "step21": stepStatus[step] = webElementDateCompare(cancel_Initail_Loc.tableValues(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"submitDateTableValue", "MSISDN"), "dd/MM/yyyy");
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(cancel_Initail_Loc.tableValues(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"networkAcsTableValue", "MSISDN"), "Network_Access", "Network_Access", 1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(cancel_Initail_Loc.tableValues(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"retailLtnTableValue", "MSISDN"), "Retain_Location", "Retain_Location", 1);
				break;
				case "step24": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Call_Forward_Chk_UnCon(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps = 18;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);
			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(call_Forward.callForwardPage("billingButton"), "Billing_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(call_Forward.callForwardPage("callFwdButton"), "call_Forward_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(call_Forward.callForwardPage("callFwdButton"), "call_Forward_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(call_Forward.callForwardPage("unCond_TxtboxDisabled"), "UnConditional_TextBox");
				break;
				case "step11": stepStatus[step] = WebEditEnterText(call_Forward.callForwardPage("ticketID"), "TicketID", "TicketID", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(call_Forward.callForwardPage("reason"), "Reason", "Reason", 1);
				break;
				case "step13": stepStatus[step] = javascriptWebElementClick(call_Forward.callForwardPage("unConditional_Chkbox"), "UnConditional_Button");
				break;
				case "step14": stepStatus[step] = WebEditEnterText(call_Forward.callForwardPage("unConditional_Txtbox"), "UnCondition_MSISDN", "UnCondition_MSISDN", 1);
				break;
				case "step15": stepStatus[step] = javascriptWebElementClick(call_Forward.callForwardPage("submitButton"), "Submit_Button");
				break;
				case "step16": stepStatus[step] = waitUntilExist(call_Forward.callForwardPage("confirm_Message"), "Confirm_Message");
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(call_Forward.callForwardPage("confirm_Message"), "Confirm_Message", "Confirmation_Message", 1);
				break;
				case "step18": stepStatus[step] = javascriptWebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Precondition_Partial_Bill_Tns(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps=15;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBCheckValueExist("TrnPartialBalTns_TableName", "Id_ColumnName", "TrnPartialBalTns_Condition", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("TrnPartialBalTns_TableName", "MsisdnTo_ColumnName", "TrnPartialBalTns_Condition", "MsisdnTo_ColumnValue", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("TrnPartialBalTns_TableName", "MsisdnFrom_ColumnName", "TrnPartialBalTns_Condition", "MsisdnFrom_ColumnValue", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("TrnPartialBalTns_TableName", "TicketId_ColumnName", "TrnPartialBalTns_Condition", "TicketId_ColumnValue", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("TrnPartialBalTns_TableName", "Reason_ColumnName", "TrnPartialBalTns_Condition", "Reason_ColumnValue", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("TrnPartialBalTns_TableName", "Comments_ColumnName", "TrnPartialBalTns_Condition", "Comments_ColumnValue", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("TrnPartialBalTns_TableName", "TransferAmt_ColumnName", "TrnPartialBalTns_Condition", "TransferAmt_ColumnValue", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("TrnPartialBalTns_TableName", "RequestDate_ColumnName", "TrnPartialBalTns_Condition", "RequestDate_ColumnValue", 1);
				break;
				case "step9": stepStatus[step] = SQLDBSelect("TrnPartialBalTns_TableName", "SubmitedBy_ColumnName", "TrnPartialBalTns_Condition", "SubmitedBy_ColumnValue", 1);
				break;
				case "step10": stepStatus[step] = SQLDBSelect("TrnPartialBalTns_TableName", "status_ColumnName", "TrnPartialBalTns_Condition", "status_ColumnValue", 1);
				break;
				case "step11": stepStatus[step] = SQLDBSelect("TrnPartialBalTns_TableName", "AuthorisedBy_ColumnName", "TrnPartialBalTns_Condition", "AuthorisedBy_ColumnValue", 1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("TrnPartialBalTns_TableName", "AuthorisedDate_ColumnName", "TrnPartialBalTns_Condition", "AuthorisedDate_ColumnValue", 1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("TrnPartialBalTns_TableName", "OldBal_ColumnName", "TrnPartialBalTns_Condition", "OldBal_ColumnValue", 1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("TrnPartialBalTns_TableName", "NewBal_ColumnName", "TrnPartialBalTns_Condition", "NewBal_ColumnValue", 1);
				break;
				case "step15": stepStatus[step] = SQLDBUpdate("TrnPartialBalTns_TableName", "AuthComments_ColumnName", "AuthComments_ColumnValue", "TrnPartialBalTns_Condition", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Bill_Trns_Partial_Htry(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps = 16;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(billing_Transaction.billingTransactionPage("billingButton"), "BillingTnsBtn");
				break;
				case "step8": stepStatus[step] = waitUntilExist(billing_Transaction.billingTransactionPage("billingTnsBtn"), "billing_Transaction_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(billing_Transaction.billingTransactionPage("billingTnsBtn"), "billing_Transaction_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(billing_Transaction.billingTransactionPage("ticketID"), "TicketID_TextBox");
				break;
				case "step11": stepStatus[step] = WebEditEnterText(billing_Transaction.billingTransactionPage("ticketID"), "TicketID", "TicketID", 1);
				break;
				case "step12": stepStatus[step] = WebListSelect(billing_Transaction.billingTransactionPage("status"), "Status", "Status", 1);
				break;
				case "step13": stepStatus[step] = WebListSelectByValue(billing_Transaction.billingTransactionPage("type"), "Type", "Type", 1);
				break;
				case "step14": stepStatus[step] = javaScriptDatePicker(billing_Transaction.billingTransactionPage("fromDate"), "FromDate", "FromDate", 1);
				break;
				case "step15": stepStatus[step] = javaScriptDatePicker(billing_Transaction.billingTransactionPage("toDate"), "ToDate", "ToDate", 1);
				break;
				case "step16": stepStatus[step] = WebElementClick(billing_Transaction.billingTransactionPage("search"), "Search_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Partial_Bill_TNS_TableView(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 23;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = storeSQLDBValueInEnv("TrnPartialBalTns_TableName", "Id_ColumnName", "TrnPartialBalTns_Condition", "Id_DynamicValue", 1);
				break;
				case "step2": stepStatus[step] = waitUntilExist(billing_Transaction.billingTransactionPage("tableView"), "Table_View");
				break;
				case "step3": stepStatus[step] = WebElementClick(billing_Transaction.tableValues(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"transactionID" , "Id_DynamicValue"), "TransactionID_Link");
				break;
				case "step4": stepStatus[step] = waitUntilExist(billing_Transaction.billingTransactionPage("verifyTnsID"), "Grid_Table_View");
				break;
				case "step5": stepStatus[step] = changeToCoordinates("billing_Transaction");
				break;
				case "step6": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("verifyTnsID"), "TransactionID", "TransId", 1);
				break;
				case "step7": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("typeVerify"), "Type", "Type", 1);
				break;
				case "step8": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("MSISDNFrom"), "MSISDNFrom", "MSISDNFrom", 1);
				break;
				case "step9": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("MSISDNTo"), "MSISDNTo", "MSISDNTo", 1);
				break;
				case "step10": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("ticketIDVerify"), "TicketID", "TicketID", 1);
				break;
				case "step11": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("reason"), "Reason", "Reason", 1);
				break;
				case "step12": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("comments"), "Comments", "Comments", 1);
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("transferAmt"), "Transfer_Amt", "Transfer_Amt", 1);
				break;
				case "step14": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("submitBy"), "SubmittedBy", "SubmittedBy", 1);
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("submitDate"), "RequestDate", "RequestDate", 1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("authoriseBy"), "AuthorisedBy", "AuthorisedBy", 1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("authoriseDate"), "AuthorisedDate", "AuthorisedDate", 1);
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("authoriseStatus"), "AuthorisedStatus", "AuthorisedStatus", 1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("prevBal"), "OldBalance", "OldBalance", 1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("curBal"), "NewBalance", "NewBalance", 1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("channel"), "Channel", "Channel", 1);
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("adminCmts"), "AdminComments", "AdminComments", 1);
				break;
				case "step23": stepStatus[step] = setScrollBarOFF("billing_Transaction");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Precondition_Bal_Trans_Bill_Tns(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps=14;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBCheckValueExist("TrnBalanceTransfer_TableName", "Id_ColumnName", "TrnBalanceTransfer_Condition", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("TrnBalanceTransfer_TableName", "MsisdnTo_ColumnName", "TrnBalanceTransfer_Condition", "MsisdnTo_ColumnValue", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("TrnBalanceTransfer_TableName", "MsisdnFrom_ColumnName", "TrnBalanceTransfer_Condition", "MsisdnFrom_ColumnValue", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("TrnBalanceTransfer_TableName", "TicketId_ColumnName", "TrnBalanceTransfer_Condition", "TicketId_ColumnValue", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("TrnBalanceTransfer_TableName", "Reason_ColumnName", "TrnBalanceTransfer_Condition", "Reason_ColumnValue", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("TrnBalanceTransfer_TableName", "Comments_ColumnName", "TrnBalanceTransfer_Condition", "Comments_ColumnValue", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("TrnBalanceTransfer_TableName", "TransferAmt_ColumnName", "TrnBalanceTransfer_Condition", "TransferAmt_ColumnValue", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("TrnBalanceTransfer_TableName", "RequestDate_ColumnName", "TrnBalanceTransfer_Condition", "RequestDate_ColumnValue", 1);
				break;
				case "step9": stepStatus[step] = SQLDBSelect("TrnBalanceTransfer_TableName", "SubmitedBy_ColumnName", "TrnBalanceTransfer_Condition", "SubmitedBy_ColumnValue", 1);
				break;
				case "step10": stepStatus[step] = SQLDBSelect("TrnBalanceTransfer_TableName", "status_ColumnName", "TrnBalanceTransfer_Condition", "status_ColumnValue", 1);
				break;
				case "step11": stepStatus[step] = SQLDBSelect("TrnBalanceTransfer_TableName", "AuthorisedBy_ColumnName", "TrnBalanceTransfer_Condition", "AuthorisedBy_ColumnValue", 1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("TrnBalanceTransfer_TableName", "AuthorisedDate_ColumnName", "TrnBalanceTransfer_Condition", "AuthorisedDate_ColumnValue", 1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("TrnBalanceTransfer_TableName", "OldBal_ColumnName", "TrnBalanceTransfer_Condition", "OldBal_ColumnValue", 1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("TrnBalanceTransfer_TableName", "NewBal_ColumnName", "TrnBalanceTransfer_Condition", "NewBal_ColumnValue", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void BalTns_BillTns_TableView(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 22;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = storeSQLDBValueInEnv("TrnBalanceTransfer_TableName", "Id_ColumnName", "TrnBalanceTransfer_Condition", "Id_DynamicValue", 1);
				break;
				case "step2": stepStatus[step] = waitUntilExist(billing_Transaction.billingTransactionPage("tableView"), "Table_View");
				break;
				case "step3": stepStatus[step] = WebElementClick(billing_Transaction.tableValues(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"transactionID" , "Id_DynamicValue"), "TransactionID_Link");
				break;
				case "step4": stepStatus[step] = waitUntilExist(billing_Transaction.billingTransactionPage("verifyTnsID"), "Grid_Table_View");
				break;
				case "step5": stepStatus[step] = changeToCoordinates("billing_Transaction");
				break;
				case "step6": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("verifyTnsID"), "TransactionID", "TransId", 1);
				break;
				case "step7": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("typeVerify"), "Type", "Type", 1);
				break;
				case "step8": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("MSISDNFrom"), "MSISDNFrom", "MSISDNFrom", 1);
				break;
				case "step9": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("MSISDNTo"), "MSISDNTo", "MSISDNTo", 1);
				break;
				case "step10": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("ticketIDVerify"), "TicketID", "TicketID", 1);
				break;
				case "step11": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("reason"), "Reason", "Reason", 1);
				break;
				case "step12": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("comments"), "Comments", "Comments", 1);
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("transferAmt"), "Transfer_Amt", "Transfer_Amt", 1);
				break;
				case "step14": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("submitBy"), "SubmittedBy", "SubmittedBy", 1);
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("submitDate"), "RequestDate", "RequestDate", 1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("authoriseBy"), "AuthorisedBy", "AuthorisedBy", 1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("authoriseDate"), "AuthorisedDate", "AuthorisedDate", 1);
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("authoriseStatus"), "AuthorisedStatus", "AuthorisedStatus", 1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("prevBal"), "OldBalance", "OldBalance", 1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("curBal"), "NewBalance", "NewBalance", 1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(billing_Transaction.billingTransactionPage("channel"), "Channel", "Channel", 1);
				break;
				case "step22": stepStatus[step] = setScrollBarOFF("billing_Transaction");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postcond_Call_Fwd_ValExist(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps = 17;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = HLRDBSelect("HLR_SUBS_CFWD_INFO_TABLENAME","COLUMNNAME_UN_SS_STATUS", "HLR_SUBS_CFWD_INFO_CONDITION", "COLUMNVALUE_UN_SS_STATUS", 1);
				break;
				case "step2": stepStatus[step] = SQLDBCheckValueExist("mstnfblockreason_TableName", "ColumnName_id", "mstnfblockreason_Condition", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("mstnfblockreason_TableName", "ColumnName_ACCOUNT_NO", "mstnfblockreason_Condition", "ColumnValue_ACCOUNT_NO", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("mstnfblockreason_TableName", "ColumnName_MSISDN", "mstnfblockreason_Condition", "ColumnValue_MSISDN", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("mstnfblockreason_TableName", "ColumnName_TYPE", "mstnfblockreason_Condition", "ColumnValue_TYPE", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("mstnfblockreason_TableName", "ColumnName_STATUS", "mstnfblockreason_Condition", "ColumnValue_STATUS", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("mstnfblockreason_TableName", "ColumnName_REASON", "mstnfblockreason_Condition", "ColumnValue_REASON", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("mstnfblockreason_TableName", "ColumnName_TICKETID", "mstnfblockreason_Condition", "ColumnValue_TICKETID", 1);
				break;
				case "step9": stepStatus[step] = SQLDBSelect("mstnfblockreason_TableName", "ColumnName_USERNAME", "mstnfblockreason_Condition", "ColumnValue_USERNAME", 1);
				break;
				case "step10": stepStatus[step] = SQLDBDateCompare("mstnfblockreason_TableName", "ColumnName_SUBMITDATE", "mstnfblockreason_Condition", "dd/MM/yyyy", 1);
				break;
				case "step11": stepStatus[step] = HLRDBSelect("HLR_SUBS_CFWD_INFO_TABLENAME","COLUMNNAME_SS_STATUS", "HLR_SUBS_CFWD_INFO_BUSY_CONDITION", "COLUMNVALUE_SS_STATUS", 1);
				break;
				case "step12": stepStatus[step] = HLRDBSelect("HLR_SUBS_CFWD_INFO_TABLENAME","COLUMNNAME_SS_STATUS", "HLR_SUBS_CFWD_INFO_NO_ANSWER_CONDITION", "COLUMNVALUE_SS_STATUS", 1);
				break;
				case "step13": stepStatus[step] = HLRDBSelect("HLR_SUBS_CFWD_INFO_TABLENAME","COLUMNNAME_SS_STATUS", "HLR_SUBS_CFWD_INFO_SWT_OFF_CONDITION", "COLUMNVALUE_SS_STATUS", 1);
				break;
				case "step14": stepStatus[step] = HLRDBSelect("HLR_SUBS_CFWD_INFO_TABLENAME","FWD_TO_NUMBER_ColumnName", "HLR_SUBS_CFWD_INFO_BUSY_CONDITION", "BUSY_FWD_TO_NUMBER_COLUMNValue", 1);
				break;
				case "step15": stepStatus[step] = HLRDBSelect("HLR_SUBS_CFWD_INFO_TABLENAME","FWD_TO_NUMBER_ColumnName", "HLR_SUBS_CFWD_INFO_NO_ANSWER_CONDITION", "NO_ANS_FWD_TO_NUMBER_COLUMNValue", 1);
				break;
				case "step16": stepStatus[step] = HLRDBSelect("HLR_SUBS_CFWD_INFO_TABLENAME","FWD_TO_NUMBER_ColumnName", "HLR_SUBS_CFWD_INFO_SWT_OFF_CONDITION", "SWT_OFF_FWD_TO_NUMBER_COLUMNValue", 1);
				break;
				case "step17": stepStatus[step] = HLRDBSelect("HLR_SUBS_CFWD_INFO_TABLENAME","NO_REPLY_COND_TIME_ColumnName", "HLR_SUBS_CFWD_INFO_NO_ANSWER_CONDITION", "NO_REPLY_COND_TIME_COLUMNValue", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_REG_SMS_LogFile_REG(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);
			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = readLogSMSFiles("Location", "Startwith_Name", "Endwith_Name", "Value", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void USA_Family_Plan(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 21;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("bundleButton"), "Bundle_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("mng_FamilyPlan"), "Manage_Family_Plan_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("mng_FamilyPlan"), "Manage_Family_Plan_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("parentMSISDN"), "Parent_MSISDN_Text");
				break;
				case "step11": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("addButton"), "Add_Button");
				break;
				case "step12": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("childMSISDN"), "Child_MSISDN_TextBox");
				break;
				case "step13": stepStatus[step] = WebEditEnterText(uSA_Family_Plan.usaFamilyPlanPage("childMSISDN"), "Child_MSISDN", "Child_MSISDN", 1);
				break;
				case "step14": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("submit"), "Submit");
				break;
				case "step15": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("childCon_Msg"), "Child_Confirm_Msg");
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(uSA_Family_Plan.usaFamilyPlanPage("childCon_Msg"), "Child_Confirm_Msg", "Child_Confirm_Msg", 1);
				break;
				case "step17": stepStatus[step] = WebCheckboxON(uSA_Family_Plan.usaFamilyPlanPage("mainBal_RadioBtn"), "Main_Bal_Radio_Button");
				break;
				case "step18": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("submit"), "Submit");
				break;
				case "step19": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("confirmMsg"), "Confirm_Message");
				break;
				case "step20": stepStatus[step] = WebElementResxKeyValueStaticCompare(uSA_Family_Plan.usaFamilyPlanPage("confirmMsg"), "Confirm_Message", "Confirm_Message", 1);
				break;
				case "step21": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}

	}

	public synchronized void USA_Family_Plan_Swap(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 26;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("bundleButton"), "Bundle_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("mng_FamilyPlan"), "Manage_Family_Plan_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("mng_FamilyPlan"), "Manage_Family_Plan_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("parentMSISDN"), "Parent_MSISDN_Text");
				break;
				case "step11": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("addButton"), "Add_Button");
				break;
				case "step12": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("childMSISDN"), "Child_MSISDN_TextBox");
				break;
				case "step13": stepStatus[step] = WebEditEnterText(uSA_Family_Plan.usaFamilyPlanPage("childMSISDN"), "Child_MSISDN", "Child_MSISDN", 1);
				break;
				case "step14": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("submit"), "Submit");
				break;
				case "step15": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("childCon_Msg"), "Child_Confirm_Msg");
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(uSA_Family_Plan.usaFamilyPlanPage("childCon_Msg"), "Child_Confirm_Msg", "Child_Confirm_Msg", 1);
				break;
				case "step17": stepStatus[step] = WebCheckboxON(uSA_Family_Plan.usaFamilyPlanPage("mainBal_RadioBtn"), "Main_Bal_Radio_Button");
				break;
				case "step18": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("submit"), "Submit");
				break;
				case "step19": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("confirmMsg"), "Confirm_Message");
				break;
				case "step20": stepStatus[step] = WebElementResxKeyValueStaticCompare(uSA_Family_Plan.usaFamilyPlanPage("confirmMsg"), "Confirm_Message", "Confirm_Message", 1);
				break;
				case "step21": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("swapButton"), "SwapButton");
				break;
				case "step22": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("swapYesBtn"), "Swap_Yes_Button");
				break;
				case "step23": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("swapYesBtn"), "Swap_Yes_Button");
				break;
				case "step24": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("swapSucessMsg"), "Swap_Sucess_Message");
				break;
				case "step25": stepStatus[step] = WebElementResxKeyValueStaticCompare(uSA_Family_Plan.usaFamilyPlanPage("swapSucessMsg"), "Swap_Sucess_Message", "Swap_Sucess_Message", 1);
				break;
				case "step26": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("swapSucessOk"), "Swap_Sucess_Ok_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}

	}

	public synchronized void USA_Family_Plan_Delete(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 27;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("bundleButton"), "Bundle_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("mng_FamilyPlan"), "Manage_Family_Plan_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("mng_FamilyPlan"), "Manage_Family_Plan_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("parentMSISDN"), "Parent_MSISDN_Text");
				break;
				case "step11": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("addButton"), "Add_Button");
				break;
				case "step12": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("childMSISDN"), "Child_MSISDN_TextBox");
				break;
				case "step13": stepStatus[step] = WebEditEnterText(uSA_Family_Plan.usaFamilyPlanPage("childMSISDN"), "Child_MSISDN", "Child_MSISDN", 1);
				break;
				case "step14": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("submit"), "Submit");
				break;
				case "step15": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("childCon_Msg"), "Child_Confirm_Msg");
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(uSA_Family_Plan.usaFamilyPlanPage("childCon_Msg"), "Child_Confirm_Msg", "Child_Confirm_Msg", 1);
				break;
				case "step17": stepStatus[step] = WebCheckboxON(uSA_Family_Plan.usaFamilyPlanPage("mainBal_RadioBtn"), "Main_Bal_Radio_Button");
				break;
				case "step18": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("submit"), "Submit");
				break;
				case "step19": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("confirmMsg"), "Confirm_Message");
				break;
				case "step20": stepStatus[step] = WebElementResxKeyValueStaticCompare(uSA_Family_Plan.usaFamilyPlanPage("confirmMsg"), "Confirm_Message", "Confirm_Message", 1);
				break;
				case "step21": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("deleteChild"), "Delete_Child_MSISDN");
				break;
				case "step22": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("deleteChild"), "Delete_Child_MSISDN");
				break;
				case "step23": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("deleteConMsg"), "Delete_Confirm_Message");
				break;
				case "step24": stepStatus[step] = WebElementResxKeyValueStaticCompare(uSA_Family_Plan.usaFamilyPlanPage("deleteConMsg"), "Delete_Confirm_Message", "Child_Remove_Confirm_Message", 1);
				break;
				case "step25": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("deleteYesBtn"), "Yes_Button");
				break;
				case "step26": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("childConfirmMsg"), "Child_Confirm_Message");
				break;
				case "step27": stepStatus[step] = WebElementResxKeyValueStaticCompare(uSA_Family_Plan.usaFamilyPlanPage("childConfirmMsg"), "Child_Removed_Confirm_Msg", "Child_Removed_Message", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}

	}

	public synchronized void USA_Family_Plan_CC(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 44;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("bundleButton"), "Bundle_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("mng_FamilyPlan"), "Manage_Family_Plan_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("mng_FamilyPlan"), "Manage_Family_Plan_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("parentMSISDN"), "Parent_MSISDN_Text");
				break;
				case "step11": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("addButton"), "Add_Button");
				break;
				case "step12": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("childMSISDN"), "Child_MSISDN_TextBox");
				break;
				case "step13": stepStatus[step] = WebEditEnterText(uSA_Family_Plan.usaFamilyPlanPage("childMSISDN"), "Child_MSISDN", "Child_MSISDN", 1);
				break;
				case "step14": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("submit"), "Submit");
				break;
				case "step15": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("childCon_Msg"), "Child_Confirm_Msg");
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(uSA_Family_Plan.usaFamilyPlanPage("childCon_Msg"), "Child_Confirm_Msg", "Child_Confirm_Msg", 1);
				break;
				case "step17": stepStatus[step] = WebCheckboxON(uSA_Family_Plan.usaFamilyPlanPage("CC_RadioBtn"), "Credit_Card_Radio_Button");
				break;
				case "step18": stepStatus[step] = WebCheckboxON(uSA_Family_Plan.usaFamilyPlanPage("newCard"), "NewCard_Radio_Button");
				break;
				case "step19": stepStatus[step] = WebListSelect(uSA_Family_Plan.usaFamilyPlanPage("cardType"), "Card_Type", "Card_Type", 1);
				break;
				case "step20": stepStatus[step] = WebEditEnterText(uSA_Family_Plan.usaFamilyPlanPage("txtNameOncard"), "NameOncard", "Card_Name", 1);
				break;
				case "step21": stepStatus[step] = WebEditEnterText(uSA_Family_Plan.usaFamilyPlanPage("card1"), "Card_Number_1", "Card_Number_1", 1);
				break;
				case "step22": stepStatus[step] = WebEditEnterText(uSA_Family_Plan.usaFamilyPlanPage("card2"), "Card_Number_2", "Card_Number_2", 1);
				break;
				case "step23": stepStatus[step] = WebEditEnterText(uSA_Family_Plan.usaFamilyPlanPage("card3"), "Card_Number_3", "Card_Number_3", 1);
				break;
				case "step24": stepStatus[step] = WebEditEnterText(uSA_Family_Plan.usaFamilyPlanPage("card4"), "Card_Number_4", "Card_Number_4", 1);
				break;
				case "step25": stepStatus[step] = javaScriptDatePicker(uSA_Family_Plan.usaFamilyPlanPage("expiryDate"), "Expiry_Date", "Expiry_Date", 1);
				break;
				case "step26": stepStatus[step] = webElementClearText(uSA_Family_Plan.usaFamilyPlanPage("cvv"), "CVV");
				break;
				case "step27": stepStatus[step] = WebEditEnterText(uSA_Family_Plan.usaFamilyPlanPage("cvv"), "CVV", "CVV", 1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(uSA_Family_Plan.usaFamilyPlanPage("USACountry"), "Country_Name", "Country_Name", 1);
				break;
				case "step29": stepStatus[step] = WebEditEnterText(uSA_Family_Plan.usaFamilyPlanPage("stName"), "Street_Name", "Street_Name", 1);
				break;
				case "step30": stepStatus[step] = WebEditEnterText(uSA_Family_Plan.usaFamilyPlanPage("cityName"), "CityName", "CityName", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(uSA_Family_Plan.usaFamilyPlanPage("postCode"), "PostCode", "PostCode", 1);
				break;
				case "step32": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("search"), "Search");
				break;
				case "step33": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("addressList"), "Address_List");
				break;
				case "step34": stepStatus[step] = WebListSelect(uSA_Family_Plan.usaFamilyPlanPage("addressList"), "Address_List", "Address_List", 1);
				break;
				case "step35": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("addressAccept"), "AddressAccept");
				break;
				case "step36": stepStatus[step] = WebElementValueCompare(uSA_Family_Plan.usaFamilyPlanPage("stName"), "Street_Name", "Street_Name", 1);
				break;
				case "step37": stepStatus[step] = WebElementValueCompare(uSA_Family_Plan.usaFamilyPlanPage("cityName"), "CityName", "CityName", 1);
				break;
				case "step38": stepStatus[step] = WebListSelect(uSA_Family_Plan.usaFamilyPlanPage("stateName"), "State", "State", 1);
				break;
				case "step39": stepStatus[step] = WebEditEnterText(uSA_Family_Plan.usaFamilyPlanPage("emailTxt"), "Email", "Email", 1);
				break;
				case "step40": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("submit"), "Submit");
				break;
				case "step41": stepStatus[step] = waitUntilDisappear(uSA_Family_Plan.usaFamilyPlanPage("successLoadIcon"), "Success_Load_Icon");
				break;
				case "step42": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("confirmMsg"), "Confirm_Message");
				break;
				case "step43": stepStatus[step] = WebElementResxKeyValueStaticCompare(uSA_Family_Plan.usaFamilyPlanPage("confirmMsg"), "Confirm_Message", "Confirm_Message", 1);
				break;
				case "step44": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}

	}

	public synchronized void USA_Family_Plan_Exist(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps = 17;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("bundleButton"), "Bundle_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("mng_FamilyPlan"), "Manage_Family_Plan_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("mng_FamilyPlan"), "Manage_Family_Plan_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("parentMSISDN"), "Parent_MSISDN_Text");
				break;
				case "step11": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("addButton"), "Add_Button");
				break;
				case "step12": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("childMSISDN"), "Child_MSISDN_TextBox");
				break;
				case "step13": stepStatus[step] = WebEditEnterText(uSA_Family_Plan.usaFamilyPlanPage("childMSISDN"), "Child_MSISDN", "Child_MSISDN", 1);
				break;
				case "step14": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("submit"), "Submit");
				break;
				case "step15": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("confirmMsg"), "Confirm_Message");
				break;
				case "step16": stepStatus[step] = WebElementResxKeyValueStaticCompare(uSA_Family_Plan.usaFamilyPlanPage("confirmMsg"), "Confirm_Message", "Child_Exist_ConfirmMsg", 1);
				break;
				case "step17": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}

	}

	public synchronized void USA_FMY_PN_VAL_MSG(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 25;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("bundleButton"), "Bundle_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("mng_FamilyPlan"), "Manage_Family_Plan_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("mng_FamilyPlan"), "Manage_Family_Plan_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("parentMSISDN"), "Parent_MSISDN_Text");
				break;
				case "step11": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("addButton"), "Add_Button");
				break;
				case "step12": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("childMSISDN"), "Child_MSISDN_TextBox");
				break;
				case "step13": stepStatus[step] = WebEditEnterText(uSA_Family_Plan.usaFamilyPlanPage("childMSISDN"), "Child_MSISDN", "10Digit_Child_MSISDN", 1);
				break;
				case "step14": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("parentMSISDN"), "Parent_MSISDN");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(uSA_Family_Plan.usaFamilyPlanPage("10DigitMSISDN"), "Child_MSISDN_TextBox", "10Digits_Confirm_Msg", 1);
				break;
				case "step16": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("reset"), "Reset");
				break;
				case "step17": stepStatus[step] = WebEditEnterText(uSA_Family_Plan.usaFamilyPlanPage("childMSISDN"), "Child_MSISDN", "CountryCode_Child_MSISDN", 1);
				break;
				case "step18": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("parentMSISDN"), "Parent_MSISDN");
				break;
				case "step19": stepStatus[step] = WebElementResxKeyValueStaticCompare(uSA_Family_Plan.usaFamilyPlanPage("10DigitMSISDN"), "Child_MSISDN_TextBox", "CountryCode_Confirm_Msg", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("reset"), "Reset");
				break;
				case "step21": stepStatus[step] = WebEditEnterText(uSA_Family_Plan.usaFamilyPlanPage("childMSISDN"), "Child_MSISDN", "Child_MSISDN", 1);
				break;
				case "step22": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("submit"), "Submit");
				break;
				case "step23": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("confirmMsg"), "Confirm_Message");
				break;
				case "step24": stepStatus[step] = WebElementResxKeyValueStaticCompare(uSA_Family_Plan.usaFamilyPlanPage("confirmMsg"), "Child_MSISDN_TextBox", "Invalid_MSISDN_Confirm_Msg", 1);
				break;
				case "step25": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}

	}

	public synchronized void USA_FMY_PN_MAN_FIELD(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 19;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("bundleButton"), "Bundle_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("mng_FamilyPlan"), "Manage_Family_Plan_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("mng_FamilyPlan"), "Manage_Family_Plan_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("parentMSISDN"), "Parent_MSISDN_Text");
				break;
				case "step11": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("addButton"), "Add_Button");
				break;
				case "step12": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("childMSISDN"), "Child_MSISDN_TextBox");
				break;
				case "step13": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("submit"), "Submit");
				break;
				case "step14": stepStatus[step] = waitUntilExist(uSA_Family_Plan.usaFamilyPlanPage("confirmMsg"), "Confirm_Message");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(uSA_Family_Plan.usaFamilyPlanPage("confirmMsg"), "Child_MSISDN_Message", "Mandatory_Confirm_Msg", 1);
				break;
				case "step16": stepStatus[step] = checkElementIsDisplayed(uSA_Family_Plan.usaFamilyPlanPage("valChildMSISDN"), "ChildMSISDN_Alert");
				break;
				case "step17": stepStatus[step] = WebEditEnterText(uSA_Family_Plan.usaFamilyPlanPage("childMSISDN"), "Child_MSISDN", "Child_MSISDN", 1);
				break;
				case "step18": stepStatus[step] = WebElementClick(uSA_Family_Plan.usaFamilyPlanPage("reset"), "Reset");
				break;
				case "step19": stepStatus[step] = WebElementValueCompare(uSA_Family_Plan.usaFamilyPlanPage("childMSISDN"), "Child_MSISDN_TextBox", "Child_MSISDN_TextBox", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void EUConfig_MAN_FIELD(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps = 20;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("euConfigButton"), "EU_Configuration_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("euConfigButton"), "EU_Configuration_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("viewUsage"), "View_Usage");
				break;
				case "step11": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("submit"), "Submit");
				break;
				case "step12": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("confirmMsgId"), "Confirm_Message");
				break;
				case "step13": stepStatus[step] = WebElementResxKeyValueStaticCompare(eU_Configurations.euConfigurationsPage("confirmMsgId"), "Mandatory_Confirm_Msg", "Mandatory_Confirm_Msg", 1);
				break;
				case "step14": stepStatus[step] = checkElementIsDisplayed(eU_Configurations.euConfigurationsPage("valthresLimit"), "Threshold_Limit_Alert");
				break;
				case "step15": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("viewUsage"), "View_Usage");
				break;
				case "step16": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("avalAmountText"), "Available_Amount");
				break;
				case "step17": stepStatus[step] = WebEditEnterText(eU_Configurations.euConfigurationsPage("thresLimit"), "Threshold_Limit", "Threshold_Limit", 1);
				break;
				case "step18": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("reset"), "Reset");
				break;
				case "step19": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("viewUsage"), "View_Usage");
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(eU_Configurations.euConfigurationsPage("thresLimit"), "Threshold_Limit", "Threshold_Limit_Blank", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void EUConfig_VerifyAmt(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps = 14;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("euConfigButton"), "EU_Configuration_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("euConfigButton"), "EU_Configuration_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("viewUsage"), "View_Usage");
				break;
				case "step11": stepStatus[step] = WebEditEnterText(eU_Configurations.euConfigurationsPage("thresLimit"), "Threshold_Limit", "Threshold_Limit", 1);
				break;
				case "step12": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("submit"), "Submit");
				break;
				case "step13": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("confirmMsgXpath"), "Amount_ConfirmMsg");
				break;
				case "step14": stepStatus[step] = WebElementTextCompare(eU_Configurations.euConfigurationsPage("confirmMsgXpath"), "Amount_ValidationMsg", "Amt_ValidationMsg", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}

	}

	public synchronized void EUConfig_VerifyAmt_Success(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 14;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("euConfigButton"), "EU_Configuration_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("euConfigButton"), "EU_Configuration_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("viewUsage"), "View_Usage");
				break;
				case "step11": stepStatus[step] = WebEditEnterText(eU_Configurations.euConfigurationsPage("thresLimit"), "Threshold_Limit", "Threshold_Limit", 1);
				break;
				case "step12": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("submit"), "Submit");
				break;
				case "step13": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("confirmMsg"), "Amount_ConfirmMsg");
				break;
				case "step14": stepStatus[step] = WebElementResxKeyValueStaticCompare(eU_Configurations.euConfigurationsPage("confirmMsg"), "Amount_ValidationMsg", "Amt_ValidationMsg", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void EUConfig_VerifyAvalAmt(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps = 13;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("euConfigButton"), "EU_Configuration_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("euConfigButton"), "EU_Configuration_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("viewUsage"), "View_Usage");
				break;
				case "step11": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("viewUsage"), "View_Usage");
				break;
				case "step12": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("availAmount"), "Available_Amount");
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(eU_Configurations.euConfigurationsPage("availAmount"), "Available_Amount", "Available_Amt", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void EUConfig_AcceptCHRS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 12;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("euConfigButton"), "EU_Configuration_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("euConfigButton"), "EU_Configuration_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("viewUsage"), "View_Usage");
				break;
				case "step11": stepStatus[step] = WebEditEnterText(eU_Configurations.euConfigurationsPage("thresLimit"), "Threshold_Limit", "Threshold_Limit", 1);
				break;
				case "step12": stepStatus[step] = WebElementValueCompare(eU_Configurations.euConfigurationsPage("thresLimit"), "Threshold_Limit", "Threshold_Limit_Validate", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void EUConfig_HistoryView(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 16;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("euConfigButton"), "EU_Configuration_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("euConfigButton"), "EU_Configuration_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("viewUsage"), "View_Usage");
				break;
				case "step11": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("history"), "History");
				break;
				case "step12": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("fromDate"), "FromDate");
				break;
				case "step13": stepStatus[step] = checkElementIsDisplayed(eU_Configurations.euConfigurationsPage("fromDate"), "FromDate");
				break;
				case "step14": stepStatus[step] = checkElementIsDisplayed(eU_Configurations.euConfigurationsPage("toDate"), "ToDate");
				break;
				case "step15": stepStatus[step] = checkElementIsDisplayed(eU_Configurations.euConfigurationsPage("view"), "View");
				break;
				case "step16": stepStatus[step] = WebElementAttributeValueCompare(eU_Configurations.euConfigurationsPage("toDate"), "ToDate", "ToDateAttName", "ToDateName", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void EUConfig_History_MAN_FIELD(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps = 27;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);
			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("euConfigButton"), "EU_Configuration_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("euConfigButton"), "EU_Configuration_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("viewUsage"), "View_Usage");
				break;
				case "step11": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("history"), "History");
				break;
				case "step12": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("fromDate"), "From_Date");
				break;
				case "step13": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("view"), "View");
				break;
				case "step14": stepStatus[step] = checkElementIsDisplayed(eU_Configurations.euConfigurationsPage("valFromDate"), "From_Date_Alert");
				break;
				case "step15": stepStatus[step] = WebElementResxKeyValueStaticCompare(eU_Configurations.euConfigurationsPage("validMsg"), "Mandatory_Validation_Msg", "Mandatory_Validation_Msg", 1);
				break;
				case "step16": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("reset"), "Reset");
				break;
				case "step17": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("history"), "History");
				break;
				case "step18": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("fromDate"), "From_Date");
				break;
				case "step19": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("fromDate"), "From_Date");
				break;
				case "step20": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("selectYear"), "Select_Year");
				break;
				case "step21": stepStatus[step] = WebListSelect(eU_Configurations.euConfigurationsPage("selectYear"), "SelectYear", "SelectYear", 1);
				break;
				case "step22": stepStatus[step] = WebListSelect(eU_Configurations.euConfigurationsPage("selectMonth"), "SelectMonth", "SelectMonth", 1);
				break;
				case "step23": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("selectDate"), "Select_Date");
				break;
				case "step24": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("selectDate"), "Select_Date");
				break;
				case "step25": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("view"), "View");
				break;
				case "step26": stepStatus[step] = checkElementIsDisplayed(eU_Configurations.euConfigurationsPage("valToDate"), "To_Date_Alert");
				break;
				case "step27": stepStatus[step] = WebElementResxKeyValueStaticCompare(eU_Configurations.euConfigurationsPage("validMsg"), "Mandatory_Validation_Msg", "Mandatory_Validation_Msg", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}
				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void EUConfig_TableView(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 18;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("euConfigButton"), "EU_Configuration_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("euConfigButton"), "EU_Configuration_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("viewUsage"), "View_Usage");
				break;
				case "step11": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("history"), "History");
				break;
				case "step12": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("fromDate"), "FromDate");
				break;
				case "step13": stepStatus[step] = javaScriptDatePicker(eU_Configurations.euConfigurationsPage("fromDate"), "FromDate", "FromDate", 1);
				break;
				case "step14": stepStatus[step] = javaScriptDatePicker(eU_Configurations.euConfigurationsPage("toDate"), "ToDate", "ToDate", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("view"), "View");
				break;
				case "step16": stepStatus[step] = waitUntilExist(eU_Configurations.euConfigurationsPage("crdTypeID"), "CRD_TypeID");
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(eU_Configurations.euConfigurationsPage("euTypeID"), "CRD_TypeID", "CRD_TypeID", 1);
				break;
				case "step18": stepStatus[step] = WebElementClick(eU_Configurations.euConfigurationsPage("closeButton"), "CloseButton");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}	

	public synchronized void DisabilityServChkField(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps = 21;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("disablitySerBtn"), "Disability_Services");
				break;
				case "step9": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("disablitySerBtn"), "Disability_Services");
				break;
				case "step10": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("subRadioButton"), "Subscribe_RadioButton");
				break;
				case "step11": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("subRadioButton"), "Subscribe_RadioButton");
				break;
				case "step12": stepStatus[step] = WebCheckboxON(disability_Services.disServicesPage("nominateYes"), "Nominate_Yes_Button");
				break;
				case "step13": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("txtName"), "Name_TextBox");
				break;
				case "step14": stepStatus[step] = checkElementIsDisplayed(disability_Services.disServicesPage("txtName"), "Name_TextBox");
				break;
				case "step15": stepStatus[step] = checkElementIsDisplayed(disability_Services.disServicesPage("maleRadioButton"), "Male_Radio_Button");
				break;
				case "step16": stepStatus[step] = checkElementIsDisplayed(disability_Services.disServicesPage("femaleRadioButton"), "Female_Radio_Button");
				break;
				case "step17": stepStatus[step] = checkElementIsDisplayed(disability_Services.disServicesPage("DOB"), "DOB");
				break;
				case "step18": stepStatus[step] = checkElementIsDisplayed(disability_Services.disServicesPage("addressOne"), "Address_1");
				break;
				case "step19": stepStatus[step] = checkElementIsDisplayed(disability_Services.disServicesPage("addressTwo"), "Address_2");
				break;
				case "step20": stepStatus[step] = checkElementIsDisplayed(disability_Services.disServicesPage("contactAdd"), "Contact_Address");
				break;
				case "step21": stepStatus[step] = checkElementIsDisplayed(disability_Services.disServicesPage("emailID"), "EmailID");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DisabilityServSubmit(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 28;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);
			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("disablitySerBtn"), "Disability_Services");
				break;
				case "step9": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("disablitySerBtn"), "Disability_Services");
				break;
				case "step10": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("subRadioButton"), "Subscribe_RadioButton");
				break;
				case "step11": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("subRadioButton"), "Subscribe_RadioButton");
				break;
				case "step12": stepStatus[step] = WebCheckboxON(disability_Services.disServicesPage("nominateYes"), "Nominate_Yes_Button");
				break;
				case "step13": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("txtName"), "Name_TextBox");
				break;
				case "step14": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("txtName"), "Name_TextBox", "Name", 1);
				break;
				case "step15": stepStatus[step] = WebCheckboxON(disability_Services.disServicesPage("maleRadioButton"), "Male_Radio_Button");
				break;
				case "step16": stepStatus[step] = javaScriptDatePicker(disability_Services.disServicesPage("DOB"), "DOB", "DOB", 1);
				break;
				case "step17": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("contactAdd"), "Contact_Address", "Contact_No", 1);
				break;
				case "step18": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("submit"), "Submit");
				break;
				case "step19": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("confirmMsg"), "Confirm_Message");
				break;
				case "step20": stepStatus[step] = WebElementResxKeyValueStaticCompare(disability_Services.disServicesPage("confirmMsg"), "Confirm_Message", "Confirm_Message", 1);
				break;
				case "step21": stepStatus[step] = SQLDBSelectStoreValueInEnvVar("TABLE_NAME", "ID_ColName", "CONDITION", "ID_EnvID", 1);
				break;
				case "step22": stepStatus[step] = SQLDBSelectStoreValueInEnvVar("TABLE_NAME", "Disability_ColName", "CONDITION", "Disability_EnvID", 1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompareFromEnv(disability_Services.disServicesPage("nomineeID"), "NomineeID", "ID_EnvID", 1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(disability_Services.disServicesPage("nomineeName"), "NomineeName", "Name", 1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(disability_Services.disServicesPage("status"), "Status", "Status", 1);
				break;
				case "step26": stepStatus[step] = checkElementIsDisplayed(disability_Services.disServicesPage("action1"), "Action1_Icon");
				break;
				case "step27": stepStatus[step] = checkElementIsDisplayed(disability_Services.disServicesPage("action2"), "Action2_Icon");
				break;
				case "step28": stepStatus[step] = checkElementIsDisplayed(disability_Services.disServicesPage("action3"), "Action3_Icon");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DisabilityServMandFields(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 25;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);
			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("disablitySerBtn"), "Disability_Services");
				break;
				case "step9": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("disablitySerBtn"), "Disability_Services");
				break;
				case "step10": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("subRadioButton"), "Subscribe_RadioButton");
				break;
				case "step11": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("subRadioButton"), "Subscribe_RadioButton");
				break;
				case "step12": stepStatus[step] = WebCheckboxON(disability_Services.disServicesPage("nominateYes"), "Nominate_Yes_Button");
				break;
				case "step13": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("addressOne"), "Address1_TextBox");
				break;
				case "step14": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("addressOne"), "Address1_TextBox", "Address1", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("addressTwo"), "Address2_TextBox", "Address2", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("emailID"), "Email", "Email", 1);
				break;
				case "step17": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("submit"), "Submit");
				break;
				case "step18": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("confirmMsg"), "Confirm_Message");
				break;
				case "step19": stepStatus[step] = WebElementResxKeyValueStaticCompare(disability_Services.disServicesPage("confirmMsg"), "Confirm_Message", "Confirm_Message", 1);
				break;
				case "step20": stepStatus[step] = checkElementIsDisplayed(disability_Services.disServicesPage("valtxtName"), "TextName_Alert");
				break;
				case "step21": stepStatus[step] = checkElementIsDisplayed(disability_Services.disServicesPage("valmaleRadioButton"), "Male_Radio_Button_Alert");
				break;
				case "step22": stepStatus[step] = checkElementIsDisplayed(disability_Services.disServicesPage("valfemaleRadioButton"), "Female_Radio_Button_Alert");
				break;
				case "step23": stepStatus[step] = checkElementIsDisplayed(disability_Services.disServicesPage("valDOB"), "DOB_Alert");
				break;
				case "step24": stepStatus[step] = checkElementIsDisplayed(disability_Services.disServicesPage("valcontactAdd"), "Contact_No_Alert");
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(disability_Services.disServicesPage("validationTextMsg"), "Email", "Validation_Text_Message", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DisabilitySerEdit(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 36;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);
			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("disablitySerBtn"), "Disability_Services");
				break;
				case "step9": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("disablitySerBtn"), "Disability_Services");
				break;
				case "step10": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("subRadioButton"), "Subscribe_RadioButton");
				break;
				case "step11": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("subRadioButton"), "Subscribe_RadioButton");
				break;
				case "step12": stepStatus[step] = WebCheckboxON(disability_Services.disServicesPage("nominateYes"), "Nominate_Yes_Button");
				break;
				case "step13": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("txtName"), "Name_TextBox");
				break;
				case "step14": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("txtName"), "Name_TextBox", "Name", 1);
				break;
				case "step15": stepStatus[step] = WebCheckboxON(disability_Services.disServicesPage("maleRadioButton"), "Male_Radio_Button");
				break;
				case "step16": stepStatus[step] = javaScriptDatePicker(disability_Services.disServicesPage("DOB"), "DOB", "DOB", 1);
				break;
				case "step17": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("contactAdd"), "Contact_Address", "Contact_No", 1);
				break;
				case "step18": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("submit"), "Submit");
				break;
				case "step19": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("confirmMsg"), "Confirm_Message");
				break;
				case "step20": stepStatus[step] = WebElementResxKeyValueStaticCompare(disability_Services.disServicesPage("confirmMsg"), "Confirm_Message", "Confirm_Message", 1);
				break;
				case "step21": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("action1"), "Action1_EditIcon");
				break;
				case "step22": stepStatus[step] = sleepForFunction();
				break;
				case "step23": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("txtName"), "Name_TextBox", "Name_Edit", 1);
				break;
				case "step24": stepStatus[step] = WebCheckboxON(disability_Services.disServicesPage("femaleRadioButton"), "Female_Radio_Button");
				break;
				case "step25": stepStatus[step] = javaScriptDatePicker(disability_Services.disServicesPage("DOB"), "DOB", "DOB_Edit", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("contactAdd"), "Contact_Address", "Contact_No_Edit", 1);
				break;
				case "step27": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("submit"), "Submit");
				break;
				case "step28": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("confirmMsg"), "Confirm_Message");
				break;
				case "step29": stepStatus[step] = WebElementResxKeyValueStaticCompare(disability_Services.disServicesPage("confirmMsg"), "Update_Message", "Update_Message", 1);
				break;
				case "step30": stepStatus[step] = SQLDBSelectStoreValueInEnvVar("TABLE_NAME", "Disability_ColName", "CONDITION", "Disability_EnvID", 1);
				break;
				case "step31": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("action3"), "Action1_ViewIcon");
				break;
				case "step32": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("submitDisabled"), "Disabled_Submit_Button");
				break;
				case "step33": stepStatus[step] = WebElementValueCompare(disability_Services.disServicesPage("txtName"), "Name_TextBox", "Name", 1);
				break;
				case "step34": stepStatus[step] = webElementSelectedStatus(disability_Services.disServicesPage("maleRadioButton"), "Male_Radio_Button");
				break;
				case "step35": stepStatus[step] = WebElementValueCompare(disability_Services.disServicesPage("DOB"), "DOB", "DOB", 1);
				break;
				case "step36": stepStatus[step] = WebElementValueCompare(disability_Services.disServicesPage("contactAdd"), "Contact_Address", "Contact_No", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DisabilitySerInActive(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 27;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);
			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("disablitySerBtn"), "Disability_Services");
				break;
				case "step9": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("disablitySerBtn"), "Disability_Services");
				break;
				case "step10": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("subRadioButton"), "Subscribe_RadioButton");
				break;
				case "step11": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("subRadioButton"), "Subscribe_RadioButton");
				break;
				case "step12": stepStatus[step] = WebCheckboxON(disability_Services.disServicesPage("nominateYes"), "Nominate_Yes_Button");
				break;
				case "step13": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("txtName"), "Name_TextBox");
				break;
				case "step14": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("txtName"), "Name_TextBox", "Name", 1);
				break;
				case "step15": stepStatus[step] = WebCheckboxON(disability_Services.disServicesPage("maleRadioButton"), "Male_Radio_Button");
				break;
				case "step16": stepStatus[step] = javaScriptDatePicker(disability_Services.disServicesPage("DOB"), "DOB", "DOB", 1);
				break;
				case "step17": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("contactAdd"), "Contact_Address", "Contact_No", 1);
				break;
				case "step18": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("submit"), "Submit");
				break;
				case "step19": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("confirmMsg"), "Confirm_Message");
				break;
				case "step20": stepStatus[step] = WebElementResxKeyValueStaticCompare(disability_Services.disServicesPage("confirmMsg"), "Confirm_Message", "Confirm_Message", 1);
				break;
				case "step21": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("action2"), "Action1_DeleteIcon");
				break;
				case "step22": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("deleteConfText"), "Delete_Confirm_Message");
				break;
				case "step23": stepStatus[step] = WebElementResxKeyValueStaticCompare(disability_Services.disServicesPage("deleteConfText"), "Delete_Confirm_Message", "Delete_Confirm_Message", 1);
				break;
				case "step24": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("deleteYes"), "Yes");
				break;
				case "step25": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("confirmMsg"), "Confirm_Message");
				break;
				case "step26": stepStatus[step] = WebElementResxKeyValueStaticCompare(disability_Services.disServicesPage("confirmMsg"), "UnSubscribe_Confirm_Msg", "UnSubscribe_Confirm_Msg", 1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(disability_Services.disServicesPage("status"), "Status_InActive", "Status_InActive", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DisabilityServRefresh(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 30;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);
			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("disablitySerBtn"), "Disability_Services");
				break;
				case "step9": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("disablitySerBtn"), "Disability_Services");
				break;
				case "step10": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("subRadioButton"), "Subscribe_RadioButton");
				break;
				case "step11": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("subRadioButton"), "Subscribe_RadioButton");
				break;
				case "step12": stepStatus[step] = WebCheckboxON(disability_Services.disServicesPage("nominateYes"), "Nominate_Yes_Button");
				break;
				case "step13": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("txtName"), "Name_TextBox");
				break;
				case "step14": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("txtName"), "Name_TextBox", "Name", 1);
				break;
				case "step15": stepStatus[step] = WebCheckboxON(disability_Services.disServicesPage("maleRadioButton"), "Male_Radio_Button");
				break;
				case "step16": stepStatus[step] = javaScriptDatePicker(disability_Services.disServicesPage("DOB"), "DOB", "DOB", 1);
				break;
				case "step17": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("addressOne"), "Address1_TextBox", "Address1", 1);
				break;
				case "step18": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("addressTwo"), "Address2_TextBox", "Address2", 1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("contactAdd"), "Contact_Address", "Contact_No", 1);
				break;
				case "step20": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("emailID"), "Email", "Email", 1);
				break;
				case "step21": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("clear"), "Clear");
				break;
				case "step22": stepStatus[step] = WebCheckboxON(disability_Services.disServicesPage("nominateYes"), "Nominate_Yes_Button");
				break;
				case "step23": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("nomineeDetailsBox"), "Nominee_Details_TableView");
				break;
				case "step24": stepStatus[step] = WebElementValueCompare(disability_Services.disServicesPage("txtName"), "Name", "Name_Empty", 1);
				break;
				case "step25": stepStatus[step] = WebElementAttributeValueCompare(disability_Services.disServicesPage("maleRadioButton"), "Male_Radio_Button", "Male_Radiobtn_Val", "Male_Radiobtn_Empty", 1);
				break;
				case "step26": stepStatus[step] = WebElementValueCompare(disability_Services.disServicesPage("DOB"), "DOB", "DOB_Empty", 1);
				break;
				case "step27": stepStatus[step] = WebElementValueCompare(disability_Services.disServicesPage("addressOne"), "Address1_TextBox", "Address1_Empty", 1);
				break;
				case "step28": stepStatus[step] = WebElementValueCompare(disability_Services.disServicesPage("addressTwo"), "Address2_TextBox", "Address2_Empty", 1);
				break;
				case "step29": stepStatus[step] = WebElementValueCompare(disability_Services.disServicesPage("contactAdd"), "Contact_Address", "Contact_No_Empty", 1);
				break;
				case "step30": stepStatus[step] = WebElementValueCompare(disability_Services.disServicesPage("emailID"), "Email", "Email_Empty", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DisabilitySerSub(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 17;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("close_button"), "Close_button");
				break;
				case "step2": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step3": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step4": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("simButton"), "Sim_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("disablitySerBtn"), "Disability_Services");
				break;
				case "step10": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("disablitySerBtn"), "Disability_Services");
				break;
				case "step11": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("subRadioButton"), "Subscribe_RadioButton");
				break;
				case "step12": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("subRadioButton"), "Subscribe_RadioButton");
				break;
				case "step13": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("unSubRadioButton"), "UnSubscribe_RadioButton");
				break;
				case "step14": stepStatus[step] = WebCheckboxON(disability_Services.disServicesPage("nominateNo"), "Nominate_No_Button");
				break;
				case "step15": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("submit"), "Submit");
				break;
				case "step16": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("confirmMsg"), "Confirm_Message");
				break;
				case "step17": stepStatus[step] = WebElementResxKeyValueStaticCompare(disability_Services.disServicesPage("confirmMsg"), "Confirm_Message", "Confirm_Message", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}
				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}
	
	public synchronized void DisabilitySerSort(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 19;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("disablitySerBtn"), "Disability_Services");
				break;
				case "step9": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("disablitySerBtn"), "Disability_Services");
				break;
				case "step10": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("subRadioButton"), "Subscribe_RadioButton");
				break;
				case "step11": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("subRadioButton"), "Subscribe_RadioButton");
				break;
				case "step12": stepStatus[step] = WebCheckboxON(disability_Services.disServicesPage("nominateYes"), "Nominate_Yes_Button");
				break;
				case "step13": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("nomineeNameSort"), "Nominee_Sort_Button");
				break;
				case "step14": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("nomineeNameSort"), "Nominee_Sort_Button");
				break;
				case "step15": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("nomineeNameDescOrder"), "Nominee_DescOrder_Button");
				break;
				case "step16": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("nomineeNameDescOrder"), "Nominee_DescOrder_Button");
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(disability_Services.disServicesPage("sort1"), "NomineeName_Order_1", "SortDescOrd_1", 1);
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(disability_Services.disServicesPage("sort2"), "NomineeName_Order_2", "SortDescOrd_2", 1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(disability_Services.disServicesPage("sort3"), "NomineeName_Order_3", "SortDescOrd_3", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}
				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DisabilitySerSubmit_Max(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 23;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("disablitySerBtn"), "Disability_Services");
				break;
				case "step9": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("disablitySerBtn"), "Disability_Services");
				break;
				case "step10": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("subRadioButton"), "Subscribe_RadioButton");
				break;
				case "step11": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("subRadioButton"), "Subscribe_RadioButton");
				break;
				case "step12": stepStatus[step] = WebCheckboxON(disability_Services.disServicesPage("nominateYes"), "Nominate_Yes_Button");
				break;
				case "step13": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("txtName"), "Name_TextBox");
				break;
				case "step14": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("txtName"), "Name_TextBox", "Name", 1);
				break;
				case "step15": stepStatus[step] = WebCheckboxON(disability_Services.disServicesPage("maleRadioButton"), "Male_Radio_Button");
				break;
				case "step16": stepStatus[step] = javaScriptDatePicker(disability_Services.disServicesPage("DOB"), "DOB", "DOB", 1);
				break;
				case "step17": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("addressOne"), "Address1_TextBox", "Address1", 1);
				break;
				case "step18": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("addressTwo"), "Address2_TextBox", "Address2", 1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("contactAdd"), "Contact_Address", "Contact_No", 1);
				break;
				case "step20": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("emailID"), "Email", "Email", 1);
				break;
				case "step21": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("submit"), "Submit");
				break;
				case "step22": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("confirmMsg"), "Confirm_Message");
				break;
				case "step23": stepStatus[step] = WebElementResxKeyValueStaticCompare(disability_Services.disServicesPage("confirmMsg"), "Confirm_Message", "Confirm_Message", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}
				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void DisabilitySerAccChars(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 23;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("disablitySerBtn"), "Disability_Services");
				break;
				case "step9": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("disablitySerBtn"), "Disability_Services");
				break;
				case "step10": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("subRadioButton"), "Subscribe_RadioButton");
				break;
				case "step11": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("subRadioButton"), "Subscribe_RadioButton");
				break;
				case "step12": stepStatus[step] = WebCheckboxON(disability_Services.disServicesPage("nominateYes"), "Nominate_Yes_Button");
				break;
				case "step13": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("txtName"), "Name_TextBox");
				break;
				case "step14": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("txtName"), "Name_TextBox", "Name", 1);
				break;
				case "step17": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("addressOne"), "Address1_TextBox", "Address1", 1);
				break;
				case "step18": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("addressTwo"), "Address2_TextBox", "Address2", 1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("contactAdd"), "Contact_Address", "Contact_No", 1);
				break;
				case "step20": stepStatus[step] = WebEditEnterText(disability_Services.disServicesPage("emailID"), "Email", "Email", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}
	
	public synchronized void DisabilitySerNominee(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 16;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("disablitySerBtn"), "Disability_Services");
				break;
				case "step9": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("disablitySerBtn"), "Disability_Services");
				break;
				case "step10": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("subRadioButton"), "Subscribe_RadioButton");
				break;
				case "step11": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("subRadioButton"), "Subscribe_RadioButton");
				break;
				case "step12": stepStatus[step] = WebElementClick(disability_Services.disServicesPage("submit"), "Submit");
				break;
				case "step13": stepStatus[step] = waitUntilExist(disability_Services.disServicesPage("confirmMsg"), "Confirm_Message");
				break;
				case "step14": stepStatus[step] = WebElementTextCompare(disability_Services.disServicesPage("confirmMsg"), "Confirm_Message", "Confirm_Message", 1);
				break;
				case "step15": stepStatus[step] = checkElementIsDisplayed(disability_Services.disServicesPage("valNominYes"), "Nominee_Yes_RadioBtn_Alert");
				break;
				case "step16": stepStatus[step] = checkElementIsDisplayed(disability_Services.disServicesPage("valNominNo"), "Nominee_No_RadioBtn_Alert");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}
				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void SubHistoryNoRec(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 18;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);
			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(subscribe_History.subHistoryPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(subscribe_History.subHistoryPage("simButton"), "Sim_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(subscribe_History.subHistoryPage("subscribeHistBtn"), "Subscribe_History_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(subscribe_History.subHistoryPage("subscribeHistBtn"), "Subscribe_History_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(subscribe_History.subHistoryPage("fromDate"), "From_Date");
				break;
				case "step12": stepStatus[step] = javaScriptDatePicker(subscribe_History.subHistoryPage("fromDate"), "From_Date", "From_Date", 1);
				break;
				case "step13": stepStatus[step] = javaScriptDatePicker(subscribe_History.subHistoryPage("toDate"), "To_Date", "To_Date", 1);
				break;
				case "step14": stepStatus[step] = weblistUICompareSQLDBValues(subscribe_History.subHistoryPage("type"), "Type", "MstNFBlockReason_TableName", "MstNFBlockReason_ColumnName", "Condition", 1, 1 );
				break;
				case "step15": stepStatus[step] = WebListSelect(subscribe_History.subHistoryPage("type"), "Type", "Type", 1);
				break;
				case "step16": stepStatus[step] = WebElementClick(subscribe_History.subHistoryPage("submit"), "Submit");
				break;
				case "step17": stepStatus[step] = waitUntilExist(subscribe_History.subHistoryPage("confirmMsg"), "Confirm_Message");
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(subscribe_History.subHistoryPage("confirmMsg"), "Confirm_Message", "Confirm_Message", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void SubHistoryFilterTableView(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 7;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);
			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(subscribe_History.subHistoryPage("tableView"), "Table_View");
				break;
				case "step2": stepStatus[step] = WebElementTextCompare(subscribe_History.tableValues(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"tableType", "Type"), "Type", "Type", 1);
				break;
				case "step3": stepStatus[step] = WebElementTextCompare(subscribe_History.tableValues(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"status", "Type"), "Status", "Status", 1);
				break;
				case "step4": stepStatus[step] = WebElementTextCompare(subscribe_History.tableValues(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"reason", "Type"), "Reason", "Reason", 1);
				break;
				case "step5": stepStatus[step] = WebElementTextCompare(subscribe_History.tableValues(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"ticketID", "Type"), "TicketID", "TicketID", 1);
				break;
				case "step6": stepStatus[step] = WebElementTextCompare(subscribe_History.tableValues(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"submittedDate", "Type"), "SubmittedDate", "SubmittedDate", 1);
				break;
				case "step7": stepStatus[step] = WebElementTextCompare(subscribe_History.tableValues(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"userName", "Type"), "Username", "Username", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void SubHistoryValAlert(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;
		
		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps = 24;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);
			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(subscribe_History.subHistoryPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(subscribe_History.subHistoryPage("simButton"), "Sim_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(subscribe_History.subHistoryPage("subscribeHistBtn"), "Subscribe_History_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(subscribe_History.subHistoryPage("subscribeHistBtn"), "Subscribe_History_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(subscribe_History.subHistoryPage("fromDate"), "From_Date");
				break;
				case "step12": stepStatus[step] = WebElementClick(subscribe_History.subHistoryPage("submit"), "Submit");
				break;
				case "step13": stepStatus[step] = waitUntilExist(subscribe_History.subHistoryPage("confirmMsg"), "Confirm_Message");
				break;
				case "step14": stepStatus[step] = WebElementTextCompare(subscribe_History.subHistoryPage("confirmMsg"), "Confirm_Message", "Confirm_Message", 1);
				break;
				case "step15": stepStatus[step] = checkElementIsDisplayed(subscribe_History.subHistoryPage("valFromDate"), "From_Date");
				break;
				case "step16": stepStatus[step] = checkElementIsDisplayed(subscribe_History.subHistoryPage("valToDate"), "To_Date");
				break;
				case "step17": stepStatus[step] = checkElementIsDisplayed(subscribe_History.subHistoryPage("valType"), "Type");
				break;
				case "step18": stepStatus[step] = javaScriptDatePicker(subscribe_History.subHistoryPage("fromDate"), "From_Date", "From_Date", 1);
				break;
				case "step19": stepStatus[step] = javaScriptDatePicker(subscribe_History.subHistoryPage("toDate"), "To_Date", "To_Date", 1);
				break;
				case "step20": stepStatus[step] = WebListSelect(subscribe_History.subHistoryPage("type"), "Type", "Type", 1);
				break;
				case "step21": stepStatus[step] = WebElementClick(subscribe_History.subHistoryPage("reset"), "Reset");
				break;
				case "step22": stepStatus[step] = WebElementValueCompare(subscribe_History.subHistoryPage("fromDate"), "From_Date", "From_Date_Empty", 1);
				break;
				case "step23": stepStatus[step] = WebElementValueCompare(subscribe_History.subHistoryPage("toDate"), "To_Date", "To_Date_Empty", 1);
				break;
				case "step24": stepStatus[step] = WebListSelectedValue(subscribe_History.subHistoryPage("type"), "Type", "Type_Empty", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void OBACreditNoRec(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 13;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bundleButton"), "Bundle_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("bundleButton"), "Bundle_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("obaCreditBtn"), "OBA_Credit_Payment_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("obaCreditBtn"), "OBA_Credit_Payment_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bundleDataTbl"), "Bundle_Data_Table");
				break;
				case "step12": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("noRecords"), "No_Records_Message");
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(oBA_Credit.obaCreditPage("noRecords"), "No_Records_Message", "No_Records_Message", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void OBACreditValueExist(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 21;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bundleButton"), "Bundle_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("bundleButton"), "Bundle_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("obaCreditBtn"), "OBA_Credit_Payment_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("obaCreditBtn"), "OBA_Credit_Payment_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bundleDataTbl"), "Bundle_Data_Table");
				break;
				case "step12": stepStatus[step] = WebElementValueCompare(oBA_Credit.obaCreditPage("bundleName"), "BundleName", "BundleName", 1);
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(oBA_Credit.obaCreditPage("expiryDate"), "ExpiryDate", "ExpiryDate", 1);
				break;
				case "step14": stepStatus[step] = WebElementTextCompare(oBA_Credit.obaCreditPage("autoRenew"), "AutoRenewal", "AutoRenewal", 1);
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(oBA_Credit.obaCreditPage("mode"), "Mode", "Mode", 1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(oBA_Credit.obaCreditPage("allocated"), "Allocated", "Allocated", 1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(oBA_Credit.obaCreditPage("remaining"), "Remaining", "Remaining", 1);
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(oBA_Credit.obaCreditPage("consumed"), "Consumed", "Consumed", 1);
				break;
				case "step19": stepStatus[step] = WebElementAttributeValueCompare(oBA_Credit.obaCreditPage("payNow"), "PayNow_Button", "PayNowAttr", "PayNowdisable", 1);
				break;
				case "step20": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("payNow"), "PayNow_Button");
				break;
				case "step21": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void OBACreditChgStatus(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 28;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bundleButton"), "Bundle_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("bundleButton"), "Bundle_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("obaCreditBtn"), "OBA_Credit_Payment_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("obaCreditBtn"), "OBA_Credit_Payment_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bundleDataTbl"), "Bundle_Data_Table");
				break;
				case "step12": stepStatus[step] = WebElementValueCompare(oBA_Credit.obaCreditPage("bundleName"), "BundleName", "BundleName", 1);
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(oBA_Credit.obaCreditPage("expiryDate"), "ExpiryDate", "ExpiryDate", 1);
				break;
				case "step14": stepStatus[step] = WebElementTextCompare(oBA_Credit.obaCreditPage("autoRenew"), "AutoRenewal", "AutoRenewal", 1);
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(oBA_Credit.obaCreditPage("mode"), "Mode", "Mode", 1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(oBA_Credit.obaCreditPage("allocated"), "Allocated", "Allocated", 1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(oBA_Credit.obaCreditPage("remaining"), "Remaining", "Remaining", 1);
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(oBA_Credit.obaCreditPage("consumed"), "Consumed", "Consumed", 1);
				break;
				case "step19": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("activateBtn"), "Active_Button");
				break;
				case "step20": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("renewalChange"), "RenewalChange_ConfirmMsg");
				break;
				case "step21": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("renewalChange"), "RenewalChange_ConfirmMsg");
				break;
				case "step22": stepStatus[step] = WebElementResxKeyValueStaticCompare(oBA_Credit.obaCreditPage("renewalChange"), "RenewalChange_ConfirmMsg", "RenewalConfirmText", 1);
				break;
				case "step23": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("radDeactiveBtn"), "Deactivate_Button");
				break;
				case "step24": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("radioActiveBtn"), "Activate_Button");
				break;
				case "step25": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("renSubmit"), "Submit_Button");
				break;
				case "step26": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("confirmMsg"), "Confirm_Message");
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(oBA_Credit.obaCreditPage("confirmMsg"), "Confirm_Message", "Confirm_Message", 1);
				break;
				case "step28": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void OBACreditCancel(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps = 17;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);
			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bundleButton"), "Bundle_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("bundleButton"), "Bundle_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("obaCreditBtn"), "OBA_Credit_Payment_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("obaCreditBtn"), "OBA_Credit_Payment_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("cancelBunButton"), "Cancel_Bundle_Button");
				break;
				case "step12": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("cancelBunButton"), "Cancel_Bundle_Button");
				break;
				case "step13": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("selectCncBun"), "Select_Cancel_Bundle");
				break;
				case "step14": stepStatus[step] = WebListSelect(oBA_Credit.obaCreditPage("selectCncBun"), "Select_Bundle", "Select_Bundle", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("submitCncBun"), "Submit_Bundle");
				break;
				case "step16": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("cancelBunConfirmMsg"), "Confirm_Message");
				break;
				case "step17": stepStatus[step] = WebElementResxKeyValueStaticCompare(oBA_Credit.obaCreditPage("cancelBunConfirmMsg"), "CancelBundle_ConfirmMsg", "CancelBundle", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}

	}

	public synchronized void OBACreditBundleUp(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 20;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bundleButton"), "Bundle_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("bundleButton"), "Bundle_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("obaCreditBtn"), "OBA_Credit_Payment_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("obaCreditBtn"), "OBA_Credit_Payment_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bundleUpgrade"), "Bundle_Upgrade_Button");
				break;
				case "step12": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("bundleUpgrade"), "Bundle_Upgrade_Button");
				break;
				case "step13": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bunUpgRadioBtn"), "Bundle_Upgrade_Radio_Button");
				break;
				case "step14": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("bunUpgRadioBtn"), "Bundle_Upgrade_Radio_Button");
				break;
				case "step15": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bunUpgradeDD"), "Bundle_Upgrade_Dropdown");
				break;
				case "step16": stepStatus[step] = WebListSelect(oBA_Credit.obaCreditPage("bunUpgradeDD"), "Select_Bundle", "Select_Bundle", 1);
				break;
				case "step17": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("bunUpgradeSubmit"), "Submit_Bundle");
				break;
				case "step18": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("confirmMsg"), "Confirm_Message");
				break;
				case "step19": stepStatus[step] = WebElementResxKeyValueStaticCompare(oBA_Credit.obaCreditPage("confirmMsg"), "UpgradBundle_ConfirmMsg", "UpgradBundle_ConMsg", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}
				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void OBACredit_Req_Admin(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 14;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = storeSQLDBValueInEnv("CBOS_OBABundleDetails", "id_ColumnName", "CBOS_OBABundleDetails_Condition", "EnvVariableColumnName", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("CBOS_OBABundleDetails", "status_ColumnName", "CBOS_OBABundleDetails_Condition", "StatusColumnValue", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "pendingApproval_Body");
				break;
				case "step4": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "pendingApproval_Body");
				break;
				case "step5": stepStatus[step] = checkScrollBarIsPresent(pendingApproval.pendingApproval_Page_ScrollBar("scrollBar_JS"), "pendingApproval");
				break;
				case "step6": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("OBAPlanUpgrade"), "OBA_PlanUpgrade_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Text"), "pendingApproval_Text");
				break;
				case "step8": stepStatus[step] = getValueFromPagination(pendingApproval.staff_TopUp_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_MSISDN", "EnvVariableColumnName"), pendingApproval.pendingApproval_Page("nextBtn"), pendingApproval.pendingApproval_Page("pageCount"), "pendingApproval");
				break;
				case "step9": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bunUpgradeDD"), "Bundle_Upgrade_Dropdown");
				break;
				case "step10": stepStatus[step] = WebListSelectedValue(oBA_Credit.obaCreditPage("bunUpgradeDD"), "Selected_Bundle", "Selected_Bundle", 1);
				break;
				case "step11": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("bunUpgradeSubmit"), "Submit_Bundle");
				break;
				case "step12": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("confirmMsg"), "Confirm_Message");
				break;
				case "step13": stepStatus[step] = WebElementResxKeyValueStaticCompare(oBA_Credit.obaCreditPage("confirmMsg"), "UpgradBundle_ConfirmMsg", "UpgradBundle_ConMsg", 1);
				break;
				case "step14": stepStatus[step] = setScrollBarOFF("Pending_Approval");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void OBACreditBundleCredit(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps = 20;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bundleButton"), "Bundle_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("bundleButton"), "Bundle_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("obaCreditBtn"), "OBA_Credit_Payment_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("obaCreditBtn"), "OBA_Credit_Payment_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bundleUpgrade"), "Bundle_Upgrade_Button");
				break;
				case "step12": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("bundleUpgrade"), "Bundle_Upgrade_Button");
				break;
				case "step13": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bunCreditRadioBtn"), "Bundle_CC_Radio_Button");
				break;
				case "step14": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("bunCreditRadioBtn"), "Bundle_CC_Radio_Button");
				break;
				case "step15": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bunCreditAmt"), "Bundle_Credit_Amount");
				break;
				case "step16": stepStatus[step] = WebEditClickAndEnterText(oBA_Credit.obaCreditPage("bunCreditAmt"), "Additional_CreditAmount", "CreditAmount", 1);
				break;
				case "step17": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("bunUpgradeSubmit"), "Submit_Bundle");
				break;
				case "step18": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("confirmMsg"), "Confirm_Message");
				break;
				case "step19": stepStatus[step] = WebElementResxKeyValueStaticCompare(oBA_Credit.obaCreditPage("confirmMsg"), "UpgradBundle_ConfirmMsg", "UpgradBundle_ConMsg", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void OBAAddCredit_Req_Admin(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps = 14;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = storeSQLDBValueInEnv("CBOS_OBABundleDetails", "id_ColumnName", "CBOS_OBABundleDetails_Condition", "EnvVariableColumnName", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("CBOS_OBABundleDetails", "status_ColumnName", "CBOS_OBABundleDetails_Condition", "StatusColumnValue", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "pendingApproval_Body");
				break;
				case "step4": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "pendingApproval_Body");
				break;
				case "step5": stepStatus[step] = checkScrollBarIsPresent(pendingApproval.pendingApproval_Page_ScrollBar("scrollBar_JS"), "pendingApproval");
				break;
				case "step6": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("obaAddCredit"), "OBA_Additional_Credit_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Text"), "pendingApproval_Text");
				break;
				case "step8": stepStatus[step] = getValueFromPagination(pendingApproval.staff_TopUp_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_MSISDN", "EnvVariableColumnName"), pendingApproval.pendingApproval_Page("nextBtn"), pendingApproval.pendingApproval_Page("pageCount"), "pendingApproval");
				break;
				case "step9": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bunUpgradeSubmit"), "Submit_Bundle");
				break;
				case "step10": stepStatus[step] = PerformAction_MoveToElementAndClick(oBA_Credit.obaCreditPage("bunUpgradeSubmit"), "Submit_Bundle");
				break;
				case "step11": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("confirmMsg"), "Confirm_Message");
				break;
				case "step12": stepStatus[step] = WebElementResxKeyValueStaticCompare(oBA_Credit.obaCreditPage("confirmMsg"), "UpgradBundle_ConfirmMsg", "UpgradBundle_ConMsg", 1);
				break;
				case "step13": stepStatus[step] = setScrollBarOFF("Pending_Approval");
				break;
				case "step14": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void OBACreditBundleExist(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 20;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);
			
			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bundleButton"), "Bundle_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("bundleButton"), "Bundle_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("obaCreditBtn"), "OBA_Credit_Payment_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("obaCreditBtn"), "OBA_Credit_Payment_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bundleUpgrade"), "Bundle_Upgrade_Button");
				break;
				case "step12": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("bundleUpgrade"), "Bundle_Upgrade_Button");
				break;
				case "step13": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bunUpgRadioBtn"), "Bundle_Upgrade_Radio_Button");
				break;
				case "step14": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("bunUpgRadioBtn"), "Bundle_Upgrade_Radio_Button");
				break;
				case "step15": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bunUpgradeDD"), "Bundle_Upgrade_Dropdown");
				break;
				case "step16": stepStatus[step] = WebListSelect(oBA_Credit.obaCreditPage("bunUpgradeDD"), "Select_Bundle", "Select_Bundle", 1);
				break;
				case "step17": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("bunUpgradeSubmit"), "Submit_Bundle");
				break;
				case "step18": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("errorMsg"), "Confirm_Message");
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(oBA_Credit.obaCreditPage("errorMsg"), "Confirm_Message", "Confirm_Message", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void OBACreditBundleCCExist(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 20;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bundleButton"), "Bundle_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("bundleButton"), "Bundle_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("obaCreditBtn"), "OBA_Credit_Payment_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("obaCreditBtn"), "OBA_Credit_Payment_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bundleUpgrade"), "Bundle_Upgrade_Button");
				break;
				case "step12": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("bundleUpgrade"), "Bundle_Upgrade_Button");
				break;
				case "step13": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bunCreditRadioBtn"), "Bundle_CC_Radio_Button");
				break;
				case "step14": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("bunCreditRadioBtn"), "Bundle_CC_Radio_Button");
				break;
				case "step15": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bunCreditAmt"), "Bundle_Credit_Amount");
				break;
				case "step16": stepStatus[step] = WebEditEnterText(oBA_Credit.obaCreditPage("bunCreditAmt"), "Additional_CreditAmount", "CreditAmount", 1);
				break;
				case "step17": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("bunUpgradeSubmit"), "Submit_Bundle");
				break;
				case "step18": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("errorMsg"), "Confirm_Message");
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(oBA_Credit.obaCreditPage("errorMsg"), "Confirm_Message", "Confirm_Message", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void OBACreditCardPay(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 33;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bundleButton"), "Bundle_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("bundleButton"), "Bundle_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("obaCreditBtn"), "OBA_Credit_Payment_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("obaCreditBtn"), "OBA_Credit_Payment_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("bundleDataTbl"), "Bundle_Data_Table");
				break;
				case "step12": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("payNow"), "PayNow_Button");
				break;
				case "step13": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("payNewCard"), "NewCard_Radio_Button");
				break;
				case "step14": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("payNewCard"), "NewCard_Radio_Button");
				break;
				case "step15": stepStatus[step] = WebListSelect(oBA_Credit.obaCreditPage("cardType"), "Card_Type", "Card_Type", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(oBA_Credit.obaCreditPage("cardName"), "NameOncard", "Card_Name", 1);
				break;
				case "step17": stepStatus[step] = WebEditEnterText(oBA_Credit.obaCreditPage("card1"), "Card_Number_1", "Card_Number_1", 1);
				break;
				case "step18": stepStatus[step] = WebEditEnterText(oBA_Credit.obaCreditPage("card2"), "Card_Number_2", "Card_Number_2", 1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(oBA_Credit.obaCreditPage("card3"), "Card_Number_3", "Card_Number_3", 1);
				break;
				case "step20": stepStatus[step] = WebEditEnterText(oBA_Credit.obaCreditPage("card4"), "Card_Number_4", "Card_Number_4", 1);
				break;
				case "step21": stepStatus[step] = javaScriptDatePicker(oBA_Credit.obaCreditPage("expiryDateCard"), "Expiry_Date", "Expiry_Date", 1);
				break;
				case "step22": stepStatus[step] = webElementClearText(oBA_Credit.obaCreditPage("cvv"), "CVV");
				break;
				case "step23": stepStatus[step] = WebEditEnterText(oBA_Credit.obaCreditPage("cvv"), "CVV", "CVV", 1);
				break;
				case "step24": stepStatus[step] = WebCheckboxON(oBA_Credit.obaCreditPage("cardRenewal"), "Card_Renewal");
				break;
				case "step25": stepStatus[step] = WebEditEnterText(oBA_Credit.obaCreditPage("emailTxt"), "Email", "Email", 1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(oBA_Credit.obaCreditPage("UKCountry"), "Country_Name", "Country_Name", 1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(oBA_Credit.obaCreditPage("stName"), "Street_Name", "Street_Name", 1);
				break;
				case "step28": stepStatus[step] = WebEditEnterText(oBA_Credit.obaCreditPage("cityName"), "CityName", "CityName", 1);
				break;
				case "step29": stepStatus[step] = WebEditEnterText(oBA_Credit.obaCreditPage("postCode"), "PostCode", "PostCode", 1);
				break;
				case "step30": stepStatus[step] = WebElementClick(oBA_Credit.obaCreditPage("ccPayButton"), "PayButton");
				break;
				case "step31": stepStatus[step] = waitUntilExist(oBA_Credit.obaCreditPage("confirmMsg"), "Confirm_Message");
				break;
				case "step32": stepStatus[step] = WebElementResxKeyValueStaticCompare(oBA_Credit.obaCreditPage("ccConfirmMsg"), "Confirm_Message", "Confirm_Message", 1);
				break;
				case "step33": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}
	
	public synchronized void OBACCPostCondition(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 3;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = ESHOPSelectStoreValueInEnvVar("tblUserCardDetailsTableName", "tblUser_ColumnName", "tblUser_Condition", "IdDynamicVar", 1);
				break;
				case "step2": stepStatus[step] = EShopSQLDBSelectFromEnv("tbluserbundleTableName", "tbluserbundle_ColumnName", "tbluserbundle_Condition", "IdDynamicVar", 1);
				break;
				case "step3": stepStatus[step] = EShopSQLDBSelect("tbleshoptransTableName", "tbleshoptrans_ColumnName", "tbleshoptrans_Condition", "tbleshoptrans_ColumnValue", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}
	
	public synchronized void GBR_ONLINE_TP_EXIBSDOWN1(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 15;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("topUp_Button"), "TopUp_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("online_TopUp_Button"), "online_TopUp_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("topupAmount_Dropdown"), "Topup Amount Dropdown");
				break;
				case "step10": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("topupAmount_Dropdown"), "Topup Amount Dropdown", "TopupAmount", 1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("email_TextBox"), "Email", "Email", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("promoCode_TextBox"), "PromoCode", "PromoCode", 1);
				break;
				case "step13": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("promoCode_Button"), "PromoCode Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("discountMessage_label"), "Discount Message");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("discountMessage_label"), "Discount Message","PromoCode_Message",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}
	
	public synchronized void GBR_ONLINE_TP_EXIBSDOWN2(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 27;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("newCard_rdButton"), "NewCard_Radio_Button");
				break;
				case "step2": stepStatus[step] = WebRadioSelect(online_TopUp.Online_TopUp_Page("newCard_rdButton"), "Payment Using", "New Card");
				break;
				case "step3": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "CardType Dropdown");
				break;
				case "step4": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "CardType Dropdown", "CardType", 1);
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Card Name");
				break;
				case "step6": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Card Name", "CardName", 1);
				break;
				case "step7": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber1_TextBox"), "Card 1st 4 Number", "Card_Number1", 1);
				break;
				case "step8": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber2_TextBox"), "Card 2nd 4 Number", "Card_Number2", 1);
				break;
				case "step9": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber3_TextBox"), "Card 3rd 4 Number", "Card_Number3", 1);
				break;
				case "step10": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber4_TextBox"), "Card 4th 4 Number", "Card_Number4", 1);
				break;
				case "step11": stepStatus[step] = javaScriptDatePicker(online_TopUp.Online_TopUp_Page("expiryDate_TextBox"), "Expiry Date", "Expiry_Date", 1);
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV Number");
				break;
				case "step13": stepStatus[step] = javaScriptEnterText(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV Number", "CVV_Number", 1);
				break;
				case "step14": stepStatus[step] = WebEditClickAndEnterText(online_TopUp.Online_TopUp_Page("postcode_TextBox"), "PostCode", "PostCode", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("searchIcon_Button"), "Search Button");
				break;
				case "step16": stepStatus[step] = waitUntilDisappear(online_TopUp.Online_TopUp_Page("loadAddress_Icon"), "Load Address Icon");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("addressList_TextBox"), "Address List", "AddressList_Select", 1);
				break;
				case "step18": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("OKIcon_Button"), "OK Button");
				break;
				case "step19": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step20": stepStatus[step] = WaitUntilElementClickable(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step22": stepStatus[step] = pageLoadCheck();
				break;
				case "step23": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("okBtn_Button"), "OK Button");
				break;
				case "step24": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("okBtn_Button"), "OK Button");
				break;
				case "step25": stepStatus[step] = pageLoadCheck();
				break;
				case "step26": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("exibsFailMsg"), "Response Message");
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("exibsFailMsg"), "Response Message","Response_Message",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	/*---------------------------PRAVEEN CODE END------------------------------------*/
	
	/*---------------------------MURALI CODE------------------------------------*/

	public synchronized void PreCondition_Voucher_TopUp(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=9;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBUpdate("trnvouchers_Table_Name", "voucherstatusid_ColumnName", "voucherstatusid_ColumnValue", "trnvouchers_Condition", 1);
				break;
				case "step2": stepStatus[step] = SQLDBDelete("Table_Name_msttopup_log", "Condition_msttopuplog", 1);
				break;
				case "step3": stepStatus[step] = RRBSDBUpdate("Table_Name_RRBS_VOUCHERS", "Column_Name_STATUS", "VOUCHER_STATUS_RRBSVOUCHERS_VALUE", "Condition_RRBS_VOUCHERS", 1);
				break;
				case "step4": stepStatus[step] = RRBSDBUpdate("Table_Name_RRBS_VOUCHERS", "Column_Name_ISBLOCKED", "ISBLOCKED_VOUCHERS_VALUE", "Condition_RRBS_VOUCHERS", 1);
				break;
				case "step5": stepStatus[step] = RRBSDBUpdate("Table_Name_RRBS_SUBSCRIBER_PROFILE", "Column_Name_ACC_BAL", "ACCOUNT_BALANCE", "Condition_RRBSSUBSCRIBERPROFILE", 1);
				break;
				case "step6": stepStatus[step] = RRBSDBUpdate("Table_Name_RRBS_SUBSCRIBER_PROFILE", "Column_Name_TOPUP_FACEVALUE", "TOPUP_FACEVALUE", "Condition_RRBSSUBSCRIBERPROFILE", 1);
				break;
				case "step7": stepStatus[step] = RRBSDBUpdate("RRBS_VOUCHERS_TableName", "MSISDN_ColumnName", "MSISDN_ColumnValue", "Condition_RRBS_VOUCHERS", 1);
				break;
				case "step8": stepStatus[step] = RRBSDBUpdate("RRBS_VOUCHERS_TableName", "IMSI_ColumnName", "IMSI_ColumnValue", "Condition_RRBS_VOUCHERS", 1);
				break;
				case "step9": stepStatus[step] = RRBSDBUpdate("RRBS_VOUCHERS_TableName", "USED_DATE_ColumnName", "USED_DATE_ColumnValue", "Condition_RRBS_VOUCHERS", 1);
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PreCondition_Settings_TopUp(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=22;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.settings_Page("country_DropdownValues_GBR"), "Country_Dropdown", "CountryBrand_DDValue", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;


				case "step10": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_SiteCode", 1);
				break;
				case "step11": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_SiteCode"), "SiteCode");
				break;
				case "step12": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_SiteCode"), "value_SiteCode", "value_SiteCode", 1);
				break;

				case "step13": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_CountryPrefix", 1);
				break;
				case "step14": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_CountryPrefix"), "CountryPrefix");
				break;
				case "step15": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_CountryPrefix"), "value_CountryPrefix", "value_CountryPrefix", 1);
				break;

				case "step16": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_CountryCode", 1);
				break;
				case "step17": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_CountryCode"), "CountryCode");
				break;
				case "step18": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_CountryCode"), "value_CountryCode", "value_CountryCode", 1);
				break;

				case "step19": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_DateTimeformat", 1);
				break;
				case "step20": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_DateTimeformat"), "key_DateTimeformat");
				break;
				case "step21": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_DateTimeformat"), "DateTimeformat", "value_DateTimeformat", 1);
				break;

				case "step22": stepStatus[step] = WebElementClick(settings.settings_Page("close_Btn"), "Close_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Do_Voucher_Topup(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=31;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("services_Select"), "Services_Select");
				break;
				case "step3": stepStatus[step] = WebListSelect(voucher_TopUp_Page.Voucher_TopUp("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step4": stepStatus[step] = WebEditEnterText(voucher_TopUp_Page.Voucher_TopUp("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step8": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("topUp_Button"), "TopUp_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("voucher_TopUp_Button"), "voucher_TopUp_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("voucher_TopUp_Button"), "voucher_TopUp_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("voucherPin_Textbox"), "voucherPin_Textbox");
				break;
				case "step12": stepStatus[step] = WebEditEnterText(voucher_TopUp_Page.Voucher_TopUp("voucherPin_Textbox"), "voucherPin_Textbox", "Voucher_Pin", 1);
				break;
				case "step13": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("apply_Button"), "Apply_buton");
				break;
				case "step14": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("success_message"), "success_message");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(voucher_TopUp_Page.Voucher_TopUp("success_message"), "success_message", "Confirm_Message", 1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(voucher_TopUp_Page.Voucher_TopUp("New_Balance"), "New_Balance", "New_Balance", 1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(voucher_TopUp_Page.Voucher_TopUp("Old_Balance"), "Old_Balance", "Old_Balance", 1);
				break;
				case "step18": stepStatus[step] = webElementFutureDateCompare(voucher_TopUp_Page.Voucher_TopUp("ValidityDate"),"ValidityDate","DateFormatDisplayed","DaysToAdd",1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(voucher_TopUp_Page.Voucher_TopUp("PromoBalance"), "PromoBalance", "PromoBalance", 1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(voucher_TopUp_Page.Voucher_TopUp("PromoValidityDate"), "PromoValidityDate", "PromoValidityDate", 1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(voucher_TopUp_Page.Voucher_TopUp("FreeData"), "FreeData", "FreeData", 1);
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(voucher_TopUp_Page.Voucher_TopUp("FreeDataExpireDate"), "FreeDataExpireDate", "FreeDataExpireDate", 1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(voucher_TopUp_Page.Voucher_TopUp("FaceValue"), "FaceValue", "FaceValue", 1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(voucher_TopUp_Page.Voucher_TopUp("OnNetMinutes"), "OnNetMinutes", "OnNetMinutes", 1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(voucher_TopUp_Page.Voucher_TopUp("OnNetSMS"), "OnNetSMS", "OnNetSMS", 1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(voucher_TopUp_Page.Voucher_TopUp("MTOnNetMinutes"), "MTOnNetMinutes", "MTOnNetMinutes", 1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(voucher_TopUp_Page.Voucher_TopUp("MTOnNetSMS"), "MTOnNetSMS", "MTOnNetSMS", 1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(voucher_TopUp_Page.Voucher_TopUp("MTOffNetMinutes"), "MTOffNetMinutes", "MTOffNetMinutes", 1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(voucher_TopUp_Page.Voucher_TopUp("MTOffNetSMS"), "MTOffNetSMS", "MTOffNetSMS", 1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(voucher_TopUp_Page.Voucher_TopUp("TotalOffNetMinutes"), "TotalOffNetMinutes", "TotalOffNetMinutes", 1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(voucher_TopUp_Page.Voucher_TopUp("TotalOffNetSMS"), "TotalOffNetSMS", "TotalOffNetSMS", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postcondition_voucher_Topup(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=6;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = RRBSDBSelect("Table_Name_RRBSVOUCHERS","Column_Name_STATUS", "Condition_RRBSVOUCHERS", "Column_Value_STATUS", 1);
				break;
				case "step2": stepStatus[step] = RRBSDBDateCompare("Table_Name_RRBSVOUCHERS", "Column_Name_USEDDATE", "Condition_RRBSVOUCHERS", "dd/MM/yyyy", 1); 
				break;
				case "step3": stepStatus[step] = RRBSDBSelect("Table_Name_RRBSVOUCHERS", "Column_Name_IMSI", "Condition_RRBSVOUCHERS", "Column_Value_IMSI", 1);
				break;
				case "step4": stepStatus[step] = RRBSDBSelect("Table_Name_RRBSVOUCHERS", "Columnname_MSISDN", "Condition_RRBSVOUCHERS", "Column_Value_MSISDN", 1);
				break;
				case "step5": stepStatus[step] = RRBSDBSelect("Table_Name_RRBSSUBSCRIBERPROFILE", "Column_Name_ACCTBALANCE", "Condition_RRBSSUBSCRIBERPROFILE", "Column_Value_ACCTBALANCE", 1);
				break;					
				case "step6": stepStatus[step] = RRBSDBSelect("Table_Name_RRBSSUBSCRIBERPROFILE", "Column_Name_TOPUPFACEVALUE", "Condition_RRBSSUBSCRIBERPROFILE", "Column_Value_TOPUPFACEVALUE", 1); 
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_SIM_Block_Voucher(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=12;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("services_Select"), "Services_Select");
				break;
				case "step3": stepStatus[step] = WebListSelect(voucher_TopUp_Page.Voucher_TopUp("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step4": stepStatus[step] = WebEditEnterText(voucher_TopUp_Page.Voucher_TopUp("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step8": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("topUp_Button"), "TopUp_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("voucher_TopUp_Button"), "voucher_TopUp_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("voucher_TopUp_Button"), "voucher_TopUp_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("errorMessage"), "Alert_Message");
				break;
				case "step12": stepStatus[step] = WebElementTextCompare(voucher_TopUp_Page.Voucher_TopUp("errorMessage"), "errorMessage", "Alert_Message", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void RRBSDB_Update(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = RRBSDBUpdate("Table_Name", "Column_Name", "Column_Value", "Condition", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Voucher_Block(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=17;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("services_Select"), "Services_Select");
				break;
				case "step3": stepStatus[step] = WebListSelect(voucher_TopUp_Page.Voucher_TopUp("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step4": stepStatus[step] = WebEditEnterText(voucher_TopUp_Page.Voucher_TopUp("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step8": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("topUp_Button"), "TopUp_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("voucher_TopUp_Button"), "voucher_TopUp_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("voucher_TopUp_Button"), "voucher_TopUp_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("voucherPin_Textbox"), "voucherPin_Textbox");
				break;
				case "step12": stepStatus[step] = WebEditEnterText(voucher_TopUp_Page.Voucher_TopUp("voucherPin_Textbox"), "voucherPin_Textbox", "Voucher_Pin", 1);
				break;
				case "step13": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("apply_Button"), "Apply_buton");
				break;
				case "step14": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("errorMessage_2"), "Alert_Message");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(voucher_TopUp_Page.Voucher_TopUp("errorMessage_2"), "errorMessage", "Alert_Message", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("errorMessage_3"), "Alert_Message");
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(voucher_TopUp_Page.Voucher_TopUp("errorMessage_3"), "errorMessage", "Alert_Message", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Reset_Voucher(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=14;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("Reset_button"), "Reset_button");
				break;
				case "step2": stepStatus[step] = WebElementNotPresent(voucher_TopUp_Page.Voucher_Page_ResetObj("New_Balance"), "New_Balance");
				break;
				case "step3": stepStatus[step] = WebElementNotPresent(voucher_TopUp_Page.Voucher_Page_ResetObj("Main_Balance"), "Main_Balance");
				break;
				case "step4": stepStatus[step] = WebElementNotPresent(voucher_TopUp_Page.Voucher_Page_ResetObj("ValidityDate"), "ValidityDate");
				break;
				case "step5": stepStatus[step] = WebElementNotPresent(voucher_TopUp_Page.Voucher_Page_ResetObj("PromoBalance"), "PromoBalance");
				break;
				case "step6": stepStatus[step] = WebElementNotPresent(voucher_TopUp_Page.Voucher_Page_ResetObj("PromoValidityDate"), "PromoValidityDate");
				break;
				case "step7": stepStatus[step] = WebElementNotPresent(voucher_TopUp_Page.Voucher_Page_ResetObj("FreeData"), "FreeData");
				break;
				case "step8": stepStatus[step] = WebElementNotPresent(voucher_TopUp_Page.Voucher_Page_ResetObj("FreeDataExpireDate"), "FreeDataExpireDate");
				break;
				case "step9": stepStatus[step] = WebElementNotPresent(voucher_TopUp_Page.Voucher_Page_ResetObj("FaceValue"), "FaceValue");
				break;
				case "step10": stepStatus[step] = WebElementNotPresent(voucher_TopUp_Page.Voucher_Page_ResetObj("OnNetMinutes"), "OnNetMinutes");
				break;
				case "step11": stepStatus[step] = WebElementNotPresent(voucher_TopUp_Page.Voucher_Page_ResetObj("OnNetSMS"), "OnNetSMS");
				break;
				case "step12": stepStatus[step] = WebElementNotPresent(voucher_TopUp_Page.Voucher_Page_ResetObj("MTOnNetMinutes"), "MTOnNetMinutes");
				break;
				case "step13": stepStatus[step] = WebElementNotPresent(voucher_TopUp_Page.Voucher_Page_ResetObj("MTOnNetSMS"), "MTOnNetSMS");
				break;
				case "step14": stepStatus[step] = WebElementEmpty(voucher_TopUp_Page.Voucher_TopUp("voucherPin_Textbox"), "voucherPin_Textbox");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PreCondition_SQLDB_GBR_REG(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 7;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBDelete("mstcustomer_TableName", "Condition", 1);
				break;
				case "step2": stepStatus[step] = SQLDBDelete("mstnfblockreason_TableName", "Condition", 1);
				break;
				case "step3": stepStatus[step] = SQLDBDelete("mstcustomerlog_TableName", "Condition", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("MSTIVRLanguage_TableName", "MSTIVRLanguage_ColumnName", "MSTIVRLanguage_Condition", "MSTIVRLanguage_ColumnValue", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("MstPreferredLanguage_TableName", "MstPreferredLanguage_ColumnName", "MstPreferredLanguage_Condition", "MstPreferredLanguage_ColumnValue", 1);
				break;
				case "step6": stepStatus[step] = RRBSDBSelect("RRBS_TABLENAME", "COLUMNNAME_MSISDN", "RRBS_CONDITION", "COLUMNVALUE_MSISDN", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("mstmvnoaccount_TableName", "ColumnName_mstmvnoaccount", "Condition", "ColumnValue_mstmvnoaccount", 1);
				break;

				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void InvalidCountryCode_verify(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 4;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("txtNewRegistration"), "NewRegistration_Textbox", "MSISDN", 1);
				break;
				case "step2": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("btnNewRegister"), "btnNewRegister");
				break;
				case "step3": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("Error_Message"), "Error_Message");
				break;
				case "step4": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("Error_Message"), "Error_Message", "Alert_Message", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Reg_Settings_Precondition(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=14;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.settings_Page("country_DropdownValues_GBR"), "Country_Dropdown", "CountryBrand_DDValue", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;
				case "step10": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_RegistrationPortOutCheck", 1);
				break;
				case "step11": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_RegistrationPortOutCheck"), "RegistrationPortOutCheck");
				break;
				case "step12": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_RegistrationPortOutCheck"), "value_RegistrationPortOutCheck", "value_RegistrationPortOutCheck", 1);
				break;
				case "step13": stepStatus[step] = WebElementClick(settings.settings_Page("close_Btn"), "Close_Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("txtNewRegistration"), "txtNewRegistration");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Reg_MNPPortoutcheck(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 4;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("txtNewRegistration"), "NewRegistration_Textbox", "MSISDN", 1);
				break;
				case "step2": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("btnNewRegister"), "btnNewRegister");
				break;
				case "step3": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("portoutalert"), "Error_Message");
				break;
				case "step4": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("portoutalert"), "Error_Message", "Alert_Message", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Reg_Settings_EnableGAF(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=14;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.settings_Page("country_DropdownValues_GBR"), "Country_Dropdown", "CountryBrand_DDValue", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;
				case "step10": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_DisableGAFEnableManualEntry", 1);
				break;
				case "step11": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_DisableGAFEnableManualEntry"), "key_DisableGAFEnableManualEntry");
				break;
				case "step12": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_DisableGAFEnableManualEntry"), "value_DisableGAFEnableManualEntry", "value_DisableGAFEnableManualEntry_Enable", 1);
				break;
				case "step13": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_DisableGAFEnableManualEntry"), "value_DisableGAFEnableManualEntry", "value_DisableGAFEnableManualEntry_Disable", 1);
				break;
				case "step14": stepStatus[step] = WebElementClick(settings.settings_Page("close_Btn"), "Close_Button");
				break;
				case "step15": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("txtNewRegistration"), "txtNewRegistration");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Reg_VerifySearch_Exists(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 5;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("txtNewRegistration"), "NewRegistration_Textbox", "MSISDN", 1);
				break;
				case "step2": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("btnNewRegister"), "btnNewRegister");
				break;
				case "step3": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("lblPersonalInfo"), "PageTitle_PersonalInfo");
				break;
				case "step4": stepStatus[step] = VerifyWebElementisVisible(registration_GBR.Registration_Page("btnFindAddress"), "Find_Address");
				break;
				case "step5": stepStatus[step] = WebElementisNotVisible(registration_GBR.Registration_Page("btnFindAddress"), "Find_Address");
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Reg_Settings_RestrictedEmail(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 17;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.settings_Page("country_DropdownValues_GBR"), "Country_Dropdown", "CountryBrand_DDValue", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;
				case "step10": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_RESTRICTED_MAIL_ID_CHECK", 1);
				break;
				case "step11": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_RESTRICTED_MAIL_ID_CHECK_Pre"), "key_RESTRICTED_MAIL_ID_CHECK");
				break;
				case "step12": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_RESTRICTED_MAIL_ID_CHECK_Pre"), "value_RESTRICTED_MAIL_ID_CHECK", "value_RESTRICTED_MAIL_ID_CHECK", 1);
				break;
				case "step13": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_RESTRICTED_MAIL_IDS", 1);
				break;
				case "step14": stepStatus[step] = doubleClickOnElement(settings.settings_Page("key_RES_MAIL_IDS_Pre"), "key_RESTRICTED_MAIL_IDS");
				break;
				case "step15": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("value_RES_MAIL_IDS_Pre"), "value_RESTRICTED_MAIL_IDS", "value_RESTRICTED_MAIL_IDS", 1);
				break;
				case "step16": stepStatus[step] = WebElementClick(settings.settings_Page("close_Btn"), "Close_Button");
				break;
				case "step17": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("txtNewRegistration"), "txtNewRegistration");
				break;

				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Reg_VerifyRestrictEmail(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 8;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("txtNewRegistration"), "NewRegistration_Textbox", "MSISDN", 1);
				break;
				case "step2": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("btnNewRegister"), "btnNewRegister");
				break;
				case "step3": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("lblPersonalInfo"), "PageTitle_PersonalInfo");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("txtEmail1"), "Email_Address", "Email_Address", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("lblPersonalInfo"), "lblPersonalInfo");
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("restrictErrorMsg"), "Email_Restrict_Error_Message");
				break;
				case "step7": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("restrictErrorMsg"), "Error_Msg", "RestrictedErrorMessage", 1);
				break;
				case "step8": stepStatus[step] = WebElementNotPresent(registration_GBR.Registration_Page("EmailErrorMsg"), "Error_Msg");
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Navigate_To_configuration(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 9;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.settings_Page("country_DropdownValues_GBR"), "Country_Dropdown", "CountryBrand_DDValue", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Update_Configurations(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 3;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_Configuration", 1);
				break;
				case "step2": stepStatus[step] = doubleClickOnElement(settings.Settings_Obj_runtime(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"key_Configuration","SIMType","Title",1), "key_Configuration");
				break;
				case "step3": stepStatus[step] = enterValuesAndClickEnterBtn(settings.Settings_Obj_runtime(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"value_Configuration","SIMType","Title",1), "value_Configuration", "value_Configuration", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}
				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Close_Configurations(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 2;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = WebElementClick(settings.settings_Page("close_Btn"), "Close_Button");
				break;
				case "step2": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("txtNewRegistration"), "txtNewRegistration");
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Reg_VerifyMaxFieldLength(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 30;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("txtNewRegistration"), "New Subscriber TextBox");
				break;
				case "step3": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("txtNewRegistration"), "MobileNo", "MSISDN", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("btnNewRegister"), "Register Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("title_Dropdown"), "Title Dropdown");
				break;
				case "step6": stepStatus[step] = WebListSelectByValue(registration_GBR.Registration_Page("title_Dropdown"), "Title","Title",1);
				break;
				case "step7": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("firstName_TxtBox"), "FirstName","FirstName",1);
				break;
				case "step8": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("firstName_TxtBox"), "FirstName","ExpectedFirstName",1);
				break;
				case "step9": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("lastName_TxtBox"), "LastName","LastName",1);
				break;
				case "step10": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("lastName_TxtBox"), "LastName","ExpectedLastName",1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("county_TxtBox"), "CountyName", "CountyName", 1);
				break;
				case "step12": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("county_TxtBox"), "CountyName","ExpectedCountyName",1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("StateGBR_TxtBox"), "State", "State", 1);
				break;
				case "step14": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("StateGBR_TxtBox"), "State","ExpectedState",1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("city_TxtBox"), "City", "City", 1);
				break;
				case "step16": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("city_TxtBox"), "City","ExpectedCity",1);
				break;
				case "step17": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("HouseNoGBR_TxtBox"), "HouseNo", "HouseNo", 1);
				break;
				case "step18": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("HouseNoGBR_TxtBox"), "HouseNo","ExpectedHouseNo",1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("StreetGBR_TxtBox"), "Street", "Street", 1);
				break;
				case "step20": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("StreetGBR_TxtBox"), "Street","ExpectedStreetName",1);
				break;
				case "step21": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("HouseNameGBR_TxtBox"), "HouseName", "HouseName", 1);
				break;
				case "step22": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("HouseNameGBR_TxtBox"), "HouseName","ExpectedHouseName",1);
				break;
				case "step23": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("ContactGBR_TxtBox"), "Contact", "Contact", 1);
				break;
				case "step24": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("ContactGBR_TxtBox"), "Contact", "ExpectedContact", 1);
				break;
				case "step25": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("PUKCode_TxtBox"), "PukCode", "PukCode", 1);
				break;
				case "step26": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("PUKCode_TxtBox"), "PukCode", "ExpectedPukCode", 1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("email_TxtBox"), "Email", "Email", 1);
				break;
				case "step28": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("email_TxtBox"), "Email", "ExpectedEmail", 1);
				break;
				case "step29": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("PostcodeGBR_TxtBox"), "Postcode", "Postcode", 1);
				break;
				case "step30": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("PostcodeGBR_TxtBox"), "Postcode", "ExpectedPostCode", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void GBR_Reg_VerifyEmail(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 9;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("txtNewRegistration"), "New Subscriber TextBox");
				break;
				case "step3": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("txtNewRegistration"), "MobileNo", "MSISDN", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("btnNewRegister"), "Register Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("title_Dropdown"), "Title Dropdown");
				break;
				case "step6": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("email_TxtBox"), "Email", "EMAILID", 1);
				break;
				case "step7": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("lblPersonalInfo"), "lblPersonalInfo");
				break;
				case "step8": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("EmailErrorMsg"), "EmailErrorMsg");
				break;
				case "step9": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("EmailErrorMsg"), "EmailErrorMsg", "Alert_Message", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void EditReg_Settings_RestrictEmail(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 16;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "MSISDN", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step6": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step7": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("edit_RegBtn"), "Edit_Registration_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("edit_RegBtn"), "Edit_Registration_Button");
				break;
				case "step9": stepStatus[step] = pageLoadCheck();
				break;
				case "step10": stepStatus[step] = changeToCoordinates("GBR_Registration");
				break;
				case "step11": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("title_Dropdown"), "Title");
				break;
				case "step12": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("txtEmail1"), "Email_Address", "Email_Address", 1);
				break;
				case "step13": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("lblPersonalInfo"), "lblPersonalInfo");
				break;
				case "step14": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("restrictErrorMsg"), "restrictErrorMsg");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("restrictErrorMsg"), "Error_Msg_Email_restricted_Alert", "RestrictedErrorMessage", 1);
				break;
				case "step16": stepStatus[step] = WebElementNotPresent(registration_GBR.Registration_Page("restrictErrorMsg"), "Error_Msg_Email_restricted_Alert");
				break;

				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Voucher_InvalidCard(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=15;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("services_Select"), "Services_Select");
				break;
				case "step3": stepStatus[step] = WebListSelect(voucher_TopUp_Page.Voucher_TopUp("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step4": stepStatus[step] = WebEditEnterText(voucher_TopUp_Page.Voucher_TopUp("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step8": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("topUp_Button"), "TopUp_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("voucher_TopUp_Button"), "voucher_TopUp_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("voucher_TopUp_Button"), "voucher_TopUp_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("voucherPin_Textbox"), "voucherPin_Textbox");
				break;
				case "step12": stepStatus[step] = WebEditEnterText(voucher_TopUp_Page.Voucher_TopUp("voucherPin_Textbox"), "voucherPin_Textbox", "Voucher_Pin", 1);
				break;
				case "step13": stepStatus[step] = WebElementClick(voucher_TopUp_Page.Voucher_TopUp("apply_Button"), "Apply_buton");
				break;
				case "step14": stepStatus[step] = waitUntilExist(voucher_TopUp_Page.Voucher_TopUp("invalidVoucherError"), "Alert_Message");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(voucher_TopUp_Page.Voucher_TopUp("invalidVoucherError"), "errorMessage", "Alert_Message", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_InvalidReseller_GBR(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 31;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("btnNewRegister"), "New_Subscriber");
				break;
				case "step3": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("txtNewRegistration"), "New_Subscriber", "MSISDN", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("btnNewRegister"), "Registration_Button");
				break;
				case "step5": stepStatus[step] = pageLoadCheck();
				break;
				case "step6": stepStatus[step] = changeToCoordinates("USA_Registration");
				break;
				case "step7": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("title_Dropdown"), "Title_Dropdown");
				break;
				case "step8": stepStatus[step] = WebListSelect(registration_GBR.Registration_Page("title_Dropdown"), "Title", "Title", 1);
				break;
				case "step9": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("firstName_TxtBox"), "FirstName", "First_Name", 1);
				break;
				case "step10": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("lastName_TxtBox"), "LastName", "Last_Name", 1);
				break;
				case "step11": stepStatus[step] = javaScriptDatePicker(registration_GBR.Registration_Page("dob_TxtBox"), "DOB", "DOB", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("email_TxtBox"), "Email", "Email", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("ContactGBR_TxtBox"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("county_TxtBox"), "County", "County", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("PostcodeGBR_TxtBox"), "Post_Code", "Post_Code", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("HouseNoGBR_TxtBox"), "House_No", "House_Number", 1);
				break;
				case "step17": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("HouseNameGBR_TxtBox"), "HouseNameGBR_TxtBox", "House_Name", 1);
				break;
				case "step18": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("StreetGBR_TxtBox"), "Street_Address", "StreetAddress", 1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("city_TxtBox"), "City", "City", 1);
				break;
				case "step20": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("StateGBR_TxtBox"), "State", "State", 1);
				break;
				case "step21": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("PUKCode_TxtBox"), "Puk_Code", "Puk_Code", 1);
				break;
				case "step22": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("MSISDN_TxtBox"), "MSISDN", "MSISDN", 1);
				break;
				case "step23": stepStatus[step] = WebListSelect(registration_GBR.Registration_Page("HearAbout_DropDown"), "Hear_About_Us", "HearAboutUs", 1);
				break;
				case "step24": stepStatus[step] = WebListSelect(registration_GBR.Registration_Page("Language_DropDown"), "Select_Language", "Language", 1);
				break;
				case "step25": stepStatus[step] = WebCheckboxON(registration_GBR.Registration_Page("CheckSMSMarket_Select"), "SMS_Checkbox");
				break;
				case "step26": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("next_Btn"), "Next_Button");
				break;
				case "step27": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("confirm_Title"), "Confirmation of Title");
				break;
				case "step28": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("submit_Button"), "Submit_Button");
				break;
				case "step29": stepStatus[step] = pageScrollUp(registration_GBR.Registration_Page("personal_Info"), "Registration_confirmation");
				break;
				case "step30": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("SIMisNotAssociateToResellerError"), "SIMisNotAssociateToResellerError");
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("SIMisNotAssociateToResellerError"), "Alert_Message", "Alert_Message", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void EditReg_SpecialChar_Check(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 34;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "MSISDN", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step6": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step7": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("edit_RegBtn"), "Edit_Registration_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("edit_RegBtn"), "Edit_Registration_Button");
				break;
				case "step9": stepStatus[step] = pageLoadCheck();
				break;
				case "step10": stepStatus[step] = changeToCoordinates("GBR_Registration");
				break;
				case "step11": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("title_Dropdown"), "Title");
				break;
				case "step12": stepStatus[step] = WebListSelect(registration_GBR.Registration_Page("title_Dropdown"), "Title", "Title", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("firstName_TxtBox"), "FirstName", "First_Name", 1);
				break;
				case "step14": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("firstName_TxtBox"), "FirstName","Expected_First_Name",1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("lastName_TxtBox"), "LastName", "Last_Name", 1);
				break;
				case "step16": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("lastName_TxtBox"), "LastName","Expected_Last_Name",1);
				break;
				case "step17": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("email_TxtBox"), "Email", "Email", 1);
				break;
				case "step18": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("email_TxtBox"), "Email","Expected_Email",1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("PostcodeGBR_TxtBox"), "Post_Code", "Post_Code", 1);
				break;
				case "step20": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("PostcodeGBR_TxtBox"), "Post_Code","Expected_Postcode",1);
				break;
				case "step21": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("HouseNoGBR_TxtBox"), "House_No", "House_Number", 1);
				break;
				case "step22": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("HouseNoGBR_TxtBox"), "House_No","Expected_House_Number",1);
				break;
				case "step23": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("HouseNameGBR_TxtBox"), "House_Name", "House_Name", 1);
				break;
				case "step24": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("HouseNameGBR_TxtBox"), "House_Name","Expected_House_Name",1);
				break;
				case "step25": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("StreetGBR_TxtBox"), "Street_Address", "StreetAddress", 1);
				break;
				case "step26": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("StreetGBR_TxtBox"), "Street_Address","Expected_StreetAddress",1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("city_TxtBox"), "City", "City", 1);
				break;
				case "step28": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("city_TxtBox"), "City", "Expected_City", 1);
				break;
				case "step29": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("StateGBR_TxtBox"), "State", "State", 1);
				break;
				case "step30": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("StateGBR_TxtBox"), "State", "Expected_State", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("ContactGBR_TxtBox"), "Contact", "Contact_Number", 1);
				break;
				case "step32": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("ContactGBR_TxtBox"), "Contact", "Expected_ContactNumber", 1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("county_TxtBox"), "County", "County", 1);
				break;
				case "step34": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("county_TxtBox"), "Contact", "Expected_County", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Check_Registered_Subscriber_GBR(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=8;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBCheckValueExist("MVNO_TableName", "MVNO_ColumnName", "MVNO_Condition", 1);
				break;
				case "step2": stepStatus[step] = SQLDBCheckValueExist("Customer_TableName", "MVNO_ColumnName", "MVNO_Condition", 1);
				break;
				case "step3": stepStatus[step] = pageLoadCheck();
				break;
				case "step4": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("txtNewRegistration"), "New Subscriber TextBox");
				break;
				case "step5": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("txtNewRegistration"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step6": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("btnNewRegister"), "Register Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("ErrorMsg_Label"), "Error Message");
				break;
				case "step8": stepStatus[step] = WebElementDynamicStringVerify(registration_GBR.Registration_Page("ErrorMsg_Label"), "Error Message", "Response_Message", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PreCon_DB_GBR_REGISTRATION(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 3;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBDelete("Customer_TableName", "SQL_MSISDN_Condition", 1);
				break;
				case "step2": stepStatus[step] = SQLDBDelete("CustomerLog_TableName", "SQL_MSISDN_Condition", 1);
				break;
				case "step3": stepStatus[step] = SQLDBDelete("NFBLOCKREASON_TableName", "SQL_MSISDN_Condition", 1);
				break;

				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Perform_GBR_Registration(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=53;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("txtNewRegistration"), "New Subscriber TextBox");
				break;
				case "step3": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("txtNewRegistration"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("btnNewRegister"), "Register Button");
				break;
				case "step5": stepStatus[step] = pageLoadCheck();
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("title_Dropdown"), "Title Dropdown");
				break;
				case "step7": stepStatus[step] = WebListSelect(registration_GBR.Registration_Page("title_Dropdown"), "Title","Title",1);
				break;
				case "step8": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("firstName_TxtBox"), "FirstName","FirstName",1);
				break;
				case "step9": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("lastName_TxtBox"), "LastName","LastName",1);
				break;
				case "step10": stepStatus[step] = javaScriptDatePicker(registration_GBR.Registration_Page("dob_TxtBox"), "DOB", "DOB", 1);
				break;
				case "step11": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("country_TxtBox"), "Country", "Country", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("county_TxtBox"), "CountyName", "CountyName", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("PostcodeGBR_TxtBox"), "Postcode", "Postcode", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("StateGBR_TxtBox"), "State", "State", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("city_TxtBox"), "City", "City", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("HouseNoGBR_TxtBox"), "HouseNo", "HouseNo", 1);
				break;
				case "step17": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("StreetGBR_TxtBox"), "Street", "Street", 1);
				break;
				case "step18": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("HouseNameGBR_TxtBox"), "HouseName", "HouseName", 1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("email_TxtBox"), "Email", "Email", 1);
				break;
				case "step20": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("ContactGBR_TxtBox"), "Contact", "Contact", 1);
				break;
				case "step21": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("MobileNo_Label"), "Mobile_Number", "Mobile_Number", 1);
				break;
				case "step22": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("PUKCode_TxtBox"), "PukCode", "PukCode", 1);
				break;
				case "step23": stepStatus[step] = WebListSelect(registration_GBR.Registration_Page("Language_DropDown"), "Language", "Language", 1);
				break;
				case "step24": stepStatus[step] = WebListSelect(registration_GBR.Registration_Page("HearAbout_DropDown"), "How Hear About Us", "HowHearAboutUs", 1);
				break;
				case "step25": stepStatus[step] = WebCheckboxON(registration_GBR.Registration_Page("CheckSMSMarket_Select"), "SMS Marketing");
				break;
				case "step26": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("next_Btn"), "Next Button");
				break;
				case "step27": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("next_Btn"), "Next Button");
				break;
				case "step28": stepStatus[step] = pageLoadCheck();
				break;
				case "step29": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("view_Title"), "Title");
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_Title"), "Title", "Title", 1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_FirstName"), "FirstName", "FirstName", 1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_LastName"), "LastName", "LastName", 1);
				break;
				case "step33": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_DOB"), "DOB", "DOB", 1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_Email"), "Email", "Email", 1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_Contact"), "ContactNo", "Contact", 1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_Country"), "Country", "Country", 1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_PostCode"), "PostCode", "Postcode", 1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_HouseNo"), "HouseNo", "HouseNo", 1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_StreetAdd"), "StreetAddress", "Street", 1);
				break;
				case "step40": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_City"), "City", "City", 1);
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_State"), "State", "State", 1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_PUKCode"), "PUKCode", "Puk_Code", 1);
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_MSISDN"), "MSISDN", "MSISDN", 1);
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_HearAbUs"), "Hear_About_Us", "HowHearAboutUs", 1);
				break;
				case "step45": stepStatus[step] = ScrollIntoElement(registration_GBR.Registration_Page("view_Language"), "view_Language");
				break;
				case "step46": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_Language"), "Language", "Language", 1);
				break;
				case "step47": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("submit_Button"), "submit_Button Button");
				break;
				case "step48": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("submit_Button"), "submit_Button");
				break;
				case "step49": stepStatus[step] = ScrollIntoElement(registration_GBR.Registration_Page("successMessage_Label"), "successMessage_Label");
				break;
				case "step50": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("successMessage_Label"), "Success_Message");
				break;
				case "step51": stepStatus[step] = WebElementDynamicStringVerify(registration_GBR.Registration_Page("successMessage_Label"), "Load Icon", "Success_Message", 1);
				break;
				case "step52": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("reg_CloseBtn"), "Close_Button");
				break;
				case "step53": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("txtNewRegistration"), "txtNewRegistration");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Perform_View_Registration(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=36;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "MSISDN", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step6": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step7": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("view_RegBtn"), "View_Registration_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("view_RegBtn"), "View_Registration_Button");
				break;
				case "step9": stepStatus[step] = pageLoadCheck();
				break;
				case "step10": stepStatus[step] = changeToCoordinates("GBR_Registration");
				break;
				case "step11": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("view_reg_Title"), "Title");
				break;
				case "step12": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_reg_Title"), "Title", "Title", 1);
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_reg_FirstName"), "FirstName", "FirstName", 1);
				break;
				case "step14": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_reg_LastName"), "LastName", "LastName", 1);
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_reg_DOB"), "DOB", "DOB", 1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_reg_Email"), "Email", "Email", 1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_reg_Contact"), "ContactNo", "Contact", 1);
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_reg_Country"), "Country", "Country", 1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_reg_PostCode"), "PostCode", "Postcode", 1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_reg_HouseNo"), "HouseNo", "HouseNo", 1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_reg_StreetAdd"), "StreetAddress", "Street", 1);
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_reg_City"), "City", "City", 1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_reg_State"), "State", "State", 1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_reg_PUKCode"), "PUKCode", "Puk_Code", 1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_reg_MSISDN"), "MSISDN", "MSISDN", 1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_reg_IMSI1"), "IMSI1", "IMSI1", 1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_reg_IMSI2"), "IMSI2", "IMSI2", 1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_reg_ICCID"), "ICCID", "ICCID", 1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_reg_HearAbUs"), "Hear_About_Us", "HowHearAboutUs", 1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_reg_HearAbUs"), "Hear_About_Us", "HowHearAboutUs", 1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_reg_County"), "view_reg_County", "CountyName", 1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_reg_Language"), "Language", "Language", 1);
				break;
				case "step33": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("view_reg_CloseButton"), "view_reg_CloseButton");
				break;
				case "step34": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("viewSubReg_CloseBtn"), "viewSubReg_CloseBtn");
				break;
				case "step35": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("viewSubReg_CloseBtn"), "viewSubReg_CloseBtn");
				break;
				case "step36": stepStatus[step] = setScrollBarOFF("USA_Registration");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void SQLDB_Select(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name", "Condition", "Column_Value", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Perform_GBR_Edit_Registration(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=56;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "MSISDN", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step6": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step7": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("edit_RegBtn"), "Edit_Registration_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("edit_RegBtn"), "Edit_Registration_Button");
				break;
				case "step9": stepStatus[step] = pageLoadCheck();
				break;
				case "step10": stepStatus[step] = changeToCoordinates("GBR_Registration");
				break;
				case "step11": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("title_Dropdown"), "Title");
				break;
				case "step12": stepStatus[step] = WebListSelect(registration_GBR.Registration_Page("title_Dropdown"), "Title","Title",1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("firstName_TxtBox"), "FirstName","FirstName",1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("lastName_TxtBox"), "LastName","LastName",1);
				break;
				case "step15": stepStatus[step] = javaScriptDatePicker(registration_GBR.Registration_Page("dob_TxtBox"), "DOB", "DOB", 1);
				break;
				case "step16": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("country_TxtBox"), "Country", "Country", 1);
				break;
				case "step17": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("county_TxtBox"), "CountyName", "CountyName", 1);
				break;
				case "step18": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("PostcodeGBR_TxtBox"), "Postcode", "Postcode", 1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("StateGBR_TxtBox"), "State", "State", 1);
				break;
				case "step20": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("city_TxtBox"), "City", "City", 1);
				break;
				case "step21": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("HouseNoGBR_TxtBox"), "HouseNo", "HouseNo", 1);
				break;
				case "step22": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("StreetGBR_TxtBox"), "Street", "Street", 1);
				break;
				case "step23": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("HouseNameGBR_TxtBox"), "HouseName", "HouseName", 1);
				break;
				case "step24": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("email_TxtBox"), "Email", "Email", 1);
				break;
				case "step25": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("ContactGBR_TxtBox"), "Contact", "Contact", 1);
				break;
				case "step26": stepStatus[step] = WebElementValueCompare(registration_GBR.Registration_Page("MobileNo_Label"), "Mobile_Number", "Mobile_Number", 1);
				break;
				case "step27": stepStatus[step] = WebListSelect(registration_GBR.Registration_Page("Language_DropDown"), "Language", "Language", 1);
				break;
				case "step28": stepStatus[step] = WebListSelect(registration_GBR.Registration_Page("HearAbout_DropDown"), "How Hear About Us", "HowHearAboutUs", 1);
				break;
				case "step29": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("next_Btn"), "Next Button");
				break;
				case "step30": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("next_Btn"), "Next Button");
				break;
				case "step31": stepStatus[step] = ScrollIntoElement(registration_GBR.Registration_Page("view_Title"), "title_Dropdown");
				break;
				case "step32": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("view_Title"), "Title");
				break;
				case "step33": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_Title"), "Title", "Title", 1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_FirstName"), "FirstName", "FirstName", 1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_LastName"), "LastName", "LastName", 1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_DOB"), "DOB", "DOB", 1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_Email"), "Email", "Email", 1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_Contact"), "ContactNo", "Contact", 1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_Country"), "Country", "Country", 1);
				break;
				case "step40": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_PostCode"), "PostCode", "Postcode", 1);
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_HouseNo"), "HouseNo", "HouseNo", 1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_StreetAdd"), "StreetAddress", "Street", 1);
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_City"), "City", "City", 1);
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_State"), "State", "State", 1);
				break;
				case "step45": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_PUKCode"), "PUKCode", "Puk_Code", 1);
				break;
				case "step46": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_MSISDN"), "MSISDN", "MSISDN", 1);
				break;
				case "step47": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_HearAbUs"), "Hear_About_Us", "HowHearAboutUs", 1);
				break;
				case "step48": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("view_Language"), "Language", "Language", 1);
				break;
				case "step49": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("submit_Button"), "submit_Button Button");
				break;
				case "step50": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("submit_Button"), "submit_Button");
				break;
				case "step51": stepStatus[step] = ScrollIntoElement(registration_GBR.Registration_Page("successMessage_Label"), "successMessage_Label");
				break;
				case "step52": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("successMessage_Label"), "Success_Message");
				break;
				case "step53": stepStatus[step] = WebElementDynamicStringVerify(registration_GBR.Registration_Page("successMessage_Label"), "Load Icon", "Success_Message", 1);
				break;
				case "step54": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("reg_CloseBtn"), "Close_Button");
				break;
				case "step55": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("txtNewRegistration"), "txtNewRegistration");
				break;
				case "step56": stepStatus[step] = setScrollBarOFF("USA_Registration");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_nonmandatecheck(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=11;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("txtNewRegistration"), "New Subscriber TextBox");
				break;
				case "step3": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("txtNewRegistration"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("btnNewRegister"), "Register Button");
				break;
				case "step5": stepStatus[step] = pageLoadCheck();
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("title_Dropdown"), "Title Dropdown");
				break;
				case "step7": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("county_TxtBox"), "CountyName", "CountyName", 1);
				break;
				case "step8": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("HouseNameGBR_TxtBox"), "HouseName", "HouseName", 1);
				break;
				case "step9": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("next_Btn"), "Next Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("MandateError"), "MandateError");
				break;
				case "step11": stepStatus[step] = WebElementTextCompare(registration_GBR.Registration_Page("MandateError"), "Alert_Message", "Alert_Message", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Open_SQL_Connection_NOR(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBOpenConnection(property.getProperty("SQL_Server_GBR"), property.getProperty("SQL_Server_DB_Name_NOR"), property.getProperty("SQL_Server_UID_GBR"), property.getProperty("SQL_Server_PWD_GBR"));
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Perform_Nor_Registration_WOPI(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 66;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("txtNewRegistration"), "New Subscriber TextBox");
				break;
				case "step3": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("txtNewRegistration"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("btnNewRegister"), "Register Button");
				break;
				case "step5": stepStatus[step] = pageLoadCheck();
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("withPersonalOptions"), "Options");
				break;
				case "step7": stepStatus[step] = WebRadioSelect(registration_NOR.Registration_Page("withoutPersonalOptions"), "Options","Without Personal");
				break;
				case "step8": stepStatus[step] = WebListSelect(registration_NOR.Registration_Page("TypeofID_WOP"), "Type_of_ID","Type_of_ID",1);
				break;
				case "step9": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("PersonalInformation_WOP"), "PersonalInformation","Personal_Number",1);
				break;
				case "step10": stepStatus[step] = WebListSelect(registration_NOR.Registration_Page("ddlTitle"), "Title","Title",1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("FirstName"), "FirstName","FirstName",1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("LastName"), "LastName","LastName",1);
				break;
				case "step13": stepStatus[step] = javaScriptDatePicker(registration_NOR.Registration_Page("DOB"), "DateOfBirth", "DOB", 1);
				break;
				case "step14": stepStatus[step] = WebListSelect(registration_NOR.Registration_Page("Nationality"), "Nationality","Nationality",1);
				break;
				case "step15": stepStatus[step] = waitUntilListLoads(registration_NOR.Registration_Page("CountryName"), "Country");
				break;
				case "step16": stepStatus[step] = WebListSelect(registration_NOR.Registration_Page("CountryName"), "Country","Country",1);
				break;
				case "step17": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("PostCode"), "Postcode","Postcode",1);
				break;
				case "step18": stepStatus[step] = WebButtonClick(registration_NOR.Registration_Page("btnFindAddress"), "Find_Address");
				break;
				case "step19": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("disabledPostcode"), "disabledPostcode");
				break;
				case "step20": stepStatus[step] = WebListSelectByValue(registration_NOR.Registration_Page("ddlCity"), "ddlCity","City",1);
				break;
				case "step21": stepStatus[step] = waitUntilDisappear(registration_NOR.Registration_Page("Load_Address_Image"), "Loading_Image");
				break;
				case "step22": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("ApartmentNumber"), "ApartmentNumber","ApartmentNumber",1);
				break;
				case "step23": stepStatus[step] = WebListSelectByValue(registration_NOR.Registration_Page("ddlStreet"), "StreetName","StreetName",1);
				break;
				case "step24": stepStatus[step] = waitUntilDisappear(registration_NOR.Registration_Page("Load_Address_Image"), "Loading_Image");
				break;
				case "step25": stepStatus[step] = WebListSelectByValue(registration_NOR.Registration_Page("HouseNumber"), "HouseNumber","HouseNo",1);
				break;
				case "step26": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("txtSimCardNumber"), "SimCardNumber");
				break;
				case "step27": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("txtSimCardNumber"), "SimCardNumber","SimCardNumber",1);
				break;
				case "step28": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("RetailerID"), "RetailerID","Retailer_ID",1);
				break;
				case "step29": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("EmailID"), "EmailID","Email",1);
				break;
				case "step30": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("Contact"), "Contact","Contact",1);
				break;
				case "step31": stepStatus[step] = WebListSelect(registration_NOR.Registration_Page("ddLanguage"), "ddLanguage","LanguageCode",1);
				break;
				case "step32": stepStatus[step] = WebElementValueCompare(registration_NOR.Registration_Page("LycaMobileMSISDN"), "LycaMobile","LycaMobile",1);
				break;
				case "step33": stepStatus[step] = WebElementClick(registration_NOR.Registration_Page("ID_Proof"), "ID_Proof");
				break;
				case "step34": stepStatus[step] = Uploadfiletestdata("testSupportfilespath", "File_Name_With_Type",1);
				break;						
				case "step35": stepStatus[step] = waituntiltextpresent(registration_NOR.Registration_Page("Uploaded_File"), "Uploaded_File");
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("Uploaded_File"), "Uploaded_File","Uploaded_File",1);
				break;
				case "step37": stepStatus[step] = WebCheckboxON(registration_NOR.Registration_Page("chkboxTermsAndCondition"), "ReadAndAgreeTerms");
				break;
				case "step38": stepStatus[step] = ScrollIntoElement(registration_NOR.Registration_Page("Next_button"), "Next_button");
				break;
				case "step39": stepStatus[step] = WebButtonClick(registration_NOR.Registration_Page("Next_button"), "Next_button");
				break;
				case "step40": stepStatus[step] = ScrollIntoElement(registration_NOR.Registration_Page("lblTitleText"), "lblTitleText");
				break;
				case "step41": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("lblTitleText"), "lblTitleText");
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblTitleText"), "Title","Title",1);
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblFirstNameText"), "FirstName","FirstName",1);
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblLastNameText"), "lblLastNameText","LastName",1);
				break;
				case "step45": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblDOB"), "DOB","DOB",1);
				break;
				case "step46": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblNationality"), "Nationality","Nationality",1);
				break;
				case "step47": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblHouseNo"), "HouseNumber","HouseNo",1);
				break;
				case "step48": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblstreetName"), "StreetName","StreetName",1);
				break;
				case "step49": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblCountryName"), "Country","Country",1);
				break;
				case "step50": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblcityName"), "City","City",1);
				break;
				case "step51": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblpostCode"), "Postcode","Postcode",1);
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblTypeOfID_WOP"), "TypeOfID","ID_Type",1);
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblPersonalNumber_WOP"), "Personal_Number","Personal_Number",1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblMSISDNText"), "lblMSISDNText","LABEL_MSISDN",1);
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblSimCardNoText"), "SimCardNumber","SimCardNumber",1);
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblEmailText"), "Email","Email",1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblLanguageCode"), "lblLanguageCode","LanguageCode",1);
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblContact"), "Contact","Contact",1);
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("Confirm_Uploaded_File"), "Confirm_Uploaded_File","Uploaded_File",1);
				break;
				case "step60": stepStatus[step] = ScrollIntoElement(registration_NOR.Registration_Page("Submit_button"), "Submit_button");
				break;
				case "step61": stepStatus[step] = WebButtonClick(registration_NOR.Registration_Page("Submit_button"), "Submit_button");
				break;
				case "step62": stepStatus[step] = ScrollIntoElement(registration_NOR.Registration_Page("SuccessLabel"), "SuccessLabel");
				break;
				case "step63": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("SuccessLabel"), "Success_Message");
				break;
				case "step64": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("SuccessLabel"), "Success_Message","Success_Message",1);
				break;
				case "step65": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("reg_CloseBtn"), "Close_Button");
				break;
				case "step66": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("txtNewRegistration"), "txtNewRegistration");
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Navigate_To_configuration_NOR(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 9;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.settings_Page("country_Dropdown_NOR"), "country_Dropdown_NOR");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.settings_Page("country_Dropdown_NOR"), "country_Dropdown_NOR");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.settings_Page("country_DropdownValues_NOR"), "Country_Dropdown", "CountryBrand_DDValue", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Perform_Nor_Registration_WPI(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 61;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("txtNewRegistration"), "New Subscriber TextBox");
				break;
				case "step3": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("txtNewRegistration"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("btnNewRegister"), "Register Button");
				break;
				case "step5": stepStatus[step] = pageLoadCheck();
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("withPersonalOptions"), "Options");
				break;
				case "step7": stepStatus[step] = WebRadioSelect(registration_NOR.Registration_Page("withPersonalOptions"), "Options","With Personal");
				break;
				case "step8": stepStatus[step] = WebListSelect(registration_NOR.Registration_Page("TypeofID_WP"), "Type_of_ID","Type_of_ID",1);
				break;
				case "step9": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("PersonalNumber_WP"), "PersonalNumber_WP","Personal_Number",1);
				break;
				case "step10": stepStatus[step] = WebListSelect(registration_NOR.Registration_Page("ddlTitle"), "Title","Title",1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("FirstName"), "FirstName","FirstName",1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("LastName"), "LastName","LastName",1);
				break;
				case "step13": stepStatus[step] = javaScriptDatePicker(registration_NOR.Registration_Page("DOB"), "DateOfBirth", "DOB", 1);
				break;
				case "step14": stepStatus[step] = WebListSelect(registration_NOR.Registration_Page("Nationality"), "Nationality","Nationality",1);
				break;
				case "step15": stepStatus[step] = WebElementValueCompare(registration_NOR.Registration_Page("CountryName_WP"), "Country","Country",1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("PostCode"), "Postcode","Postcode",1);
				break;
				case "step17": stepStatus[step] = WebButtonClick(registration_NOR.Registration_Page("btnFindAddress"), "Find_Address");
				break;
				case "step18": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("disabledPostcode"), "disabledPostcode");
				break;
				case "step19": stepStatus[step] = WebListSelectByValue(registration_NOR.Registration_Page("ddlCity"), "ddlCity","City",1);
				break;
				case "step20": stepStatus[step] = waitUntilDisappear(registration_NOR.Registration_Page("Load_Address_Image"), "Loading_Image");
				break;
				case "step21": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("ApartmentNumber"), "ApartmentNumber","ApartmentNumber",1);
				break;
				case "step22": stepStatus[step] = WebListSelectByValue(registration_NOR.Registration_Page("ddlStreet"), "StreetName","StreetName",1);
				break;
				case "step23": stepStatus[step] = waitUntilDisappear(registration_NOR.Registration_Page("Load_Address_Image"), "Loading_Image");
				break;
				case "step24": stepStatus[step] = WebListSelectByValue(registration_NOR.Registration_Page("HouseNumber"), "HouseNumber","HouseNo",1);
				break;
				case "step25": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("txtSimCardNumber"), "SimCardNumber");
				break;
				case "step26": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("txtSimCardNumber"), "SimCardNumber","SimCardNumber",1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("RetailerID"), "RetailerID","Retailer_ID",1);
				break;
				case "step28": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("EmailID"), "EmailID","Email",1);
				break;
				case "step29": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("Contact"), "Contact","Contact",1);
				break;
				case "step30": stepStatus[step] = WebListSelect(registration_NOR.Registration_Page("ddLanguage"), "ddLanguage","LanguageCode",1);
				break;
				case "step31": stepStatus[step] = WebElementValueCompare(registration_NOR.Registration_Page("LycaMobileMSISDN"), "LycaMobile","LycaMobile",1);
				break;
				case "step32": stepStatus[step] = ScrollIntoElement(registration_NOR.Registration_Page("chkboxTermsAndCondition"), "chkboxTermsAndCondition");
				break;
				case "step33": stepStatus[step] = WebCheckboxON(registration_NOR.Registration_Page("chkboxTermsAndCondition"), "ReadAndAgreeTerms");
				break;
				case "step34": stepStatus[step] = ScrollIntoElement(registration_NOR.Registration_Page("Next_button"), "Next_button");
				break;
				case "step35": stepStatus[step] = WebButtonClick(registration_NOR.Registration_Page("Next_button"), "Next_button");
				break;
				case "step36": stepStatus[step] = ScrollIntoElement(registration_NOR.Registration_Page("lblTitleText"), "lblTitleText");
				break;
				case "step37": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("lblTitleText"), "lblTitleText");
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblTitleText"), "Title","Title",1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblFirstNameText"), "FirstName","FirstName",1);
				break;
				case "step40": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblLastNameText"), "lblLastNameText","LastName",1);
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblDOB"), "DOB","DOB",1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblNationality"), "Nationality","Nationality",1);
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblHouseNo"), "HouseNumber","HouseNo",1);
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblstreetName"), "StreetName","StreetName",1);
				break;
				case "step45": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblCountryName"), "Country","Country",1);
				break;
				case "step46": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblcityName"), "City","City",1);
				break;
				case "step47": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblpostCode"), "Postcode","Postcode",1);
				break;
				case "step48": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblTypeOfID_WOP"), "TypeOfID","ID_Type",1);
				break;
				case "step49": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblPersonalNumber_WP"), "Personal_Number","Personal_Number",1);
				break;
				case "step50": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblMSISDNText"), "lblMSISDNText","LABEL_MSISDN",1);
				break;
				case "step51": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblSimCardNoText"), "SimCardNumber","SimCardNumber",1);
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblEmailText"), "Email","Email",1);
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblLanguageCode"), "lblLanguageCode","LanguageCode",1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblContact"), "Contact","Contact",1);
				break;
				case "step55": stepStatus[step] = ScrollIntoElement(registration_NOR.Registration_Page("Submit_button"), "Submit_button");
				break;
				case "step56": stepStatus[step] = WebButtonClick(registration_NOR.Registration_Page("Submit_button"), "Submit_button");
				break;
				case "step57": stepStatus[step] = ScrollIntoElement(registration_NOR.Registration_Page("SuccessLabel"), "SuccessLabel");
				break;
				case "step58": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("SuccessLabel"), "Success_Message");
				break;
				case "step59": stepStatus[step] = WebElementResxKeyValueStaticCompare(registration_NOR.Registration_Page("SuccessLabel"), "Success_Message","Success_Message",1);
				break;
				case "step60": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("reg_CloseBtn"), "Close_Button");
				break;
				case "step61": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("txtNewRegistration"), "txtNewRegistration");
				break;				
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Update_Configurations_ON_OFF(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 4;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "key_Configuration", 1);
				break;
				case "step2": stepStatus[step] = doubleClickOnElement(settings.Settings_Obj_runtime(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"key_Configuration","SIMType","Title",1), "key_Configuration");
				break;
				case "step3": stepStatus[step] = enterValuesAndClickEnterBtn(settings.Settings_Obj_runtime(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"value_Configuration","SIMType","Title",1), "value_Configuration_1", "value_Configuration_1", 1);
				break;
				case "step4": stepStatus[step] = enterValuesAndClickEnterBtn(settings.Settings_Obj_runtime(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"value_Configuration","SIMType","Title",1), "value_Configuration_2", "value_Configuration_2", 1);
				break;

				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void NOR_Validate_GAF(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 8;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("txtNewRegistration"), "New Subscriber TextBox");
				break;
				case "step3": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("txtNewRegistration"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("btnNewRegister"), "Register Button");
				break;
				case "step5": stepStatus[step] = pageLoadCheck();
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("withPersonalOptions"), "Options");
				break;
				case "step7": stepStatus[step] = WebElementisNotVisible(registration_NOR.Registration_Page("btnFindAddress"), "Find_Address");
				break;
				case "step8": stepStatus[step] = VerifyWebElementisVisible(registration_NOR.Registration_Page("btnFindAddress"), "Find_Address");
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void NOR_ViewRegistration(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=35;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step6": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step7": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("view_RegBtn"), "View_Registration_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("view_RegBtn"), "View_Registration_Button");
				break;
				case "step9": stepStatus[step] = pageLoadCheck();
				break;
				case "step10": stepStatus[step] = changeToCoordinates("GBR_Registration");
				break;
				case "step11": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("lblview_Title"), "Title");
				break;
				case "step12": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblview_Title"), "Title", "Title", 1);
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblview_FirstName"), "FirstName", "FirstName", 1);
				break;
				case "step14": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblview_LastName"), "LastName", "LastName", 1);
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblview_DOB"), "DOB", "DOB", 1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblview_Email"), "Email", "Email", 1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblview_Contact"), "ContactNo", "Contact", 1);
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblview_Country"), "Country", "Country", 1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblview_postcode"), "PostCode", "Postcode", 1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblview_HouseNo"), "HouseNo", "HouseNo", 1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblview_streetname"), "StreetAddress", "StreetName", 1);
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblview_city"), "City", "City", 1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblview_state"), "State", "State", 1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblview_PUKCode"), "PUKCode", "Puk_Code", 1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblview_MSISDN"), "MSISDN", "LABEL_MSISDN", 1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblview_IMSI1"), "IMSI1", "IMSI1", 1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblview_IMSI2"), "IMSI2", "IMSI2", 1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblview_SMSMarketing"), "SMSMarketing", "SMSMarketing", 1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblview_Language"), "Language", "LanguageCode", 1);
				break;
				case "step30": stepStatus[step] = storeSQLDBValueInEnv("TABLE_NAME", "COLUMN_NAME", "CONDITION", 1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblview_Account"), "lblview_Account", "ACCOUNTNUMBER", 1);
				break;
				case "step32": stepStatus[step] = WebElementClick(registration_NOR.Registration_Page("view_reg_CloseButton"), "view_reg_CloseButton");
				break;
				case "step33": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("viewSubReg_CloseBtn"), "viewSubReg_CloseBtn");
				break;
				case "step34": stepStatus[step] = WebElementClick(registration_NOR.Registration_Page("viewSubReg_CloseBtn"), "Subscriber_view_reg_Close_Button");
				break;
				case "step35": stepStatus[step] = setScrollBarOFF("NOR_Registration");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void NOR_EditRegistration(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=61;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step6": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step7": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("view_RegBtn"), "View_Registration_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("edit_RegBtn"), "edit_RegBtn");
				break;
				case "step9": stepStatus[step] = pageLoadCheck();
				break;
				case "step10": stepStatus[step] = changeToCoordinates("GBR_Registration");
				break;
				case "step11": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("withPersonalOptions"), "Options");
				break;
				case "step12": stepStatus[step] = WebRadioSelect(registration_NOR.Registration_Page("withoutPersonalOptions"), "Options","Without Personal");
				break;
				case "step13": stepStatus[step] = WebListSelect(registration_NOR.Registration_Page("TypeofID_WOP"), "Type_of_ID","Type_of_ID",1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("PersonalInformation_WOP"), "PersonalInformation","Personal_Number",1);
				break;
				case "step15": stepStatus[step] = WebListSelect(registration_NOR.Registration_Page("ddlTitle"), "Title","Title",1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("FirstName"), "FirstName","FirstName",1);
				break;
				case "step17": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("LastName"), "LastName","LastName",1);
				break;
				case "step18": stepStatus[step] = javaScriptDatePicker(registration_NOR.Registration_Page("DOB"), "DateOfBirth", "DOB", 1);
				break;
				case "step19": stepStatus[step] = WebListSelect(registration_NOR.Registration_Page("Nationality"), "Nationality","Nationality",1);
				break;
				case "step20": stepStatus[step] = WebListSelect(registration_NOR.Registration_Page("CountryName"), "Country","Country",1);
				break;
				case "step21": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("State"), "State","State",1);
				break;
				case "step22": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("PostCode"), "Postcode","Postcode",1);
				break;
				case "step23": stepStatus[step] = WebButtonClick(registration_NOR.Registration_Page("btnFindAddress"), "Find_Address");
				break;
				case "step24": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("disabledPostcode"), "disabledPostcode");
				break;
				case "step25": stepStatus[step] = WebListSelectByValueUntilExpectedValue(registration_NOR.Registration_Page("ddlCity"), "ddlCity","City",1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("ApartmentNumber"), "ApartmentNumber","ApartmentNumber",1);
				break;
				case "step27": stepStatus[step] = WebListSelectByValueUntilExpectedValue(registration_NOR.Registration_Page("ddlStreet"), "StreetName","StreetName",1);
				break;
				case "step28": stepStatus[step] = WebListSelectByValueUntilExpectedValue(registration_NOR.Registration_Page("HouseNumber"), "HouseNumber","HouseNo",1);
				break;
				case "step29": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("EmailID"), "EmailID","Email",1);
				break;
				case "step30": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("Contact"), "Contact","Contact",1);
				break;
				case "step31": stepStatus[step] = WebListSelect(registration_NOR.Registration_Page("ddLanguage"), "ddLanguage","LanguageCode",1);
				break;
				case "step32": stepStatus[step] = WebCheckboxON(registration_NOR.Registration_Page("chkboxTermsAndCondition"), "ReadAndAgreeTerms");
				break;
				case "step33": stepStatus[step] = ScrollIntoElement(registration_NOR.Registration_Page("Next_button"), "Next_button");
				break;
				case "step34": stepStatus[step] = WebButtonClick(registration_NOR.Registration_Page("Next_button"), "Next_button");
				break;
				case "step35": stepStatus[step] = ScrollIntoElement(registration_NOR.Registration_Page("lblTitleText"), "lblTitleText");
				break;
				case "step36": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("lblTitleText"), "lblTitleText");
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblTitleText"), "Title","Title",1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblFirstNameText"), "FirstName","FirstName",1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblLastNameText"), "lblLastNameText","LastName",1);
				break;
				case "step40": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblDOB"), "DOB","DOB",1);
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblNationality"), "Nationality","Nationality",1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblHouseNo"), "HouseNumber","HouseNo",1);
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblstreetName"), "StreetName","StreetName",1);
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblCountryName"), "Country","Country",1);
				break;
				case "step45": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblcityName"), "City","City",1);
				break;
				case "step46": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblpostCode"), "Postcode","Postcode",1);
				break;
				case "step47": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblTypeOfID_WOP"), "TypeOfID","ID_Type",1);
				break;
				case "step48": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblPersonalNumber_WOP"), "Personal_Number","Personal_Number",1);
				break;
				case "step49": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblMSISDNText"), "lblMSISDNText","LABEL_MSISDN",1);
				break;
				case "step50": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblSimCardNoText"), "SimCardNumber","SimCardNumber",1);
				break;
				case "step51": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblEmailText"), "Email","Email",1);
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblLanguageCode"), "lblLanguageCode","LanguageCode",1);
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("lblContact"), "Contact","Contact",1);
				break;
				case "step54": stepStatus[step] = ScrollIntoElement(registration_NOR.Registration_Page("Submit_button"), "Submit_button");
				break;
				case "step55": stepStatus[step] = WebButtonClick(registration_NOR.Registration_Page("Submit_button"), "Submit_button");
				break;
				case "step56": stepStatus[step] = ScrollIntoElement(registration_NOR.Registration_Page("SuccessLabel"), "SuccessLabel");
				break;
				case "step57": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("SuccessLabel"), "Success_Message");
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("SuccessLabel"), "Success_Message","Success_Message",1);
				break;
				case "step59": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("reg_CloseBtn"), "Close_Button");
				break;
				case "step60": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("txtNewRegistration"), "txtNewRegistration");
				break;
				case "step61": stepStatus[step] = setScrollBarOFF("NOR_Registration");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void NOR_Validate_pwd_Reset(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=15;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step6": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step7": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("edit_RegBtn"), "edit_RegBtn");
				break;
				case "step8": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("edit_RegBtn"), "edit_RegBtn");
				break;
				case "step9": stepStatus[step] = WebElementClick(registration_NOR.Registration_Page("btnReset"), "Reset");
				break;
				case "step10": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("resetPassMsg"), "Reset_Alert_Mesage");
				break;
				case "step11": stepStatus[step] = waitUntilDisappear(registration_NOR.Registration_Page("rotateElement"), "Reset_Alert_Mesage");
				break;
				case "step12": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("resetPassMsg"), "Reset Alert", "Alert_Message", 1);
				break;
				case "step13": stepStatus[step] = WebElementClick(registration_NOR.Registration_Page("btnSendPassword"), "btnSendPassword");
				break;
				case "step14": stepStatus[step] = waitUntilDisappear(registration_NOR.Registration_Page("rotateElement"), "rotateElement");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("SendPasswordsMsg"), "SendPasswordsMsg", "Alert_Message_1", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Validate_EXIBS_Servicedown(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=37;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = WebRadioSelect(registration_NOR.Registration_Page("withoutPersonalOptions"), "Options","Without Personal");
				break;
				case "step2": stepStatus[step] = WebListSelect(registration_NOR.Registration_Page("TypeofID_WOP"), "Type_of_ID","Type_of_ID",1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("PersonalInformation_WOP"), "PersonalInformation","Personal_Number",1);
				break;
				case "step4": stepStatus[step] = WebListSelect(registration_NOR.Registration_Page("ddlTitle"), "Title","Title",1);
				break;
				case "step5": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("FirstName"), "FirstName","FirstName",1);
				break;
				case "step6": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("LastName"), "LastName","LastName",1);
				break;
				case "step7": stepStatus[step] = javaScriptDatePicker(registration_NOR.Registration_Page("DOB"), "DateOfBirth", "DOB", 1);
				break;
				case "step8": stepStatus[step] = WebListSelect(registration_NOR.Registration_Page("CountryName"), "Country","Country",1);
				break;
				case "step9": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("PostCode"), "Postcode","Postcode",1);
				break;
				case "step10": stepStatus[step] = WebButtonClick(registration_NOR.Registration_Page("btnFindAddress"), "Find_Address");
				break;
				case "step11": stepStatus[step] = waitUntilListLoads(registration_NOR.Registration_Page("ddlCity"), "ddlCity");
				break;
				case "step12": stepStatus[step] = WebListSelectByValue(registration_NOR.Registration_Page("ddlCity"), "ddlCity","City",1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("ApartmentNumber"), "ApartmentNumber","ApartmentNumber",1);
				break;
				case "step14": stepStatus[step] = waitUntilListLoads(registration_NOR.Registration_Page("ddlStreet"), "ddlStreet");
				break;
				case "step15": stepStatus[step] = WebListSelectByValue(registration_NOR.Registration_Page("ddlStreet"), "StreetName","StreetName",1);
				break;
				case "step16": stepStatus[step] = waitUntilListLoads(registration_NOR.Registration_Page("HouseNumber"), "HouseNumber");
				break;
				case "step17": stepStatus[step] = WebListSelectByValue(registration_NOR.Registration_Page("HouseNumber"), "HouseNumber","HouseNo",1);
				break;
				case "step18": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("txtSimCardNumber"), "SimCardNumber","SimCardNumber",1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("RetailerID"), "RetailerID","Retailer_ID",1);
				break;
				case "step20": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("EmailID"), "EmailID","Email",1);
				break;
				case "step21": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("Contact"), "Contact","Contact",1);
				break;
				case "step22": stepStatus[step] = WebListSelect(registration_NOR.Registration_Page("ddLanguage"), "ddLanguage","LanguageCode",1);
				break;
				case "step23": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("RetailerID"), "RetailerID","Retailer_ID",1);
				break;
				case "step24": stepStatus[step] = WebElementValueCompare(registration_NOR.Registration_Page("LycaMobileMSISDN"), "LycaMobile","LycaMobile",1);
				break;
				case "step25": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("Contact"), "Contact","Contact",1);
				break;
				case "step26": stepStatus[step] = WebCheckboxON(registration_NOR.Registration_Page("chkboxTermsAndCondition"), "ReadAndAgreeTerms");
				break;
				case "step27": stepStatus[step] = ScrollIntoElement(registration_NOR.Registration_Page("Next_button"), "Next_button");
				break;
				case "step28": stepStatus[step] = WebButtonClick(registration_NOR.Registration_Page("Next_button"), "Next_button");
				break;
				case "step29": stepStatus[step] = ScrollIntoElement(registration_NOR.Registration_Page("lblTitleText"), "lblTitleText");
				break;
				case "step30": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("lblTitleText"), "lblTitleText");
				break;
				case "step31": stepStatus[step] = ScrollIntoElement(registration_NOR.Registration_Page("Submit_button"), "Submit_button");
				break;
				case "step32": stepStatus[step] = WebButtonClick(registration_NOR.Registration_Page("Submit_button"), "Submit_button");
				break;
				case "step33": stepStatus[step] = ScrollIntoElement(registration_NOR.Registration_Page("SuccessLabel"), "SuccessLabel");
				break;
				case "step34": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("SuccessLabel"), "Success_Message");
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("SuccessLabel"), "Alert_Message","Alert_Message",1);
				break;
				case "step36": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("reg_CloseBtn"), "Close_Button");
				break;
				case "step37": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("txtNewRegistration"), "txtNewRegistration");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Go_To_RegistrationPage(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=6;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("txtNewRegistration"), "New Subscriber TextBox");
				break;
				case "step3": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("txtNewRegistration"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("btnNewRegister"), "Register Button");
				break;
				case "step5": stepStatus[step] = pageLoadCheck();
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("withPersonalOptions"), "Options");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void ValidateInvalidPassword(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=10;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = LaunchApplication("URL",1);
				break;
				case "step2": stepStatus[step] = pageLoadCheck();
				break;
				case "step3": stepStatus[step] = waitUntilExist(cRM_Login_Page.Login_Page("txtbox_UserName"), "Username");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(cRM_Login_Page.Login_Page("txtbox_UserName"),"Login_User_ID", "CSUser", 1);
				break;
				case "step5": stepStatus[step] = WebEditEnterText(cRM_Login_Page.Login_Page("txtbox_UserName"),"Login_User_ID", "Admin_User_ID", 1);
				break;
				case "step6": stepStatus[step] = WebEditEnterText(cRM_Login_Page.Login_Page("txtbox_Password"), "Login_Password","Login_Password", 1);  
				break;
				case "step7": stepStatus[step] = WebElementClick(cRM_Login_Page.Login_Page("btn_LogIn"), "Login");
				break;
				case "step8": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("txtLoginError"), "LoginError");
				break;
				case "step9": stepStatus[step] = waitUntilDisappear(registration_NOR.Registration_Page("rotateElement"), "rotateElement");
				break;
				case "step10": stepStatus[step] = WebElementTextCompare(registration_NOR.Registration_Page("txtLoginError"), "LoginError", "Alert_Message", 1);
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Pre_RRBS_OnlineTopup(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=2;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = RRBSDBUpdate("TABLE_RRBS_SUBSCRIBER_PROFILE","ACCT_BALANCE_COLUMN_NAME","ACCT_BALANCE_COLUMN_VALUE","RRBS_UPDATE_CONDITION",1);
				break;
				case "step2": stepStatus[step] = RRBSDBDelete("TABLE_RRBS_POS_TOPUP","RRBS_DELETE_CONDITION",1);
				break;

				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Do_Online_Topup(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=46;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("topUp_Button"), "TopUp_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("online_TopUp_Button"), "online_TopUp_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("topupAmount_Dropdown"), "Topup Amount Dropdown");
				break;
				case "step10": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("topupAmount_Dropdown"), "Topup Amount Dropdown", "TopupAmount", 1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("email_TextBox"), "Email", "Email", 1);
				break;
				case "step12": stepStatus[step] = WebRadioSelect(online_TopUp.Online_TopUp_Page("newCard_rdButton"), "Payment Using", "New Card");
				break;
				case "step13": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "CardType Dropdown");
				break;
				case "step14": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "CardType Dropdown", "CardType", 1);
				break;
				case "step15": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Card Name");
				break;
				case "step16": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Card Name", "CardName", 1);
				break;
				case "step17": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber1_TextBox"), "Card 1st 4 Number", "Card_Number1", 1);
				break;
				case "step18": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber2_TextBox"), "Card 2nd 4 Number", "Card_Number2", 1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber3_TextBox"), "Card 3rd 4 Number", "Card_Number3", 1);
				break;
				case "step20": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber4_TextBox"), "Card 4th 4 Number", "Card_Number4", 1);
				break;
				case "step21": stepStatus[step] = javaScriptDatePicker(online_TopUp.Online_TopUp_Page("expiryDate_TextBox"), "Expiry Date", "Expiry_Date", 1);
				break;
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV Number");
				break;
				case "step23": stepStatus[step] = javaScriptEnterText(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV Number", "CVV_Number", 1);
				break;
				case "step24": stepStatus[step] = WebEditClickAndEnterText(online_TopUp.Online_TopUp_Page("postcode_TextBox"), "PostCode", "PostCode", 1);
				break;
				case "step25": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("searchIcon_Button"), "Search Button");
				break;
				case "step26": stepStatus[step] = waitUntilDisappear(online_TopUp.Online_TopUp_Page("loadAddress_Icon"), "Load Address Icon");
				break;
				case "step27": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("addressList_TextBox"), "Address List", "AddressList_Select", 1);
				break;
				case "step28": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("OKIcon_Button"), "OK Button");
				break;
				case "step29": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("houseNo_Textbox"), "houseNo_Textbox");
				break;
				case "step30": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("houseNo_Textbox"), "houseNo_Textbox", "ApartmentNo", 1);
				break;
				case "step31": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step32": stepStatus[step] = WaitUntilElementClickable(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step33": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step34": stepStatus[step] = pageLoadCheck();
				break;
				case "step35": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("okBtn_Button"), "OK Button");
				break;
				case "step36": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("okBtn_Button"), "OK Button");
				break;
				case "step37": stepStatus[step] = pageLoadCheck();
				break;
				case "step38": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("UpdateSuccessMessage"), "UpdateSuccessMessage");
				break;
				case "step39": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("responseMsg_Button"), "Response Message");
				break;
				case "step40": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("responseMsg_Button"), "Response Message","Response_Message",1);
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("Amount_Label"), "Amount","SuccessAmount",1);
				break;
				case "step42": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.Online_TopUp_Page("ReferenceNo_Label"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step43": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.Online_TopUp_Page("ReferenceNo_Label"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step44": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.Online_TopUp_Page("TransactionNo_Label"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step45": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.Online_TopUp_Page("TransactionNo_Label"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step46": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Do_Online_Topup_VAT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=49;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("topUp_Button"), "TopUp_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("online_TopUp_Button"), "online_TopUp_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("topupAmount_Dropdown"), "Topup Amount Dropdown");
				break;
				case "step10": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("topupAmount_Dropdown"), "Topup Amount Dropdown", "TopupAmount", 1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("email_TextBox"), "Email", "Email", 1);
				break;
				case "step12": stepStatus[step] = WebRadioSelect(online_TopUp.Online_TopUp_Page("newCard_rdButton"), "Payment Using", "New Card");
				break;
				case "step13": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "CardType Dropdown");
				break;
				case "step14": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "CardType Dropdown", "CardType", 1);
				break;
				case "step15": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Card Name");
				break;
				case "step16": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Card Name", "CardName", 1);
				break;
				case "step17": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber1_TextBox"), "Card 1st 4 Number", "Card_Number1", 1);
				break;
				case "step18": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber2_TextBox"), "Card 2nd 4 Number", "Card_Number2", 1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber3_TextBox"), "Card 3rd 4 Number", "Card_Number3", 1);
				break;
				case "step20": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber4_TextBox"), "Card 4th 4 Number", "Card_Number4", 1);
				break;
				case "step21": stepStatus[step] = javaScriptDatePicker(online_TopUp.Online_TopUp_Page("expiryDate_TextBox"), "Expiry Date", "Expiry_Date", 1);
				break;
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV Number");
				break;
				case "step23": stepStatus[step] = javaScriptEnterText(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV Number", "CVV_Number", 1);
				break;
				case "step24": stepStatus[step] = WebEditClickAndEnterText(online_TopUp.Online_TopUp_Page("postcode_TextBox"), "PostCode", "PostCode", 1);
				break;
				case "step25": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("searchIcon_Button"), "Search Button");
				break;
				case "step26": stepStatus[step] = waitUntilDisappear(online_TopUp.Online_TopUp_Page("loadAddress_Icon"), "Load Address Icon");
				break;
				case "step27": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("addressList_TextBox"), "Address List", "AddressList_Select", 1);
				break;
				case "step28": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("OKIcon_Button"), "OK Button");
				break;
				case "step29": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("houseNo_Textbox"), "houseNo_Textbox");
				break;
				case "step30": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("houseNo_Textbox"), "houseNo_Textbox", "ApartmentNo", 1);
				break;
				case "step31": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step32": stepStatus[step] = WaitUntilElementClickable(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step33": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step34": stepStatus[step] = pageLoadCheck();
				break;
				case "step35": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("okBtn_Button"), "okBtn_Button");
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("txtpaymentAmount"), "PaymentAmount","PaymentAmount",1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("txtvatamount"), "VATAmount","VATAmount",1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("txtTotalPayAmount"), "TotalPayAmount","TotalPayAmount",1);
				break;
				case "step39": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("okBtn_Button"), "OK Button");
				break;
				case "step40": stepStatus[step] = pageLoadCheck();
				break;
				case "step41": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("UpdateSuccessMessage"), "UpdateSuccessMessage");
				break;
				case "step42": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("responseMsg_Button"), "Response Message");
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("responseMsg_Button"), "Response Message","Response_Message",1);
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("Amount_Label"), "Amount","SuccessAmount",1);
				break;
				case "step45": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.Online_TopUp_Page("ReferenceNo_Label"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step46": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.Online_TopUp_Page("ReferenceNo_Label"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step47": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.Online_TopUp_Page("TransactionNo_Label"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step48": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.Online_TopUp_Page("TransactionNo_Label"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step49": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Post_OnlineTopup_AuthorizeNet(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=69;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1" : stepStatus[step] = SQLDBSelect("TBL_MSTCUSTOMER","ISAUTOTOPUP_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSTCUSTOMER_ISAUTOTOPUP_EXPECTED_VALUE",1);
				break;
				case "step2" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","ISAUTOTOPUP_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSTTOPUP_ISAUTOTOPUP_EXPECTED_VALUE",1);
				break;
				case "step3" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","MSISDN_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSISDN_COLUMN_VALUE",1);
				break;
				case "step4" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TOPUPAMOUNT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TOPUPAMOUNT_COLUMN_VALUE",1);
				break;
				case "step5" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","CARDID_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","CARDID_COLUMN_VALUE",1);
				break;
				case "step6" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TOPUPMODE_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TOPUPMODE_COLUMN_VALUE",1);
				break;
				case "step7" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","STATUS_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","STATUS_COLUMN_VALUE",1);
				break;
				case "step8" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","ERRORDESC_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","ERRORDESC_COLUMN_VALUE",1);
				break;
				case "step9" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","MSISDN_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSISDN_COLUMN_VALUE",1);
				break;
				case "step10" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TAXAMT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TAXAMT_COLUMN_VALUE",1);
				break;
				case "step11" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","VATAMT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","VATAMT_COLUMN_VALUE",1);
				break;
				case "step12" : stepStatus[step] = SQLDBSelectFromEnv("TBL_MSTTOPUP","DYNAMIC_TRANSACTIONID_CONDITION","MSTCUSTOMER_SELECT_CONDITION","Transaction_Number",1);
				break;
				case "step13" : stepStatus[step] = SQLDBSelectFromEnv("TBL_MSTTOPUP","DYNAMIC_REDORDERID_CONDITION","MSTCUSTOMER_SELECT_CONDITION","Reference_Number",1);
				break;
				case "step14" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMOCODE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMOCODE",1);
				break;
				case "step15" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMOTYPE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMOTYPE",1);
				break;
				case "step16" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMODISCOUNTTYPE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMODISCOUNTTYPE",1);
				break;
				case "step17" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMODISCOUNTAMOUNT","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMODISCOUNTAMOUNT",1);
				break;
				case "step18" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_SUBTRANSACTIONID","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_SUBTRANSACTIONID",1);
				break;
				case "step19" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_VATTRANSID","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_VATTRANSID",1);
				break;
				case "step20" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_VATPERC","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_VATPERC",1);
				break;
				case "step21" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_TOTALDISCOUNT","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_TOTALDISCOUNT",1);
				break;
				case "step22" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","USERCARDDET_ISAUTOTOPUP_COLUMN_NAME","SUBSCRIBERID_CONDITION","USERCARDDET_ISAUTOTOPUP_COLUMN_VALUE",1);
				break;
				case "step23" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","NAMEONCARD_COLUMN_NAME","SUBSCRIBERID_CONDITION","NAMEONCARD_COLUMN_VALUE",1);
				break;
				case "step24" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CARDISSUENUMBER_COLUMN_NAME","SUBSCRIBERID_CONDITION","CARDISSUENUMBER_COLUMN_VALUE",1);
				break;
				case "step25" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","HOUSENUMBER_COLUMN_NAME","SUBSCRIBERID_CONDITION","HOUSENUMBER_COLUMN_VALUE",1);
				break;
				case "step26" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","ADDRESSLINE1_COLUMN_NAME","SUBSCRIBERID_CONDITION","ADDRESSLINE1_COLUMN_VALUE",1);
				break;
				case "step27" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CITY_COLUMN_NAME","SUBSCRIBERID_CONDITION","CITY_COLUMN_VALUE",1);
				break;
				case "step28" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COUNTY_COLUMN_NAME","SUBSCRIBERID_CONDITION","COUNTY_COLUMN_VALUE",1);
				break;
				case "step29" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COUNTRY_COLUMN_NAME","SUBSCRIBERID_CONDITION","COUNTRY_COLUMN_VALUE",1);
				break;
				case "step30" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","POSTCODE_COLUMN_NAME","SUBSCRIBERID_CONDITION","POSTCODE_COLUMN_VALUE",1);
				break;
				case "step31" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","EMAIL_COLUMN_NAME","SUBSCRIBERID_CONDITION","EMAIL_COLUMN_VALUE",1);
				break;
				case "step32" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","NICKNAME_COLUMN_NAME","SUBSCRIBERID_CONDITION","NICKNAME_COLUMN_VALUE",1);
				break;
				case "step33" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CARDSTARTDATE_COLUMN_NAME","SUBSCRIBERID_CONDITION","CARDSTARTDATE_COLUMN_VALUE",1);
				break;
				case "step34" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CARDEXPIRYDATE_COLUMN_NAME","SUBSCRIBERID_CONDITION","CARDEXPIRYDATE_COLUMN_VALUE",1);
				break;
				case "step35" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_PREVIOUSMERCHANTCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_PREVIOUSMERCHANTCODE",1);
				break;
				case "step36" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_PREVIOUSORDERID","SUBSCRIBERID_CONDITION","COLUMNVALUE_PREVIOUSORDERID",1);
				break;
				case "step37" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_GATEWAYID","SUBSCRIBERID_CONDITION","COLUMNVALUE_GATEWAYID",1);
				break;
				case "step38" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_MOBILENUMBER","SUBSCRIBERID_CONDITION","COLUMNVALUE_MOBILENUMBER",1);
				break;
				case "step39" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_CONTACTNUMBER","SUBSCRIBERID_CONDITION","COLUMNVALUE_CONTACTNUMBER",1);
				break;
				case "step40" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","AUTHNET_AMOUNT_COLUMN_NAME","SUBSCRIBERID_CONDITION","AUTHNET_AMOUNT_COLUMN_VALUE",1);
				break;
				case "step41" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","ORDERDESC_COLUMN_NAME","SUBSCRIBERID_CONDITION","ORDERDESC_COLUMN_VALUE",1);
				break;
				case "step42" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","ITEMUNITPRICE_COLUMN_NAME","SUBSCRIBERID_CONDITION","ITEMUNITPRICE_COLUMN_VALUE",1);
				break;
				case "step43" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","STATUS_TEXT_COLUMN_NAME","SUBSCRIBERID_CONDITION","STATUS_TEXT_COLUMN_VALUE",1);
				break;
				case "step44" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","AUTH_TAXID_COLUMN_NAME","SUBSCRIBERID_CONDITION","AUTH_TAXID_COLUMN_VALUE",1);
				break;
				case "step45" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","AUTH_VATID_COLUMN_NAME","SUBSCRIBERID_CONDITION","AUTH_VATID_COLUMN_VALUE",1);
				break;
				case "step46" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","SUBSCRIBERID_COLUMN_NAME","SUBSCRIBERID_CONDITION","SUBSCRIBERID_COLUMN_VALUE",1);
				break;
				case "step47" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_AUTHORIZENET","DYNAMIC_TRANSID_CONDITION","SUBSCRIBERID_CONDITION","TRANSACTION_ID",1);
				break;
				case "step48" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_AUTHORIZENET","AUTH_INVOICENUMBER_CONDITION","SUBSCRIBERID_CONDITION","INVOICENUMBER",1);
				break;
				case "step49" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tbleShopTransactionStatus","DYNAMIC_TRANSACTIONID_CONDITION","SUBSCRIBERID_CONDITION","TRANSACTION_ID",1);
				break;
				case "step50" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tbleShopTransactionStatus","DYNAMIC_ORDER_ID","SUBSCRIBERID_CONDITION","INVOICENUMBER",1);
				break;
				case "step51" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_GATEWAYID","SUBSCRIBERID_CONDITION","COLUMNVALUE_GATEWAYID",1);
				break;
				case "step52" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_AMOUNT","SUBSCRIBERID_CONDITION","COLUMNVALUE_AMOUNT",1);
				break;
				case "step53" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_TIMEONFILE","SUBSCRIBERID_CONDITION","COLUMNVALUE_TIMEONFILE",1);
				break;
				case "step54" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_REFUNDAMOUNT","SUBSCRIBERID_CONDITION","COLUMNVALUE_REFUNDAMOUNT",1);
				break;
				case "step55" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_TRANSACTIONTYPE","SUBSCRIBERID_CONDITION","COLUMNVALUE_TRANSACTIONTYPE",1);
				break;
				case "step56" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_ITEMQUANTITY","SUBSCRIBERID_CONDITION","COLUMNVALUE_ITEMQUANTITY",1);
				break;
				case "step57" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_ALLOWPARTIALAUTH","SUBSCRIBERID_CONDITION","COLUMNVALUE_ALLOWPARTIALAUTH",1);
				break;
				case "step58" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_DUPLICATEWINDOW","SUBSCRIBERID_CONDITION","COLUMNVALUE_DUPLICATEWINDOW",1);
				break;
				case "step59" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_CUSTOMER","SUBSCRIBERID_CONDITION","COLUMNVALUE_CUSTOMER",1);
				break;
				case "step60" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_RECURRINGBILLING","SUBSCRIBERID_CONDITION","COLUMNVALUE_RECURRINGBILLING",1);
				break;
				case "step61" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_TESTREQUEST","SUBSCRIBERID_CONDITION","COLUMNVALUE_TESTREQUEST",1);
				break;
				case "step62" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_USERFIELDNAME1","SUBSCRIBERID_CONDITION","COLUMNVALUE_USERFIELDNAME1",1);
				break;
				case "step63" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_USERFIELDVALUE1","SUBSCRIBERID_CONDITION","COLUMNVALUE_USERFIELDVALUE1",1);
				break;
				case "step64" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_USERFIELDNAME2","SUBSCRIBERID_CONDITION","COLUMNVALUE_USERFIELDNAME2",1);
				break;
				case "step65" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_USERFIELDVALUE2","SUBSCRIBERID_CONDITION","COLUMNVALUE_USERFIELDVALUE2",1);
				break;
				case "step66" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_RESULTCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_RESULTCODE",1);
				break;
				case "step67" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_STATUSCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_STATUSCODE",1);
				break;
				case "step68" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_RESPONSECODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_RESPONSECODE",1);
				break;
				case "step69" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","ORDERDESC_COLUMN_NAME","SUBSCRIBERID_CONDITION","ORDERDESC_COLUMN_VALUE_2",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Post_OnlineTopup_AuthNet_VAT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=68;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1" : stepStatus[step] = SQLDBSelect("TBL_MSTCUSTOMER","ISAUTOTOPUP_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSTCUSTOMER_ISAUTOTOPUP_EXPECTED_VALUE",1);
				break;
				case "step2" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","ISAUTOTOPUP_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSTTOPUP_ISAUTOTOPUP_EXPECTED_VALUE",1);
				break;
				case "step3" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","MSISDN_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSISDN_COLUMN_VALUE",1);
				break;
				case "step4" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TOPUPAMOUNT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TOPUPAMOUNT_COLUMN_VALUE",1);
				break;
				case "step5" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","CARDID_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","CARDID_COLUMN_VALUE",1);
				break;
				case "step6" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TOPUPMODE_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TOPUPMODE_COLUMN_VALUE",1);
				break;
				case "step7" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","STATUS_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","STATUS_COLUMN_VALUE",1);
				break;
				case "step8" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","ERRORDESC_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","ERRORDESC_COLUMN_VALUE",1);
				break;
				case "step9" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","MSISDN_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSISDN_COLUMN_VALUE",1);
				break;
				case "step10" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TAXAMT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TAXAMT_COLUMN_VALUE",1);
				break;
				case "step11" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","VATAMT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","VATAMT_COLUMN_VALUE",1);
				break;
				case "step12" : stepStatus[step] = SQLDBSelectFromEnv("TBL_MSTTOPUP","DYNAMIC_TRANSACTIONID_CONDITION","MSTCUSTOMER_SELECT_CONDITION","Transaction_Number",1);
				break;
				case "step13" : stepStatus[step] = SQLDBSelectFromEnv("TBL_MSTTOPUP","DYNAMIC_REDORDERID_CONDITION","MSTCUSTOMER_SELECT_CONDITION","Reference_Number",1);
				break;
				case "step14" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMOCODE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMOCODE",1);
				break;
				case "step15" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMOTYPE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMOTYPE",1);
				break;
				case "step16" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMODISCOUNTTYPE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMODISCOUNTTYPE",1);
				break;
				case "step17" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMODISCOUNTAMOUNT","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMODISCOUNTAMOUNT",1);
				break;
				case "step18" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_SUBTRANSACTIONID","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_SUBTRANSACTIONID",1);
				break;
				case "step19" : stepStatus[step] = storeSQLDBValueInEnv("TBL_MSTTOPUP","COLUMNNAME_VATTRANSID","MSTCUSTOMER_SELECT_CONDITION","VAT_TRANSACTIONID",1);
				break;
				case "step20" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_VATPERC","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_VATPERC",1);
				break;
				case "step21" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_TOTALDISCOUNT","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_TOTALDISCOUNT",1);
				break;
				case "step22" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","USERCARDDET_ISAUTOTOPUP_COLUMN_NAME","SUBSCRIBERID_CONDITION","USERCARDDET_ISAUTOTOPUP_COLUMN_VALUE",1);
				break;
				case "step23" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","NAMEONCARD_COLUMN_NAME","SUBSCRIBERID_CONDITION","NAMEONCARD_COLUMN_VALUE",1);
				break;
				case "step24" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CARDISSUENUMBER_COLUMN_NAME","SUBSCRIBERID_CONDITION","CARDISSUENUMBER_COLUMN_VALUE",1);
				break;
				case "step25" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","HOUSENUMBER_COLUMN_NAME","SUBSCRIBERID_CONDITION","HOUSENUMBER_COLUMN_VALUE",1);
				break;
				case "step26" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","ADDRESSLINE1_COLUMN_NAME","SUBSCRIBERID_CONDITION","ADDRESSLINE1_COLUMN_VALUE",1);
				break;
				case "step27" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CITY_COLUMN_NAME","SUBSCRIBERID_CONDITION","CITY_COLUMN_VALUE",1);
				break;
				case "step28" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COUNTY_COLUMN_NAME","SUBSCRIBERID_CONDITION","COUNTY_COLUMN_VALUE",1);
				break;
				case "step29" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COUNTRY_COLUMN_NAME","SUBSCRIBERID_CONDITION","COUNTRY_COLUMN_VALUE",1);
				break;
				case "step30" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","POSTCODE_COLUMN_NAME","SUBSCRIBERID_CONDITION","POSTCODE_COLUMN_VALUE",1);
				break;
				case "step31" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","EMAIL_COLUMN_NAME","SUBSCRIBERID_CONDITION","EMAIL_COLUMN_VALUE",1);
				break;
				case "step32" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","NICKNAME_COLUMN_NAME","SUBSCRIBERID_CONDITION","NICKNAME_COLUMN_VALUE",1);
				break;
				case "step33" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CARDSTARTDATE_COLUMN_NAME","SUBSCRIBERID_CONDITION","CARDSTARTDATE_COLUMN_VALUE",1);
				break;
				case "step34" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CARDEXPIRYDATE_COLUMN_NAME","SUBSCRIBERID_CONDITION","CARDEXPIRYDATE_COLUMN_VALUE",1);
				break;
				case "step35" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_PREVIOUSMERCHANTCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_PREVIOUSMERCHANTCODE",1);
				break;
				case "step36" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_PREVIOUSORDERID","SUBSCRIBERID_CONDITION","COLUMNVALUE_PREVIOUSORDERID",1);
				break;
				case "step37" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_GATEWAYID","SUBSCRIBERID_CONDITION","COLUMNVALUE_GATEWAYID",1);
				break;
				case "step38" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_MOBILENUMBER","SUBSCRIBERID_CONDITION","COLUMNVALUE_MOBILENUMBER",1);
				break;
				case "step39" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_CONTACTNUMBER","SUBSCRIBERID_CONDITION","COLUMNVALUE_CONTACTNUMBER",1);
				break;
				case "step40" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","AUTHNET_AMOUNT_COLUMN_NAME","SUBSCRIBERID_CONDITION","AUTHNET_AMOUNT_COLUMN_VALUE",1);
				break;
				case "step41" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","ORDERDESC_COLUMN_NAME","SUBSCRIBERID_CONDITION","ORDERDESC_COLUMN_VALUE",1);
				break;
				case "step42" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","ITEMUNITPRICE_COLUMN_NAME","SUBSCRIBERID_CONDITION","ITEMUNITPRICE_COLUMN_VALUE",1);
				break;
				case "step43" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","STATUS_TEXT_COLUMN_NAME","SUBSCRIBERID_CONDITION","STATUS_TEXT_COLUMN_VALUE",1);
				break;
				case "step44" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","AUTH_TAXID_COLUMN_NAME","SUBSCRIBERID_CONDITION","AUTH_TAXID_COLUMN_VALUE",1);
				break;
				case "step45" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_AUTHORIZENET","AUTH_VATID_COLUMN_NAME","SUBSCRIBERID_CONDITION","VAT_TRANSACTIONID",1);
				break;
				case "step46" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","SUBSCRIBERID_COLUMN_NAME","SUBSCRIBERID_CONDITION","SUBSCRIBERID_COLUMN_VALUE",1);
				break;
				case "step47" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_AUTHORIZENET","DYNAMIC_TRANSID_CONDITION","SUBSCRIBERID_CONDITION","TRANSACTION_ID",1);
				break;
				case "step48" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_AUTHORIZENET","AUTH_INVOICENUMBER_CONDITION","SUBSCRIBERID_CONDITION","INVOICENUMBER",1);
				break;
				case "step49" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tbleShopTransactionStatus","DYNAMIC_TRANSACTIONID_CONDITION","SUBSCRIBERID_CONDITION","TRANSACTION_ID",1);
				break;
				case "step50" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tbleShopTransactionStatus","DYNAMIC_ORDER_ID","SUBSCRIBERID_CONDITION","INVOICENUMBER",1);
				break;
				case "step51" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_GATEWAYID","SUBSCRIBERID_CONDITION","COLUMNVALUE_GATEWAYID",1);
				break;
				case "step52" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_AMOUNT","SUBSCRIBERID_CONDITION","COLUMNVALUE_AMOUNT",1);
				break;
				case "step53" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_TIMEONFILE","SUBSCRIBERID_CONDITION","COLUMNVALUE_TIMEONFILE",1);
				break;
				case "step54" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_REFUNDAMOUNT","SUBSCRIBERID_CONDITION","COLUMNVALUE_REFUNDAMOUNT",1);
				break;
				case "step55" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_TRANSACTIONTYPE","SUBSCRIBERID_CONDITION","COLUMNVALUE_TRANSACTIONTYPE",1);
				break;
				case "step56" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_ITEMQUANTITY","SUBSCRIBERID_CONDITION","COLUMNVALUE_ITEMQUANTITY",1);
				break;
				case "step57" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_ALLOWPARTIALAUTH","SUBSCRIBERID_CONDITION","COLUMNVALUE_ALLOWPARTIALAUTH",1);
				break;
				case "step58" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_DUPLICATEWINDOW","SUBSCRIBERID_CONDITION","COLUMNVALUE_DUPLICATEWINDOW",1);
				break;
				case "step59" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_CUSTOMER","SUBSCRIBERID_CONDITION","COLUMNVALUE_CUSTOMER",1);
				break;
				case "step60" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_RECURRINGBILLING","SUBSCRIBERID_CONDITION","COLUMNVALUE_RECURRINGBILLING",1);
				break;
				case "step61" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_TESTREQUEST","SUBSCRIBERID_CONDITION","COLUMNVALUE_TESTREQUEST",1);
				break;
				case "step62" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_USERFIELDNAME1","SUBSCRIBERID_CONDITION","COLUMNVALUE_USERFIELDNAME1",1);
				break;
				case "step63" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_USERFIELDVALUE1","SUBSCRIBERID_CONDITION","COLUMNVALUE_USERFIELDVALUE1",1);
				break;
				case "step64" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_USERFIELDNAME2","SUBSCRIBERID_CONDITION","COLUMNVALUE_USERFIELDNAME2",1);
				break;
				case "step65" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_USERFIELDVALUE2","SUBSCRIBERID_CONDITION","COLUMNVALUE_USERFIELDVALUE2",1);
				break;
				case "step66" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_RESULTCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_RESULTCODE",1);
				break;
				case "step67" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_STATUSCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_STATUSCODE",1);
				break;
				case "step68" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_RESPONSECODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_RESPONSECODE",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Pre_OnlineTopup_MVNO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=2;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBDelete("TBL_MSTTOPUP","MSTTOPUP_DELETE_CONDITION",1);
				break;
				case "step2": stepStatus[step] = SQLDBUpdate("TBL_MSTCUSTOMER","ISAUTOTOPUP_COLUMN_NAME","ISAUTOTOPUP_COLUMN_VALUE","MSTCUSTOMER_UPDATE_CONDITION",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void EshopSQLDB_Update(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = EshopSQLDBUpdate("TABLE_NAME","COLUMN_NAME","COLUMN_VALUE","CONDITION",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Post_OnlineTopup_WorldPay(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=53;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1" : stepStatus[step] = SQLDBSelect("TBL_MSTCUSTOMER","ISAUTOTOPUP_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSTCUSTOMER_ISAUTOTOPUP_EXPECTED_VALUE",1);
				break;
				case "step2" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","ISAUTOTOPUP_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSTTOPUP_ISAUTOTOPUP_EXPECTED_VALUE",1);
				break;
				case "step3" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","MSISDN_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSISDN_COLUMN_VALUE",1);
				break;
				case "step4" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TOPUPAMOUNT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TOPUPAMOUNT_COLUMN_VALUE",1);
				break;
				case "step5" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","CARDID_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","CARDID_COLUMN_VALUE",1);
				break;
				case "step6" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TOPUPMODE_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TOPUPMODE_COLUMN_VALUE",1);
				break;
				case "step7" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","STATUS_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","STATUS_COLUMN_VALUE",1);
				break;
				case "step8" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","ERRORDESC_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","ERRORDESC_COLUMN_VALUE",1);
				break;
				case "step9" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","MSISDN_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSISDN_COLUMN_VALUE",1);
				break;
				case "step10" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TAXAMT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TAXAMT_COLUMN_VALUE",1);
				break;
				case "step11" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","VATAMT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","VATAMT_COLUMN_VALUE",1);
				break;
				case "step12" : stepStatus[step] = SQLDBSelectFromEnv("TBL_MSTTOPUP","DYNAMIC_TRANSACTIONID_CONDITION","MSTCUSTOMER_SELECT_CONDITION","Transaction_Number",1);
				break;
				case "step13" : stepStatus[step] = SQLDBSelectFromEnv("TBL_MSTTOPUP","DYNAMIC_REDORDERID_CONDITION","MSTCUSTOMER_SELECT_CONDITION","Reference_Number",1);
				break;
				case "step14" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","USERCARDDET_ISAUTOTOPUP_COLUMN_NAME","SUBSCRIBERID_CONDITION","USERCARDDET_ISAUTOTOPUP_COLUMN_VALUE",1);
				break;
				case "step15" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","NAMEONCARD_COLUMN_NAME","SUBSCRIBERID_CONDITION","NAMEONCARD_COLUMN_VALUE",1);
				break;
				case "step16" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CARDISSUENUMBER_COLUMN_NAME","SUBSCRIBERID_CONDITION","CARDISSUENUMBER_COLUMN_VALUE",1);
				break;
				case "step17" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","HOUSENUMBER_COLUMN_NAME","SUBSCRIBERID_CONDITION","HOUSENUMBER_COLUMN_VALUE",1);
				break;
				case "step18" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","ADDRESSLINE1_COLUMN_NAME","SUBSCRIBERID_CONDITION","ADDRESSLINE1_COLUMN_VALUE",1);
				break;
				case "step19" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CITY_COLUMN_NAME","SUBSCRIBERID_CONDITION","CITY_COLUMN_VALUE",1);
				break;
				case "step20" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COUNTY_COLUMN_NAME","SUBSCRIBERID_CONDITION","COUNTY_COLUMN_VALUE",1);
				break;
				case "step21" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COUNTRY_COLUMN_NAME","SUBSCRIBERID_CONDITION","COUNTRY_COLUMN_VALUE",1);
				break;
				case "step22" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","POSTCODE_COLUMN_NAME","SUBSCRIBERID_CONDITION","POSTCODE_COLUMN_VALUE",1);
				break;
				case "step23" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","EMAIL_COLUMN_NAME","SUBSCRIBERID_CONDITION","EMAIL_COLUMN_VALUE",1);
				break;
				case "step24" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","NICKNAME_COLUMN_NAME","SUBSCRIBERID_CONDITION","NICKNAME_COLUMN_VALUE",1);
				break;
				case "step25" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CARDSTARTDATE_COLUMN_NAME","SUBSCRIBERID_CONDITION","CARDSTARTDATE_COLUMN_VALUE",1);
				break;
				case "step26" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CARDEXPIRYDATE_COLUMN_NAME","SUBSCRIBERID_CONDITION","CARDEXPIRYDATE_COLUMN_VALUE",1);
				break;
				case "step27" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_PREVIOUSMERCHANTCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_PREVIOUSMERCHANTCODE",1);
				break;
				case "step28" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_USERCARDDETAILS","COLUMNNAME_PREVIOUSORDERID","SUBSCRIBERID_CONDITION","Reference_Number",1);
				break;
				case "step29" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_GATEWAYID","SUBSCRIBERID_CONDITION","COLUMNVALUE_GATEWAYID",1);
				break;
				case "step30" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_MOBILENUMBER","SUBSCRIBERID_CONDITION","COLUMNVALUE_MOBILENUMBER",1);
				break;
				case "step31" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_CONTACTNUMBER","SUBSCRIBERID_CONDITION","COLUMNVALUE_CONTACTNUMBER",1);
				break;
				case "step32" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_GATEWAYID","SUBSCRIBERID_CONDITION","COLUMNVALUE_GATEWAYID",1);
				break;
				case "step33" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_AMOUNT","SUBSCRIBERID_CONDITION","COLUMNVALUE_AMOUNT",1);
				break;
				case "step34" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_TIMEONFILE","SUBSCRIBERID_CONDITION","COLUMNVALUE_TIMEONFILE",1);
				break;
				case "step35" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_REFUNDAMOUNT","SUBSCRIBERID_CONDITION","COLUMNVALUE_REFUNDAMOUNT",1);
				break;
				case "step36" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tbleShopTransactionStatus","DYNAMIC_ORDER_ID","SUBSCRIBERID_CONDITION","Reference_Number",1);
				break;
				case "step37" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMOCODE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMOCODE",1);
				break;
				case "step38" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMOTYPE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMOTYPE",1);
				break;
				case "step39" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMODISCOUNTTYPE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMODISCOUNTTYPE",1);
				break;
				case "step40" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMODISCOUNTAMOUNT","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMODISCOUNTAMOUNT",1);
				break;
				case "step41" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_SUBTRANSACTIONID","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_SUBTRANSACTIONID",1);
				break;
				case "step42" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_VATTRANSID","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_VATTRANSID",1);
				break;
				case "step43" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_VATPERC","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_VATPERC",1);
				break;
				case "step44" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_TOTALDISCOUNT","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_TOTALDISCOUNT",1);
				break;
				case "step45" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tblwptransactionlog","DYNAMIC_TRANSACTIONID_CONDITION","SUBSCRIBERID_CONDITION","Transaction_Number",1);
				break;
				case "step46" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_TRANSACTIONTYPE","SUBSCRIBERID_CONDITION","COLUMNVALUE_TRANSACTIONTYPE",1);
				break;
				case "step47" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tblwptransactionlog","DYNAMIC_ORDER_ID","SUBSCRIBERID_CONDITION","Reference_Number",1);
				break;
				case "step48" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_STATUSCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_STATUSCODE",1);
				break;
				case "step49" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_RESPONSECODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_RESPONSECODE",1);
				break;
				case "step50" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_RISKSCORE","SUBSCRIBERID_CONDITION","COLUMNVALUE_RISKSCORE",1);
				break;
				case "step51" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_CVCRESULTCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_CVCRESULTCODE",1);
				break;
				case "step52" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_AVSRESULTCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_AVSRESULTCODE",1);
				break;
				case "step53" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_RGPROFILEID","SUBSCRIBERID_CONDITION","COLUMNVALUE_RGPROFILEID",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Post_OnlineTopup_WorldPay_VAT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=54;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1" : stepStatus[step] = SQLDBSelect("TBL_MSTCUSTOMER","ISAUTOTOPUP_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSTCUSTOMER_ISAUTOTOPUP_EXPECTED_VALUE",1);
				break;
				case "step2" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","ISAUTOTOPUP_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSTTOPUP_ISAUTOTOPUP_EXPECTED_VALUE",1);
				break;
				case "step3" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","MSISDN_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSISDN_COLUMN_VALUE",1);
				break;
				case "step4" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TOPUPAMOUNT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TOPUPAMOUNT_COLUMN_VALUE",1);
				break;
				case "step5" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","CARDID_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","CARDID_COLUMN_VALUE",1);
				break;
				case "step6" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TOPUPMODE_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TOPUPMODE_COLUMN_VALUE",1);
				break;
				case "step7" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","STATUS_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","STATUS_COLUMN_VALUE",1);
				break;
				case "step8" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","ERRORDESC_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","ERRORDESC_COLUMN_VALUE",1);
				break;
				case "step9" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","MSISDN_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSISDN_COLUMN_VALUE",1);
				break;
				case "step10" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TAXAMT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TAXAMT_COLUMN_VALUE",1);
				break;
				case "step11" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","VATAMT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","VATAMT_COLUMN_VALUE",1);
				break;
				case "step12" : stepStatus[step] = SQLDBSelectFromEnv("TBL_MSTTOPUP","DYNAMIC_TRANSACTIONID_CONDITION","MSTCUSTOMER_SELECT_CONDITION","Transaction_Number",1);
				break;
				case "step13" : stepStatus[step] = SQLDBSelectFromEnv("TBL_MSTTOPUP","DYNAMIC_REDORDERID_CONDITION","MSTCUSTOMER_SELECT_CONDITION","Reference_Number",1);
				break;
				case "step14" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","USERCARDDET_ISAUTOTOPUP_COLUMN_NAME","SUBSCRIBERID_CONDITION","USERCARDDET_ISAUTOTOPUP_COLUMN_VALUE",1);
				break;
				case "step15" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","NAMEONCARD_COLUMN_NAME","SUBSCRIBERID_CONDITION","NAMEONCARD_COLUMN_VALUE",1);
				break;
				case "step16" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CARDISSUENUMBER_COLUMN_NAME","SUBSCRIBERID_CONDITION","CARDISSUENUMBER_COLUMN_VALUE",1);
				break;
				case "step17" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","HOUSENUMBER_COLUMN_NAME","SUBSCRIBERID_CONDITION","HOUSENUMBER_COLUMN_VALUE",1);
				break;
				case "step18" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","ADDRESSLINE1_COLUMN_NAME","SUBSCRIBERID_CONDITION","ADDRESSLINE1_COLUMN_VALUE",1);
				break;
				case "step19" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CITY_COLUMN_NAME","SUBSCRIBERID_CONDITION","CITY_COLUMN_VALUE",1);
				break;
				case "step20" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COUNTY_COLUMN_NAME","SUBSCRIBERID_CONDITION","COUNTY_COLUMN_VALUE",1);
				break;
				case "step21" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COUNTRY_COLUMN_NAME","SUBSCRIBERID_CONDITION","COUNTRY_COLUMN_VALUE",1);
				break;
				case "step22" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","POSTCODE_COLUMN_NAME","SUBSCRIBERID_CONDITION","POSTCODE_COLUMN_VALUE",1);
				break;
				case "step23" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","EMAIL_COLUMN_NAME","SUBSCRIBERID_CONDITION","EMAIL_COLUMN_VALUE",1);
				break;
				case "step24" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","NICKNAME_COLUMN_NAME","SUBSCRIBERID_CONDITION","NICKNAME_COLUMN_VALUE",1);
				break;
				case "step25" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CARDSTARTDATE_COLUMN_NAME","SUBSCRIBERID_CONDITION","CARDSTARTDATE_COLUMN_VALUE",1);
				break;
				case "step26" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CARDEXPIRYDATE_COLUMN_NAME","SUBSCRIBERID_CONDITION","CARDEXPIRYDATE_COLUMN_VALUE",1);
				break;
				case "step27" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_PREVIOUSMERCHANTCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_PREVIOUSMERCHANTCODE",1);
				break;
				case "step28" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_USERCARDDETAILS","COLUMNNAME_PREVIOUSORDERID","SUBSCRIBERID_CONDITION","Reference_Number",1);
				break;
				case "step29" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_GATEWAYID","SUBSCRIBERID_CONDITION","COLUMNVALUE_GATEWAYID",1);
				break;
				case "step30" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_MOBILENUMBER","SUBSCRIBERID_CONDITION","COLUMNVALUE_MOBILENUMBER",1);
				break;
				case "step31" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_CONTACTNUMBER","SUBSCRIBERID_CONDITION","COLUMNVALUE_CONTACTNUMBER",1);
				break;
				case "step32" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_GATEWAYID","SUBSCRIBERID_CONDITION","COLUMNVALUE_GATEWAYID",1);
				break;
				case "step33" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_AMOUNT","SUBSCRIBERID_CONDITION","COLUMNVALUE_AMOUNT",1);
				break;
				case "step34" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_TIMEONFILE","SUBSCRIBERID_CONDITION","COLUMNVALUE_TIMEONFILE",1);
				break;
				case "step35" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_REFUNDAMOUNT","SUBSCRIBERID_CONDITION","COLUMNVALUE_REFUNDAMOUNT",1);
				break;
				case "step36" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tbleShopTransactionStatus","DYNAMIC_ORDER_ID","SUBSCRIBERID_CONDITION","Reference_Number",1);
				break;
				case "step37" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMOCODE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMOCODE",1);
				break;
				case "step38" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMOTYPE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMOTYPE",1);
				break;
				case "step39" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMODISCOUNTTYPE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMODISCOUNTTYPE",1);
				break;
				case "step40" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMODISCOUNTAMOUNT","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMODISCOUNTAMOUNT",1);
				break;
				case "step41" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_SUBTRANSACTIONID","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_SUBTRANSACTIONID",1);
				break;
				case "step42" : stepStatus[step] = storeSQLDBValueInEnv("TBL_MSTTOPUP","COLUMNNAME_VATTRANSID","MSTCUSTOMER_SELECT_CONDITION","VAT_TRANSACTIONID",1);
				break;
				case "step43" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_VATPERC","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_VATPERC",1);
				break;
				case "step44" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_TOTALDISCOUNT","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_TOTALDISCOUNT",1);
				break;
				case "step45" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tblwptransactionlog","DYNAMIC_TRANSACTIONID_CONDITION","SUBSCRIBERID_CONDITION","Transaction_Number",1);
				break;
				case "step46" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_TRANSACTIONTYPE","SUBSCRIBERID_CONDITION","COLUMNVALUE_TRANSACTIONTYPE",1);
				break;
				case "step47" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tblwptransactionlog","DYNAMIC_ORDER_ID","SUBSCRIBERID_CONDITION","Reference_Number",1);
				break;
				case "step48" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_STATUSCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_STATUSCODE",1);
				break;
				case "step49" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_RESPONSECODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_RESPONSECODE",1);
				break;
				case "step50" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_RISKSCORE","SUBSCRIBERID_CONDITION","COLUMNVALUE_RISKSCORE",1);
				break;
				case "step51" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_CVCRESULTCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_CVCRESULTCODE",1);
				break;
				case "step52" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_AVSRESULTCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_AVSRESULTCODE",1);
				break;
				case "step53" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_RGPROFILEID","SUBSCRIBERID_CONDITION","COLUMNVALUE_RGPROFILEID",1);
				break;
				case "step54" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tblwptransactionlog","AUTH_VATID_COLUMN_NAME","SUBSCRIBERID_CONDITION","VAT_TRANSACTIONID",1);
				break;

				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void ReadGetAccLog(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = readLogFiles_2("PATH","FILENAME", "Requiredtext", 1) ;
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Do_Repeat_Topup(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=30;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("topUp_Button"), "TopUp_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("online_TopUp_Button"), "online_TopUp_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("topupAmount_Dropdown"), "Topup Amount Dropdown");
				break;
				case "step10": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("topupAmount_Dropdown"), "Topup Amount Dropdown", "TopupAmount", 1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("email_TextBox"), "Email", "Email", 1);
				break;
				case "step12": stepStatus[step] = WebRadioSelect(online_TopUp.Online_TopUp_Page("existingCard_rdButton"), "Payment Using", "existingCard_rdButton");
				break;
				case "step13": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("ExistingCVVNumber"), "ExistingCVVNumber");
				break;
				case "step14": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("ExistingCVVNumber"), "ExistingCVVNumber", "ExistingCVVNumber", 1);
				break;
				case "step15": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step16": stepStatus[step] = WaitUntilElementClickable(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step17": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step18": stepStatus[step] = pageLoadCheck();
				break;
				case "step19": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("okBtn_Button"), "OK Button");
				break;
				case "step20": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("okBtn_Button"), "OK Button");
				break;
				case "step21": stepStatus[step] = pageLoadCheck();
				break;
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("UpdateSuccessMessage"), "UpdateSuccessMessage");
				break;
				case "step23": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("responseMsg_Button"), "Response Message");
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("responseMsg_Button"), "Response Message","Response_Message",1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("Amount_Label"), "Amount","SuccessAmount",1);
				break;
				case "step26": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.Online_TopUp_Page("ReferenceNo_Label"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step27": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.Online_TopUp_Page("ReferenceNo_Label"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step28": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.Online_TopUp_Page("TransactionNo_Label"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step29": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.Online_TopUp_Page("TransactionNo_Label"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step30": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("close_button"), "Subscriber Logout");
				break;

				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Post_OnlineTopup_WorldPay_1(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=35;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1" : stepStatus[step] = SQLDBSelect("TBL_MSTCUSTOMER","ISAUTOTOPUP_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSTCUSTOMER_ISAUTOTOPUP_EXPECTED_VALUE",1);
				break;
				case "step2" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","ISAUTOTOPUP_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSTTOPUP_ISAUTOTOPUP_EXPECTED_VALUE",1);
				break;
				case "step3" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","MSISDN_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSISDN_COLUMN_VALUE",1);
				break;
				case "step4" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TOPUPAMOUNT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TOPUPAMOUNT_COLUMN_VALUE",1);
				break;
				case "step5" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","CARDID_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","CARDID_COLUMN_VALUE",1);
				break;
				case "step6" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TOPUPMODE_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TOPUPMODE_COLUMN_VALUE",1);
				break;
				case "step7" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","STATUS_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","STATUS_COLUMN_VALUE",1);
				break;
				case "step8" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","ERRORDESC_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","ERRORDESC_COLUMN_VALUE",1);
				break;
				case "step9" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","MSISDN_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSISDN_COLUMN_VALUE",1);
				break;
				case "step10" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TAXAMT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TAXAMT_COLUMN_VALUE",1);
				break;
				case "step11" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","VATAMT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","VATAMT_COLUMN_VALUE",1);
				break;
				case "step12" : stepStatus[step] = SQLDBSelectFromEnv("TBL_MSTTOPUP","DYNAMIC_TRANSACTIONID_CONDITION","MSTCUSTOMER_SELECT_CONDITION","Transaction_Number",1);
				break;
				case "step13" : stepStatus[step] = SQLDBSelectFromEnv("TBL_MSTTOPUP","DYNAMIC_REDORDERID_CONDITION","MSTCUSTOMER_SELECT_CONDITION","Reference_Number",1);
				break;
				case "step14" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_GATEWAYID","SUBSCRIBERID_CONDITION_TRANSSTATUS","COLUMNVALUE_GATEWAYID",1);
				break;
				case "step15" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_AMOUNT","SUBSCRIBERID_CONDITION_TRANSSTATUS","COLUMNVALUE_AMOUNT",1);
				break;
				case "step16" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_TIMEONFILE","SUBSCRIBERID_CONDITION_TRANSSTATUS","COLUMNVALUE_TIMEONFILE",1);
				break;
				case "step17" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_REFUNDAMOUNT","SUBSCRIBERID_CONDITION_TRANSSTATUS","COLUMNVALUE_REFUNDAMOUNT",1);
				break;
				case "step18" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tbleShopTransactionStatus","DYNAMIC_ORDER_ID","SUBSCRIBERID_CONDITION_TRANSSTATUS","Reference_Number",1);
				break;
				case "step19" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMOCODE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMOCODE",1);
				break;
				case "step20" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMOTYPE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMOTYPE",1);
				break;
				case "step21" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMODISCOUNTTYPE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMODISCOUNTTYPE",1);
				break;
				case "step22" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMODISCOUNTAMOUNT","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMODISCOUNTAMOUNT",1);
				break;
				case "step23" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_SUBTRANSACTIONID","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_SUBTRANSACTIONID",1);
				break;
				case "step24" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_VATTRANSID","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_VATTRANSID",1);
				break;
				case "step25" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_VATPERC","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_VATPERC",1);
				break;
				case "step26" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_TOTALDISCOUNT","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_TOTALDISCOUNT",1);
				break;
				case "step27" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tblwptransactionlog","DYNAMIC_TRANSACTIONID_CONDITION","SUBSCRIBERID_CONDITION","Transaction_Number",1);
				break;
				case "step28" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_TRANSACTIONTYPE","SUBSCRIBERID_CONDITION","COLUMNVALUE_TRANSACTIONTYPE",1);
				break;
				case "step29" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tblwptransactionlog","DYNAMIC_ORDER_ID","SUBSCRIBERID_CONDITION","Reference_Number",1);
				break;
				case "step30" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_STATUSCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_STATUSCODE",1);
				break;
				case "step31" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_RESPONSECODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_RESPONSECODE",1);
				break;
				case "step32" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_RISKSCORE","SUBSCRIBERID_CONDITION","COLUMNVALUE_RISKSCORE",1);
				break;
				case "step33" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_CVCRESULTCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_CVCRESULTCODE",1);
				break;
				case "step34" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_AVSRESULTCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_AVSRESULTCODE",1);
				break;
				case "step35" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_RGPROFILEID","SUBSCRIBERID_CONDITION","COLUMNVALUE_RGPROFILEID",1);
				break;

				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Post_OnlineTopup_AuthNet_1(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=51;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1" : stepStatus[step] = SQLDBSelect("TBL_MSTCUSTOMER","ISAUTOTOPUP_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSTCUSTOMER_ISAUTOTOPUP_EXPECTED_VALUE",1);
				break;
				case "step2" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","ISAUTOTOPUP_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSTTOPUP_ISAUTOTOPUP_EXPECTED_VALUE",1);
				break;
				case "step3" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","MSISDN_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSISDN_COLUMN_VALUE",1);
				break;
				case "step4" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TOPUPAMOUNT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TOPUPAMOUNT_COLUMN_VALUE",1);
				break;
				case "step5" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","CARDID_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","CARDID_COLUMN_VALUE",1);
				break;
				case "step6" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TOPUPMODE_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TOPUPMODE_COLUMN_VALUE",1);
				break;
				case "step7" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","STATUS_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","STATUS_COLUMN_VALUE",1);
				break;
				case "step8" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","ERRORDESC_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","ERRORDESC_COLUMN_VALUE",1);
				break;
				case "step9" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","MSISDN_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSISDN_COLUMN_VALUE",1);
				break;
				case "step10" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TAXAMT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TAXAMT_COLUMN_VALUE",1);
				break;
				case "step11" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","VATAMT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","VATAMT_COLUMN_VALUE",1);
				break;
				case "step12" : stepStatus[step] = SQLDBSelectFromEnv("TBL_MSTTOPUP","DYNAMIC_TRANSACTIONID_CONDITION","MSTCUSTOMER_SELECT_CONDITION","Transaction_Number",1);
				break;
				case "step13" : stepStatus[step] = SQLDBSelectFromEnv("TBL_MSTTOPUP","DYNAMIC_REDORDERID_CONDITION","MSTCUSTOMER_SELECT_CONDITION","Reference_Number",1);
				break;
				case "step14" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMOCODE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMOCODE",1);
				break;
				case "step15" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMOTYPE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMOTYPE",1);
				break;
				case "step16" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMODISCOUNTTYPE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMODISCOUNTTYPE",1);
				break;
				case "step17" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMODISCOUNTAMOUNT","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMODISCOUNTAMOUNT",1);
				break;
				case "step18" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_SUBTRANSACTIONID","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_SUBTRANSACTIONID",1);
				break;
				case "step19" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_VATTRANSID","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_VATTRANSID",1);
				break;
				case "step20" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_VATPERC","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_VATPERC",1);
				break;
				case "step21" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_TOTALDISCOUNT","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_TOTALDISCOUNT",1);
				break;
				case "step22" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","AUTHNET_AMOUNT_COLUMN_NAME","SUBSCRIBERID_CONDITION","AUTHNET_AMOUNT_COLUMN_VALUE",1);
				break;
				case "step23" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","ORDERDESC_COLUMN_NAME","SUBSCRIBERID_CONDITION","ORDERDESC_COLUMN_VALUE",1);
				break;
				case "step24" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","ITEMUNITPRICE_COLUMN_NAME","SUBSCRIBERID_CONDITION","ITEMUNITPRICE_COLUMN_VALUE",1);
				break;
				case "step25" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","STATUS_TEXT_COLUMN_NAME","SUBSCRIBERID_CONDITION","STATUS_TEXT_COLUMN_VALUE",1);
				break;
				case "step26" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","AUTH_TAXID_COLUMN_NAME","SUBSCRIBERID_CONDITION","AUTH_TAXID_COLUMN_VALUE",1);
				break;
				case "step27" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","AUTH_VATID_COLUMN_NAME","SUBSCRIBERID_CONDITION","AUTH_VATID_COLUMN_VALUE",1);
				break;
				case "step28" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","SUBSCRIBERID_COLUMN_NAME","SUBSCRIBERID_CONDITION","SUBSCRIBERID_COLUMN_VALUE",1);
				break;
				case "step29" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_AUTHORIZENET","DYNAMIC_TRANSID_CONDITION","SUBSCRIBERID_CONDITION","TRANSACTION_ID",1);
				break;
				case "step30" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_AUTHORIZENET","AUTH_INVOICENUMBER_CONDITION","SUBSCRIBERID_CONDITION","INVOICENUMBER",1);
				break;
				case "step31" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tbleShopTransactionStatus","DYNAMIC_TRANSACTIONID_CONDITION","SUBSCRIBERID_CONDITION_TRANSSTATUS","TRANSACTION_ID",1);
				break;
				case "step32" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tbleShopTransactionStatus","DYNAMIC_ORDER_ID","SUBSCRIBERID_CONDITION_TRANSSTATUS","INVOICENUMBER",1);
				break;
				case "step33" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_GATEWAYID","SUBSCRIBERID_CONDITION_TRANSSTATUS","COLUMNVALUE_GATEWAYID",1);
				break;
				case "step34" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_AMOUNT","SUBSCRIBERID_CONDITION_TRANSSTATUS","COLUMNVALUE_AMOUNT",1);
				break;
				case "step35" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_TIMEONFILE","SUBSCRIBERID_CONDITION_TRANSSTATUS","COLUMNVALUE_TIMEONFILE",1);
				break;
				case "step36" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_REFUNDAMOUNT","SUBSCRIBERID_CONDITION_TRANSSTATUS","COLUMNVALUE_REFUNDAMOUNT",1);
				break;
				case "step37" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_TRANSACTIONTYPE","SUBSCRIBERID_CONDITION","COLUMNVALUE_TRANSACTIONTYPE",1);
				break;
				case "step38" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_ITEMQUANTITY","SUBSCRIBERID_CONDITION","COLUMNVALUE_ITEMQUANTITY",1);
				break;
				case "step39" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_ALLOWPARTIALAUTH","SUBSCRIBERID_CONDITION","COLUMNVALUE_ALLOWPARTIALAUTH",1);
				break;
				case "step40" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_DUPLICATEWINDOW","SUBSCRIBERID_CONDITION","COLUMNVALUE_DUPLICATEWINDOW",1);
				break;
				case "step41" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_CUSTOMER","SUBSCRIBERID_CONDITION","COLUMNVALUE_CUSTOMER",1);
				break;
				case "step42" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_RECURRINGBILLING","SUBSCRIBERID_CONDITION","COLUMNVALUE_RECURRINGBILLING",1);
				break;
				case "step43" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_TESTREQUEST","SUBSCRIBERID_CONDITION","COLUMNVALUE_TESTREQUEST",1);
				break;
				case "step44" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_USERFIELDNAME1","SUBSCRIBERID_CONDITION","COLUMNVALUE_USERFIELDNAME1",1);
				break;
				case "step45" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_USERFIELDVALUE1","SUBSCRIBERID_CONDITION","COLUMNVALUE_USERFIELDVALUE1",1);
				break;
				case "step46" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_USERFIELDNAME2","SUBSCRIBERID_CONDITION","COLUMNVALUE_USERFIELDNAME2",1);
				break;
				case "step47" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_USERFIELDVALUE2","SUBSCRIBERID_CONDITION","COLUMNVALUE_USERFIELDVALUE2",1);
				break;
				case "step48" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_RESULTCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_RESULTCODE",1);
				break;
				case "step49" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_STATUSCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_STATUSCODE",1);
				break;
				case "step50" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_RESPONSECODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_RESPONSECODE",1);
				break;
				case "step51" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_CARDTYPE","SUBSCRIBERID_CONDITION","COLUMNVALUE_CARDTYPE",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Validate_GBR_EshopLogs(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1" : stepStatus[step] = readLogFilesWithEnvironmentValue("LOG_FILE_PATH", "FILENAME_START", "FILENAME_END","FILENAME","TEXT1","EnvironmentValue","TEXT2",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Post_OnlineTopup_RedPayment(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		try{
			int totalSteps=52;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1" : stepStatus[step] = SQLDBSelect("TBL_MSTCUSTOMER","ISAUTOTOPUP_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSTCUSTOMER_ISAUTOTOPUP_EXPECTED_VALUE",1);
				break;
				case "step2" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","ISAUTOTOPUP_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSTTOPUP_ISAUTOTOPUP_EXPECTED_VALUE",1);
				break;
				case "step3" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","MSISDN_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSISDN_COLUMN_VALUE",1);
				break;
				case "step4" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TOPUPAMOUNT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TOPUPAMOUNT_COLUMN_VALUE",1);
				break;
				case "step5" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","CARDID_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","CARDID_COLUMN_VALUE",1);
				break;
				case "step6" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TOPUPMODE_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TOPUPMODE_COLUMN_VALUE",1);
				break;
				case "step7" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","STATUS_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","STATUS_COLUMN_VALUE",1);
				break;
				case "step8" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","ERRORDESC_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","ERRORDESC_COLUMN_VALUE",1);
				break;
				case "step9" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","MSISDN_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSISDN_COLUMN_VALUE",1);
				break;
				case "step10" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TAXAMT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TAXAMT_COLUMN_VALUE",1);
				break;
				case "step11" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","VATAMT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","VATAMT_COLUMN_VALUE",1);
				break;
				case "step12" : stepStatus[step] = SQLDBSelectFromEnv("TBL_MSTTOPUP","DYNAMIC_TRANSACTIONID_CONDITION","MSTCUSTOMER_SELECT_CONDITION","Transaction_Number",1);
				break;
				case "step13" : stepStatus[step] = SQLDBSelectFromEnv("TBL_MSTTOPUP","DYNAMIC_REDORDERID_CONDITION","MSTCUSTOMER_SELECT_CONDITION","Reference_Number",1);
				break;
				case "step14" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","USERCARDDET_ISAUTOTOPUP_COLUMN_NAME","SUBSCRIBERID_CONDITION","USERCARDDET_ISAUTOTOPUP_COLUMN_VALUE",1);
				break;
				case "step15" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","NAMEONCARD_COLUMN_NAME","SUBSCRIBERID_CONDITION","NAMEONCARD_COLUMN_VALUE",1);
				break;
				case "step16" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CARDISSUENUMBER_COLUMN_NAME","SUBSCRIBERID_CONDITION","CARDISSUENUMBER_COLUMN_VALUE",1);
				break;
				case "step17" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","HOUSENUMBER_COLUMN_NAME","SUBSCRIBERID_CONDITION","HOUSENUMBER_COLUMN_VALUE",1);
				break;
				case "step18" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","ADDRESSLINE1_COLUMN_NAME","SUBSCRIBERID_CONDITION","ADDRESSLINE1_COLUMN_VALUE",1);
				break;
				case "step19" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CITY_COLUMN_NAME","SUBSCRIBERID_CONDITION","CITY_COLUMN_VALUE",1);
				break;
				case "step20" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COUNTY_COLUMN_NAME","SUBSCRIBERID_CONDITION","COUNTY_COLUMN_VALUE",1);
				break;
				case "step21" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COUNTRY_COLUMN_NAME","SUBSCRIBERID_CONDITION","COUNTRY_COLUMN_VALUE",1);
				break;
				case "step22" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","POSTCODE_COLUMN_NAME","SUBSCRIBERID_CONDITION","POSTCODE_COLUMN_VALUE",1);
				break;
				case "step23" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","EMAIL_COLUMN_NAME","SUBSCRIBERID_CONDITION","EMAIL_COLUMN_VALUE",1);
				break;
				case "step24" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","NICKNAME_COLUMN_NAME","SUBSCRIBERID_CONDITION","NICKNAME_COLUMN_VALUE",1);
				break;
				case "step25" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CARDSTARTDATE_COLUMN_NAME","SUBSCRIBERID_CONDITION","CARDSTARTDATE_COLUMN_VALUE",1);
				break;
				case "step26" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CARDEXPIRYDATE_COLUMN_NAME","SUBSCRIBERID_CONDITION","CARDEXPIRYDATE_COLUMN_VALUE",1);
				break;
				case "step27" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_PREVIOUSMERCHANTCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_PREVIOUSMERCHANTCODE",1);
				break;
				case "step28" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_PREVIOUSORDERID","SUBSCRIBERID_CONDITION","COLUMNVALUE_PREVIOUSORDERID",1);
				break;
				case "step29" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_GATEWAYID","SUBSCRIBERID_CONDITION","COLUMNVALUE_GATEWAYID",1);
				break;
				case "step30" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_MOBILENUMBER","SUBSCRIBERID_CONDITION","COLUMNVALUE_MOBILENUMBER",1);
				break;
				case "step31" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_CONTACTNUMBER","SUBSCRIBERID_CONDITION","COLUMNVALUE_CONTACTNUMBER",1);
				break;
				case "step32" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_GATEWAYID","SUBSCRIBERID_CONDITION","COLUMNVALUE_GATEWAYID",1);
				break;
				case "step33" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_AMOUNT","SUBSCRIBERID_CONDITION","COLUMNVALUE_AMOUNT",1);
				break;
				case "step34" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_TIMEONFILE","SUBSCRIBERID_CONDITION","COLUMNVALUE_TIMEONFILE",1);
				break;
				case "step35" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_REFUNDAMOUNT","SUBSCRIBERID_CONDITION","COLUMNVALUE_REFUNDAMOUNT",1);
				break;
				case "step36" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tbleShopTransactionStatus","DYNAMIC_ORDER_ID","SUBSCRIBERID_CONDITION","Reference_Number",1);
				break;
				case "step37" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMOCODE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMOCODE",1);
				break;
				case "step38" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMOTYPE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMOTYPE",1);
				break;
				case "step39" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMODISCOUNTTYPE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMODISCOUNTTYPE",1);
				break;
				case "step40" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMODISCOUNTAMOUNT","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMODISCOUNTAMOUNT",1);
				break;
				case "step41" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_SUBTRANSACTIONID","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_SUBTRANSACTIONID",1);
				break;
				case "step42" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_VATTRANSID","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_VATTRANSID",1);
				break;
				case "step43" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_VATPERC","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_VATPERC",1);
				break;
				case "step44" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_TOTALDISCOUNT","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_TOTALDISCOUNT",1);
				break;
				case "step45" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tblReDTransactionLog","DYNAMIC_TRANSACTIONID_CONDITION","SUBSCRIBERID_CONDITION","Transaction_Number",1);
				break;
				case "step46" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblReDTransactionLog","COLUMNNAME_TRANSACTIONTYPE","SUBSCRIBERID_CONDITION","COLUMNVALUE_TRANSACTIONTYPE",1);
				break;
				case "step47" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tblReDTransactionLog","DYNAMIC_REDORDERID_CONDITION","SUBSCRIBERID_CONDITION","Reference_Number",1);
				break;
				case "step48" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblReDTransactionLog","COLUMNNAME_STATUSCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_STATUSCODE",1);
				break;
				case "step49" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblReDTransactionLog","COLUMNNAME_RESPONSECODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_RESPONSECODE",1);
				break;
				case "step50" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblReDTransactionLog","COLUMNNAME_REQUESTTYPECODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_REQUESTTYPECODE",1);
				break;
				case "step51" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblReDTransactionLog","COLUMNNAME_AVSRESULTCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_AVSRESULTCODE",1);
				break;
				case "step52" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_CARDTYPE","SUBSCRIBERID_CONDITION","COLUMNVALUE_CARDTYPE",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Post_OnlineTopup_RedPayment_VAT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=53;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1" : stepStatus[step] = SQLDBSelect("TBL_MSTCUSTOMER","ISAUTOTOPUP_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSTCUSTOMER_ISAUTOTOPUP_EXPECTED_VALUE",1);
				break;
				case "step2" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","ISAUTOTOPUP_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSTTOPUP_ISAUTOTOPUP_EXPECTED_VALUE",1);
				break;
				case "step3" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","MSISDN_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSISDN_COLUMN_VALUE",1);
				break;
				case "step4" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TOPUPAMOUNT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TOPUPAMOUNT_COLUMN_VALUE",1);
				break;
				case "step5" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","CARDID_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","CARDID_COLUMN_VALUE",1);
				break;
				case "step6" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TOPUPMODE_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TOPUPMODE_COLUMN_VALUE",1);
				break;
				case "step7" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","STATUS_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","STATUS_COLUMN_VALUE",1);
				break;
				case "step8" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","ERRORDESC_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","ERRORDESC_COLUMN_VALUE",1);
				break;
				case "step9" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","MSISDN_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSISDN_COLUMN_VALUE",1);
				break;
				case "step10" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TAXAMT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TAXAMT_COLUMN_VALUE",1);
				break;
				case "step11" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","VATAMT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","VATAMT_COLUMN_VALUE",1);
				break;
				case "step12" : stepStatus[step] = SQLDBSelectFromEnv("TBL_MSTTOPUP","DYNAMIC_TRANSACTIONID_CONDITION","MSTCUSTOMER_SELECT_CONDITION","Transaction_Number",1);
				break;
				case "step13" : stepStatus[step] = SQLDBSelectFromEnv("TBL_MSTTOPUP","DYNAMIC_REDORDERID_CONDITION","MSTCUSTOMER_SELECT_CONDITION","Reference_Number",1);
				break;
				case "step14" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","USERCARDDET_ISAUTOTOPUP_COLUMN_NAME","SUBSCRIBERID_CONDITION","USERCARDDET_ISAUTOTOPUP_COLUMN_VALUE",1);
				break;
				case "step15" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","NAMEONCARD_COLUMN_NAME","SUBSCRIBERID_CONDITION","NAMEONCARD_COLUMN_VALUE",1);
				break;
				case "step16" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CARDISSUENUMBER_COLUMN_NAME","SUBSCRIBERID_CONDITION","CARDISSUENUMBER_COLUMN_VALUE",1);
				break;
				case "step17" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","HOUSENUMBER_COLUMN_NAME","SUBSCRIBERID_CONDITION","HOUSENUMBER_COLUMN_VALUE",1);
				break;
				case "step18" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","ADDRESSLINE1_COLUMN_NAME","SUBSCRIBERID_CONDITION","ADDRESSLINE1_COLUMN_VALUE",1);
				break;
				case "step19" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CITY_COLUMN_NAME","SUBSCRIBERID_CONDITION","CITY_COLUMN_VALUE",1);
				break;
				case "step20" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COUNTY_COLUMN_NAME","SUBSCRIBERID_CONDITION","COUNTY_COLUMN_VALUE",1);
				break;
				case "step21" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COUNTRY_COLUMN_NAME","SUBSCRIBERID_CONDITION","COUNTRY_COLUMN_VALUE",1);
				break;
				case "step22" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","POSTCODE_COLUMN_NAME","SUBSCRIBERID_CONDITION","POSTCODE_COLUMN_VALUE",1);
				break;
				case "step23" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","EMAIL_COLUMN_NAME","SUBSCRIBERID_CONDITION","EMAIL_COLUMN_VALUE",1);
				break;
				case "step24" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","NICKNAME_COLUMN_NAME","SUBSCRIBERID_CONDITION","NICKNAME_COLUMN_VALUE",1);
				break;
				case "step25" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CARDSTARTDATE_COLUMN_NAME","SUBSCRIBERID_CONDITION","CARDSTARTDATE_COLUMN_VALUE",1);
				break;
				case "step26" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CARDEXPIRYDATE_COLUMN_NAME","SUBSCRIBERID_CONDITION","CARDEXPIRYDATE_COLUMN_VALUE",1);
				break;
				case "step27" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_PREVIOUSMERCHANTCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_PREVIOUSMERCHANTCODE",1);
				break;
				case "step28" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_PREVIOUSORDERID","SUBSCRIBERID_CONDITION","COLUMNVALUE_PREVIOUSORDERID",1);
				break;
				case "step29" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_GATEWAYID","SUBSCRIBERID_CONDITION","COLUMNVALUE_GATEWAYID",1);
				break;
				case "step30" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_MOBILENUMBER","SUBSCRIBERID_CONDITION","COLUMNVALUE_MOBILENUMBER",1);
				break;
				case "step31" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_CONTACTNUMBER","SUBSCRIBERID_CONDITION","COLUMNVALUE_CONTACTNUMBER",1);
				break;
				case "step32" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_GATEWAYID","SUBSCRIBERID_CONDITION","COLUMNVALUE_GATEWAYID",1);
				break;
				case "step33" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_AMOUNT","SUBSCRIBERID_CONDITION","COLUMNVALUE_AMOUNT",1);
				break;
				case "step34" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_TIMEONFILE","SUBSCRIBERID_CONDITION","COLUMNVALUE_TIMEONFILE",1);
				break;
				case "step35" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_REFUNDAMOUNT","SUBSCRIBERID_CONDITION","COLUMNVALUE_REFUNDAMOUNT",1);
				break;
				case "step36" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tbleShopTransactionStatus","DYNAMIC_ORDER_ID","SUBSCRIBERID_CONDITION","Reference_Number",1);
				break;
				case "step37" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMOCODE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMOCODE",1);
				break;
				case "step38" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMOTYPE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMOTYPE",1);
				break;
				case "step39" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMODISCOUNTTYPE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMODISCOUNTTYPE",1);
				break;
				case "step40" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMODISCOUNTAMOUNT","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMODISCOUNTAMOUNT",1);
				break;
				case "step41" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_SUBTRANSACTIONID","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_SUBTRANSACTIONID",1);
				break;
				case "step42" : stepStatus[step] = storeSQLDBValueInEnv("TBL_MSTTOPUP","COLUMNNAME_VATTRANSID","MSTCUSTOMER_SELECT_CONDITION","VAT_TRANSACTIONID",1);
				break;
				case "step43" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_VATPERC","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_VATPERC",1);
				break;
				case "step44" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_TOTALDISCOUNT","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_TOTALDISCOUNT",1);
				break;
				case "step45" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tblReDTransactionLog","DYNAMIC_TRANSACTIONID_CONDITION","SUBSCRIBERID_CONDITION","Transaction_Number",1);
				break;
				case "step46" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblReDTransactionLog","COLUMNNAME_TRANSACTIONTYPE","SUBSCRIBERID_CONDITION","COLUMNVALUE_TRANSACTIONTYPE",1);
				break;
				case "step47" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tblReDTransactionLog","DYNAMIC_REDORDERID_CONDITION","SUBSCRIBERID_CONDITION","Reference_Number",1);
				break;
				case "step48" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblReDTransactionLog","COLUMNNAME_STATUSCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_STATUSCODE",1);
				break;
				case "step49" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblReDTransactionLog","COLUMNNAME_RESPONSECODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_RESPONSECODE",1);
				break;
				case "step50" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblReDTransactionLog","COLUMNNAME_REQUESTTYPECODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_REQUESTTYPECODE",1);
				break;
				case "step51" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblReDTransactionLog","COLUMNNAME_AVSRESULTCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_AVSRESULTCODE",1);
				break;
				case "step52" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_CARDTYPE","SUBSCRIBERID_CONDITION","COLUMNVALUE_CARDTYPE",1);
				break;
				case "step53" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tblReDTransactionLog","AUTH_VATID_COLUMN_NAME","SUBSCRIBERID_CONDITION","VAT_TRANSACTIONID",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Post_OnlineTopup_RedPay_1(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps=53;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1" : stepStatus[step] = SQLDBSelect("TBL_MSTCUSTOMER","ISAUTOTOPUP_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSTCUSTOMER_ISAUTOTOPUP_EXPECTED_VALUE",1);
				break;
				case "step2" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","ISAUTOTOPUP_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSTTOPUP_ISAUTOTOPUP_EXPECTED_VALUE",1);
				break;
				case "step3" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","MSISDN_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSISDN_COLUMN_VALUE",1);
				break;
				case "step4" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TOPUPAMOUNT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TOPUPAMOUNT_COLUMN_VALUE",1);
				break;
				case "step5" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","CARDID_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","CARDID_COLUMN_VALUE",1);
				break;
				case "step6" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TOPUPMODE_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TOPUPMODE_COLUMN_VALUE",1);
				break;
				case "step7" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","STATUS_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","STATUS_COLUMN_VALUE",1);
				break;
				case "step8" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","ERRORDESC_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","ERRORDESC_COLUMN_VALUE",1);
				break;
				case "step9" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","MSISDN_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","MSISDN_COLUMN_VALUE",1);
				break;
				case "step10" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","TAXAMT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","TAXAMT_COLUMN_VALUE",1);
				break;
				case "step11" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","VATAMT_COLUMN_NAME","MSTCUSTOMER_SELECT_CONDITION","VATAMT_COLUMN_VALUE",1);
				break;
				case "step12" : stepStatus[step] = SQLDBSelectFromEnv("TBL_MSTTOPUP","DYNAMIC_TRANSACTIONID_CONDITION","MSTCUSTOMER_SELECT_CONDITION","Transaction_Number",1);
				break;
				case "step13" : stepStatus[step] = SQLDBSelectFromEnv("TBL_MSTTOPUP","DYNAMIC_REDORDERID_CONDITION","MSTCUSTOMER_SELECT_CONDITION","Reference_Number",1);
				break;
				case "step14" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","USERCARDDET_ISAUTOTOPUP_COLUMN_NAME","SUBSCRIBERID_CONDITION_2","USERCARDDET_ISAUTOTOPUP_COLUMN_VALUE",1);
				break;
				case "step15" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","NAMEONCARD_COLUMN_NAME","SUBSCRIBERID_CONDITION_2","NAMEONCARD_COLUMN_VALUE",1);
				break;
				case "step16" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CARDISSUENUMBER_COLUMN_NAME","SUBSCRIBERID_CONDITION_2","CARDISSUENUMBER_COLUMN_VALUE",1);
				break;
				case "step17" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","HOUSENUMBER_COLUMN_NAME","SUBSCRIBERID_CONDITION_2","HOUSENUMBER_COLUMN_VALUE",1);
				break;
				case "step18" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","ADDRESSLINE1_COLUMN_NAME","SUBSCRIBERID_CONDITION_2","ADDRESSLINE1_COLUMN_VALUE",1);
				break;
				case "step19" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CITY_COLUMN_NAME","SUBSCRIBERID_CONDITION_2","CITY_COLUMN_VALUE",1);
				break;
				case "step20" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COUNTY_COLUMN_NAME","SUBSCRIBERID_CONDITION_2","COUNTY_COLUMN_VALUE",1);
				break;
				case "step21" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COUNTRY_COLUMN_NAME","SUBSCRIBERID_CONDITION_2","COUNTRY_COLUMN_VALUE",1);
				break;
				case "step22" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","POSTCODE_COLUMN_NAME","SUBSCRIBERID_CONDITION_2","POSTCODE_COLUMN_VALUE",1);
				break;
				case "step23" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","EMAIL_COLUMN_NAME","SUBSCRIBERID_CONDITION_2","EMAIL_COLUMN_VALUE",1);
				break;
				case "step24" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","NICKNAME_COLUMN_NAME","SUBSCRIBERID_CONDITION_2","NICKNAME_COLUMN_VALUE",1);
				break;
				case "step25" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CARDSTARTDATE_COLUMN_NAME","SUBSCRIBERID_CONDITION_2","CARDSTARTDATE_COLUMN_VALUE",1);
				break;
				case "step26" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","CARDEXPIRYDATE_COLUMN_NAME","SUBSCRIBERID_CONDITION_2","CARDEXPIRYDATE_COLUMN_VALUE",1);
				break;
				case "step27" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_PREVIOUSMERCHANTCODE","SUBSCRIBERID_CONDITION_2","COLUMNVALUE_PREVIOUSMERCHANTCODE",1);
				break;
				case "step28" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_USERCARDDETAILS","COLUMNNAME_PREVIOUSORDERID","SUBSCRIBERID_CONDITION_2","Reference_Number",1);
				break;
				case "step29" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_GATEWAYID","SUBSCRIBERID_CONDITION_2","TBLUSERCARD_COLUMNVALUE_GATEWAYID",1);
				break;
				case "step30" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_MOBILENUMBER","SUBSCRIBERID_CONDITION_2","COLUMNVALUE_MOBILENUMBER",1);
				break;
				case "step31" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_CONTACTNUMBER","SUBSCRIBERID_CONDITION_2","COLUMNVALUE_CONTACTNUMBER",1);
				break;
				case "step32" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_GATEWAYID","SUBSCRIBERID_CONDITION_1","COLUMNVALUE_GATEWAYID",1);
				break;
				case "step33" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_AMOUNT","SUBSCRIBERID_CONDITION_1","COLUMNVALUE_AMOUNT",1);
				break;
				case "step34" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_TIMEONFILE","SUBSCRIBERID_CONDITION_1","COLUMNVALUE_TIMEONFILE",1);
				break;
				case "step35" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_REFUNDAMOUNT","SUBSCRIBERID_CONDITION_1","COLUMNVALUE_REFUNDAMOUNT",1);
				break;
				case "step36" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tbleShopTransactionStatus","DYNAMIC_ORDER_ID","SUBSCRIBERID_CONDITION_1","Reference_Number",1);
				break;
				case "step37" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMOCODE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMOCODE",1);
				break;
				case "step38" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMOTYPE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMOTYPE",1);
				break;
				case "step39" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMODISCOUNTTYPE","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMODISCOUNTTYPE",1);
				break;
				case "step40" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_PROMODISCOUNTAMOUNT","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_PROMODISCOUNTAMOUNT",1);
				break;
				case "step41" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_SUBTRANSACTIONID","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_SUBTRANSACTIONID",1);
				break;
				case "step42" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_VATTRANSID","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_VATTRANSID",1);
				break;
				case "step43" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_VATPERC","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_VATPERC",1);
				break;
				case "step44" : stepStatus[step] = SQLDBSelect("TBL_MSTTOPUP","COLUMNNAME_TOTALDISCOUNT","MSTCUSTOMER_SELECT_CONDITION","COLUMNVALUE_TOTALDISCOUNT",1);
				break;
				case "step45" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tblReDTransactionLog","DYNAMIC_TRANSACTIONID_CONDITION","SUBSCRIBERID_CONDITION","Transaction_Number",1);
				break;
				case "step46" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblReDTransactionLog","COLUMNNAME_TRANSACTIONTYPE","SUBSCRIBERID_CONDITION","COLUMNVALUE_TRANSACTIONTYPE",1);
				break;
				case "step47" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tblReDTransactionLog","DYNAMIC_REDORDERID_CONDITION","SUBSCRIBERID_CONDITION","Reference_Number",1);
				break;
				case "step48" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblReDTransactionLog","COLUMNNAME_STATUSCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_STATUSCODE",1);
				break;
				case "step49" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblReDTransactionLog","COLUMNNAME_RESPONSECODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_RESPONSECODE",1);
				break;
				case "step50" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblReDTransactionLog","COLUMNNAME_REQUESTTYPECODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_REQUESTTYPECODE",1);
				break;
				case "step51" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblReDTransactionLog","COLUMNNAME_AVSRESULTCODE","SUBSCRIBERID_CONDITION","COLUMNVALUE_AVSRESULTCODE",1);
				break;
				case "step52" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_CARDTYPE","SUBSCRIBERID_CONDITION_2","COLUMNVALUE_CARDTYPE",1);
				break;
				case "step53" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","ColumnName_CustomerIPAddress","SUBSCRIBERID_CONDITION_1","ColumnValue_CustomerIPAddress",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Do_Online_Topup_Autotopup(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps=51;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("topUp_Button"), "TopUp_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("online_TopUp_Button"), "online_TopUp_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("topupAmount_Dropdown"), "Topup Amount Dropdown");
				break;
				case "step10": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("topupAmount_Dropdown"), "Topup Amount Dropdown", "TopupAmount", 1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("email_TextBox"), "Email", "Email", 1);
				break;
				case "step12": stepStatus[step] = javascriptWebElementClick(online_TopUp.Online_TopUp_Page("isAutotopupLink"), "Do Automatic Recharge");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("BalanceLimitdpdwn"), "Balance Limit", "Balance_Limit", 1);
				break;
				case "step14": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("txtcardtopupAmount"), "Topup Amount", "Topup_Amount", 1);
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("txtcardLimitTopupAmt"), "Max Limit Auto Toupup", "Max_Limit", 1);
				break;
				case "step16": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("txtcardAutoDays"), "Max Limit Per Week", "MaxLimit_Week", 1);
				break;
				case "step17": stepStatus[step] = WebRadioSelect(online_TopUp.Online_TopUp_Page("newCard_rdButton"), "Payment Using", "New Card");
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "CardType Dropdown");
				break;
				case "step19": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "CardType Dropdown", "CardType", 1);
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Card Name");
				break;
				case "step21": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Card Name", "CardName", 1);
				break;
				case "step22": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber1_TextBox"), "Card 1st 4 Number", "Card_Number1", 1);
				break;
				case "step23": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber2_TextBox"), "Card 2nd 4 Number", "Card_Number2", 1);
				break;
				case "step24": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber3_TextBox"), "Card 3rd 4 Number", "Card_Number3", 1);
				break;
				case "step25": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber4_TextBox"), "Card 4th 4 Number", "Card_Number4", 1);
				break;
				case "step26": stepStatus[step] = javaScriptDatePicker(online_TopUp.Online_TopUp_Page("expiryDate_TextBox"), "Expiry Date", "Expiry_Date", 1);
				break;
				case "step27": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV Number");
				break;
				case "step28": stepStatus[step] = javaScriptEnterText(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV Number", "CVV_Number", 1);
				break;
				case "step29": stepStatus[step] = WebEditClickAndEnterText(online_TopUp.Online_TopUp_Page("postcode_TextBox"), "PostCode", "PostCode", 1);
				break;
				case "step30": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("searchIcon_Button"), "Search Button");
				break;
				case "step31": stepStatus[step] = waitUntilDisappear(online_TopUp.Online_TopUp_Page("loadAddress_Icon"), "Load Address Icon");
				break;
				case "step32": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("addressList_TextBox"), "Address List", "AddressList_Select", 1);
				break;
				case "step33": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("OKIcon_Button"), "OK Button");
				break;
				case "step34": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("houseNo_Textbox"), "houseNo_Textbox");
				break;
				case "step35": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("houseNo_Textbox"), "houseNo_Textbox", "ApartmentNo", 1);
				break;
				case "step36": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step37": stepStatus[step] = WaitUntilElementClickable(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step38": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("purchase_Button"), "Purchase Button");
				break;
				case "step39": stepStatus[step] = pageLoadCheck();
				break;
				case "step40": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("okBtn_Button"), "OK Button");
				break;
				case "step41": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("okBtn_Button"), "OK Button");
				break;
				case "step42": stepStatus[step] = pageLoadCheck();
				break;
				case "step43": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("UpdateSuccessMessage"), "UpdateSuccessMessage");
				break;
				case "step44": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("responseMsg_Button"), "Response Message");
				break;
				case "step45": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("responseMsg_Button"), "Response Message","Response_Message",1);
				break;
				case "step46": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("Amount_Label"), "Amount","SuccessAmount",1);
				break;
				case "step47": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.Online_TopUp_Page("ReferenceNo_Label"), "Reference Number","ReferenceNo_Pattern",1);
				break;
				case "step48": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.Online_TopUp_Page("ReferenceNo_Label"), "Reference Number","ReferenceNo_Env",1);
				break;
				case "step49": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.Online_TopUp_Page("TransactionNo_Label"), "Transaction Number","TransactionNo_Pattern",1);
				break;
				case "step50": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.Online_TopUp_Page("TransactionNo_Label"), "Transaction Number","TransactionNo_Env",1);
				break;
				case "step51": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void SendSim_Eshop(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 110;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step2": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step3": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Title"), "Title");
				break;
				case "step4": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Title"), "Title", "Title", 1);
				break;
				case "step5": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("First_Name"), "First_Name");
				break;
				case "step6": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("First_Name"), "First_Name", "First_Name", 1);
				break;
				case "step7": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Last_Name"), "Last_Name", "Last_Name", 1);
				break;						
				case "step8": stepStatus[step] = javaScriptDatePicker(send_Sim.Send_Sim_Page("Date_Of_Birth"), "Date_Of_Birth", "Date_Of_Birth", 1);
				break;
				case "step9": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Country"), "Country");
				break;
				case "step10": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Country"), "Country", "Country", 1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode_Initial", 1);
				break;
				case "step12": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Find_Address"), "Find_Address");
				break;
				case "step13": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Address_List"), "Address_List");
				break;
				case "step14": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Address_List"), "Address_List", "Address", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Accept_Address"), "Accept_Address");
				break;
				case "step16": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step17": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step18": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Postcode"), "Postcode");
				break;
				case "step19": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("City"), "City");
				break;
				case "step20": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Street"), "Street");
				break;
				case "step21": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("State"), "State", "State", 1);
				break;
				case "step22": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode", 1);
				break;
				case "step23": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("City"), "City", "City", 1);
				break;
				case "step24": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number_Initial", 1);
				break;
				case "step25": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Street"), "Street", "Street", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number", 1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Apartment_Number"), "Apartment_Number", "Apartment_Number", 1);
				break;
				case "step28": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("Billing_Address"), "Billing_Address");
				break;
				case "step29": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Billing_Postcode"), "Billing_Postcode");
				break;
				case "step30": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Billing_Country"), "Billing_Country", "Country", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_State"), "Billing_State", "Billing_State", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Postcode"), "Billing_Postcode", "Billing_Postcode", 1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_City"), "Billing_City", "Billing_City", 1);
				break;
				case "step34": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_House_Number"), "Billing_House_Number", "Billing_House_Number", 1);
				break;
				case "step35": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Street"), "Billing_Street", "Billing_Street", 1);
				break;
				case "step36": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Apartment_Number"), "Billing_Apartment_Number", "Billing_Apartment_Number", 1);
				break;
				case "step37": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Email"), "Email", "Email", 1);
				break;
				case "step38": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Contact_Number"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step39": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step40": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step41": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Check_Payment"), "Check_Payment");
				break;
				case "step42": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("Check_Payment"), "Check_Payment");
				break;
				case "step43": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims");
				break;
				case "step44": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims", "Number_Of_Sims", 1);
				break;
				case "step45": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1");
				break;
				case "step46": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1", "Sim_Type_1", 1);
				break;
				case "step47": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan");
				break;
				case "step48": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan", "Sim_Plan", 1);
				break;
				case "step49": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;					
				case "step50": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;
				case "step51": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type");
				break;
				case "step52": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type", "Topup_Type", 1);
				break;
				case "step53": stepStatus[step] = waitUntilListLoads(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value");
				break;
				case "step54": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value", "Topup_Value", 1);
				break;
				case "step55": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step56": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step57": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step58": stepStatus[step] = webTableVerifyDetailshashtable(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step59": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Next_Sim_Type"), "Next_Sim_Type");
				break;						
				case "step60": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Sim_Type"), "Next_Sim_Type");
				break;
				case "step61": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Confirm_Title"), "Confirm_Title");
				break;
				case "step62": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Title"), "Confirm_Title","Title",1);
				break;
				case "step63": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_First_Name"), "Confirm_First_Name","First_Name",1);
				break;	
				case "step64": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Last_Name"), "Confirm_Last_Name","Last_Name",1);
				break;	
				case "step65": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Date_Of_Birth"), "Confirm_Date_Of_Birth","Date_Of_Birth",1);
				break;	
				case "step66": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Country"), "Confirm_Country","Country",1);
				break;	
				case "step67": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_State"), "Confirm_State","State",1);
				break;	
				case "step68": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Postcode"), "Confirm_Postcode","Postcode",1);
				break;	
				case "step69": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_City"), "Confirm_City","City",1);
				break;	
				case "step70": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_House_Number"), "Confirm_House_Number","House_Number",1);
				break;	
				case "step71": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Street"), "Confirm_Street","Street",1);
				break;	
				case "step72": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Apartment_Number"), "Confirm_Apartment_Number","Apartment_Number",1);
				break;	
				case "step73": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Country"), "Confirm_Billing_Country","Country",1);
				break;	
				case "step74": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_State"), "Confirm_Billing_State","Billing_State",1);
				break;	
				case "step75": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Postcode"), "Confirm_Billing_Postcode","Billing_Postcode",1);
				break;	
				case "step76": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_City"), "Confirm_Billing_City","Billing_City",1);
				break;	
				case "step77": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_House_Number"), "Confirm_Billing_House_Number","Billing_House_Number",1);
				break;	
				case "step78": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Street"), "Confirm_Billing_Street","Billing_Street",1);
				break;	
				case "step79": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Apartment_Number"), "Confirm_Billing_Apartment_Number","Billing_Apartment_Number",1);
				break;	
				case "step80": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Email"), "Confirm_Email","Email",1);
				break;	
				case "step81": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Contact_Number"), "Confirm_Contact_Number","Contact_Number",1);
				break;
				case "step82": stepStatus[step] = webTableVerifyDetailshashtable(send_Sim.Send_Sim_Page("Confirm_Bundles_Table"), "Confirm_Bundles_Table","Primary_Key_Column_Name_2","Secondary_Key_Column_Names_2","Primary_Key_Column_Value_2","Secondary_Key_Column_Values_2",1);
				break;
				case "step83": stepStatus[step] = ScrollIntoElement(send_Sim.Send_Sim_Page("Next_Confirm_Page"), "Next_Confirm_Page");
				break;
				case "step84": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Confirm_Page"), "Next_Confirm_Page");
				break;
				case "step85": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Card_Type"), "Card_Type");
				break;
				case "step86": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Total_Amount"), "Total_Amount","Total_Amount",1);
				break;
				case "step87": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Card_Type"), "Card_Type", "Card_Type", 1);
				break;
				case "step88": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Name_On_Card"), "Name_On_Card");
				break;
				case "step89": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Name_On_Card"), "Name_On_Card", "Name_On_Card", 1);
				break;
				case "step90": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_1"), "Card_Number_1", "Card_Number_1", 1);
				break;
				case "step91": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_2"), "Card_Number_2", "Card_Number_2", 1);
				break;
				case "step92": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_3"), "Card_Number_3", "Card_Number_3", 1);
				break;
				case "step93": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_4"), "Card_Number_4", "Card_Number_4", 1);
				break;
				case "step94": stepStatus[step] = javaScriptDatePicker(send_Sim.Send_Sim_Page("Expiry_Date"), "Expiry_Date", "Expiry_Date", 1);
				break;
				case "step95": stepStatus[step] = javaScriptDatePicker(send_Sim.Send_Sim_Page("IssueDate"), "IssueDate", "IssueDate", 1);
				break;
				case "step96": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("IssueNumber"), "IssueNumber", "IssueNumber", 1);
				break;
				case "step97": stepStatus[step] = javaScriptEnterText(send_Sim.Send_Sim_Page("CVV_Number"), "CVV_Number", "CVV_Number", 1);
				break;
				case "step98": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Payments_Page"), "Next_Payments_Page");
				break;
				case "step99": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Submit_Payments_Page"), "Submit_Payments_Page");
				break;
				case "step100": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Total_Amount"), "Total_Amount","Total_Amount",1);
				break;					
				case "step101": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Submit_Payments_Page"), "Submit_Payments_Page");
				break;
				case "step102": stepStatus[step] = waituntiltextpresent(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step103": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step104": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Amount"), "Amount","Amount",1);
				break;
				case "step105": stepStatus[step] = WebElementDynamicStringVerify(send_Sim.Send_Sim_Page("Transaction_Number"), "Transaction_Number","Transaction_Number_Pattern",1);
				break;
				case "step106": stepStatus[step] = WebElementTextStoreDynamicValue(send_Sim.Send_Sim_Page("Transaction_Number"), "Transaction_Number","Transaction_Number_Env",1);
				break;
				case "step107": stepStatus[step] = WebElementDynamicStringVerify(send_Sim.Send_Sim_Page("Red_Order_Id"), "Red_Order_Id","Red_Order_Id_Pattern",1);
				break;
				case "step108": stepStatus[step] = WebElementTextStoreDynamicValue(send_Sim.Send_Sim_Page("Red_Order_Id"), "Red_Order_Id","OrderID_Env",1);
				break;
				case "step109": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("close_button"), "Close_Button");
				break;
				case "step110": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postconditions_SendSim(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps=8;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("Table_Name_mstFreeSimCustomer", "Column_Name_Count", "Condition_mstFreeSimCustomer", "Count_Value", 1);
				break;
				case "step2": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name_mstFreeSimCustomer","ColumnName_Transactionid","Condition_mstFreeSimCustomer","Env_Transactionid",1);
				break;
				case "step3": stepStatus[step] = ReplaceStringStoreEnvvar("Env_Transactionid","Env_Subscriberid","String_To_Replace","Replacement_String",1);
				break;
				case "step4": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_mstFreeSimCustomerActivation", "Columnname_CardId", "Condition_mstFreeSimCustomerActivation", "Env_Transactionid", "Column_Value_Cardid", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_mstFreeSimCustomerActivation", "Columnname_Topupamount", "Condition_mstFreeSimCustomerActivation", "Env_Transactionid", "Column_Value_Topupamount", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_mstFreeSimCustomerActivation", "Column_Name_Count", "Condition_mstFreeSimCustomerActivation", "Env_Transactionid", "Count_Value_mstFreeSimCustomerActivation", 1);
				break;
				case "step7": stepStatus[step] = ESHOPSQLDBSelectCompConditionEnvvar("TableName_tbleShopTransactionStatus", "Columnname_Subscriberid", "Condition_tbleShopTransactionStatus", "Env_Transactionid", "Env_Subscriberid", 1);
				break;						
				case "step8": stepStatus[step] = ESHOPSQLDBSelectConditionEnvvar1("TableName_tblUserCardDetails", "Column_Name_Count", "Condition_tblUserCardDetails", "Env_Subscriberid", "Count_Value", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void EshopSQLDB_SelectFromEnv(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = ESHOPSQLDBSelectConditionEnvvar1("Table_Name", "Column_Name", "Condition", "Condition_Value", "Column_Value", 1);
				break;

				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void EshopSQLDB_Select(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = EShopSQLDBSelect("TABLE_NAME","COLUMN_NAME","CONDITION","COLUMN_VALUE",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Post_AutoTopup_WorldPay_1(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps=14;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_GATEWAYID","SUBSCRIBERID_CONDITION_TRANSSTATUS","COLUMNVALUE_GATEWAYID",1);
				break;
				case "step2" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_AMOUNT","SUBSCRIBERID_CONDITION_TRANSSTATUS","COLUMNVALUE_AMOUNT",1);
				break;
				case "step3" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_TIMEONFILE","SUBSCRIBERID_CONDITION_TRANSSTATUS","COLUMNVALUE_TIMEONFILE",1);
				break;
				case "step4" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_REFUNDAMOUNT","SUBSCRIBERID_CONDITION_TRANSSTATUS","COLUMNVALUE_REFUNDAMOUNT",1);
				break;
				case "step5" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tbleShopTransactionStatus","DYNAMIC_ORDER_ID","SUBSCRIBERID_CONDITION_TRANSSTATUS","Reference_Number",1);
				break;
				case "step6" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tblwptransactionlog","DYNAMIC_TRANSACTIONID_CONDITION","SUBSCRIBERID_CONDITION","Transaction_Number",1);
				break;
				case "step7" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_TRANSACTIONTYPE","Condition_WPT","COLUMNVALUE_TRANSACTIONTYPE",1);
				break;
				case "step8" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tblwptransactionlog","DYNAMIC_ORDER_ID","Condition_WPT","Reference_Number",1);
				break;
				case "step9" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_STATUSCODE","Condition_WPT","COLUMNVALUE_STATUSCODE",1);
				break;
				case "step10" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_RESPONSECODE","Condition_WPT","COLUMNVALUE_RESPONSECODE",1);
				break;
				case "step11" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_RISKSCORE","Condition_WPT","COLUMNVALUE_RISKSCORE",1);
				break;
				case "step12" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_CVCRESULTCODE","Condition_WPT","COLUMNVALUE_CVCRESULTCODE",1);
				break;
				case "step13" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_AVSRESULTCODE","Condition_WPT","COLUMNVALUE_AVSRESULTCODE",1);
				break;
				case "step14" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tblwptransactionlog","COLUMNNAME_RGPROFILEID","Condition_WPT","COLUMNVALUE_RGPROFILEID",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Post_Autotopup_AuthNet_1(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		
		try{
			int totalSteps=30;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","AUTHNET_AMOUNT_COLUMN_NAME","AUTHNET_CONDITION","AUTHNET_AMOUNT_COLUMN_VALUE",1);
				break;
				case "step2" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","ORDERDESC_COLUMN_NAME","AUTHNET_CONDITION","ORDERDESC_COLUMN_VALUE",1);
				break;
				case "step3" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","ITEMUNITPRICE_COLUMN_NAME","AUTHNET_CONDITION","ITEMUNITPRICE_COLUMN_VALUE",1);
				break;
				case "step4" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","STATUS_TEXT_COLUMN_NAME","AUTHNET_CONDITION","STATUS_TEXT_COLUMN_VALUE",1);
				break;
				case "step5" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","AUTH_TAXID_COLUMN_NAME","AUTHNET_CONDITION","AUTH_TAXID_COLUMN_VALUE",1);
				break;
				case "step6" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","AUTH_VATID_COLUMN_NAME","AUTHNET_CONDITION","AUTH_VATID_COLUMN_VALUE",1);
				break;
				case "step7" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","SUBSCRIBERID_COLUMN_NAME","AUTHNET_CONDITION","SUBSCRIBERID_COLUMN_VALUE",1);
				break;
				case "step8" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_AUTHORIZENET","DYNAMIC_TRANSID_CONDITION","AUTHNET_CONDITION","TRANSACTION_ID",1);
				break;
				case "step9" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_AUTHORIZENET","AUTH_INVOICENUMBER_CONDITION","AUTHNET_CONDITION","INVOICENUMBER",1);
				break;
				case "step10" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tbleShopTransactionStatus","DYNAMIC_TRANSACTIONID_CONDITION","SUBSCRIBERID_CONDITION_TRANSSTATUS","TRANSACTION_ID",1);
				break;
				case "step11" : stepStatus[step] = EShopSQLDBSelectFromEnv("TABLE_NAME_tbleShopTransactionStatus","DYNAMIC_ORDER_ID","SUBSCRIBERID_CONDITION_TRANSSTATUS","INVOICENUMBER",1);
				break;
				case "step12" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_GATEWAYID","SUBSCRIBERID_CONDITION_TRANSSTATUS","COLUMNVALUE_GATEWAYID",1);
				break;
				case "step13" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_AMOUNT","SUBSCRIBERID_CONDITION_TRANSSTATUS","COLUMNVALUE_AMOUNT",1);
				break;
				case "step14" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_TIMEONFILE","SUBSCRIBERID_CONDITION_TRANSSTATUS","COLUMNVALUE_TIMEONFILE",1);
				break;
				case "step15" : stepStatus[step] = EShopSQLDBSelect("TABLE_NAME_tbleShopTransactionStatus","COLUMNNAME_REFUNDAMOUNT","SUBSCRIBERID_CONDITION_TRANSSTATUS","COLUMNVALUE_REFUNDAMOUNT",1);
				break;
				case "step16" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_TRANSACTIONTYPE","AUTHNET_CONDITION","COLUMNVALUE_TRANSACTIONTYPE",1);
				break;
				case "step17" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_ITEMQUANTITY","AUTHNET_CONDITION","COLUMNVALUE_ITEMQUANTITY",1);
				break;
				case "step18" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_ALLOWPARTIALAUTH","AUTHNET_CONDITION","COLUMNVALUE_ALLOWPARTIALAUTH",1);
				break;
				case "step19" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_DUPLICATEWINDOW","AUTHNET_CONDITION","COLUMNVALUE_DUPLICATEWINDOW",1);
				break;
				case "step20" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_CUSTOMER","AUTHNET_CONDITION","COLUMNVALUE_CUSTOMER",1);
				break;
				case "step21" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_RECURRINGBILLING","AUTHNET_CONDITION","COLUMNVALUE_RECURRINGBILLING",1);
				break;
				case "step22" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_TESTREQUEST","AUTHNET_CONDITION","COLUMNVALUE_TESTREQUEST",1);
				break;
				case "step23" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_USERFIELDNAME1","AUTHNET_CONDITION","COLUMNVALUE_USERFIELDNAME1",1);
				break;
				case "step24" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_USERFIELDVALUE1","AUTHNET_CONDITION","COLUMNVALUE_USERFIELDVALUE1",1);
				break;
				case "step25" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_USERFIELDNAME2","AUTHNET_CONDITION","COLUMNVALUE_USERFIELDNAME2",1);
				break;
				case "step26" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_USERFIELDVALUE2","AUTHNET_CONDITION","COLUMNVALUE_USERFIELDVALUE2",1);
				break;
				case "step27" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_RESULTCODE","AUTHNET_CONDITION","COLUMNVALUE_RESULTCODE",1);
				break;
				case "step28" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_STATUSCODE","AUTHNET_CONDITION","COLUMNVALUE_STATUSCODE",1);
				break;
				case "step29" : stepStatus[step] = EShopSQLDBSelect("TABLE_AUTHORIZENET","COLUMNNAME_RESPONSECODE","AUTHNET_CONDITION","COLUMNVALUE_RESPONSECODE",1);
				break;
				case "step30" : stepStatus[step] = EShopSQLDBSelect("TABLE_USERCARDDETAILS","COLUMNNAME_CARDTYPE","SUBSCRIBERID_CONDITION","COLUMNVALUE_CARDTYPE",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Do_Auto_Topup(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=21;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Auto_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step8": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = waitUntilDisappear(online_TopUp.Auto_TopUp_Page("MenuLoading_Icon"), "Menu Loading Icon");
				break;
				case "step10": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("Auto_TopUp_Image"), "Auto TopUp Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("BalanceLimit_Dropdown"), "Topup Amount Dropdown");
				break;
				case "step12": stepStatus[step] = javascriptWebElementClick(online_TopUp.Auto_TopUp_Page("IsAutoTopup_Select"), "Do Automatic Recharge");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.Auto_TopUp_Page("BalanceLimit_Dropdown"), "Balance Limit", "Balance_Limit", 1);
				break;
				case "step14": stepStatus[step] = WebListSelect(online_TopUp.Auto_TopUp_Page("ATopupAmount_Dropdown"), "Topup Amount", "Topup_Amount", 1);
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.Auto_TopUp_Page("MaxLimit_Dropdown"), "Max Limit Auto Toupup", "Max_Limit", 1);
				break;
				case "step16": stepStatus[step] = WebListSelect(online_TopUp.Auto_TopUp_Page("APerWeek_Dropdown"), "Max Limit Per Week", "MaxLimit_Week", 1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(online_TopUp.Auto_TopUp_Page("UsingCard_Label"), "Using Card", "Using_Card", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("Submit_Button"), "Submit Button");
				break;
				case "step19": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("Submit_Button"), "Submit Button");
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(online_TopUp.Auto_TopUp_Page("Response_message"), "Auto Topup Message", "Response_Message", 1);
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.Online_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Do_SwapImsi(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=19;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Auto_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("simButton"), "simButton");
				break;
				case "step8": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("simButton"), "simButton");
				break;
				case "step9": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("SWAPImsiLink"), "SWAPImsiLink");
				break;
				case "step10": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("SWAPImsiLink"), "SWAPImsiLink");
				break;
				case "step11": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("Submit_button"), "Submit_button");
				break;
				case "step12": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("NewMSISDN"), "NewMSISDN", "NewMSISDN", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("newICCID"), "NewICCID", "NewICCID", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("PAN_Number"), "PAN_Number", "PAN_Number", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("CIP"), "CIP", "CIP", 1);
				break;
				case "step16": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("Submit_button"), "Submit_button");
				break;
				case "step17": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("AlertMessage"), "AlertMessage");
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(swapImsi_Page.SwapImsi_PageObj("AlertMessage"), "Alert Message", "Alert_Message", 1);
				break;
				case "step19": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("tbl_MstSwapImsi","Columnname_RequestID","condition","Environment_RequestID",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Do_SwapImsi_1(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=20;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Auto_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("simButton"), "simButton");
				break;
				case "step8": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("simButton"), "simButton");
				break;
				case "step9": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("SWAPImsiLink"), "SWAPImsiLink");
				break;
				case "step10": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("SWAPImsiLink"), "SWAPImsiLink");
				break;
				case "step11": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("Submit_button"), "Submit_button");
				break;
				case "step12": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("NewMSISDN"), "NewMSISDN", "NewMSISDN", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("newICCID"), "NewICCID", "NewICCID", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("FrequentDialedNumber"), "FrequentDialedNumber", "FDN_Number", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("PAN_Number"), "PAN_Number", "PAN_Number", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("CIP"), "CIP", "CIP", 1);
				break;
				case "step17": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("Submit_button"), "Submit_button");
				break;
				case "step18": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("AlertMessage"), "AlertMessage");
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(swapImsi_Page.SwapImsi_PageObj("AlertMessage"), "Alert Message", "Alert_Message", 1);
				break;
				case "step20": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("tbl_MstSwapImsi","Columnname_RequestID","condition","Environment_RequestID",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Do_SwapImsi_PreAuthorize(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=15;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = ScrollIntoElement(swapImsi_Page.SwapImsi_PageObj("SwapIMSIApprovalLink"), "SwapIMSIApprovalLink");
				break;
				case "step3": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("SwapIMSIApprovalLink"), "SwapIMSIApprovalLink");
				break;
				case "step4": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("RequestID"), "RequestID");
				break;
				case "step5": stepStatus[step] = enterEnvValueAndClickEnter(swapImsi_Page.SwapImsi_PageObj("RequestID"), "Environment_RequestID", "RequestID", 1);
				break;
				case "step6": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapIMSI_Pending_Approvals("pendingApproval_SwapIMSI", Runtimevalue.getProperty("Environment_RequestID")), "pendingApproval_SwapIMSI");
				break;
				case "step7": stepStatus[step] = WebElementClick(swapImsi_Page.SwapIMSI_Pending_Approvals("pendingApproval_SwapIMSI", Runtimevalue.getProperty("Environment_RequestID")), "pendingApproval_SwapIMSI");
				break;
				case "step8": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("PreAuthorize_button"), "PreAuthorize_button");
				break;
				case "step9": stepStatus[step] = WebElementValueCompare(swapImsi_Page.SwapImsi_PageObj("NewMSISDN"), "NewMSISDN","NewMSISDN",1);
				break;
				case "step10": stepStatus[step] = WebElementValueCompare(swapImsi_Page.SwapImsi_PageObj("newICCID"), "NewICCID","NewICCID",1);
				break;	
				case "step11": stepStatus[step] = WebElementValueCompare(swapImsi_Page.SwapImsi_PageObj("PAN_Number"), "PAN_Number","PAN_Number",1);
				break;
				case "step12": stepStatus[step] = WebElementValueCompare(swapImsi_Page.SwapImsi_PageObj("CIP"), "cip","CIP",1);
				break;
				case "step13":stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("PreAuthorize_button"), "PreAuthorize_button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("AlertMessage"), "AlertMessage");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(swapImsi_Page.SwapImsi_PageObj("AlertMessage"), "AlertMessage","Alert_Message",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Do_SwapImsi_PreAuthorize_1(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=16;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = ScrollIntoElement(swapImsi_Page.SwapImsi_PageObj("SwapIMSIApprovalLink"), "SwapIMSIApprovalLink");
				break;
				case "step3": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("SwapIMSIApprovalLink"), "SwapIMSIApprovalLink");
				break;
				case "step4": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("RequestID"), "RequestID");
				break;
				case "step5": stepStatus[step] = enterEnvValueAndClickEnter(swapImsi_Page.SwapImsi_PageObj("RequestID"), "Environment_RequestID", "RequestID", 1);
				break;
				case "step6": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapIMSI_Pending_Approvals("pendingApproval_SwapIMSI", Runtimevalue.getProperty("Environment_RequestID")), "pendingApproval_SwapIMSI");
				break;
				case "step7": stepStatus[step] = WebElementClick(swapImsi_Page.SwapIMSI_Pending_Approvals("pendingApproval_SwapIMSI", Runtimevalue.getProperty("Environment_RequestID")), "pendingApproval_SwapIMSI");
				break;
				case "step8": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("PreAuthorize_button"), "PreAuthorize_button");
				break;
				case "step9": stepStatus[step] = WebElementValueCompare(swapImsi_Page.SwapImsi_PageObj("NewMSISDN"), "NewMSISDN","NewMSISDN",1);
				break;
				case "step10": stepStatus[step] = WebElementValueCompare(swapImsi_Page.SwapImsi_PageObj("newICCID"), "NewICCID","NewICCID",1);
				break;	
				case "step11": stepStatus[step] = WebElementValueCompare(swapImsi_Page.SwapImsi_PageObj("PAN_Number"), "PAN_Number","PAN_Number",1);
				break;
				case "step12": stepStatus[step] = WebElementValueCompare(swapImsi_Page.SwapImsi_PageObj("CIP"), "cip","CIP",1);
				break;
				case "step13": stepStatus[step] = WebElementValueCompare(swapImsi_Page.SwapImsi_PageObj("FrequentDialedNumber"), "FDN_Number","FDN_Number",1);
				break;
				case "step14":stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("PreAuthorize_button"), "PreAuthorize_button");
				break;
				case "step15": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("AlertMessage"), "AlertMessage");
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(swapImsi_Page.SwapImsi_PageObj("AlertMessage"), "AlertMessage","Alert_Message",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Do_SwapImsi_Admin(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=19;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Auto_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("simButton"), "simButton");
				break;
				case "step8": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("simButton"), "simButton");
				break;
				case "step9": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("SWAPImsiLink"), "SWAPImsiLink");
				break;
				case "step10": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("SWAPImsiLink"), "SWAPImsiLink");
				break;
				case "step11": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("PreAuthorize_button_admin"), "PreAuthorize_button_admin");
				break;
				case "step12": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("NewMSISDN"), "NewMSISDN", "NewMSISDN", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("newICCID"), "NewICCID", "NewICCID", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("PAN_Number"), "PAN_Number", "PAN_Number", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("CIP"), "CIP", "CIP", 1);
				break;
				case "step16": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("PreAuthorize_button_admin"), "PreAuthorize_button_admin");
				break;
				case "step17": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("AlertMessage"), "AlertMessage");
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(swapImsi_Page.SwapImsi_PageObj("AlertMessage"), "Alert Message", "Alert_Message", 1);
				break;
				case "step19": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("tbl_MstSwapImsi","Columnname_RequestID","condition","Environment_RequestID",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Do_SwapImsi_Admin_1(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=20;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Auto_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("simButton"), "simButton");
				break;
				case "step8": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("simButton"), "simButton");
				break;
				case "step9": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("SWAPImsiLink"), "SWAPImsiLink");
				break;
				case "step10": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("SWAPImsiLink"), "SWAPImsiLink");
				break;
				case "step11": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("PreAuthorize_button_admin"), "PreAuthorize_button_admin");
				break;
				case "step12": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("NewMSISDN"), "NewMSISDN", "NewMSISDN", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("newICCID"), "NewICCID", "NewICCID", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("FrequentDialedNumber"), "FrequentDialedNumber", "FDN_Number", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("PAN_Number"), "PAN_Number", "PAN_Number", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("CIP"), "CIP", "CIP", 1);
				break;
				case "step17": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("PreAuthorize_button_admin"), "PreAuthorize_button_admin");
				break;
				case "step18": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("AlertMessage"), "AlertMessage");
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(swapImsi_Page.SwapImsi_PageObj("AlertMessage"), "Alert Message", "Alert_Message", 1);
				break;
				case "step20": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("tbl_MstSwapImsi","Columnname_RequestID","condition","Environment_RequestID",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Do_SwapImsi_Reject(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=15;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = ScrollIntoElement(swapImsi_Page.SwapImsi_PageObj("SwapIMSIApprovalLink"), "SwapIMSIApprovalLink");
				break;
				case "step3": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("SwapIMSIApprovalLink"), "SwapIMSIApprovalLink");
				break;
				case "step4": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("RequestID"), "RequestID");
				break;
				case "step5": stepStatus[step] = enterEnvValueAndClickEnter(swapImsi_Page.SwapImsi_PageObj("RequestID"), "Environment_RequestID", "RequestID", 1);
				break;
				case "step6": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapIMSI_Pending_Approvals("pendingApproval_SwapIMSI", Runtimevalue.getProperty("Environment_RequestID")), "pendingApproval_SwapIMSI");
				break;
				case "step7": stepStatus[step] = WebElementClick(swapImsi_Page.SwapIMSI_Pending_Approvals("pendingApproval_SwapIMSI", Runtimevalue.getProperty("Environment_RequestID")), "pendingApproval_SwapIMSI");
				break;
				case "step8": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("PreAuthorize_button"), "PreAuthorize_button");
				break;
				case "step9": stepStatus[step] = WebElementValueCompare(swapImsi_Page.SwapImsi_PageObj("NewMSISDN"), "NewMSISDN","NewMSISDN",1);
				break;
				case "step10": stepStatus[step] = WebElementValueCompare(swapImsi_Page.SwapImsi_PageObj("newICCID"), "NewICCID","NewICCID",1);
				break;	
				case "step11": stepStatus[step] = WebElementValueCompare(swapImsi_Page.SwapImsi_PageObj("PAN_Number"), "PAN_Number","PAN_Number",1);
				break;
				case "step12": stepStatus[step] = WebElementValueCompare(swapImsi_Page.SwapImsi_PageObj("CIP"), "cip","CIP",1);
				break;
				case "step13":stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("Reject_Button"), "Reject_Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("AlertMessage"), "AlertMessage");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(swapImsi_Page.SwapImsi_PageObj("AlertMessage"), "AlertMessage","Alert_Message",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void SwapIMSI_CIP_MinMaxValidation(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=20;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Auto_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("simButton"), "simButton");
				break;
				case "step8": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("simButton"), "simButton");
				break;
				case "step9": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("SWAPImsiLink"), "SWAPImsiLink");
				break;
				case "step10": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("SWAPImsiLink"), "SWAPImsiLink");
				break;
				case "step11": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("NewMSISDN"), "NewMSISDN");
				break;
				case "step12": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("NewMSISDN"), "NewMSISDN", "NewMSISDN", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("newICCID"), "NewICCID", "NewICCID", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("PAN_Number"), "PAN_Number", "PAN_Number", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("CIP"), "CIP", "CIP", 1);
				break;
				case "step16": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("NewMSISDN"), "NewMSISDN");
				break;
				case "step17": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("CIPErrorMessage"), "AlertMessage");
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(swapImsi_Page.SwapImsi_PageObj("CIPErrorMessage"), "CIPErrorMessage", "CIPErrorMessage", 1);
				break;
				case "step19": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("PANErrorMessage"), "AlertMessage");
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(swapImsi_Page.SwapImsi_PageObj("PANErrorMessage"), "PANErrorMessage", "PANErrorMessage", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void SwapIMSI_CIP_MinMaxValidation_1(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=22;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Auto_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("simButton"), "simButton");
				break;
				case "step8": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("simButton"), "simButton");
				break;
				case "step9": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("SWAPImsiLink"), "SWAPImsiLink");
				break;
				case "step10": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("SWAPImsiLink"), "SWAPImsiLink");
				break;
				case "step11": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("NewMSISDN"), "NewMSISDN");
				break;
				case "step12": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("NewMSISDN"), "NewMSISDN", "NewMSISDN", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("newICCID"), "NewICCID", "NewICCID", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("PAN_Number"), "PAN_Number", "PAN_Number", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("CIP"), "CIP", "CIP", 1);
				break;
				case "step16": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("NewMSISDN"), "NewMSISDN");
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(swapImsi_Page.SwapImsi_PageObj("CIPErrorMessage"), "CIPErrorMessage", "CIPErrorMessage", 1);
				break;
				case "step18": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("CIP"), "CIP", "CIP_MAX_VAL_ENTER", 1);
				break;
				case "step19": stepStatus[step] = WebElementValueCompare(swapImsi_Page.SwapImsi_PageObj("CIP"), "CIP", "CIP_EXPECTED_VAL_VERIFY", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("PreAuthorize_button_admin"), "PreAuthorize_button_admin");
				break;
				case "step21": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("AlertMessage"), "AlertMessage");
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(swapImsi_Page.SwapImsi_PageObj("AlertMessage"), "Alert Message", "Alert_Message", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void SwapIMSI_CIP_MinMaxValidation_2(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=23;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.Auto_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(online_TopUp.Auto_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.Auto_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.Auto_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("simButton"), "simButton");
				break;
				case "step8": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("simButton"), "simButton");
				break;
				case "step9": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("SWAPImsiLink"), "SWAPImsiLink");
				break;
				case "step10": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("SWAPImsiLink"), "SWAPImsiLink");
				break;
				case "step11": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("NewMSISDN"), "NewMSISDN");
				break;
				case "step12": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("NewMSISDN"), "NewMSISDN", "NewMSISDN", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("newICCID"), "NewICCID", "NewICCID", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("PAN_Number"), "PAN_Number", "PAN_Number", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("NewMSISDN"), "NewMSISDN");
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(swapImsi_Page.SwapImsi_PageObj("PANErrorMessage"), "PANErrorMessage", "CIPErrorMessage", 1);
				break;
				case "step17": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("CIP"), "CIP", "CIP", 1);
				break;
				case "step18": stepStatus[step] = WebEditEnterText(swapImsi_Page.SwapImsi_PageObj("PAN_Number"), "PAN_Number", "PAN_MAX_VAL_ENTER", 1);
				break;
				case "step19": stepStatus[step] = WebElementValueCompare(swapImsi_Page.SwapImsi_PageObj("PAN_Number"), "PAN_Number", "PAN_EXPECTED_VAL_VERIFY", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(swapImsi_Page.SwapImsi_PageObj("PreAuthorize_button_admin"), "PreAuthorize_button_admin");
				break;
				case "step21": stepStatus[step] = waitUntilExist(swapImsi_Page.SwapImsi_PageObj("AlertMessage"), "AlertMessage");
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(swapImsi_Page.SwapImsi_PageObj("AlertMessage"), "Alert Message", "Alert_Message", 1);
				break;
				case "step23": stepStatus[step] = WebElementDisabled(swapImsi_Page.SwapImsi_PageObj("PreAuthorize_button_admin"), "PreAuthorize_button_admin");
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Validate_Before_EditReg(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=39;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step6": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("expand_RegIcon"), "Expand_Icon");
				break;
				case "step7": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("view_RegBtn"), "View_Registration_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("edit_RegBtn"), "edit_RegBtn");
				break;
				case "step9": stepStatus[step] = pageLoadCheck();
				break;
				///// newly added event
				case "step10": stepStatus[step] = changeToCoordinates("GBR_Registration");
				break;

				case "step11": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("withPersonalOptions"), "Options");
				break;
				case "step12": stepStatus[step] = webCheckBoxCheckStatus(registration_NOR.Registration_Page("withoutPersonalOptions"), "withoutPersonalOptions");
				break;
				case "step13": stepStatus[step] = WebListSelectedValue(registration_NOR.Registration_Page("TypeofID_WOP"), "Type_of_ID","Type_of_ID",1);
				break;
				case "step14": stepStatus[step] = WebElementValueCompare(registration_NOR.Registration_Page("PersonalInformation_WOP"), "PersonalInformation","Personal_Number",1);
				break;
				case "step15": stepStatus[step] = WebListSelectedValue(registration_NOR.Registration_Page("ddlTitle"), "Title","Title",1);
				break;
				case "step16": stepStatus[step] = WebElementValueCompare(registration_NOR.Registration_Page("FirstName"), "FirstName","FirstName",1);
				break;
				case "step17": stepStatus[step] = WebElementValueCompare(registration_NOR.Registration_Page("LastName"), "LastName","LastName",1);
				break;
				case "step18": stepStatus[step] = WebElementValueCompare(registration_NOR.Registration_Page("DOB"), "DateOfBirth", "DOB", 1);
				break;
				case "step19": stepStatus[step] = WebListSelectedValue(registration_NOR.Registration_Page("Nationality"), "Nationality","Nationality",1);
				break;
				case "step20": stepStatus[step] = WebListSelectedValue(registration_NOR.Registration_Page("CountryName"), "Country","Country",1);
				break;
				case "step21": stepStatus[step] = WebElementValueCompare(registration_NOR.Registration_Page("State"), "State","State",1);
				break;
				case "step22": stepStatus[step] = WebElementValueCompare(registration_NOR.Registration_Page("PostCode"), "Postcode","Postcode",1);
				break;
				case "step23": stepStatus[step] = WebElementValueCompare(registration_NOR.Registration_Page("EditReg_City"), "ddlCity","City",1);
				break;
				case "step24": stepStatus[step] = WebElementValueCompare(registration_NOR.Registration_Page("ApartmentNumber"), "ApartmentNumber","ApartmentNumber",1);
				break;
				case "step25": stepStatus[step] = WebElementValueCompare(registration_NOR.Registration_Page("EditReg_Street"), "StreetName","StreetName",1);
				break;
				case "step26": stepStatus[step] = WebElementValueCompare(registration_NOR.Registration_Page("EditReg_House_Number"), "HouseNumber","HouseNo",1);
				break;
				case "step27": stepStatus[step] = WebElementValueCompare(registration_NOR.Registration_Page("EmailID"), "EmailID","Email",1);
				break;
				case "step28": stepStatus[step] = WebElementValueCompare(registration_NOR.Registration_Page("Contact"), "Contact","Contact",1);
				break;
				case "step29": stepStatus[step] = WebListSelectedValue(registration_NOR.Registration_Page("ddLanguage"), "ddLanguage","LanguageCode",1);
				break;
				case "step30": stepStatus[step] = WebElementValueCompare(registration_NOR.Registration_Page("txtSimCardNumber"), "SimCardNumber","SimCardNumber",1);
				break;
				case "step31": stepStatus[step] = WebElementValueCompare(registration_NOR.Registration_Page("pukcode"), "pukcode","pukcode",1);
				break;
				case "step32": stepStatus[step] = WebElementValueCompare(registration_NOR.Registration_Page("LycaMobileMSISDN"), "LycaMobileMSISDN","LABEL_MSISDN",1);
				break;
				case "step33": stepStatus[step] = webCheckBoxCheckStatus(registration_NOR.Registration_Page("chkboxTermsAndCondition"), "ReadAndAgreeTerms");
				break;
				case "step34": stepStatus[step] = webCheckBoxUnCheckStatus(registration_NOR.Registration_Page("chkboxMarketingSMS"), "chkboxMarketingSMS");
				break;
				case "step35": stepStatus[step] = webCheckBoxUnCheckStatus(registration_NOR.Registration_Page("chkboxBusinessAndMarketingAcceptance"), "chkboxBusinessAndMarketingAcceptance");
				break;
				case "step36": stepStatus[step] = webCheckBoxUnCheckStatus(registration_NOR.Registration_Page("chkboxPersonalInfoAcceptance"), "chkboxPersonalInfoAcceptance");
				break;
				case "step37": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("reg_CloseBtn"), "Close_Button");
				break;
				case "step38": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("txtNewRegistration"), "txtNewRegistration");
				break;
				case "step39": stepStatus[step] = setScrollBarOFF("NOR_Registration");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	/*---------------------------PRAVEEN CODE END------------------------------------*/
	
	/*---------------------------YOGENDRA CODE------------------------------------*/
	
	public synchronized void REG_FRA_Email_Alert(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 8;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("MSISDN_New_Registration"), "MSISDN");
				break;
				case "step2": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("MSISDN_New_Registration"), "MSISDN", "MSISDN", 1);
				break;
				case "step3": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("NewRegister"), "NewRegister");
				break;
				case "step4": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Title"), "Title");
				break;
				case "step5": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Email"), "Email", "Email", 1);
				break;
				case "step6": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("First_Name"), "First_Name");
				break;
				case "step7": stepStatus[step] = waituntiltextpresent(registration_FRA.Registration_Page("Email_Alert_Message"), "Email_Alert_Message");
				break;
				case "step8": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Email_Alert_Message"), "Email_Alert_Message","Alert_Message",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void REG_FRA_Mandatory_Alert(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 9;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("MSISDN_New_Registration"), "MSISDN");
				break;
				case "step2": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("MSISDN_New_Registration"), "MSISDN", "MSISDN", 1);
				break;
				case "step3": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("NewRegister"), "NewRegister");
				break;
				case "step4": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Title"), "Title");
				break;
				case "step5": stepStatus[step] = ScrollIntoElement(registration_FRA.Registration_Page("Next"), "Next");
				break;
				case "step6": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Next"), "Next");
				break;
				case "step7": stepStatus[step] = ScrollIntoElement(registration_FRA.Registration_Page("Alert_Message"), "Alert_Message");
				break;
				case "step8": stepStatus[step] = waituntiltextpresent(registration_FRA.Registration_Page("Alert_Message"), "Alert_Message");
				break;
				case "step9": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Alert_Message"), "Alert_Message","Alert_Message",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void REG_FRA_Email_NP(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 7;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("MSISDN_New_Registration"), "MSISDN");
				break;
				case "step2": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("MSISDN_New_Registration"), "MSISDN", "MSISDN", 1);
				break;
				case "step3": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("NewRegister"), "NewRegister");
				break;
				case "step4": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Title"), "Title");
				break;
				case "step5": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Email"), "Email", "Email", 1);
				break;
				case "step6": stepStatus[step] = webElementTabClick(registration_FRA.Registration_Page("Email"), "Email");
				break;
				case "step7": stepStatus[step] = WebElementisNotVisible(registration_FRA.Registration_Page("Email_Alert_Message"), "Email_Alert_Message");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Update_Configs_FRA(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 15;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.settings_Page("country_Dropdown_FRA"), "country_Dropdown_FRA");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.settings_Page("country_Dropdown_FRA"), "country_Dropdown_FRA");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.settings_Page("country_DropdownValues_FRA"), "Country_Dropdown", "CountryBrand_DDValue", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;
				case "step10": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "Config_Name", 1);
				break;
				case "step11": stepStatus[step] = doubleClickOnElement(settings.Settings_Obj_runtime(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"key_Configuration","sim_Type","Config_Name",1), "key_Configuration");
				break;
				case "step12": stepStatus[step] = enterValuesAndClickEnterBtn(settings.Settings_Obj_runtime(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"value_Configuration","sim_Type","Config_Name",1), "value_Configuration", "key_Value_1", 1);
				break;
				case "step13": stepStatus[step] = enterValuesAndClickEnterBtn(settings.Settings_Obj_runtime(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"value_Configuration","sim_Type","Config_Name",1), "value_Configuration", "key_Value_2", 1);
				break;
				case "step14": stepStatus[step] = WebElementClick(settings.settings_Page("close_Btn"), "Close_Button");
				break;
				case "step15": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void REG_FRA_Field_Validations(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 33;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("MSISDN_New_Registration"), "MSISDN");
				break;
				case "step2": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("MSISDN_New_Registration"), "MSISDN", "MSISDN", 1);
				break;
				case "step3": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("NewRegister"), "NewRegister");
				break;
				case "step4": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Title"), "Title");
				break;
				case "step5": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("radio_Pukcode"), "radio_Pukcode");
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Puk_Code_1"), "Puk_Code_1");
				break;
				case "step7": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Puk_Code_1"), "Puk_Code_1", "Puk_Code_1_Initial", 1);
				break;
				case "step8": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Puk_Code_1"), "Puk_Code_1", "Puk_Code_1_Final", 1);
				break;
				case "step9": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Puk_Code_Sim_1"), "Puk_Code_Sim_1", "Puk_Code_Sim_1_Initial", 1);
				break;
				case "step10": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Puk_Code_Sim_1"), "Puk_Code_Sim_1", "Puk_Code_Sim_1_Final", 1);
				break;
				case "step11": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("radio_MSISDN"), "radio_MSISDN");
				break;
				case "step12": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("MSISDN_1"), "MSISDN_1");
				break;
				case "step13": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("MSISDN_1"), "MSISDN_1", "MSISDN_1_Initial", 1);
				break;
				case "step14": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("MSISDN_1"), "MSISDN_1", "MSISDN_1_Final", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("MSISDN_Sim_1"), "MSISDN_Sim_1", "MSISDN_Sim_1_Initial", 1);
				break;
				case "step16": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("MSISDN_Sim_1"), "MSISDN_Sim_1", "MSISDN_Sim_1_Final", 1);
				break;
				case "step17": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("First_Name"), "First_Name");
				break;
				case "step18": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("First_Name"), "First_Name", "First_Name_Initial", 1);
				break;
				case "step19": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("First_Name"), "First_Name", "First_Name_Final", 1);
				break;
				case "step20": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Last_Name"), "Last_Name", "Last_Name_Initial", 1);
				break;
				case "step21": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Last_Name"), "Last_Name", "Last_Name_Final", 1);
				break;
				case "step22": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Contact_Number"), "Contact_Number", "Contact_Number_Initial", 1);
				break;
				case "step23": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Contact_Number"), "Contact_Number", "Contact_Number_Final", 1);
				break;
				case "step24": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Email"), "Email", "Email_Initial", 1);
				break;
				case "step25": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Email"), "Email", "Email_Final", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Post_Code"), "Post_Code", "Post_Code_Initial", 1);
				break;
				case "step27": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Post_Code"), "Post_Code", "Post_Code_Final", 1);
				break;
				case "step28": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("ID_Form"), "ID_Form", "ID_Form", 1);
				break;
				case "step29": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("ID_Number"), "ID_Number");
				break;
				case "step30": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("ID_Number"), "ID_Number", "ID_Number_Initial", 1);
				break;
				case "step31": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("ID_Number"), "ID_Number", "ID_Number_Final", 1);
				break;
				case "step32": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("close_button"), "Close_Button");
				break;
				case "step33": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("MSISDN_New_Registration"), "MSISDN");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void EDR_FRA_Email_Alert(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 14;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Load_Parameter"), "Load_Parameter", "MSISDN", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Subscriber_View"), "Subscriber_View");
				break;
				case "step7": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Subscriber_View"), "Subscriber_View");
				break;
				case "step8": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Edit_Registration"), "Edit_Registration");
				break;
				case "step9": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Edit_Registration"), "Edit_Registration");
				break;
				case "step10": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Title"), "Title");
				break;
				case "step11": stepStatus[step] = Webeditselectentertext(registration_FRA.Registration_Page("Email"), "Email", "Email", 1);
				break;
				case "step12": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("First_Name"), "First_Name");
				break;
				case "step13": stepStatus[step] = waituntiltextpresent(registration_FRA.Registration_Page("Email_Alert_Message"), "Email_Alert_Message");
				break;
				case "step14": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Email_Alert_Message"), "Email_Alert_Message","Alert_Message",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void EDR_FRA_Mandatory_Alert(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 21;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Load_Parameter"), "Load_Parameter", "MSISDN", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Subscriber_View"), "Subscriber_View");
				break;
				case "step7": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Subscriber_View"), "Subscriber_View");
				break;
				case "step8": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Edit_Registration"), "Edit_Registration");
				break;
				case "step9": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Edit_Registration"), "Edit_Registration");
				break;
				case "step10": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Title"), "Title");
				break;
				case "step11": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("First_Name"), "First_Name");
				break;
				case "step12": stepStatus[step] = webElementClearText(registration_FRA.Registration_Page("First_Name"), "First_Name");
				break;
				case "step13": stepStatus[step] = webElementClearText(registration_FRA.Registration_Page("Last_Name"), "Last_Name");
				break;
				case "step14": stepStatus[step] = webElementClearText(registration_FRA.Registration_Page("Contact_Number"), "Contact_Number");
				break;
				case "step15": stepStatus[step] = webElementClearText(registration_FRA.Registration_Page("Email"), "Email");
				break;
				case "step16": stepStatus[step] = webElementClearText(registration_FRA.Registration_Page("ID_Number"), "ID_Number");
				break;
				case "step17": stepStatus[step] = ScrollIntoElement(registration_FRA.Registration_Page("Next"), "Next");
				break;
				case "step18": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Next"), "Next");
				break;
				case "step19": stepStatus[step] = ScrollIntoElement(registration_FRA.Registration_Page("Alert_Message"), "Alert_Message");
				break;
				case "step20": stepStatus[step] = waituntiltextpresent(registration_FRA.Registration_Page("Alert_Message"), "Alert_Message");
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Alert_Message"), "Alert_Message","Alert_Message",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void EDR_FRA_Email_NP(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 13;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Load_Parameter"), "Load_Parameter", "MSISDN", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Subscriber_View"), "Subscriber_View");
				break;
				case "step7": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Subscriber_View"), "Subscriber_View");
				break;
				case "step8": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Edit_Registration"), "Edit_Registration");
				break;
				case "step9": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Edit_Registration"), "Edit_Registration");
				break;
				case "step10": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Title"), "Title");
				break;
				case "step11": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Email"), "Email", "Email", 1);
				break;
				case "step12": stepStatus[step] = webElementTabClick(registration_FRA.Registration_Page("Email"), "Email");
				break;
				case "step13": stepStatus[step] = WebElementisNotVisible(registration_FRA.Registration_Page("Email_Alert_Message"), "Email_Alert_Message");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void EDR_FRA_Field_Validations(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 29;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Load_Parameter"), "Load_Parameter", "MSISDN", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Subscriber_View"), "Subscriber_View");
				break;
				case "step7": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Subscriber_View"), "Subscriber_View");
				break;
				case "step8": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Edit_Registration"), "Edit_Registration");
				break;
				case "step9": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Edit_Registration"), "Edit_Registration");
				break;
				case "step10": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Title"), "Title");
				break;
				case "step11": stepStatus[step] = Webeditselectentertext(registration_FRA.Registration_Page("First_Name"), "First_Name", "First_Name_Initial", 1);
				break;
				case "step12": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("First_Name"), "First_Name", "First_Name_Final", 1);
				break;
				case "step13": stepStatus[step] = Webeditselectentertext(registration_FRA.Registration_Page("Last_Name"), "Last_Name", "Last_Name_Initial", 1);
				break;
				case "step14": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Last_Name"), "Last_Name", "Last_Name_Final", 1);
				break;
				case "step15": stepStatus[step] = Webeditselectentertext(registration_FRA.Registration_Page("Contact_Number"), "Contact_Number", "Contact_Number_Initial", 1);
				break;
				case "step16": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Contact_Number"), "Contact_Number", "Contact_Number_Final", 1);
				break;
				case "step17": stepStatus[step] = Webeditselectentertext(registration_FRA.Registration_Page("Email"), "Email", "Email_Initial", 1);
				break;
				case "step18": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Email"), "Email", "Email_Final", 1);
				break;
				case "step19": stepStatus[step] = sleepForFunction();
				break;
				case "step20": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Reset_Address"), "Reset_Address");
				break;
				case "step21": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Reset_Address"), "Reset_Address");
				break;
				case "step22": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Post_Code"), "Post_Code");
				break;
				case "step23": stepStatus[step] = WebElementEnabled(registration_FRA.Registration_Page("Post_Code"), "Post_Code");
				break;
				case "step24": stepStatus[step] = Webeditselectentertext(registration_FRA.Registration_Page("Post_Code"), "Post_Code", "Post_Code_Initial", 1);
				break;
				case "step25": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Post_Code"), "Post_Code", "Post_Code_Final", 1);
				break;
				case "step26": stepStatus[step] = Webeditselectentertext(registration_FRA.Registration_Page("ID_Number"), "ID_Number", "ID_Number_Initial", 1);
				break;
				case "step27": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("ID_Number"), "ID_Number", "ID_Number_Final", 1);
				break;
				case "step28": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("close_button"), "Close_Button");
				break;
				case "step29": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("MSISDN_New_Registration"), "MSISDN");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void View_Registration_FRA(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 35;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Load_Parameter"), "Load_Parameter", "MSISDN", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Subscriber_View"), "Subscriber_View");
				break;
				case "step7": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Subscriber_View"), "Subscriber_View");
				break;
				case "step8": stepStatus[step] = waitUntilDisappear(registration_FRA.Registration_Page("Loading_Image_Subscriber_View"), "Loading_Image_Subscriber_View");
				break;
				case "step9": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("View_Registration"), "View_Registration");
				break;
				case "step10": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("View_Registration"), "View_Registration");
				break;
				case "step11": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("View_Puk_Code"), "View_Puk_Code");
				break;
				case "step12": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("View_Puk_Code"), "View_Puk_Code","Puk_Code",1);
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("View_Puk_Code_Sim_Number"), "View_Puk_Code_Sim_Number","Puk_Code_Sim_Number",1);
				break;
				case "step14": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("View_IMSI_1"), "View_IMSI_1","IMSI_1",1);
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("View_IMSI_2"), "View_IMSI_2","IMSI_2",1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("View_MSISDN"), "View_MSISDN","MSISDN",1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("View_Title"), "View_Title","Title",1);
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("View_First_Name"), "View_First_Name","First_Name",1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("View_Last_Name"), "View_Last_Name","Last_Name",1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("View_Date_Of_Birth"), "View_Date_Of_Birth","Date_Of_Birth",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("View_Contact_Number"), "View_Contact_Number","Contact_Number",1);
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("View_Email"), "View_Email","Email",1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("View_Account_Number"), "View_Account_Number","Account_Number",1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("View_Country"), "View_Country","Country",1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("View_Post_Code"), "View_Post_Code","Post_Code",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("View_City"), "View_City","City",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("View_Street"), "View_Street","Street",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("View_House_Number"), "View_House_Number","House_Number",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("View_ID_Form"), "View_ID_Form","ID_Form",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("View_ID_Number"), "View_ID_Number","ID_Number",1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("View_Language"), "View_Language","Language",1);
				break;
				case "step32": stepStatus[step] = webCheckBoxCheckStatus(registration_FRA.Registration_Page("View_SMS_Marketing"), "View_SMS_Marketing");
				break;
				case "step33": stepStatus[step] = WebElementDisabled(registration_FRA.Registration_Page("View_SMS_Marketing"), "View_SMS_Marketing");
				break;
				case "step34": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("View_Cancel"), "Cancel_Button_View_Registration");
				break;
				case "step35": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("View_Registration"), "View_Registration_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Edit_Registration_FRA(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 108;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Load_Parameter"), "Load_Parameter", "MSISDN", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Subscriber_View"), "Subscriber_View");
				break;
				case "step7": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Subscriber_View"), "Subscriber_View");
				break;
				case "step8": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Edit_Registration"), "Edit_Registration");
				break;
				case "step9": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Edit_Registration"), "Edit_Registration");
				break;
				case "step10": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Title"), "Title");
				break;
				case "step11": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Edit_Puk_Code"), "Edit_Puk_Code", "Puk_Code", 1);
				break;
				case "step12": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Edit_Puk_Sim_Number"), "Edit_Puk_Sim_Number", "Puk_Sim_Number", 1);
				break;
				case "step13": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Edit_IMSI_1"), "Edit_IMSI_1", "IMSI_1", 1);
				break;
				case "step14": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Edit_IMSI_2"), "Edit_IMSI_2", "IMSI_2", 1);
				break;
				case "step15": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Edit_MSISDN"), "Edit_MSISDN", "MSISDN", 1);
				break;
				case "step16": stepStatus[step] = WebListSelectedValue(registration_FRA.Registration_Page("Title"), "Title", "Title_Initial", 1);
				break;
				case "step17": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("First_Name"), "First_Name", "First_Name_Initial", 1);
				break;
				case "step18": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Last_Name"), "Last_Name", "Last_Name_Initial", 1);
				break;
				case "step19": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Date_Of_Birth"), "Date_Of_Birth", "Date_Of_Birth_Initial", 1);
				break;
				case "step20": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Contact_Number"), "Contact_Number", "Contact_Number_Initial", 1);
				break;
				case "step21": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Email"), "Email", "Email_Initial", 1);
				break;
				case "step22": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Edit_Account_Number"), "Edit_Account_Number", "Account_Number", 1);
				break;
				case "step23": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Country"), "Country", "Country", 1);
				break;
				case "step24": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Post_Code"), "Post_Code", "Post_Code_Initial", 1);
				break;
				case "step25": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Edit_City"), "City", "City_Initial", 1);
				break;
				case "step26": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Edit_Street"), "Street", "Street_Initial", 1);
				break;
				case "step27": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Edit_House_Number"), "House_Number", "House_Number_Initial", 1);
				break;
				case "step28": stepStatus[step] = WebListSelectedValue(registration_FRA.Registration_Page("ID_Form"), "ID_Form", "ID_Form_Initial", 1);
				break;
				case "step29": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("ID_Number"), "ID_Number", "ID_Number_Initial", 1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Edit_Uploaded_File"), "Uploaded_File", "Uploaded_File_Initial", 1);
				break;
				case "step31": stepStatus[step] = WebListSelectedValue(registration_FRA.Registration_Page("Language"), "Language", "Language", 1);
				break;
				case "step32": stepStatus[step] = webCheckBoxCheckStatus(registration_FRA.Registration_Page("Marketing_SMS"), "Marketing_SMS");
				break;
				case "step33": stepStatus[step] = WebElementNotEditable(registration_FRA.Registration_Page("Edit_Puk_Code"), "Puk_Code");
				break;
				case "step34": stepStatus[step] = WebElementNotEditable(registration_FRA.Registration_Page("Edit_Puk_Sim_Number"), "Puk_Sim_Number");
				break;
				case "step35": stepStatus[step] = WebElementNotEditable(registration_FRA.Registration_Page("Edit_IMSI_1"), "IMSI_1");
				break;
				case "step36": stepStatus[step] = WebElementNotEditable(registration_FRA.Registration_Page("Edit_IMSI_2"), "IMSI_2");
				break;
				case "step37": stepStatus[step] = WebElementNotEditable(registration_FRA.Registration_Page("Edit_MSISDN"), "MSISDN");
				break;
				case "step38": stepStatus[step] = WebElementNotEditable(registration_FRA.Registration_Page("Edit_Account_Number"), "Account_Number");
				break;
				case "step39": stepStatus[step] = WebElementDisabled(registration_FRA.Registration_Page("Country"), "Country");
				break;
				case "step40": stepStatus[step] = WebElementDisabled(registration_FRA.Registration_Page("Post_Code"), "Post_Code");
				break;
				case "step41": stepStatus[step] = WebElementDisabled(registration_FRA.Registration_Page("Edit_City"), "City");
				break;
				case "step42": stepStatus[step] = WebElementDisabled(registration_FRA.Registration_Page("Edit_Street"), "Street");
				break;
				case "step43": stepStatus[step] = WebElementDisabled(registration_FRA.Registration_Page("Edit_House_Number"), "House_Number");
				break;
				case "step44": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("Title"), "Title", "Title", 1);
				break;
				case "step45": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("First_Name"), "First_Name");
				break;
				case "step46": stepStatus[step] = Webeditselectentertext(registration_FRA.Registration_Page("First_Name"), "First_Name", "First_Name", 1);
				break;
				case "step47": stepStatus[step] = Webeditselectentertext(registration_FRA.Registration_Page("Last_Name"), "Last_Name", "Last_Name", 1);
				break;
				case "step48": stepStatus[step] = javaScriptDatePicker(registration_FRA.Registration_Page("Date_Of_Birth"), "Date_Of_Birth", "Date_Of_Birth", 1);
				break;
				case "step49": stepStatus[step] = Webeditselectentertext(registration_FRA.Registration_Page("Contact_Number"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step50": stepStatus[step] = Webeditselectentertext(registration_FRA.Registration_Page("Email"), "Email", "Email", 1);
				break;
				case "step51": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Reset_Address"), "Reset_Address");
				break;
				case "step52": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Post_Code"), "Post_Code");
				break;
				case "step53": stepStatus[step] = waitUntilEnabled(registration_FRA.Registration_Page("Post_Code"),"Post_Code");
				break;
				case "step54": stepStatus[step] = WebElementEnabled(registration_FRA.Registration_Page("Post_Code"), "Post_Code");
				break;
				case "step55": stepStatus[step] = WebElementEmpty(registration_FRA.Registration_Page("Post_Code"), "Post_Code");
				break;
				case "step56": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Post_Code"), "Post_Code", "Post_Code", 1);
				break;
				case "step57": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Find_Address"), "Find_Address");
				break;
				case "step58": stepStatus[step] = waitUntilDisappear(registration_FRA.Registration_Page("Loading_Image"), "Loading_Image");
				break;
				case "step59": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("City"), "City", "City", 1);
				break;
				case "step60": stepStatus[step] = waitUntilDisappear(registration_FRA.Registration_Page("Loading_Image"), "Loading_Image");
				break;
				case "step61": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("Street"), "Street", "Street", 1);
				break;
				case "step62": stepStatus[step] = waitUntilDisappear(registration_FRA.Registration_Page("Loading_Image"), "Loading_Image");
				break;							
				case "step63": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("House_Number"), "House_Number", "House_Number", 1);
				break;
				case "step64": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("ID_Form"), "ID_Form");
				break;								
				case "step65": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("ID_Form"), "ID_Form", "ID_Form", 1);
				break;
				case "step66": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("ID_Number"), "ID_Number");
				break;
				case "step67": stepStatus[step] = Webeditselectentertext(registration_FRA.Registration_Page("ID_Number"), "ID_Number", "ID_Number", 1);
				break;
				case "step68": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Edit_Delete_Uploaded_File"), "Delete_Uploaded_File");
				break;
				case "step69": stepStatus[step] = waitUntilDisappear(registration_FRA.Registration_Page("Loading_Image"), "Loading_Image");
				break;
				case "step70": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("ID_Proof"), "ID_Proof");
				break;
				case "step71": stepStatus[step] = Uploadfiletestdata("testSupportfilespath", "File_Name_With_Type",1);
				break;						
				case "step72": stepStatus[step] = waituntiltextpresent(registration_FRA.Registration_Page("Edit_Uploaded_File"), "Uploaded_File");
				break;
				case "step73": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Edit_Uploaded_File"), "Uploaded_File","Uploaded_File",1);
				break;
				case "step74": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("Language"), "Language", "Language", 1);
				break;
				case "step75": stepStatus[step] = webCheckBoxCheckStatus(registration_FRA.Registration_Page("Terms_Conditions"), "Terms_Conditions");
				break;
				case "step76": stepStatus[step] = ScrollIntoElement(registration_FRA.Registration_Page("Next"), "Next");
				break;
				case "step77": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Next"), "Next");
				break;
				case "step78": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Edit_Confirm_Puk_Code"), "Edit_Confirm_Puk_Code");
				break;			
				case "step79": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Edit_Confirm_Puk_Code"), "Edit_Confirm_Puk_Code","Puk_Code",1);
				break;
				case "step80": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Edit_Confirm_Puk_Sim_Number"), "Edit_Confirm_Puk_Sim_Number","Puk_Sim_Number",1);
				break;
				case "step81": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Edit_Confirm_IMSI_1"), "Edit_Confirm_IMSI_1","IMSI_1",1);
				break;
				case "step82": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Edit_Confirm_IMSI_2"), "Edit_Confirm_IMSI_2","IMSI_2",1);
				break;
				case "step83": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Edit_Confirm_MSISDN"), "Edit_Confirm_MSISDN","MSISDN",1);
				break;
				case "step84": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Title"), "Confirm_Title","Title",1);
				break;
				case "step85": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_First_Name"), "Confirm_First_Name","First_Name",1);
				break;
				case "step86": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Last_Name"), "Confirm_Last_Name","Last_Name",1);
				break;
				case "step87": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Date_Of_Birth"), "Confirm_Date_Of_Birth","Date_Of_Birth",1);
				break;
				case "step88": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Contact_Number"), "Confirm_Contact_Number","Contact_Number",1);
				break;
				case "step89": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Email"), "Confirm_Email","Email",1);
				break;
				case "step90": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Edit_Confirm_Account_Number"), "Edit_Confirm_Account_Number","Account_Number",1);
				break;
				case "step91": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Country"), "Confirm_Country","Country",1);
				break;
				case "step92": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Post_Code"), "Confirm_Post_Code","Post_Code",1);
				break;
				case "step93": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_City"), "Confirm_City","City",1);
				break;
				case "step94": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Street"), "Confirm_Street","Street",1);
				break;
				case "step95": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_House_Number"), "Confirm_House_Number","House_Number",1);
				break;
				case "step96": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_ID_Form"), "Confirm_ID_Form","ID_Form",1);
				break;
				case "step97": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_ID_Number"), "Confirm_ID_Number","ID_Number",1);
				break;
				case "step98": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Language"), "Confirm_Language","Language",1);
				break;
				case "step99": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Submit"), "Submit");
				break;
				case "step100": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Edit_Confirm_Message"), "Confirm_Message");
				break;
				case "step101": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Edit_Cancel"), "Cancel");
				break;
				case "step102": stepStatus[step] = waituntiltextpresent(registration_FRA.Registration_Page("Edit_Confirm_Message"), "Confirm_Message");
				break;
				case "step103": stepStatus[step] = WebElementResxKeyValueStaticCompare(registration_FRA.Registration_Page("Edit_Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step104": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Edit_Cancel"), "Cancel");
				break;
				case "step105": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Subscriber_View"), "Subscriber_View");
				break;
				case "step106": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name","ColumnName","Condition","Env_Customerid",1);
				break;
				case "step107": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Idproofname", "Columnname_Idproof", "Env_Customerid", "Column_Value_Idproofname", 1);
				break;
				case "step108": stepStatus[step] = SQLDBSelect("TableName_mstcustomerlog", "Columnname_Count", "Condition_mstcustomerlog","Count_Value", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postconditions_FRA_EDR(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=16;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_Title", "Condition", "Title", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_Firstname", "Condition", "First_Name", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_Lastname", "Condition", "Last_Name", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_Postcode", "Condition", "Post_Code", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_Housenumber", "Condition", "House_Number", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_Street", "Condition", "Street", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_City", "Condition", "City", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_Contact", "Condition", "Contact_Number", 1);
				break;
				case "step9": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_Country", "Condition", "Country", 1);
				break;
				case "step10": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_Email", "Condition", "Email", 1);
				break;
				case "step11": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_birthdd", "Condition", "Birth_Date", 1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_birthmm", "Condition", "Birth_Month", 1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_birthyy", "Condition", "Birth_Year", 1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_Where_About", "Condition", "Where_About", 1);
				break;
				case "step15": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_Chkterms", "Condition", "Check_Terms", 1);
				break;
				case "step16": stepStatus[step] = SQLDBSelect("Table_Name_Mstmvnoaccount", "Column_Name_SMS_Marketing", "Condition", "SMS_Marketing", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_VS_Mand_Alert(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 15;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(voucher_Status.Voucher_Status_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(voucher_Status.Voucher_Status_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Status"), "Voucher_Status");
				break;
				case "step11": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Voucher_Status"), "Voucher_Status");
				break;
				case "step12": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Type"), "Voucher_Type");
				break;
				case "step13": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Apply"), "Apply");
				break;
				case "step14": stepStatus[step] = waituntiltextpresent(voucher_Status.Voucher_Status_Page("Mandatory_Alert_Message"), "Alert_Message");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Mandatory_Alert_Message"), "Alert_Message","Alert_Message",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_VS_Invalid_Alert(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 20;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(voucher_Status.Voucher_Status_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(voucher_Status.Voucher_Status_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Status"), "Voucher_Status");
				break;
				case "step11": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Voucher_Status"), "Voucher_Status");
				break;
				case "step12": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Type"), "Voucher_Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(voucher_Status.Voucher_Status_Page("Voucher_Type"), "Voucher_Type", "Voucher_Type", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Code"), "Voucher_Code");
				break;
				case "step15": stepStatus[step] = WebEditEnterText(voucher_Status.Voucher_Status_Page("Voucher_Code"), "Voucher_Code", "Voucher_Code", 1);
				break;	
				case "step16": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Apply"), "Apply");
				break;
				case "step17": stepStatus[step] = waituntiltextpresent(voucher_Status.Voucher_Status_Page("Alert_Message"), "Alert_Message");
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Alert_Message"), "Alert_Message","Alert_Message",1);
				break;
				case "step19": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("close_button"), "Close_Button");
				break;
				case "step20": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Load_Type"), "Load_Type");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_VS_Reset(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 20;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(voucher_Status.Voucher_Status_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(voucher_Status.Voucher_Status_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Status"), "Voucher_Status");
				break;
				case "step11": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Voucher_Status"), "Voucher_Status");
				break;
				case "step12": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Type"), "Voucher_Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(voucher_Status.Voucher_Status_Page("Voucher_Type"), "Voucher_Type", "Voucher_Type", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Code"), "Voucher_Code");
				break;
				case "step15": stepStatus[step] = WebEditEnterText(voucher_Status.Voucher_Status_Page("Voucher_Code"), "Voucher_Code", "Voucher_Code", 1);
				break;	
				case "step16": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Reset"), "Reset");
				break;
				case "step17": stepStatus[step] = sleepForFunction();
				break;
				case "step18": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Type"), "Voucher_Type");
				break;
				case "step19": stepStatus[step] = WebListSelectedValue(voucher_Status.Voucher_Status_Page("Voucher_Type"), "Voucher_Type", "Voucher_Type_Initial", 1);
				break;
				case "step20": stepStatus[step] = WebElementisNotVisible(voucher_Status.Voucher_Status_Page("Voucher_Code"), "Voucher_Code");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_VS_Field_Validations(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 18;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(voucher_Status.Voucher_Status_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(voucher_Status.Voucher_Status_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Status"), "Voucher_Status");
				break;
				case "step11": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Voucher_Status"), "Voucher_Status");
				break;
				case "step12": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Type"), "Voucher_Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(voucher_Status.Voucher_Status_Page("Voucher_Type"), "Voucher_Type", "Voucher_Type", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Code"), "Voucher_Code");
				break;
				case "step15": stepStatus[step] = WebEditEnterText(voucher_Status.Voucher_Status_Page("Voucher_Code"), "Voucher_Code", "Voucher_Code_Actual", 1);
				break;
				case "step16": stepStatus[step] = WebElementValueCompare(voucher_Status.Voucher_Status_Page("Voucher_Code"), "Voucher_Code", "Voucher_Code_Expected", 1);
				break;
				case "step17": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("close_button"), "Close_Button");
				break;
				case "step18": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Load_Type"), "Load_Type");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_VS_Details(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 32;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(voucher_Status.Voucher_Status_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(voucher_Status.Voucher_Status_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Status"), "Voucher_Status");
				break;
				case "step11": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Voucher_Status"), "Voucher_Status");
				break;
				case "step12": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Type"), "Voucher_Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(voucher_Status.Voucher_Status_Page("Voucher_Type"), "Voucher_Type", "Voucher_Type", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Code"), "Voucher_Code");
				break;
				case "step15": stepStatus[step] = WebEditEnterText(voucher_Status.Voucher_Status_Page("Voucher_Code"), "Voucher_Code", "Voucher_Code", 1);
				break;	
				case "step16": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Apply"), "Apply");
				break;
				case "step17": stepStatus[step] = waituntiltextpresent(voucher_Status.Voucher_Status_Page("Alert_Message"), "Alert_Message");
				break;
				case "step18": stepStatus[step] = WebElementResxKeyValueStaticCompare(voucher_Status.Voucher_Status_Page("Alert_Message"), "Alert_Message","Alert_Message",1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Voucher_Number"), "Voucher_Number","Voucher_Number",1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Status"), "Status","Status",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Activation_Date"), "Activation_Date","Activation_Date",1);
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Blocked_Date"), "Blocked_Date","Blocked_Date",1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Blocked_Reason"), "Blocked_Reason","Blocked_Reason",1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Recharge_Date"), "Recharge_Date","Recharge_Date",1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Reseller_ID"), "Reseller_ID","Reseller_ID",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Activation_Level"), "Activation_Level","Activation_Level",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Reseller_Message"), "Reseller_Message","Reseller_Message",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Plan_Name"), "Plan_Name","Plan_Name",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Bundle"), "Bundle","Bundle",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Face_Value"), "Face_Value","Face_Value",1);
				break;
				case "step31": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("close_button"), "Close_Button");
				break;
				case "step32": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Load_Type"), "Load_Type");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Navigate_Config_Settings_GBR(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 9;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.settings_Page("country_DropdownValues_GBR"), "Country_Dropdown", "CountryBrand_DDValue", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Update_Config_Settings(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 4;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "Config_Name", 1);
				break;
				case "step2": stepStatus[step] = doubleClickOnElement(settings.Settings_Obj_runtime(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"key_Configuration","sim_Type","Config_Name",1), "key_Configuration");
				break;
				case "step3": stepStatus[step] = enterValuesAndClickEnterBtn(settings.Settings_Obj_runtime(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"value_Configuration","sim_Type","Config_Name",1), "value_Configuration", "key_Value_1", 1);
				break;
				case "step4": stepStatus[step] = enterValuesAndClickEnterBtn(settings.Settings_Obj_runtime(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"value_Configuration","sim_Type","Config_Name",1), "value_Configuration", "key_Value_2", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Close_Configuration_Settings(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 2;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = WebElementClick(settings.settings_Page("close_Btn"), "Close_Button");
				break;
				case "step2": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Bundle_Months(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 27;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step11": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step12": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name");
				break;
				case "step13": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name", "Bundle_Name_1", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"), "Bundle_Months");
				break;
				case "step15": stepStatus[step] = WebListVerifyValue(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"),"Bundle_Months","Bundle_Months_1",1);
				break;
				case "step16": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name", "Bundle_Name_2", 1);
				break;
				case "step17": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"), "Bundle_Months");
				break;
				case "step18": stepStatus[step] = WebListVerifyValue(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"),"Bundle_Months","Bundle_Months_1",1);
				break;
				case "step19": stepStatus[step] = WebListVerifyValue(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"),"Bundle_Months","Bundle_Months_2",1);
				break;
				case "step20": stepStatus[step] = WebListVerifyValue(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"),"Bundle_Months","Bundle_Months_3",1);
				break;
				case "step21": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name", "Bundle_Name_3", 1);
				break;
				case "step22": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"), "Bundle_Months");
				break;
				case "step23": stepStatus[step] = WebListVerifyValue(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"),"Bundle_Months","Bundle_Months_1",1);
				break;
				case "step24": stepStatus[step] = WebListVerifyValue(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"),"Bundle_Months","Bundle_Months_2",1);
				break;
				case "step25": stepStatus[step] = WebListVerifyValue(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"),"Bundle_Months","Bundle_Months_3",1);
				break;
				case "step26": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("close_button"), "Close_Button");
				break;
				case "step27": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}	

	public synchronized void Send_Single_Sim_Topup(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 107;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step2": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step3": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Title"), "Title");
				break;
				case "step4": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Title"), "Title", "Title", 1);
				break;
				case "step5": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("First_Name"), "First_Name");
				break;
				case "step6": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("First_Name"), "First_Name", "First_Name", 1);
				break;
				case "step7": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Last_Name"), "Last_Name", "Last_Name", 1);
				break;						
				case "step8": stepStatus[step] = javaScriptDatePicker(send_Sim.Send_Sim_Page("Date_Of_Birth"), "Date_Of_Birth", "Date_Of_Birth", 1);
				break;
				case "step9": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Country"), "Country");
				break;
				case "step10": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Country"), "Country", "Country", 1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode_Initial", 1);
				break;
				case "step12": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Find_Address"), "Find_Address");
				break;
				case "step13": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Address_List"), "Address_List");
				break;
				case "step14": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Address_List"), "Address_List", "Address", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Accept_Address"), "Accept_Address");
				break;
				case "step16": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step17": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step18": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Postcode"), "Postcode");
				break;
				case "step19": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("City"), "City");
				break;
				case "step20": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Street"), "Street");
				break;
				case "step21": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("State"), "State", "State", 1);
				break;
				case "step22": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode", 1);
				break;
				case "step23": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("City"), "City", "City", 1);
				break;
				case "step24": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number_Initial", 1);
				break;
				case "step25": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Street"), "Street", "Street", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number", 1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Apartment_Number"), "Apartment_Number", "Apartment_Number", 1);
				break;
				case "step28": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("Billing_Address"), "Billing_Address");
				break;
				case "step29": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Billing_Postcode"), "Billing_Postcode");
				break;
				case "step30": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Billing_Country"), "Billing_Country", "Country", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_State"), "Billing_State", "Billing_State", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Postcode"), "Billing_Postcode", "Billing_Postcode", 1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_City"), "Billing_City", "Billing_City", 1);
				break;
				case "step34": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_House_Number"), "Billing_House_Number", "Billing_House_Number", 1);
				break;
				case "step35": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Street"), "Billing_Street", "Billing_Street", 1);
				break;
				case "step36": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Apartment_Number"), "Billing_Apartment_Number", "Billing_Apartment_Number", 1);
				break;
				case "step37": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Email"), "Email", "Email", 1);
				break;
				case "step38": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Contact_Number"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step39": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step40": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step41": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Check_Payment"), "Check_Payment");
				break;
				case "step42": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("Check_Payment"), "Check_Payment");
				break;
				case "step43": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims");
				break;
				case "step44": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims", "Number_Of_Sims", 1);
				break;
				case "step45": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1");
				break;
				case "step46": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1", "Sim_Type_1", 1);
				break;
				case "step47": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan");
				break;
				case "step48": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan", "Sim_Plan", 1);
				break;
				case "step49": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;					
				case "step50": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;
				case "step51": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type");
				break;
				case "step52": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type", "Topup_Type", 1);
				break;
				case "step53": stepStatus[step] = waitUntilListLoads(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value");
				break;
				case "step54": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value", "Topup_Value", 1);
				break;
				case "step55": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step56": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step57": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step58": stepStatus[step] = webTableVerifyDetailshashtable(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step59": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Next_Sim_Type"), "Next_Sim_Type");
				break;						
				case "step60": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Sim_Type"), "Next_Sim_Type");
				break;
				case "step61": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Confirm_Title"), "Confirm_Title");
				break;
				case "step62": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Title"), "Confirm_Title","Title",1);
				break;
				case "step63": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_First_Name"), "Confirm_First_Name","First_Name",1);
				break;	
				case "step64": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Last_Name"), "Confirm_Last_Name","Last_Name",1);
				break;	
				case "step65": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Date_Of_Birth"), "Confirm_Date_Of_Birth","Date_Of_Birth",1);
				break;	
				case "step66": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Country"), "Confirm_Country","Country",1);
				break;	
				case "step67": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_State"), "Confirm_State","State",1);
				break;	
				case "step68": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Postcode"), "Confirm_Postcode","Postcode",1);
				break;	
				case "step69": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_City"), "Confirm_City","City",1);
				break;	
				case "step70": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_House_Number"), "Confirm_House_Number","House_Number",1);
				break;	
				case "step71": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Street"), "Confirm_Street","Street",1);
				break;	
				case "step72": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Apartment_Number"), "Confirm_Apartment_Number","Apartment_Number",1);
				break;	
				case "step73": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Country"), "Confirm_Billing_Country","Country",1);
				break;	
				case "step74": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_State"), "Confirm_Billing_State","Billing_State",1);
				break;	
				case "step75": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Postcode"), "Confirm_Billing_Postcode","Billing_Postcode",1);
				break;	
				case "step76": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_City"), "Confirm_Billing_City","Billing_City",1);
				break;	
				case "step77": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_House_Number"), "Confirm_Billing_House_Number","Billing_House_Number",1);
				break;	
				case "step78": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Street"), "Confirm_Billing_Street","Billing_Street",1);
				break;	
				case "step79": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Apartment_Number"), "Confirm_Billing_Apartment_Number","Billing_Apartment_Number",1);
				break;	
				case "step80": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Email"), "Confirm_Email","Email",1);
				break;	
				case "step81": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Contact_Number"), "Confirm_Contact_Number","Contact_Number",1);
				break;
				case "step82": stepStatus[step] = webTableVerifyDetailshashtable(send_Sim.Send_Sim_Page("Confirm_Bundles_Table"), "Confirm_Bundles_Table","Primary_Key_Column_Name_2","Secondary_Key_Column_Names_2","Primary_Key_Column_Value_2","Secondary_Key_Column_Values_2",1);
				break;
				case "step83": stepStatus[step] = ScrollIntoElement(send_Sim.Send_Sim_Page("Next_Confirm_Page"), "Next_Confirm_Page");
				break;
				case "step84": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Confirm_Page"), "Next_Confirm_Page");
				break;
				case "step85": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Card_Type"), "Card_Type");
				break;
				case "step86": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Total_Amount"), "Total_Amount","Total_Amount",1);
				break;
				case "step87": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Card_Type"), "Card_Type", "Card_Type", 1);
				break;
				case "step88": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Name_On_Card"), "Name_On_Card");
				break;
				case "step89": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Name_On_Card"), "Name_On_Card", "Name_On_Card", 1);
				break;
				case "step90": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_1"), "Card_Number_1", "Card_Number_1", 1);
				break;
				case "step91": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_2"), "Card_Number_2", "Card_Number_2", 1);
				break;
				case "step92": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_3"), "Card_Number_3", "Card_Number_3", 1);
				break;
				case "step93": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_4"), "Card_Number_4", "Card_Number_4", 1);
				break;
				case "step94": stepStatus[step] = javaScriptDatePicker(send_Sim.Send_Sim_Page("Expiry_Date"), "Expiry_Date", "Expiry_Date", 1);
				break;
				case "step95": stepStatus[step] = javaScriptEnterText(send_Sim.Send_Sim_Page("CVV_Number"), "CVV_Number", "CVV_Number", 1);
				break;
				case "step96": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Payments_Page"), "Next_Payments_Page");
				break;
				case "step97": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Submit_Payments_Page"), "Submit_Payments_Page");
				break;
				case "step98": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Total_Amount"), "Total_Amount","Total_Amount",1);
				break;					
				case "step99": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Submit_Payments_Page"), "Submit_Payments_Page");
				break;
				case "step100": stepStatus[step] = waituntiltextpresent(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step101": stepStatus[step] = WebElementResxKeyValueStaticCompare(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step102": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Amount"), "Amount","Amount",1);
				break;
				case "step103": stepStatus[step] = WebElementDynamicStringVerify(send_Sim.Send_Sim_Page("Transaction_Number"), "Transaction_Number","Transaction_Number_Pattern",1);
				break;
				case "step104": stepStatus[step] = WebElementTextStoreDynamicValue(send_Sim.Send_Sim_Page("Transaction_Number"), "Transaction_Number","Transaction_Number_Env",1);
				break;
				case "step105": stepStatus[step] = WebElementDynamicStringVerify(send_Sim.Send_Sim_Page("Red_Order_Id"), "Red_Order_Id","Red_Order_Id_Pattern",1);
				break;
				case "step106": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("close_button"), "Close_Button");
				break;
				case "step107": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Send_Multiple_Sim_Topup(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 135;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step2": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step3": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Title"), "Title");
				break;
				case "step4": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Title"), "Title", "Title", 1);
				break;
				case "step5": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("First_Name"), "First_Name");
				break;
				case "step6": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("First_Name"), "First_Name", "First_Name", 1);
				break;
				case "step7": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Last_Name"), "Last_Name", "Last_Name", 1);
				break;						
				case "step8": stepStatus[step] = javaScriptDatePicker(send_Sim.Send_Sim_Page("Date_Of_Birth"), "Date_Of_Birth", "Date_Of_Birth", 1);
				break;
				case "step9": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Country"), "Country");
				break;
				case "step10": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Country"), "Country", "Country", 1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode_Initial", 1);
				break;
				case "step12": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Find_Address"), "Find_Address");
				break;
				case "step13": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Address_List"), "Address_List");
				break;
				case "step14": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Address_List"), "Address_List", "Address", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Accept_Address"), "Accept_Address");
				break;
				case "step16": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step17": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step18": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Postcode"), "Postcode");
				break;
				case "step19": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("City"), "City");
				break;
				case "step20": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Street"), "Street");
				break;
				case "step21": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("State"), "State", "State", 1);
				break;
				case "step22": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode", 1);
				break;
				case "step23": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("City"), "City", "City", 1);
				break;
				case "step24": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number_Initial", 1);
				break;
				case "step25": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Street"), "Street", "Street", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number", 1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Apartment_Number"), "Apartment_Number", "Apartment_Number", 1);
				break;
				case "step28": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("Billing_Address"), "Billing_Address");
				break;
				case "step29": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Billing_Postcode"), "Billing_Postcode");
				break;
				case "step30": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Billing_Country"), "Billing_Country", "Country", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_State"), "Billing_State", "Billing_State", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Postcode"), "Billing_Postcode", "Billing_Postcode", 1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_City"), "Billing_City", "Billing_City", 1);
				break;
				case "step34": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_House_Number"), "Billing_House_Number", "Billing_House_Number", 1);
				break;
				case "step35": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Street"), "Billing_Street", "Billing_Street", 1);
				break;
				case "step36": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Apartment_Number"), "Billing_Apartment_Number", "Billing_Apartment_Number", 1);
				break;
				case "step37": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Email"), "Email", "Email", 1);
				break;
				case "step38": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Contact_Number"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step39": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step40": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step41": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Check_Payment"), "Check_Payment");
				break;
				case "step42": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("Check_Payment"), "Check_Payment");
				break;
				case "step43": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims");
				break;
				case "step44": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims", "Number_Of_Sims", 1);
				break;
				case "step45": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1");
				break;
				case "step46": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1", "Sim_Type_1", 1);
				break;
				case "step47": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Type_2"), "Sim_Type_2");
				break;
				case "step48": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Type_2"), "Sim_Type_2", "Sim_Type_2", 1);
				break;
				case "step49": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Type_3"), "Sim_Type_3");
				break;
				case "step50": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Type_3"), "Sim_Type_3", "Sim_Type_3", 1);
				break;
				case "step51": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan");
				break;
				case "step52": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan", "Sim_Plan_1", 1);
				break;
				case "step53": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;					
				case "step54": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;
				case "step55": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type");
				break;
				case "step56": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type", "Topup_Type", 1);
				break;
				case "step57": stepStatus[step] = waitUntilListLoads(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value");
				break;
				case "step58": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value", "Topup_Value", 1);
				break;
				case "step59": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step60": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step61": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step62": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan", "Sim_Plan_2", 1);
				break;
				case "step63": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;					
				case "step64": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;
				case "step65": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type");
				break;
				case "step66": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type", "Topup_Type", 1);
				break;
				case "step67": stepStatus[step] = waitUntilListLoads(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value");
				break;
				case "step68": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value", "Topup_Value", 1);
				break;
				case "step69": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step70": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step71": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step72": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan", "Sim_Plan_3", 1);
				break;
				case "step73": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;					
				case "step74": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;
				case "step75": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type");
				break;
				case "step76": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type", "Topup_Type", 1);
				break;
				case "step77": stepStatus[step] = waitUntilListLoads(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value");
				break;
				case "step78": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value", "Topup_Value", 1);
				break;
				case "step79": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step80": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step81": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step82": stepStatus[step] = webTableVerifyDetailshashtable(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table","Primary_Key_Column_Name_1","Secondary_Key_Column_Names_1","Primary_Key_Column_Value_1","Secondary_Key_Column_Values_1",1);
				break;
				case "step83": stepStatus[step] = webTableVerifyDetailshashtable(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table","Primary_Key_Column_Name_1","Secondary_Key_Column_Names_1","Primary_Key_Column_Value_2","Secondary_Key_Column_Values_2",1);
				break;
				case "step84": stepStatus[step] = webTableVerifyDetailshashtable(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table","Primary_Key_Column_Name_1","Secondary_Key_Column_Names_1","Primary_Key_Column_Value_3","Secondary_Key_Column_Values_3",1);
				break;
				case "step85": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Next_Sim_Type"), "Next_Sim_Type");
				break;						
				case "step86": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Sim_Type"), "Next_Sim_Type");
				break;
				case "step87": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Confirm_Title"), "Confirm_Title");
				break;
				case "step88": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Title"), "Confirm_Title","Title",1);
				break;
				case "step89": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_First_Name"), "Confirm_First_Name","First_Name",1);
				break;	
				case "step90": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Last_Name"), "Confirm_Last_Name","Last_Name",1);
				break;	
				case "step91": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Date_Of_Birth"), "Confirm_Date_Of_Birth","Date_Of_Birth",1);
				break;	
				case "step92": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Country"), "Confirm_Country","Country",1);
				break;	
				case "step93": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_State"), "Confirm_State","State",1);
				break;	
				case "step94": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Postcode"), "Confirm_Postcode","Postcode",1);
				break;	
				case "step95": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_City"), "Confirm_City","City",1);
				break;	
				case "step96": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_House_Number"), "Confirm_House_Number","House_Number",1);
				break;	
				case "step97": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Street"), "Confirm_Street","Street",1);
				break;	
				case "step98": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Apartment_Number"), "Confirm_Apartment_Number","Apartment_Number",1);
				break;	
				case "step99": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Country"), "Confirm_Billing_Country","Country",1);
				break;	
				case "step100": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_State"), "Confirm_Billing_State","Billing_State",1);
				break;	
				case "step101": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Postcode"), "Confirm_Billing_Postcode","Billing_Postcode",1);
				break;	
				case "step102": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_City"), "Confirm_Billing_City","Billing_City",1);
				break;	
				case "step103": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_House_Number"), "Confirm_Billing_House_Number","Billing_House_Number",1);
				break;	
				case "step104": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Street"), "Confirm_Billing_Street","Billing_Street",1);
				break;	
				case "step105": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Apartment_Number"), "Confirm_Billing_Apartment_Number","Billing_Apartment_Number",1);
				break;	
				case "step106": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Email"), "Confirm_Email","Email",1);
				break;	
				case "step107": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Contact_Number"), "Confirm_Contact_Number","Contact_Number",1);
				break;
				case "step108": stepStatus[step] = webTableVerifyDetailshashtable(send_Sim.Send_Sim_Page("Confirm_Bundles_Table"), "Confirm_Bundles_Table","Primary_Key_Column_Name_2","Secondary_Key_Column_Names_2","Primary_Key_Column_Value_1","Secondary_Key_Column_Values_1",1);
				break;
				case "step109": stepStatus[step] = webTableVerifyDetailshashtable(send_Sim.Send_Sim_Page("Confirm_Bundles_Table"), "Confirm_Bundles_Table","Primary_Key_Column_Name_2","Secondary_Key_Column_Names_2","Primary_Key_Column_Value_2","Secondary_Key_Column_Values_2",1);
				break;
				case "step110": stepStatus[step] = webTableVerifyDetailshashtable(send_Sim.Send_Sim_Page("Confirm_Bundles_Table"), "Confirm_Bundles_Table","Primary_Key_Column_Name_2","Secondary_Key_Column_Names_2","Primary_Key_Column_Value_3","Secondary_Key_Column_Values_3",1);
				break;
				case "step111": stepStatus[step] = ScrollIntoElement(send_Sim.Send_Sim_Page("Next_Confirm_Page"), "Next_Confirm_Page");
				break;
				case "step112": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Confirm_Page"), "Next_Confirm_Page");
				break;
				case "step113": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Card_Type"), "Card_Type");
				break;
				case "step114": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Total_Amount"), "Total_Amount","Total_Amount",1);
				break;
				case "step115": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Card_Type"), "Card_Type", "Card_Type", 1);
				break;
				case "step116": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Name_On_Card"), "Name_On_Card");
				break;
				case "step117": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Name_On_Card"), "Name_On_Card", "Name_On_Card", 1);
				break;
				case "step118": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_1"), "Card_Number_1", "Card_Number_1", 1);
				break;
				case "step119": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_2"), "Card_Number_2", "Card_Number_2", 1);
				break;
				case "step120": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_3"), "Card_Number_3", "Card_Number_3", 1);
				break;
				case "step121": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_4"), "Card_Number_4", "Card_Number_4", 1);
				break;
				case "step122": stepStatus[step] = javaScriptDatePicker(send_Sim.Send_Sim_Page("Expiry_Date"), "Expiry_Date", "Expiry_Date", 1);
				break;
				case "step123": stepStatus[step] = javaScriptEnterText(send_Sim.Send_Sim_Page("CVV_Number"), "CVV_Number", "CVV_Number", 1);
				break;
				case "step124": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Payments_Page"), "Next_Payments_Page");
				break;
				case "step125": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Submit_Payments_Page"), "Submit_Payments_Page");
				break;
				case "step126": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Total_Amount"), "Total_Amount","Total_Amount",1);
				break;					
				case "step127": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Submit_Payments_Page"), "Submit_Payments_Page");
				break;
				case "step128": stepStatus[step] = waituntiltextpresent(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step129": stepStatus[step] = WebElementResxKeyValueStaticCompare(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step130": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Amount"), "Amount","Amount",1);
				break;
				case "step131": stepStatus[step] = WebElementDynamicStringVerify(send_Sim.Send_Sim_Page("Transaction_Number"), "Transaction_Number","Transaction_Number_Pattern",1);
				break;
				case "step132": stepStatus[step] = WebElementTextStoreDynamicValue(send_Sim.Send_Sim_Page("Transaction_Number"), "Transaction_Number","Transaction_Number_Env",1);
				break;
				case "step133": stepStatus[step] = WebElementDynamicStringVerify(send_Sim.Send_Sim_Page("Red_Order_Id"), "Red_Order_Id","Red_Order_Id_Pattern",1);
				break;
				case "step134": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("close_button"), "Close_Button");
				break;
				case "step135": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Preconditions_SS_Topup(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBDelete("Table_Name_mstFreeSimCustomer","Condition_mstFreeSimCustomer",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postconditions_SS_Topup(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=11;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("Table_Name_mstFreeSimCustomer", "Column_Name_Count", "Condition_mstFreeSimCustomer", "Count_Value", 1);
				break;
				case "step2": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name_mstFreeSimCustomer","ColumnName_Transactionid","Condition_mstFreeSimCustomer","Env_Transactionid",1);
				break;
				case "step3": stepStatus[step] = ReplaceStringStoreEnvvar("Env_Transactionid","Env_Subscriberid","String_To_Replace","Replacement_String",1);
				break;
				case "step4": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_mstFreeSimCustomerActivation", "Columnname_CardId", "Condition_mstFreeSimCustomerActivation", "Env_Transactionid", "Column_Value_Cardid", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_mstFreeSimCustomerActivation", "Columnname_Topupamount", "Condition_mstFreeSimCustomerActivation", "Env_Transactionid", "Column_Value_Topupamount", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_mstFreeSimCustomerActivation", "Column_Name_Count", "Condition_mstFreeSimCustomerActivation", "Env_Transactionid", "Count_Value_mstFreeSimCustomerActivation", 1);
				break;
				case "step7": stepStatus[step] = ESHOPSQLDBSelectCompConditionEnvvar("TableName_tbleShopTransactionStatus", "Columnname_Subscriberid", "Condition_tbleShopTransactionStatus", "Env_Transactionid", "Env_Subscriberid", 1);
				break;						
				case "step8": stepStatus[step] = ESHOPSQLDBSelectConditionEnvvar("TableName_tblUserCardDetails", "Column_Name_Count", "Condition_tblUserCardDetails", "Env_Subscriberid", "Count_Value", 1);
				break;
				case "step9": stepStatus[step] = SQLDBDeleteConditionEnvvar("TableName_mstFreeSimCustomerActivation","Condition_mstFreeSimCustomerActivation","Env_Transactionid",1);
				break;
				case "step10": stepStatus[step] = ESHOPSQLDBDeleteConditionEnvvar("TableName_tbleShopTransactionStatus","Condition_tbleShopTransactionStatus","Env_Transactionid",1);
				break;
				case "step11": stepStatus[step] = ESHOPSQLDBDeleteConditionEnvvar("TableName_tblUserCardDetails","Condition_tblUserCardDetails","Env_Subscriberid",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Send_Sim_Addon_Alert(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 45;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step2": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step3": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Title"), "Title");
				break;
				case "step4": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Title"), "Title", "Title", 1);
				break;
				case "step5": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("First_Name"), "First_Name");
				break;
				case "step6": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("First_Name"), "First_Name", "First_Name", 1);
				break;
				case "step7": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Last_Name"), "Last_Name", "Last_Name", 1);
				break;						
				case "step8": stepStatus[step] = javaScriptDatePicker(send_Sim.Send_Sim_Page("Date_Of_Birth"), "Date_Of_Birth", "Date_Of_Birth", 1);
				break;
				case "step9": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Country"), "Country");
				break;
				case "step10": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Country"), "Country", "Country", 1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode_Initial", 1);
				break;
				case "step12": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Find_Address"), "Find_Address");
				break;
				case "step13": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Address_List"), "Address_List");
				break;
				case "step14": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Address_List"), "Address_List", "Address", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Accept_Address"), "Accept_Address");
				break;
				case "step16": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step17": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step18": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Postcode"), "Postcode");
				break;
				case "step19": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("City"), "City");
				break;
				case "step20": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Street"), "Street");
				break;
				case "step21": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("State"), "State", "State", 1);
				break;
				case "step22": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode", 1);
				break;
				case "step23": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("City"), "City", "City", 1);
				break;
				case "step24": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number_Initial", 1);
				break;
				case "step25": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Street"), "Street", "Street", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number", 1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Apartment_Number"), "Apartment_Number", "Apartment_Number", 1);
				break;
				case "step28": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Email"), "Email", "Email", 1);
				break;
				case "step29": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Contact_Number"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step30": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step31": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step32": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Check_Payment"), "Check_Payment");
				break;
				case "step33": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("Check_Payment"), "Check_Payment");
				break;
				case "step34": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims");
				break;
				case "step35": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims", "Number_Of_Sims", 1);
				break;
				case "step36": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1");
				break;
				case "step37": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1", "Sim_Type_1", 1);
				break;
				case "step38": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan");
				break;
				case "step39": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan", "Sim_Plan", 1);
				break;
				case "step40": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("radio_Addon"), "Addon_Radio_Button");
				break;					
				case "step41": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Addon"), "Addon_Radio_Button");
				break;					
				case "step42": stepStatus[step] = waituntiltextpresent(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step44": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("close_button"), "Close_Button");
				break;
				case "step45": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Send_Sim_Bundle_Alert(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 54;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step2": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step3": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Title"), "Title");
				break;
				case "step4": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Title"), "Title", "Title", 1);
				break;
				case "step5": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("First_Name"), "First_Name");
				break;
				case "step6": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("First_Name"), "First_Name", "First_Name", 1);
				break;
				case "step7": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Last_Name"), "Last_Name", "Last_Name", 1);
				break;						
				case "step8": stepStatus[step] = javaScriptDatePicker(send_Sim.Send_Sim_Page("Date_Of_Birth"), "Date_Of_Birth", "Date_Of_Birth", 1);
				break;
				case "step9": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Country"), "Country");
				break;
				case "step10": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Country"), "Country", "Country", 1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode_Initial", 1);
				break;
				case "step12": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Find_Address"), "Find_Address");
				break;
				case "step13": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Address_List"), "Address_List");
				break;
				case "step14": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Address_List"), "Address_List", "Address", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Accept_Address"), "Accept_Address");
				break;
				case "step16": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step17": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step18": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Postcode"), "Postcode");
				break;
				case "step19": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("City"), "City");
				break;
				case "step20": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Street"), "Street");
				break;
				case "step21": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("State"), "State", "State", 1);
				break;
				case "step22": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode", 1);
				break;
				case "step23": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("City"), "City", "City", 1);
				break;
				case "step24": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number_Initial", 1);
				break;
				case "step25": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Street"), "Street", "Street", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number", 1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Apartment_Number"), "Apartment_Number", "Apartment_Number", 1);
				break;
				case "step28": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Email"), "Email", "Email", 1);
				break;
				case "step29": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Contact_Number"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step30": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step31": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step32": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Check_Payment"), "Check_Payment");
				break;
				case "step33": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("Check_Payment"), "Check_Payment");
				break;
				case "step34": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims");
				break;
				case "step35": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims", "Number_Of_Sims", 1);
				break;
				case "step36": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1");
				break;
				case "step37": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1", "Sim_Type_1", 1);
				break;
				case "step38": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan");
				break;
				case "step39": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan", "Sim_Plan", 1);
				break;
				case "step40": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;					
				case "step41": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;
				case "step42": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type");
				break;
				case "step43": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type", "Topup_Type", 1);
				break;
				case "step44": stepStatus[step] = waitUntilListLoads(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value");
				break;
				case "step45": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value", "Topup_Value", 1);
				break;
				case "step46": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step47": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step48": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step49": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Next_Sim_Type"), "Next_Sim_Type");
				break;						
				case "step50": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Sim_Type"), "Next_Sim_Type");
				break;				
				case "step51": stepStatus[step] = waituntiltextpresent(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step53": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("close_button"), "Close_Button");
				break;
				case "step54": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Send_Sim_Topup_Alert(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 54;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step2": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step3": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Title"), "Title");
				break;
				case "step4": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Title"), "Title", "Title", 1);
				break;
				case "step5": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("First_Name"), "First_Name");
				break;
				case "step6": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("First_Name"), "First_Name", "First_Name", 1);
				break;
				case "step7": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Last_Name"), "Last_Name", "Last_Name", 1);
				break;						
				case "step8": stepStatus[step] = javaScriptDatePicker(send_Sim.Send_Sim_Page("Date_Of_Birth"), "Date_Of_Birth", "Date_Of_Birth", 1);
				break;
				case "step9": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Country"), "Country");
				break;
				case "step10": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Country"), "Country", "Country", 1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode_Initial", 1);
				break;
				case "step12": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Find_Address"), "Find_Address");
				break;
				case "step13": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Address_List"), "Address_List");
				break;
				case "step14": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Address_List"), "Address_List", "Address", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Accept_Address"), "Accept_Address");
				break;
				case "step16": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step17": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step18": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Postcode"), "Postcode");
				break;
				case "step19": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("City"), "City");
				break;
				case "step20": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Street"), "Street");
				break;
				case "step21": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("State"), "State", "State", 1);
				break;
				case "step22": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode", 1);
				break;
				case "step23": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("City"), "City", "City", 1);
				break;
				case "step24": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number_Initial", 1);
				break;
				case "step25": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Street"), "Street", "Street", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number", 1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Apartment_Number"), "Apartment_Number", "Apartment_Number", 1);
				break;
				case "step28": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Email"), "Email", "Email", 1);
				break;
				case "step29": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Contact_Number"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step30": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step31": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step32": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Check_Payment"), "Check_Payment");
				break;
				case "step33": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("Check_Payment"), "Check_Payment");
				break;
				case "step34": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims");
				break;
				case "step35": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims", "Number_Of_Sims", 1);
				break;
				case "step36": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1");
				break;
				case "step37": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1", "Sim_Type_1", 1);
				break;
				case "step38": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan");
				break;
				case "step39": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan", "Sim_Plan", 1);
				break;
				case "step40": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("radio_Bundle"), "Bundle_Radio_Button");
				break;					
				case "step41": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Bundle"), "Bundle_Radio_Button");
				break;
				case "step42": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundle_Dropdown"), "Bundle_Dropdown");
				break;
				case "step43": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Bundle_Dropdown"), "Bundle_Dropdown", "Bundle", 1);
				break;
				case "step44": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Months"), "Number_Of_Months");
				break;
				case "step45": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Months"), "Number_Of_Months", "Number_Of_Months", 1);
				break;
				case "step46": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundle_Submit"), "Bundle_Submit");
				break;
				case "step47": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Bundle_Submit"), "Bundle_Submit");
				break;
				case "step48": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step49": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Next_Sim_Type"), "Next_Sim_Type");
				break;						
				case "step50": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Sim_Type"), "Next_Sim_Type");
				break;				
				case "step51": stepStatus[step] = waituntiltextpresent(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step53": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("close_button"), "Close_Button");
				break;
				case "step54": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Send_Sim_Mand_Alert(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 19;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step2": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step3": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Title"), "Title");
				break;
				case "step4": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step5": stepStatus[step] = waituntiltextpresent(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step6": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step7": stepStatus[step] = checkElementIsDisplayed(send_Sim.Send_Sim_Page("val_Title"), "Title");
				break;
				case "step8": stepStatus[step] = checkElementIsDisplayed(send_Sim.Send_Sim_Page("val_FirstName"), "First_Name");
				break;
				case "step9": stepStatus[step] = checkElementIsDisplayed(send_Sim.Send_Sim_Page("val_LastName"), "Last_Name");
				break;
				case "step10": stepStatus[step] = checkElementIsDisplayed(send_Sim.Send_Sim_Page("val_DOB"), "Date_Of_Birth");
				break;
				case "step11": stepStatus[step] = checkElementIsDisplayed(send_Sim.Send_Sim_Page("val_State"), "State");
				break;
				case "step12": stepStatus[step] = checkElementIsDisplayed(send_Sim.Send_Sim_Page("val_Postcode"), "Post_Code");
				break;
				case "step13": stepStatus[step] = checkElementIsDisplayed(send_Sim.Send_Sim_Page("val_City"), "City");
				break;
				case "step14": stepStatus[step] = checkElementIsDisplayed(send_Sim.Send_Sim_Page("val_Houseno"), "House_Number");
				break;
				case "step15": stepStatus[step] = checkElementIsDisplayed(send_Sim.Send_Sim_Page("val_Street"), "Street");
				break;
				case "step16": stepStatus[step] = checkElementIsDisplayed(send_Sim.Send_Sim_Page("val_Email"), "Email");
				break;
				case "step17": stepStatus[step] = checkElementIsDisplayed(send_Sim.Send_Sim_Page("val_Contact"), "Alternate_Contact_Number");
				break;
				case "step18": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("close_button"), "Close_Button");
				break;
				case "step19": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}	

	public synchronized void Send_Sim1_Topup_Bundle(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 129;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step2": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step3": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Title"), "Title");
				break;
				case "step4": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Title"), "Title", "Title", 1);
				break;
				case "step5": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("First_Name"), "First_Name");
				break;
				case "step6": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("First_Name"), "First_Name", "First_Name", 1);
				break;
				case "step7": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Last_Name"), "Last_Name", "Last_Name", 1);
				break;						
				case "step8": stepStatus[step] = javaScriptDatePicker(send_Sim.Send_Sim_Page("Date_Of_Birth"), "Date_Of_Birth", "Date_Of_Birth", 1);
				break;
				case "step9": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Country"), "Country");
				break;
				case "step10": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Country"), "Country", "Country", 1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode_Initial", 1);
				break;
				case "step12": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Find_Address"), "Find_Address");
				break;
				case "step13": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Address_List"), "Address_List");
				break;
				case "step14": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Address_List"), "Address_List", "Address", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Accept_Address"), "Accept_Address");
				break;
				case "step16": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step17": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step18": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Postcode"), "Postcode");
				break;
				case "step19": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("City"), "City");
				break;
				case "step20": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Street"), "Street");
				break;
				case "step21": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("State"), "State", "State", 1);
				break;
				case "step22": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode", 1);
				break;
				case "step23": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("City"), "City", "City", 1);
				break;
				case "step24": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number_Initial", 1);
				break;
				case "step25": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Street"), "Street", "Street", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number", 1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Apartment_Number"), "Apartment_Number", "Apartment_Number", 1);
				break;
				case "step28": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("Billing_Address"), "Billing_Address");
				break;
				case "step29": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Billing_Postcode"), "Billing_Postcode");
				break;
				case "step30": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Billing_Country"), "Billing_Country", "Country", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_State"), "Billing_State", "Billing_State", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Postcode"), "Billing_Postcode", "Billing_Postcode", 1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_City"), "Billing_City", "Billing_City", 1);
				break;
				case "step34": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_House_Number"), "Billing_House_Number", "Billing_House_Number", 1);
				break;
				case "step35": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Street"), "Billing_Street", "Billing_Street", 1);
				break;
				case "step36": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Apartment_Number"), "Billing_Apartment_Number", "Billing_Apartment_Number", 1);
				break;
				case "step37": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Email"), "Email", "Email", 1);
				break;
				case "step38": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Contact_Number"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step39": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step40": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step41": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Check_Payment"), "Check_Payment");
				break;
				case "step42": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("Check_Payment"), "Check_Payment");
				break;
				case "step43": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims");
				break;
				case "step44": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims", "Number_Of_Sims", 1);
				break;
				case "step45": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1");
				break;
				case "step46": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1", "Sim_Type_1", 1);
				break;
				case "step47": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan");
				break;
				case "step48": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan", "Sim_Plan", 1);
				break;
				case "step49": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;					
				case "step50": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;
				case "step51": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type");
				break;
				case "step52": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type", "Topup_Type", 1);
				break;
				case "step53": stepStatus[step] = waitUntilListLoads(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value");
				break;
				case "step54": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value", "Topup_Value", 1);
				break;
				case "step55": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step56": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step57": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step58": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_1","Primary_Key_Column_Value_2","Secondary_Key_Column_Values_1",1);
				break;
				case "step59": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Bundle"), "Bundle_Radio_Button");
				break;
				case "step60": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundle_Dropdown"), "Bundle_Dropdown");
				break;
				case "step61": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Bundle_Dropdown"), "Bundle_Dropdown", "Bundle", 1);
				break;
				case "step62": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Months"), "Number_Of_Months");
				break;
				case "step63": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Months"), "Number_Of_Months", "Number_Of_Months", 1);
				break;
				case "step64": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundle_Submit"), "Bundle_Submit");
				break;
				case "step65": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Bundle_Submit"), "Bundle_Submit");
				break;
				case "step66": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step67": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_1","Primary_Key_Column_Value_3","Secondary_Key_Column_Values_2",1);
				break;
				case "step68": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Addon"), "Addon_Radio_Button");
				break;
				case "step69": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Addon_Dropdown"), "Addon_Dropdown");
				break;
				case "step70": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Addon_Dropdown"), "Addon_Dropdown", "Addon", 1);
				break;
				case "step71": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Months_Addon"), "Number_Of_Months_Addon");
				break;
				case "step72": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Months_Addon"), "Number_Of_Months_Addon", "Number_Of_Months_Addon", 1);
				break;
				case "step73": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Addon_Submit"), "Addon_Submit");
				break;
				case "step74": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Addon_Submit"), "Addon_Submit");
				break;
				case "step75": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step76": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_1","Primary_Key_Column_Value_4","Secondary_Key_Column_Values_3",1);
				break;
				case "step77": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Next_Sim_Type"), "Next_Sim_Type");
				break;						
				case "step78": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Sim_Type"), "Next_Sim_Type");
				break;
				case "step79": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Confirm_Title"), "Confirm_Title");
				break;
				case "step80": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Title"), "Confirm_Title","Title",1);
				break;
				case "step81": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_First_Name"), "Confirm_First_Name","First_Name",1);
				break;	
				case "step82": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Last_Name"), "Confirm_Last_Name","Last_Name",1);
				break;	
				case "step83": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Date_Of_Birth"), "Confirm_Date_Of_Birth","Date_Of_Birth",1);
				break;	
				case "step84": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Country"), "Confirm_Country","Country",1);
				break;	
				case "step85": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_State"), "Confirm_State","State",1);
				break;	
				case "step86": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Postcode"), "Confirm_Postcode","Postcode",1);
				break;	
				case "step87": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_City"), "Confirm_City","City",1);
				break;	
				case "step88": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_House_Number"), "Confirm_House_Number","House_Number",1);
				break;	
				case "step89": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Street"), "Confirm_Street","Street",1);
				break;	
				case "step90": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Apartment_Number"), "Confirm_Apartment_Number","Apartment_Number",1);
				break;	
				case "step91": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Country"), "Confirm_Billing_Country","Country",1);
				break;	
				case "step92": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_State"), "Confirm_Billing_State","Billing_State",1);
				break;	
				case "step93": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Postcode"), "Confirm_Billing_Postcode","Billing_Postcode",1);
				break;	
				case "step94": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_City"), "Confirm_Billing_City","Billing_City",1);
				break;	
				case "step95": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_House_Number"), "Confirm_Billing_House_Number","Billing_House_Number",1);
				break;	
				case "step96": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Street"), "Confirm_Billing_Street","Billing_Street",1);
				break;	
				case "step97": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Apartment_Number"), "Confirm_Billing_Apartment_Number","Billing_Apartment_Number",1);
				break;	
				case "step98": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Email"), "Confirm_Email","Email",1);
				break;	
				case "step99": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Contact_Number"), "Confirm_Contact_Number","Contact_Number",1);
				break;
				case "step100": stepStatus[step] = ScrollIntoElement(send_Sim.Send_Sim_Page("Next_Confirm_Page"), "Next_Confirm_Page");
				break;
				case "step101": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Confirm_Bundles_Table"), "Confirm_Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_1","Primary_Key_Column_Value_2","Secondary_Key_Column_Values_1",1);
				break;
				case "step102": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Confirm_Bundles_Table"), "Confirm_Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_1","Primary_Key_Column_Value_3","Secondary_Key_Column_Values_2",1);
				break;
				case "step103": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Confirm_Bundles_Table"), "Confirm_Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_1","Primary_Key_Column_Value_4","Secondary_Key_Column_Values_3",1);
				break;
				case "step104": stepStatus[step] = ScrollIntoElement(send_Sim.Send_Sim_Page("Next_Confirm_Page"), "Next_Confirm_Page");
				break;
				case "step105": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Confirm_Page"), "Next_Confirm_Page");
				break;
				case "step106": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Card_Type"), "Card_Type");
				break;
				case "step107": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Total_Amount"), "Total_Amount","Total_Amount",1);
				break;
				case "step108": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Card_Type"), "Card_Type", "Card_Type", 1);
				break;
				case "step109": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Name_On_Card"), "Name_On_Card");
				break;
				case "step110": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Name_On_Card"), "Name_On_Card", "Name_On_Card", 1);
				break;
				case "step111": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_1"), "Card_Number_1", "Card_Number_1", 1);
				break;
				case "step112": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_2"), "Card_Number_2", "Card_Number_2", 1);
				break;
				case "step113": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_3"), "Card_Number_3", "Card_Number_3", 1);
				break;
				case "step114": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_4"), "Card_Number_4", "Card_Number_4", 1);
				break;
				case "step115": stepStatus[step] = javaScriptDatePicker(send_Sim.Send_Sim_Page("Expiry_Date"), "Expiry_Date", "Expiry_Date", 1);
				break;
				case "step116": stepStatus[step] = javaScriptEnterText(send_Sim.Send_Sim_Page("CVV_Number"), "CVV_Number", "CVV_Number", 1);
				break;
				case "step117": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Payments_Page"), "Next_Payments_Page");
				break;
				case "step118": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Submit_Payments_Page"), "Submit_Payments_Page");
				break;
				case "step119": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Total_Amount"), "Total_Amount","Total_Amount",1);
				break;					
				case "step120": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Submit_Payments_Page"), "Submit_Payments_Page");
				break;
				case "step121": stepStatus[step] = waituntiltextpresent(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step122": stepStatus[step] = ScrollIntoElement(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step123": stepStatus[step] = WebElementResxKeyValueStaticCompare(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step124": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Amount"), "Amount","Amount",1);
				break;
				case "step125": stepStatus[step] = WebElementDynamicStringVerify(send_Sim.Send_Sim_Page("Transaction_Number"), "Transaction_Number","Transaction_Number_Pattern",1);
				break;
				case "step126": stepStatus[step] = WebElementTextStoreDynamicValue(send_Sim.Send_Sim_Page("Transaction_Number"), "Transaction_Number","Transaction_Number_Env",1);
				break;
				case "step127": stepStatus[step] = WebElementDynamicStringVerify(send_Sim.Send_Sim_Page("Red_Order_Id"), "Red_Order_Id","Red_Order_Id_Pattern",1);
				break;
				case "step128": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("close_button"), "Close_Button");
				break;
				case "step129": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postconditions_SS_Bundle(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=13;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("Table_Name_mstFreeSimCustomer", "Column_Name_Count", "Condition_mstFreeSimCustomer", "Count_Value", 1);
				break;
				case "step2": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name_mstFreeSimCustomer","ColumnName_Transactionid","Condition_mstFreeSimCustomer","Env_Transactionid",1);
				break;
				case "step3": stepStatus[step] = ReplaceStringStoreEnvvar("Env_Transactionid","Env_Subscriberid","String_To_Replace","Replacement_String",1);
				break;
				case "step4": stepStatus[step] = SQLDBSelectMultiConditionEnvvar("TableName_mstFreeSimCustomerActivation", "Columnname_CardId", "Condition_mstFreeSimCustomerActivation", "Condition_mstFreeSimCustomerActivation_2","Env_Transactionid", "Column_Value_Cardid", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelectMultiConditionEnvvar("TableName_mstFreeSimCustomerActivation", "Columnname_Topupamount", "Condition_mstFreeSimCustomerActivation", "Condition_mstFreeSimCustomerActivation_2","Env_Transactionid", "Column_Value_Topupamount", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelectMultiConditionEnvvar("TableName_mstFreeSimCustomerActivation", "Columnname_NABundleAmount", "Condition_mstFreeSimCustomerActivation", "Condition_mstFreeSimCustomerActivation_3","Env_Transactionid", "Column_Value_NABundleAmount", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelectMultiConditionEnvvar("TableName_mstFreeSimCustomerActivation", "Columnname_INABundleAmount", "Condition_mstFreeSimCustomerActivation", "Condition_mstFreeSimCustomerActivation_4","Env_Transactionid", "Column_Value_INABundleAmount", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_mstFreeSimCustomerActivation", "Column_Name_Count", "Condition_mstFreeSimCustomerActivation", "Env_Transactionid", "Count_Value_mstFreeSimCustomerActivation", 1);
				break;
				case "step9": stepStatus[step] = ESHOPSQLDBSelectCompConditionEnvvar("TableName_tbleShopTransactionStatus", "Columnname_Subscriberid", "Condition_tbleShopTransactionStatus", "Env_Transactionid", "Env_Subscriberid", 1);
				break;						
				case "step10": stepStatus[step] = ESHOPSQLDBSelectConditionEnvvar("TableName_tblUserCardDetails", "Column_Name_Count", "Condition_tblUserCardDetails", "Env_Subscriberid", "Count_Value_tblUserCardDetails", 1);
				break;
				case "step11": stepStatus[step] = SQLDBDeleteConditionEnvvar("TableName_mstFreeSimCustomerActivation","Condition_mstFreeSimCustomerActivation","Env_Transactionid",1);
				break;
				case "step12": stepStatus[step] = ESHOPSQLDBDeleteConditionEnvvar("TableName_tbleShopTransactionStatus","Condition_tbleShopTransactionStatus","Env_Transactionid",1);
				break;
				case "step13": stepStatus[step] = ESHOPSQLDBDeleteConditionEnvvar("TableName_tblUserCardDetails","Condition_tblUserCardDetails","Env_Subscriberid",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Select_Multi_Send_Sim(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 51;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step2": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step3": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Title"), "Title");
				break;
				case "step4": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Title"), "Title", "Title", 1);
				break;
				case "step5": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("First_Name"), "First_Name");
				break;
				case "step6": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("First_Name"), "First_Name", "First_Name", 1);
				break;
				case "step7": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Last_Name"), "Last_Name", "Last_Name", 1);
				break;						
				case "step8": stepStatus[step] = javaScriptDatePicker(send_Sim.Send_Sim_Page("Date_Of_Birth"), "Date_Of_Birth", "Date_Of_Birth", 1);
				break;
				case "step9": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Country"), "Country");
				break;
				case "step10": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Country"), "Country", "Country", 1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode_Initial", 1);
				break;
				case "step12": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Find_Address"), "Find_Address");
				break;
				case "step13": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Address_List"), "Address_List");
				break;
				case "step14": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Address_List"), "Address_List", "Address", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Accept_Address"), "Accept_Address");
				break;
				case "step16": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step17": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step18": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Postcode"), "Postcode");
				break;
				case "step19": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("City"), "City");
				break;
				case "step20": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Street"), "Street");
				break;
				case "step21": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("State"), "State", "State", 1);
				break;
				case "step22": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode", 1);
				break;
				case "step23": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("City"), "City", "City", 1);
				break;
				case "step24": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number_Initial", 1);
				break;
				case "step25": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Street"), "Street", "Street", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number", 1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Apartment_Number"), "Apartment_Number", "Apartment_Number", 1);
				break;
				case "step28": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("Billing_Address"), "Billing_Address");
				break;
				case "step29": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Billing_Postcode"), "Billing_Postcode");
				break;
				case "step30": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Billing_Country"), "Billing_Country", "Country", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_State"), "Billing_State", "Billing_State", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Postcode"), "Billing_Postcode", "Billing_Postcode", 1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_City"), "Billing_City", "Billing_City", 1);
				break;
				case "step34": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_House_Number"), "Billing_House_Number", "Billing_House_Number", 1);
				break;
				case "step35": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Street"), "Billing_Street", "Billing_Street", 1);
				break;
				case "step36": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Apartment_Number"), "Billing_Apartment_Number", "Billing_Apartment_Number", 1);
				break;
				case "step37": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Email"), "Email", "Email", 1);
				break;
				case "step38": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Contact_Number"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step39": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step40": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step41": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Check_Payment"), "Check_Payment");
				break;
				case "step42": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("Check_Payment"), "Check_Payment");
				break;
				case "step43": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims");
				break;
				case "step44": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims", "Number_Of_Sims", 1);
				break;
				case "step45": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1");
				break;
				case "step46": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1", "Sim_Type_1", 1);
				break;
				case "step47": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Type_2"), "Sim_Type_2");
				break;
				case "step48": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Type_2"), "Sim_Type_2", "Sim_Type_2", 1);
				break;
				case "step49": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Type_3"), "Sim_Type_3");
				break;
				case "step50": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Type_3"), "Sim_Type_3", "Sim_Type_3", 1);
				break;
				case "step51": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Select_Multi_Topup_Bundle(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 30;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan");
				break;
				case "step2": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan", "Sim_Plan", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;					
				case "step4": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type");
				break;
				case "step6": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type", "Topup_Type", 1);
				break;
				case "step7": stepStatus[step] = waitUntilListLoads(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value");
				break;
				case "step8": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value", "Topup_Value", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step10": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step11": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step12": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_1","Primary_Key_Column_Value_2","Secondary_Key_Column_Values_1",1);
				break;
				case "step13": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Bundle"), "Bundle_Radio_Button");
				break;
				case "step14": stepStatus[step] = waitUntilListLoads(send_Sim.Send_Sim_Page("Bundle_Dropdown"), "Bundle_Dropdown");
				break;
				case "step15": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Bundle_Dropdown"), "Bundle_Dropdown", "Bundle", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Months"), "Number_Of_Months");
				break;
				case "step17": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Months"), "Number_Of_Months", "Number_Of_Months", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundle_Submit"), "Bundle_Submit");
				break;
				case "step19": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Bundle_Submit"), "Bundle_Submit");
				break;
				case "step20": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step21": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_1","Primary_Key_Column_Value_3","Secondary_Key_Column_Values_2",1);
				break;
				case "step22": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Addon"), "Addon_Radio_Button");
				break;
				case "step23": stepStatus[step] = waitUntilListLoads(send_Sim.Send_Sim_Page("Addon_Dropdown"), "Addon_Dropdown");
				break;
				case "step24": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Addon_Dropdown"), "Addon_Dropdown", "Addon", 1);
				break;
				case "step25": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Months_Addon"), "Number_Of_Months_Addon");
				break;
				case "step26": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Months_Addon"), "Number_Of_Months_Addon", "Number_Of_Months_Addon", 1);
				break;
				case "step27": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Addon_Submit"), "Addon_Submit");
				break;
				case "step28": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Addon_Submit"), "Addon_Submit");
				break;
				case "step29": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step30": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_1","Primary_Key_Column_Value_4","Secondary_Key_Column_Values_3",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Send_Multi_Sim_Topup_Bundle(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 59;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Next_Sim_Type"), "Next_Sim_Type");
				break;						
				case "step2": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Sim_Type"), "Next_Sim_Type");
				break;
				case "step3": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Confirm_Title"), "Confirm_Title");
				break;
				case "step4": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Title"), "Confirm_Title","Title",1);
				break;
				case "step5": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_First_Name"), "Confirm_First_Name","First_Name",1);
				break;	
				case "step6": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Last_Name"), "Confirm_Last_Name","Last_Name",1);
				break;	
				case "step7": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Date_Of_Birth"), "Confirm_Date_Of_Birth","Date_Of_Birth",1);
				break;	
				case "step8": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Country"), "Confirm_Country","Country",1);
				break;	
				case "step9": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_State"), "Confirm_State","State",1);
				break;	
				case "step10": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Postcode"), "Confirm_Postcode","Postcode",1);
				break;	
				case "step11": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_City"), "Confirm_City","City",1);
				break;	
				case "step12": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_House_Number"), "Confirm_House_Number","House_Number",1);
				break;	
				case "step13": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Street"), "Confirm_Street","Street",1);
				break;	
				case "step14": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Apartment_Number"), "Confirm_Apartment_Number","Apartment_Number",1);
				break;	
				case "step15": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Country"), "Confirm_Billing_Country","Country",1);
				break;	
				case "step16": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_State"), "Confirm_Billing_State","Billing_State",1);
				break;	
				case "step17": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Postcode"), "Confirm_Billing_Postcode","Billing_Postcode",1);
				break;	
				case "step18": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_City"), "Confirm_Billing_City","Billing_City",1);
				break;	
				case "step19": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_House_Number"), "Confirm_Billing_House_Number","Billing_House_Number",1);
				break;	
				case "step20": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Street"), "Confirm_Billing_Street","Billing_Street",1);
				break;	
				case "step21": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Apartment_Number"), "Confirm_Billing_Apartment_Number","Billing_Apartment_Number",1);
				break;	
				case "step22": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Email"), "Confirm_Email","Email",1);
				break;	
				case "step23": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Contact_Number"), "Confirm_Contact_Number","Contact_Number",1);
				break;
				case "step24": stepStatus[step] = ScrollIntoElement(send_Sim.Send_Sim_Page("Next_Confirm_Page"), "Next_Confirm_Page");
				break;
				case "step25": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Confirm_Bundles_Table"), "Confirm_Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_1","Primary_Key_Column_Value_2","Secondary_Key_Column_Values_1",1);
				break;
				case "step26": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Confirm_Bundles_Table"), "Confirm_Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_1","Primary_Key_Column_Value_3","Secondary_Key_Column_Values_2",1);
				break;
				case "step27": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Confirm_Bundles_Table"), "Confirm_Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_1","Primary_Key_Column_Value_4","Secondary_Key_Column_Values_3",1);
				break;
				case "step28": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Confirm_Bundles_Table"), "Confirm_Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_5","Primary_Key_Column_Value_2","Secondary_Key_Column_Values_4",1);
				break;
				case "step29": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Confirm_Bundles_Table"), "Confirm_Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_5","Primary_Key_Column_Value_3","Secondary_Key_Column_Values_5",1);
				break;
				case "step30": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Confirm_Bundles_Table"), "Confirm_Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_5","Primary_Key_Column_Value_4","Secondary_Key_Column_Values_6",1);
				break;
				case "step31": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Confirm_Bundles_Table"), "Confirm_Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_6","Primary_Key_Column_Value_2","Secondary_Key_Column_Values_7",1);
				break;
				case "step32": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Confirm_Bundles_Table"), "Confirm_Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_6","Primary_Key_Column_Value_3","Secondary_Key_Column_Values_8",1);
				break;
				case "step33": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Confirm_Bundles_Table"), "Confirm_Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_6","Primary_Key_Column_Value_4","Secondary_Key_Column_Values_9",1);
				break;
				case "step34": stepStatus[step] = ScrollIntoElement(send_Sim.Send_Sim_Page("Next_Confirm_Page"), "Next_Confirm_Page");
				break;
				case "step35": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Confirm_Page"), "Next_Confirm_Page");
				break;
				case "step36": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Card_Type"), "Card_Type");
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Total_Amount"), "Total_Amount","Total_Amount",1);
				break;
				case "step38": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Card_Type"), "Card_Type", "Card_Type", 1);
				break;
				case "step39": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Name_On_Card"), "Name_On_Card");
				break;
				case "step40": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Name_On_Card"), "Name_On_Card", "Name_On_Card", 1);
				break;
				case "step41": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_1"), "Card_Number_1", "Card_Number_1", 1);
				break;
				case "step42": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_2"), "Card_Number_2", "Card_Number_2", 1);
				break;
				case "step43": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_3"), "Card_Number_3", "Card_Number_3", 1);
				break;
				case "step44": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_4"), "Card_Number_4", "Card_Number_4", 1);
				break;
				case "step45": stepStatus[step] = javaScriptDatePicker(send_Sim.Send_Sim_Page("Expiry_Date"), "Expiry_Date", "Expiry_Date", 1);
				break;
				case "step46": stepStatus[step] = javaScriptEnterText(send_Sim.Send_Sim_Page("CVV_Number"), "CVV_Number", "CVV_Number", 1);
				break;
				case "step47": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Payments_Page"), "Next_Payments_Page");
				break;
				case "step48": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Submit_Payments_Page"), "Submit_Payments_Page");
				break;
				case "step49": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Total_Amount"), "Total_Amount","Total_Amount",1);
				break;					
				case "step50": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Submit_Payments_Page"), "Submit_Payments_Page");
				break;
				case "step51": stepStatus[step] = waituntiltextpresent(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step52": stepStatus[step] = ScrollIntoElement(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step53": stepStatus[step] = WebElementResxKeyValueStaticCompare(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Amount"), "Amount","Amount",1);
				break;
				case "step55": stepStatus[step] = WebElementDynamicStringVerify(send_Sim.Send_Sim_Page("Transaction_Number"), "Transaction_Number","Transaction_Number_Pattern",1);
				break;
				case "step56": stepStatus[step] = WebElementTextStoreDynamicValue(send_Sim.Send_Sim_Page("Transaction_Number"), "Transaction_Number","Transaction_Number_Env",1);
				break;
				case "step57": stepStatus[step] = WebElementDynamicStringVerify(send_Sim.Send_Sim_Page("Red_Order_Id"), "Red_Order_Id","Red_Order_Id_Pattern",1);
				break;
				case "step58": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("close_button"), "Close_Button");
				break;
				case "step59": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Send_Sim_Check_Promo(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 68;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step2": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step3": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Title"), "Title");
				break;
				case "step4": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Title"), "Title", "Title", 1);
				break;
				case "step5": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("First_Name"), "First_Name");
				break;
				case "step6": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("First_Name"), "First_Name", "First_Name", 1);
				break;
				case "step7": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Last_Name"), "Last_Name", "Last_Name", 1);
				break;						
				case "step8": stepStatus[step] = javaScriptDatePicker(send_Sim.Send_Sim_Page("Date_Of_Birth"), "Date_Of_Birth", "Date_Of_Birth", 1);
				break;
				case "step9": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Country"), "Country");
				break;
				case "step10": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Country"), "Country", "Country", 1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode_Initial", 1);
				break;
				case "step12": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Find_Address"), "Find_Address");
				break;
				case "step13": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Address_List"), "Address_List");
				break;
				case "step14": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Address_List"), "Address_List", "Address", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Accept_Address"), "Accept_Address");
				break;
				case "step16": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step17": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step18": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Postcode"), "Postcode");
				break;
				case "step19": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("City"), "City");
				break;
				case "step20": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Street"), "Street");
				break;
				case "step21": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("State"), "State", "State", 1);
				break;
				case "step22": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode", 1);
				break;
				case "step23": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("City"), "City", "City", 1);
				break;
				case "step24": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number_Initial", 1);
				break;
				case "step25": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Street"), "Street", "Street", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number", 1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Apartment_Number"), "Apartment_Number", "Apartment_Number", 1);
				break;
				case "step28": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("Billing_Address"), "Billing_Address");
				break;
				case "step29": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Billing_Postcode"), "Billing_Postcode");
				break;
				case "step30": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Billing_Country"), "Billing_Country", "Country", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_State"), "Billing_State", "Billing_State", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Postcode"), "Billing_Postcode", "Billing_Postcode", 1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_City"), "Billing_City", "Billing_City", 1);
				break;
				case "step34": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_House_Number"), "Billing_House_Number", "Billing_House_Number", 1);
				break;
				case "step35": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Street"), "Billing_Street", "Billing_Street", 1);
				break;
				case "step36": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Apartment_Number"), "Billing_Apartment_Number", "Billing_Apartment_Number", 1);
				break;
				case "step37": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Email"), "Email", "Email", 1);
				break;
				case "step38": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Contact_Number"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step39": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step40": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step41": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Check_Payment"), "Check_Payment");
				break;
				case "step42": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("Check_Payment"), "Check_Payment");
				break;
				case "step43": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims");
				break;
				case "step44": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims", "Number_Of_Sims", 1);
				break;
				case "step45": stepStatus[step] = waitUntilListLoads(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1");
				break;
				case "step46": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1", "Sim_Type_1", 1);
				break;
				case "step47": stepStatus[step] = waitUntilListLoads(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan");
				break;
				case "step48": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan", "Sim_Plan", 1);
				break;
				case "step49": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;					
				case "step50": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;
				case "step51": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type");
				break;
				case "step52": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type", "Topup_Type", 1);
				break;
				case "step53": stepStatus[step] = waitUntilListLoads(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value");
				break;
				case "step54": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value", "Topup_Value", 1);
				break;
				case "step55": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step56": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step57": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step58": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Bundle"), "Bundle_Radio_Button");
				break;
				case "step59": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundle_Dropdown"), "Bundle_Dropdown");
				break;
				case "step60": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Bundle_Dropdown"), "Bundle_Dropdown", "Bundle", 1);
				break;
				case "step61": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Months"), "Number_Of_Months");
				break;
				case "step62": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Months"), "Number_Of_Months", "Number_Of_Months", 1);
				break;
				case "step63": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundle_Submit"), "Bundle_Submit");
				break;
				case "step64": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Bundle_Submit"), "Bundle_Submit");
				break;
				case "step65": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step66": stepStatus[step] = WebElementisNotVisible(send_Sim.Send_Sim_Page("Promo_Code"), "Promo_Code");
				break;
				case "step67": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("close_button"), "Close_Button");
				break;
				case "step68": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Enter_TFH_Details(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 20;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(topup_Failure_History.Topup_Failure_History_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(topup_Failure_History.Topup_Failure_History_Page("Load_Parameter"), "Load_Parameter", "MSISDN", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Topup_Failure_History"), "Topup_Failure_History");
				break;
				case "step11": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Topup_Failure_History"), "Topup_Failure_History");
				break;
				case "step12": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Topup_Mode"), "Topup_Mode");
				break;
				case "step13": stepStatus[step] = javaScriptDatePicker(topup_Failure_History.Topup_Failure_History_Page("From_Date"), "From_Date", "From_Date", 1);
				break;
				case "step14": stepStatus[step] = javaScriptDatePicker(topup_Failure_History.Topup_Failure_History_Page("To_Date"), "To_Date", "To_Date", 1);
				break;					
				case "step15": stepStatus[step] = WebListSelect(topup_Failure_History.Topup_Failure_History_Page("Topup_Mode"), "Topup_Mode", "Topup_Mode", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Type"), "Type");
				break;
				case "step17": stepStatus[step] = WebListSelect(topup_Failure_History.Topup_Failure_History_Page("Type"), "Type", "Type", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Submit"), "Submit");
				break;
				case "step19": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Submit"), "Submit");
				break;
				case "step20": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("History_Table"), "Topup_History_Table");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Details_TFH(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = webTableVerifyDetailshashtablelabel(topup_Failure_History.Topup_Failure_History_Page("History_Table"), "Topup_History_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Send_Sim_Promo_Alert(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 79;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step2": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step3": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Title"), "Title");
				break;
				case "step4": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Title"), "Title", "Title", 1);
				break;
				case "step5": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("First_Name"), "First_Name");
				break;
				case "step6": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("First_Name"), "First_Name", "First_Name", 1);
				break;
				case "step7": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Last_Name"), "Last_Name", "Last_Name", 1);
				break;						
				case "step8": stepStatus[step] = javaScriptDatePicker(send_Sim.Send_Sim_Page("Date_Of_Birth"), "Date_Of_Birth", "Date_Of_Birth", 1);
				break;
				case "step9": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Country"), "Country");
				break;
				case "step10": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Country"), "Country", "Country", 1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode_Initial", 1);
				break;
				case "step12": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Find_Address"), "Find_Address");
				break;
				case "step13": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Address_List"), "Address_List");
				break;
				case "step14": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Address_List"), "Address_List", "Address", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Accept_Address"), "Accept_Address");
				break;
				case "step16": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step17": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step18": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Postcode"), "Postcode");
				break;
				case "step19": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("City"), "City");
				break;
				case "step20": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Street"), "Street");
				break;
				case "step21": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("State"), "State", "State", 1);
				break;
				case "step22": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode", 1);
				break;
				case "step23": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("City"), "City", "City", 1);
				break;
				case "step24": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number_Initial", 1);
				break;
				case "step25": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Street"), "Street", "Street", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number", 1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Apartment_Number"), "Apartment_Number", "Apartment_Number", 1);
				break;
				case "step28": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("Billing_Address"), "Billing_Address");
				break;
				case "step29": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Billing_Postcode"), "Billing_Postcode");
				break;
				case "step30": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Billing_Country"), "Billing_Country", "Country", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_State"), "Billing_State", "Billing_State", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Postcode"), "Billing_Postcode", "Billing_Postcode", 1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_City"), "Billing_City", "Billing_City", 1);
				break;
				case "step34": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_House_Number"), "Billing_House_Number", "Billing_House_Number", 1);
				break;
				case "step35": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Street"), "Billing_Street", "Billing_Street", 1);
				break;
				case "step36": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Apartment_Number"), "Billing_Apartment_Number", "Billing_Apartment_Number", 1);
				break;
				case "step37": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Email"), "Email", "Email", 1);
				break;
				case "step38": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Contact_Number"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step39": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step40": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step41": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Check_Payment"), "Check_Payment");
				break;
				case "step42": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("Check_Payment"), "Check_Payment");
				break;
				case "step43": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims");
				break;
				case "step44": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims", "Number_Of_Sims", 1);
				break;
				case "step45": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1");
				break;
				case "step46": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1", "Sim_Type_1", 1);
				break;
				case "step47": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan");
				break;
				case "step48": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan", "Sim_Plan", 1);
				break;
				case "step49": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;					
				case "step50": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;
				case "step51": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type");
				break;
				case "step52": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type", "Topup_Type", 1);
				break;
				case "step53": stepStatus[step] = waitUntilListLoads(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value");
				break;
				case "step54": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value", "Topup_Value", 1);
				break;
				case "step55": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step56": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step57": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step58": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Bundle"), "Bundle_Radio_Button");
				break;
				case "step59": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundle_Dropdown"), "Bundle_Dropdown");
				break;
				case "step60": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Bundle_Dropdown"), "Bundle_Dropdown", "Bundle", 1);
				break;
				case "step61": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Months"), "Number_Of_Months");
				break;
				case "step62": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Months"), "Number_Of_Months", "Number_Of_Months", 1);
				break;
				case "step63": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundle_Submit"), "Bundle_Submit");
				break;
				case "step64": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Bundle_Submit"), "Bundle_Submit");
				break;
				case "step65": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step66": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Addon"), "Addon_Radio_Button");
				break;
				case "step67": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Addon_Dropdown"), "Addon_Dropdown");
				break;
				case "step68": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Addon_Dropdown"), "Addon_Dropdown", "Addon", 1);
				break;
				case "step69": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Months_Addon"), "Number_Of_Months_Addon");
				break;
				case "step70": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Months_Addon"), "Number_Of_Months_Addon", "Number_Of_Months_Addon", 1);
				break;
				case "step71": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Addon_Submit"), "Addon_Submit");
				break;
				case "step72": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Addon_Submit"), "Addon_Submit");
				break;
				case "step73": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step74": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Promo_Code"), "Promo_Code", "Promo_Code", 1);
				break;				
				case "step75": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Apply_Promo"), "Apply_Promo");
				break;
				case "step76": stepStatus[step] = waituntiltextpresent(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step77": stepStatus[step] = WebElementResxKeyValueStaticCompare(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step78": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("close_button"), "Close_Button");
				break;
				case "step79": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Calender_Years_TFH(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 18;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(topup_Failure_History.Topup_Failure_History_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(topup_Failure_History.Topup_Failure_History_Page("Load_Parameter"), "Load_Parameter", "MSISDN", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Topup_Failure_History"), "Topup_Failure_History");
				break;
				case "step11": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Topup_Failure_History"), "Topup_Failure_History");
				break;
				case "step12": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Topup_Mode"), "Topup_Mode");
				break;
				case "step13": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("From_Date"), "From_Date");
				break;
				case "step14": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Calender_Year_Dropdown"), "Calender_Year_Dropdown");
				break;
				case "step15": stepStatus[step] = WeblistCalenderYearsVerify(topup_Failure_History.Topup_Failure_History_Page("Calender_Year_Dropdown"), "Calender_Year_Dropdown", "Years_Count_Configured",1);
				break;
				case "step16": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("To_Date"), "To_Date");
				break;
				case "step17": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Calender_Year_Dropdown"), "Calender_Year_Dropdown");
				break;
				case "step18": stepStatus[step] = WeblistCalenderYearsVerify(topup_Failure_History.Topup_Failure_History_Page("Calender_Year_Dropdown"), "Calender_Year_Dropdown", "Years_Count_Configured",1);
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Credit_Message_Success(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 24;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(credit_Debit.Credit_Debit_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Credit_Debit"), "credit_Debit");
				break;
				case "step11": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Credit_Debit"), "credit_Debit");
				break;
				case "step12": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Amount"), "Amount");
				break;
				case "step13": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("radio_button_Credit"), "Credit_Radio_Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id");
				break;
				case "step15": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id", "Ticket_Id", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Amount"), "Amount", "Amount", 1);
				break;
				case "step17": stepStatus[step] = WebListSelect(credit_Debit.Credit_Debit_Page("Reason"), "Reason", "Reason", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Comments"), "Comments");
				break;
				case "step19": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Comments"), "Comments", "Comments", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Submit"), "Submit");
				break;
				case "step21": stepStatus[step] = waituntiltextpresent(credit_Debit.Credit_Debit_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step22": stepStatus[step] = WebElementResxKeyValueStaticCompare(credit_Debit.Credit_Debit_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(credit_Debit.Credit_Debit_Page("Old_Balance_Message"), "Old_Balance_Message","Old_Balance_Message",1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(credit_Debit.Credit_Debit_Page("New_Balance_Message"), "New_Balance_Message","New_Balance_Message",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postcond_credit_Debit_Admin(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=14;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Ticketid", "Condition_Trnrecredit", "Ticketid", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Amount", "Condition_Trnrecredit", "Amount", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Reason", "Condition_Trnrecredit", "Reason", 1);
				break;					
				case "step4": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trnrecredit","Columnname_Submitedby","Condition_Trnrecredit","Param","admin_Username",1);
				break;					
				case "step5": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Status", "Condition_Trnrecredit", "Status", 1);
				break;						
				case "step6": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trnrecredit","Columnname_Authorisedby","Condition_Trnrecredit","Param","admin_Username",1);
				break;					
				case "step7": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Comments", "Condition_Trnrecredit", "Comments", 1);
				break;						
				case "step8": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_NewBal", "Condition_Trnrecredit", "New_Balance", 1);
				break;	
				case "step9": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_OldBal", "Condition_Trnrecredit", "Old_Balance", 1);
				break;
				case "step10": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","TOPUP_FACE_VALUE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","TOPUP_FACE_VALUE_COLUMNVALUE",1);
				break;
				case "step11": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","ACCT_BALANCE_COLUMNVALUE",1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Dialed_MSISDN", "Condition_Trnrecredit", "Dialed_MSISDN", 1);
				break;						
				case "step13": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Dialed_Date", "Condition_Trnrecredit", "Dialed_Date", 1);
				break;	
				case "step14": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Duration", "Condition_Trnrecredit", "Duration", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}
	
	public synchronized void Postcond_Credit_Debit_Admin(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=14;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Ticketid", "Condition_Trnrecredit", "Ticketid", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Amount", "Condition_Trnrecredit", "Amount", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Reason", "Condition_Trnrecredit", "Reason", 1);
				break;					
				case "step4": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trnrecredit","Columnname_Submitedby","Condition_Trnrecredit","Param","admin_Username",1);
				break;					
				case "step5": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Status", "Condition_Trnrecredit", "Status", 1);
				break;						
				case "step6": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trnrecredit","Columnname_Authorisedby","Condition_Trnrecredit","Param","admin_Username",1);
				break;					
				case "step7": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Comments", "Condition_Trnrecredit", "Comments", 1);
				break;						
				case "step8": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_NewBal", "Condition_Trnrecredit", "New_Balance", 1);
				break;	
				case "step9": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_OldBal", "Condition_Trnrecredit", "Old_Balance", 1);
				break;
				case "step10": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","TOPUP_FACE_VALUE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","TOPUP_FACE_VALUE_COLUMNVALUE",1);
				break;
				case "step11": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","ACCT_BALANCE_COLUMNVALUE",1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Dialed_MSISDN", "Condition_Trnrecredit", "Dialed_MSISDN", 1);
				break;						
				case "step13": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Dialed_Date", "Condition_Trnrecredit", "Dialed_Date", 1);
				break;	
				case "step14": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Duration", "Condition_Trnrecredit", "Duration", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Credit_Message_WR_Billing(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 27;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(credit_Debit.Credit_Debit_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Credit_Debit"), "credit_Debit");
				break;
				case "step11": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Credit_Debit"), "credit_Debit");
				break;
				case "step12": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Amount"), "Amount");
				break;
				case "step13": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("radio_button_Credit"), "Credit_Radio_Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id");
				break;
				case "step15": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id", "Ticket_Id", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Amount"), "Amount", "Amount", 1);
				break;
				case "step17": stepStatus[step] = WebListSelect(credit_Debit.Credit_Debit_Page("Reason"), "Reason", "Reason", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Dialed_Number"), "Dialed_Number");
				break;
				case "step19": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Dialed_Number"), "Dialed_Number", "Dialed_Number", 1);
				break;					
				case "step20": stepStatus[step] = javaScriptDatePicker(credit_Debit.Credit_Debit_Page("Dialed_Date"), "Dialed_Date", "Dialed_Date", 1);
				break;
				case "step21": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Duration"), "Duration", "Duration", 1);
				break;					
				case "step22": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Comments"), "Comments", "Comments", 1);
				break;
				case "step23": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Submit"), "Submit");
				break;
				case "step24": stepStatus[step] = waituntiltextpresent(credit_Debit.Credit_Debit_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step25": stepStatus[step] = WebElementResxKeyValueStaticCompare(credit_Debit.Credit_Debit_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(credit_Debit.Credit_Debit_Page("Old_Balance_Message"), "Old_Balance_Message","Old_Balance_Message",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(credit_Debit.Credit_Debit_Page("New_Balance_Message"), "New_Balance_Message","New_Balance_Message",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postcond_Credit_Debit_Agent(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=14;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Ticketid", "Condition_Trnrecredit", "Ticketid", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Amount", "Condition_Trnrecredit", "Amount", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Reason", "Condition_Trnrecredit", "Reason", 1);
				break;					
				case "step4": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trnrecredit","Columnname_Submitedby","Condition_Trnrecredit","Param","CS_Username",1);
				break;					
				case "step5": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Status", "Condition_Trnrecredit", "Status", 1);
				break;						
				case "step6": stepStatus[step] = SQLDBSelect("Table_Trnrecredit","Columnname_Authorisedby","Condition_Trnrecredit","Authorisedby",1);
				break;					
				case "step7": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Comments", "Condition_Trnrecredit", "Comments", 1);
				break;						
				case "step8": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_NewBal", "Condition_Trnrecredit", "New_Balance", 1);
				break;	
				case "step9": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_OldBal", "Condition_Trnrecredit", "Old_Balance", 1);
				break;
				case "step10": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","TOPUP_FACE_VALUE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","TOPUP_FACE_VALUE_COLUMNVALUE",1);
				break;
				case "step11": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","ACCT_BALANCE_COLUMNVALUE",1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Dialed_MSISDN", "Condition_Trnrecredit", "Dialed_MSISDN", 1);
				break;						
				case "step13": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Dialed_Date", "Condition_Trnrecredit", "Dialed_Date", 1);
				break;	
				case "step14": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Duration", "Condition_Trnrecredit", "Duration", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Credit_Message_Csagent(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 22;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(credit_Debit.Credit_Debit_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Credit_Debit"), "credit_Debit");
				break;
				case "step11": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Credit_Debit"), "credit_Debit");
				break;
				case "step12": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Amount"), "Amount");
				break;
				case "step13": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("radio_button_Credit"), "Credit_Radio_Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id");
				break;
				case "step15": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id", "Ticket_Id", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Amount"), "Amount", "Amount", 1);
				break;
				case "step17": stepStatus[step] = WebListSelect(credit_Debit.Credit_Debit_Page("Reason"), "Reason", "Reason", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("csagent_Comments"), "Comments");
				break;
				case "step19": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("csagent_Comments"), "Comments", "Comments", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Submit"), "Submit");
				break;
				case "step21": stepStatus[step] = waituntiltextpresent(credit_Debit.Credit_Debit_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step22": stepStatus[step] = WebElementResxKeyValueStaticCompare(credit_Debit.Credit_Debit_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Credit_WR_Billing_Agent(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 25;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(credit_Debit.Credit_Debit_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Credit_Debit"), "credit_Debit");
				break;
				case "step11": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Credit_Debit"), "credit_Debit");
				break;
				case "step12": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Amount"), "Amount");
				break;
				case "step13": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("radio_button_Credit"), "Credit_Radio_Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id");
				break;
				case "step15": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id", "Ticket_Id", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Amount"), "Amount", "Amount", 1);
				break;
				case "step17": stepStatus[step] = WebListSelect(credit_Debit.Credit_Debit_Page("Reason"), "Reason", "Reason", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Dialed_Number"), "Dialed_Number");
				break;
				case "step19": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Dialed_Number"), "Dialed_Number", "Dialed_Number", 1);
				break;					
				case "step20": stepStatus[step] = javaScriptDatePicker(credit_Debit.Credit_Debit_Page("Dialed_Date"), "Dialed_Date", "Dialed_Date", 1);
				break;
				case "step21": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Duration"), "Duration", "Duration", 1);
				break;					
				case "step22": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("csagent_Comments"), "Comments", "Comments", 1);
				break;
				case "step23": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Submit"), "Submit");
				break;
				case "step24": stepStatus[step] = waituntiltextpresent(credit_Debit.Credit_Debit_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step25": stepStatus[step] = WebElementResxKeyValueStaticCompare(credit_Debit.Credit_Debit_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Enter_TFH_Voucher_Details(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 20;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(topup_Failure_History.Topup_Failure_History_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(topup_Failure_History.Topup_Failure_History_Page("Load_Parameter"), "Load_Parameter", "MSISDN", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Topup_Failure_History"), "Topup_Failure_History");
				break;
				case "step11": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Topup_Failure_History"), "Topup_Failure_History");
				break;
				case "step12": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Topup_Mode"), "Topup_Mode");
				break;
				case "step13": stepStatus[step] = javaScriptDatePicker(topup_Failure_History.Topup_Failure_History_Page("From_Date"), "From_Date", "From_Date", 1);
				break;
				case "step14": stepStatus[step] = javaScriptDatePicker(topup_Failure_History.Topup_Failure_History_Page("To_Date"), "To_Date", "To_Date", 1);
				break;					
				case "step15": stepStatus[step] = WebListSelect(topup_Failure_History.Topup_Failure_History_Page("Topup_Mode"), "Topup_Mode", "Topup_Mode", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Type"), "Type");
				break;
				case "step17": stepStatus[step] = WebListSelect(topup_Failure_History.Topup_Failure_History_Page("Type"), "Type", "Type", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Submit"), "Submit");
				break;
				case "step19": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Submit"), "Submit");
				break;
				case "step20": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Voucher_History_Table"), "Topup_History_Table");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Details_Voucher_TFH(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = webTableVerifyDetailshashtablelabel(topup_Failure_History.Topup_Failure_History_Page("Voucher_History_Table"), "Topup_History_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Pending_Approval_Credit(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 23;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = storeSQLDBValueInEnv("Table_Name", "ID_COLUMN", "SQL_CONDITION","EnvVaraibleName_ID", 1);
				break;
				case "step2": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "pendingApproval_Body");
				break;
				case "step3": stepStatus[step] = checkScrollBarIsPresent(pendingApproval.pendingApproval_Page_ScrollBar("scrollBar_JS"), "pendingApproval");
				break;
				case "step4": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("Credit"), "Credit");
				break;
				case "step5": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Text"), "pendingApproval_Text");
				break;
				case "step6": stepStatus[step] = enterEnvValueAndClickEnter(pendingApproval.pendingApproval_Page("requestID_Text"),"EnvVaraibleName_ID","RequestID",1);
				break;
				case "step7": stepStatus[step] = waitUntilExist(pendingApproval.Sim_Block_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_SimBlockRID", "EnvVaraibleName_ID"), "pendingApproval_MSISDN");
				break;
				case "step8": stepStatus[step] = WebElementClick(pendingApproval.Sim_Block_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_SimBlockRID", "EnvVaraibleName_ID"), "pendingApproval_MSISDN");
				break;
				case "step9": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("Credit_Approve_Button"), "Approve_Button");
				break;
				case "step10": stepStatus[step] = WebElementValueCompare(pendingApproval.pendingApproval_Page("Credit_TicketID"), "TicketID", "TicketID", 1);
				break;
				case "step11": stepStatus[step] = WebElementValueCompare(pendingApproval.pendingApproval_Page("Credit_Amount"), "Amount", "Amount", 1);
				break;
				case "step12": stepStatus[step] = WebElementValueCompare(pendingApproval.pendingApproval_Page("Credit_Reason"), "Reason", "Reason", 1);
				break;
				case "step13": stepStatus[step] = WebElementValueCompare(pendingApproval.pendingApproval_Page("Credit_Comments"), "Comments", "Comments", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(pendingApproval.pendingApproval_Page("Credit_Admin_Comments"), "Admin_Comments", "Admin_Comments", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("Credit_Approve_Button"), "Approve_Button");
				break;
				case "step16": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("Credit_Reject_Button"), "Reject_Button");
				break;
				case "step17": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("Credit_Reject_Button"), "Reject_Button");
				break;
				case "step18": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("Credit_Confirm_Message"), "Confirm_Message");
				break;
				case "step19": stepStatus[step] = WebElementResxKeyValueStaticCompare(pendingApproval.pendingApproval_Page("Credit_Confirm_Message"), "Confirm_Message","Response_Message",1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(pendingApproval.pendingApproval_Page("Credit_Old_Balance_Message"), "Old_Balance_Message","Old_Balance_Message",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(pendingApproval.pendingApproval_Page("Credit_New_Balance_Message"), "New_Balance_Message","New_Balance_Message",1);
				break;
				case "step22": stepStatus[step] = setScrollBarOFF("Pending_Approval");
				break;
				case "step23": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("close_button"), "Subscriber Logout");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postcond_Credit_Debit_Approve(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=15;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Ticketid", "Condition_Trnrecredit", "Ticketid", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Amount", "Condition_Trnrecredit", "Amount", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Reason", "Condition_Trnrecredit", "Reason", 1);
				break;					
				case "step4": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trnrecredit","Columnname_Submitedby","Condition_Trnrecredit","Param","CS_Username",1);
				break;					
				case "step5": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Status", "Condition_Trnrecredit", "Status", 1);
				break;						
				case "step6": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trnrecredit","Columnname_Authorisedby","Condition_Trnrecredit","Param","admin_Username",1);
				break;					
				case "step7": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Comments", "Condition_Trnrecredit", "Comments", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_AuthComments", "Condition_Trnrecredit", "AuthComments", 1);
				break;	
				case "step9": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_NewBal", "Condition_Trnrecredit", "New_Balance", 1);
				break;	
				case "step10": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_OldBal", "Condition_Trnrecredit", "Old_Balance", 1);
				break;
				case "step11": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","TOPUP_FACE_VALUE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","TOPUP_FACE_VALUE_COLUMNVALUE",1);
				break;
				case "step12": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","ACCT_BALANCE_COLUMNVALUE",1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Dialed_MSISDN", "Condition_Trnrecredit", "Dialed_MSISDN", 1);
				break;						
				case "step14": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Dialed_Date", "Condition_Trnrecredit", "Dialed_Date", 1);
				break;	
				case "step15": stepStatus[step] = SQLDBSelect("Table_Trnrecredit", "Column_Duration", "Condition_Trnrecredit", "Duration", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Credit_Message_Reset(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 26;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(credit_Debit.Credit_Debit_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Credit_Debit"), "credit_Debit");
				break;
				case "step11": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Credit_Debit"), "credit_Debit");
				break;
				case "step12": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Amount"), "Amount");
				break;
				case "step13": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("radio_button_Credit"), "Credit_Radio_Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id");
				break;
				case "step15": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id", "Ticket_Id", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Amount"), "Amount", "Amount", 1);
				break;
				case "step17": stepStatus[step] = WebListSelect(credit_Debit.Credit_Debit_Page("Reason"), "Reason", "Reason", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Comments"), "Comments");
				break;
				case "step19": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Comments"), "Comments", "Comments", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Reset"), "Reset");
				break;
				case "step21": stepStatus[step] = sleepForFunction();
				break;
				case "step22": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id");
				break;
				case "step23": stepStatus[step] = WebElementEmpty(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id");
				break;
				case "step24": stepStatus[step] = WebElementEmpty(credit_Debit.Credit_Debit_Page("Amount"), "Amount");
				break;
				case "step25": stepStatus[step] = WebElementEmpty(credit_Debit.Credit_Debit_Page("Comments"), "Comments");
				break;
				case "step26": stepStatus[step] = WebListSelectedValue(credit_Debit.Credit_Debit_Page("Reason"),"Reason","Reason_Initial",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Credit_Message_Alert(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 35;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(credit_Debit.Credit_Debit_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Credit_Debit"), "credit_Debit");
				break;
				case "step11": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Credit_Debit"), "credit_Debit");
				break;
				case "step12": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Amount"), "Amount");
				break;
				case "step13": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("radio_button_Credit"), "Credit_Radio_Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id");
				break;
				case "step15": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id", "Ticket_Id", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Amount"), "Amount", "Amount", 1);
				break;
				case "step17": stepStatus[step] = WebListSelect(credit_Debit.Credit_Debit_Page("Reason"), "Reason", "Reason", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("csagent_Comments"), "Comments");
				break;
				case "step19": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("csagent_Comments"), "Comments", "Comments", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Submit"), "Submit");
				break;
				case "step21": stepStatus[step] = waituntiltextpresent(credit_Debit.Credit_Debit_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step22": stepStatus[step] = WebElementResxKeyValueStaticCompare(credit_Debit.Credit_Debit_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step23": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Reset"), "Reset");
				break;
				case "step24": stepStatus[step] = sleepForFunction();
				break;
				case "step25": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id");
				break;
				case "step26": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("radio_button_Credit"), "Credit_Radio_Button");
				break;
				case "step27": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id");
				break;
				case "step28": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id", "Ticket_Id", 1);
				break;
				case "step29": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Amount"), "Amount", "Amount", 1);
				break;
				case "step30": stepStatus[step] = WebListSelect(credit_Debit.Credit_Debit_Page("Reason"), "Reason", "Reason", 1);
				break;
				case "step31": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("csagent_Comments"), "Comments");
				break;
				case "step32": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("csagent_Comments"), "Comments", "Comments", 1);
				break;
				case "step33": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Submit"), "Submit");
				break;
				case "step34": stepStatus[step] = waituntiltextpresent(credit_Debit.Credit_Debit_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step35": stepStatus[step] = WebElementResxKeyValueStaticCompare(credit_Debit.Credit_Debit_Page("Confirm_Message"), "Confirm_Message","Confirm_Message_2",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Credit_Verify_History(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 17;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(credit_Debit.Credit_Debit_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Credit_Debit"), "credit_Debit");
				break;
				case "step11": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Credit_Debit"), "credit_Debit");
				break;
				case "step12": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Amount"), "Amount");
				break;
				case "step13": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("radio_button_Credit"), "Credit_Radio_Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id");
				break;
				case "step15": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("History"), "History");
				break;
				case "step16": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Credit_History_Table"), "Credit_History_Table");
				break;					
				case "step17": stepStatus[step] = webTableVerifyDetailshashtablelabel(credit_Debit.Credit_Debit_Page("Credit_History_Table"), "Credit_History_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Debit_VH_Agent(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 25;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(credit_Debit.Credit_Debit_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Credit_Debit"), "credit_Debit");
				break;
				case "step11": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Credit_Debit"), "credit_Debit");
				break;
				case "step12": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Amount"), "Amount");
				break;
				case "step13": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("radio_button_Debit"), "Debit_Radio_Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id");
				break;
				case "step15": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id", "Ticket_Id", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Amount"), "Amount", "Amount", 1);
				break;
				case "step17": stepStatus[step] = WebListSelect(credit_Debit.Credit_Debit_Page("Reason"), "Reason", "Reason", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("csagent_Comments"), "Comments");
				break;
				case "step19": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("csagent_Comments"), "Comments", "Comments", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Submit"), "Submit");
				break;
				case "step21": stepStatus[step] = waituntiltextpresent(credit_Debit.Credit_Debit_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step22": stepStatus[step] = WebElementResxKeyValueStaticCompare(credit_Debit.Credit_Debit_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step23": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("History"), "History");
				break;
				case "step24": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Credit_History_Table"), "Credit_History_Table");
				break;					
				case "step25": stepStatus[step] = webTableVerifyDetailshashtablelabel(credit_Debit.Credit_Debit_Page("Credit_History_Table"), "Credit_History_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postcond_Debit_Agent(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=14;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBCheckValueExist("Table_Trndebit", "Column_Id", "Condition_Trndebit",1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_DebitAmount", "Condition_Trndebit", "Amount", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Ticketid", "Condition_Trndebit", "Ticketid", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Reason", "Condition_Trndebit", "Reason", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Comments", "Condition_Trndebit", "Comments", 1);
				break;
				case "step6": stepStatus[step] = SQLDBDateCompare("Table_Trndebit", "Column_RequestDate", "Condition_Trndebit", "dd/MM/yyyy", 1);
				break;
				case "step7": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trndebit","Column_Submitedby","Condition_Trndebit","Param","CS_Username",1);
				break;	
				case "step8": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Status", "Condition_Trndebit", "Status", 1);
				break;
				case "step9": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Authorisedby", "Condition_Trndebit", "Authorisedby", 1);
				break;
				case "step10": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Authoriseddate", "Condition_Trndebit", "Authoriseddate", 1);
				break;
				case "step11": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Oldbal", "Condition_Trndebit", "Oldbal", 1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Newbal", "Condition_Trndebit", "Newbal", 1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Channel", "Condition_Trndebit", "Channel", 1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Authcomments", "Condition_Trndebit", "Authcomments", 1);
				break;					
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Debit_Alert_Agent(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 35;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(credit_Debit.Credit_Debit_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Credit_Debit"), "credit_Debit");
				break;
				case "step11": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Credit_Debit"), "credit_Debit");
				break;
				case "step12": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Amount"), "Amount");
				break;
				case "step13": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("radio_button_Debit"), "Debit_Radio_Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id");
				break;
				case "step15": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id", "Ticket_Id", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Amount"), "Amount", "Amount", 1);
				break;
				case "step17": stepStatus[step] = WebListSelect(credit_Debit.Credit_Debit_Page("Reason"), "Reason", "Reason", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("csagent_Comments"), "Comments");
				break;
				case "step19": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("csagent_Comments"), "Comments", "Comments", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Submit"), "Submit");
				break;
				case "step21": stepStatus[step] = waituntiltextpresent(credit_Debit.Credit_Debit_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step22": stepStatus[step] = WebElementResxKeyValueStaticCompare(credit_Debit.Credit_Debit_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step23": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Reset"), "Reset");
				break;
				case "step24": stepStatus[step] = sleepForFunction();
				break;
				case "step25": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id");
				break;
				case "step26": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("radio_button_Debit"), "Debit_Radio_Button");
				break;
				case "step27": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id");
				break;
				case "step28": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id", "Ticket_Id", 1);
				break;
				case "step29": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Amount"), "Amount", "Amount", 1);
				break;
				case "step30": stepStatus[step] = WebListSelect(credit_Debit.Credit_Debit_Page("Reason"), "Reason", "Reason", 1);
				break;
				case "step31": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("csagent_Comments"), "Comments");
				break;
				case "step32": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("csagent_Comments"), "Comments", "Comments", 1);
				break;
				case "step33": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Submit"), "Submit");
				break;
				case "step34": stepStatus[step] = waituntiltextpresent(credit_Debit.Credit_Debit_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step35": stepStatus[step] = WebElementResxKeyValueStaticCompare(credit_Debit.Credit_Debit_Page("Confirm_Message"), "Confirm_Message","Confirm_Message_2",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Pending_Approval_Debit(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 23;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = storeSQLDBValueInEnv("Table_Name", "ID_COLUMN", "SQL_CONDITION","EnvVaraibleName_ID", 1);
				break;
				case "step2": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "pendingApproval_Body");
				break;
				case "step3": stepStatus[step] = checkScrollBarIsPresent(pendingApproval.pendingApproval_Page_ScrollBar("scrollBar_JS"), "pendingApproval");
				break;
				case "step4": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("Debit"), "Debit");
				break;
				case "step5": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Text"), "pendingApproval_Text");
				break;
				case "step6": stepStatus[step] = enterEnvValueAndClickEnter(pendingApproval.pendingApproval_Page("requestID_Text"),"EnvVaraibleName_ID","RequestID",1);
				break;
				case "step7": stepStatus[step] = waitUntilExist(pendingApproval.Sim_Block_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_SimBlockRID", "EnvVaraibleName_ID"), "pendingApproval_MSISDN");
				break;
				case "step8": stepStatus[step] = WebElementClick(pendingApproval.Sim_Block_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_SimBlockRID", "EnvVaraibleName_ID"), "pendingApproval_MSISDN");
				break;
				case "step9": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("Credit_Approve_Button"), "Approve_Button");
				break;
				case "step10": stepStatus[step] = WebElementValueCompare(pendingApproval.pendingApproval_Page("Credit_TicketID"), "TicketID", "TicketID", 1);
				break;
				case "step11": stepStatus[step] = WebElementValueCompare(pendingApproval.pendingApproval_Page("Credit_Amount"), "Amount", "Amount", 1);
				break;
				case "step12": stepStatus[step] = WebElementValueCompare(pendingApproval.pendingApproval_Page("Credit_Reason"), "Reason", "Reason", 1);
				break;
				case "step13": stepStatus[step] = WebElementValueCompare(pendingApproval.pendingApproval_Page("Credit_Comments"), "Comments", "Comments", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(pendingApproval.pendingApproval_Page("Credit_Admin_Comments"), "Admin_Comments", "Admin_Comments", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("Credit_Approve_Button"), "Approve_Button");
				break;
				case "step16": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("Credit_Reject_Button"), "Reject_Button");
				break;
				case "step17": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("Credit_Reject_Button"), "Reject_Button");
				break;
				case "step18": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("Credit_Confirm_Message"), "Confirm_Message");
				break;
				case "step19": stepStatus[step] = WebElementResxKeyValueStaticCompare(pendingApproval.pendingApproval_Page("Credit_Confirm_Message"), "Confirm_Message","Response_Message",1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(pendingApproval.pendingApproval_Page("Credit_Old_Balance_Message"), "Old_Balance_Message","Old_Balance_Message",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(pendingApproval.pendingApproval_Page("Credit_New_Balance_Message"), "New_Balance_Message","New_Balance_Message",1);
				break;
				case "step22": stepStatus[step] = setScrollBarOFF("Pending_Approval");
				break;
				case "step23": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("close_button"), "Subscriber Logout");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postcond_Debit_Admin(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=16;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBCheckValueExist("Table_Trndebit", "Column_Id", "Condition_Trndebit",1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_DebitAmount", "Condition_Trndebit", "Amount", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Ticketid", "Condition_Trndebit", "Ticketid", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Reason", "Condition_Trndebit", "Reason", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Comments", "Condition_Trndebit", "Comments", 1);
				break;
				case "step6": stepStatus[step] = SQLDBDateCompare("Table_Trndebit", "Column_RequestDate", "Condition_Trndebit", "dd/MM/yyyy", 1);
				break;
				case "step7": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trndebit","Column_Submitedby","Condition_Trndebit","Param","CS_Username",1);
				break;	
				case "step8": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Status", "Condition_Trndebit", "Status", 1);
				break;
				case "step9": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trndebit", "Column_Authorisedby", "Condition_Trndebit", "Param","admin_Username", 1);
				break;
				case "step10": stepStatus[step] = SQLDBDateCompare("Table_Trndebit", "Column_Authoriseddate", "Condition_Trndebit", "dd/MM/yyyy", 1);
				break;
				case "step11": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Oldbal", "Condition_Trndebit", "Oldbal", 1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Newbal", "Condition_Trndebit", "Newbal", 1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Channel", "Condition_Trndebit", "Channel", 1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Authcomments", "Condition_Trndebit", "Authcomments", 1);
				break;
				case "step15": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","TOPUP_FACE_VALUE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","TOPUP_FACE_VALUE_COLUMNVALUE",1);
				break;
				case "step16": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","ACCT_BALANCE_COLUMNVALUE",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Debit_Request_Admin(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 24;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(credit_Debit.Credit_Debit_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Credit_Debit"), "credit_Debit");
				break;
				case "step11": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Credit_Debit"), "credit_Debit");
				break;
				case "step12": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Amount"), "Amount");
				break;
				case "step13": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("radio_button_Debit"), "Debit_Radio_Button");
				break;
				case "step14": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id");
				break;
				case "step15": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Ticket_Id"), "Ticket_Id", "Ticket_Id", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Amount"), "Amount", "Amount", 1);
				break;
				case "step17": stepStatus[step] = WebListSelect(credit_Debit.Credit_Debit_Page("Reason"), "Reason", "Reason", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(credit_Debit.Credit_Debit_Page("Comments"), "Comments");
				break;
				case "step19": stepStatus[step] = WebEditEnterText(credit_Debit.Credit_Debit_Page("Comments"), "Comments", "Comments", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(credit_Debit.Credit_Debit_Page("Submit"), "Submit");
				break;
				case "step21": stepStatus[step] = waituntiltextpresent(credit_Debit.Credit_Debit_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step22": stepStatus[step] = WebElementResxKeyValueStaticCompare(credit_Debit.Credit_Debit_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(credit_Debit.Credit_Debit_Page("Old_Balance_Message"), "Old_Balance_Message","Old_Balance_Message",1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(credit_Debit.Credit_Debit_Page("New_Balance_Message"), "New_Balance_Message","New_Balance_Message",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postconditions_Debit(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=16;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBCheckValueExist("Table_Trndebit", "Column_Id", "Condition_Trndebit",1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_DebitAmount", "Condition_Trndebit", "Amount", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Ticketid", "Condition_Trndebit", "Ticketid", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Reason", "Condition_Trndebit", "Reason", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Comments", "Condition_Trndebit", "Comments", 1);
				break;
				case "step6": stepStatus[step] = SQLDBDateCompare("Table_Trndebit", "Column_RequestDate", "Condition_Trndebit", "dd/MM/yyyy", 1);
				break;
				case "step7": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trndebit","Column_Submitedby","Condition_Trndebit","Param","admin_Username",1);
				break;	
				case "step8": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Status", "Condition_Trndebit", "Status", 1);
				break;
				case "step9": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trndebit", "Column_Authorisedby", "Condition_Trndebit", "Param","admin_Username", 1);
				break;
				case "step10": stepStatus[step] = SQLDBDateCompare("Table_Trndebit", "Column_Authoriseddate", "Condition_Trndebit", "dd/MM/yyyy", 1);
				break;
				case "step11": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Oldbal", "Condition_Trndebit", "Oldbal", 1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Newbal", "Condition_Trndebit", "Newbal", 1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Channel", "Condition_Trndebit", "Channel", 1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("Table_Trndebit", "Column_Authcomments", "Condition_Trndebit", "Authcomments", 1);
				break;
				case "step15": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","TOPUP_FACE_VALUE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","TOPUP_FACE_VALUE_COLUMNVALUE",1);
				break;
				case "step16": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","ACCT_BALANCE_COLUMNVALUE",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Preconditions_PBT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=7;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBDelete("Table_Name", "SQL_Condition_From", 1);
				break;
				case "step2": stepStatus[step] = SQLDBDelete("Table_Name", "SQL_Condition_To", 1);
				break;
				case "step3": stepStatus[step] = SQLDBUpdate("Table_Name_Mstmvnoaccount", "Column_Name_Scpsubmitstate", "Column_Value_Scpsubmitstate", "Condition_Mstmvnoaccount", 1);
				break;
				case "step4": stepStatus[step] = RRBSDBUpdate("RRBS_SUBSCRIBER_PROFILE_TABLENAME","TOPUP_FACE_VALUE_COLUMNNAME","TOPUP_FACE_VALUE_COLUMNVALUE","RRBS_SUBSCRIBER_PROFILE_CONDITION",1);
				break;
				case "step5": stepStatus[step] = RRBSDBUpdate("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_COLUMNNAME","ACCT_BALANCE_COLUMNVALUE","RRBS_SUBSCRIBER_PROFILE_CONDITION",1);
				break;
				case "step6": stepStatus[step] = RRBSDBUpdate("RRBS_SUBSCRIBER_PROFILE_TABLENAME","SUBS_STATUS_COLUMNNAME","SUBS_STATUS_COLUMNVALUE","RRBS_SUBSCRIBER_PROFILE_CONDITION",1);
				break;
				case "step7": stepStatus[step] = RRBSDBUpdate("RRBS_SUBSCRIBER_PROFILE_TABLENAME","SIM_STATUS_COLUMNNAME","SIM_STATUS_COLUMNVALUE","RRBS_SUBSCRIBER_PROFILE_CONDITION",1);
				break;


				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Partial_Balance_Transfer(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 24;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step6": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("simButton"), "Sim_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("balance_Tns_Btn"), "Balance_Transfer_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("balance_Tns_Btn"), "Balance_Transfer_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("toMSISDN"), "To_MSISDN");
				break;
				case "step12": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("radio_Partial"), "Partial_Radio_Button");
				break;
				case "step13": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("Transfer_Amount"), "Transfer_Amount");
				break;
				case "step14": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("Transfer_Amount"), "Transfer_Amount", "Amount", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("toMSISDN"), "To_MSISDN", "To_MSISDN", 1);
				break;
				case "step16": stepStatus[step] = WebListSelect(balance_Transfer.balanceTransferPage("Partial_Balance_Reason"), "Reason", "Reason", 1);
				break;
				case "step17": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("ticketID"), "TicketID");
				break;
				case "step18": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("ticketID"), "TicketID", "TicketID", 1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("comments"), "Comments", "Comments", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("approve"), "Approve_Button");
				break;
				case "step21": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("confirm_Message"), "Confirm_Message");
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(balance_Transfer.balanceTransferPage("confirm_Message"), "Confirm_Message", "Confirmation_Message", 1);
				break;
				case "step23": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				case "step24": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postconditions_PBT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=18;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBSelect("Table_Name", "MsisdnFrom_ColumnName", "Condition", "MsisdnFrom_ColumnValue", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Name", "MsisdnTo_ColumnName", "Condition", "MsisdnTo_ColumnValue", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("Table_Name", "TicketId_ColumnName", "Condition", "TicketId_ColumnValue", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_Name", "Reason_ColumnName", "Condition", "Reason_ColumnValue", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_Name", "Comments_ColumnName", "Condition", "Comments_ColumnValue", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("Table_Name", "TransferAmt_ColumnName", "Condition", "TransferAmt_ColumnValue", 1);
				break;
				case "step7": stepStatus[step] = SQLDBDateCompare("Table_Name", "RequestDate_ColumnName", "Condition", "dd/MM/yyyy", 1);
				break;
				case "step8": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Name","SubmitedBy_ColumnName","Condition","Param","admin_Username",1);
				break;
				case "step9": stepStatus[step] = SQLDBSelect("Table_Name", "status_ColumnName", "Condition", "status_ColumnValue", 1);
				break;
				case "step10": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Name","AuthorisedBy_ColumnName","Condition","Param","admin_Username",1);
				break;
				case "step11": stepStatus[step] = SQLDBDateCompare("Table_Name", "AuthorisedDate_ColumnName", "Condition", "dd/MM/yyyy", 1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("Table_Name", "OldBal_ColumnName", "Condition", "OldBal_ColumnValue", 1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("Table_Name", "NewBal_ColumnName", "Condition", "NewBal_ColumnValue", 1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("Table_Name", "Authcomments_ColumnName", "Condition", "Authcomments_ColumnValue", 1);
				break;
				case "step15": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","TOPUP_FACE_VALUE_FROM_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CON_FROM","TOPUP_FACE_VALUE_FROM_COLUMNVALUE",1);
				break;
				case "step16": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_FROM_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CON_FROM","ACCT_BALANCE_FROM_COLUMNVALUE",1);
				break;
				case "step17": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","TOPUP_FACE_VALUE_TO_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CON_TO","TOPUP_FACE_VALUE_TO_COLUMNVALUE",1);
				break;
				case "step18": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_TO_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CON_TO","ACCT_BALANCE_TO_COLUMNVALUE",1);
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PBT_Mandatory_Alert(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 22;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step6": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("simButton"), "Sim_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("balance_Tns_Btn"), "Balance_Transfer_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("balance_Tns_Btn"), "Balance_Transfer_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("toMSISDN"), "To_MSISDN");
				break;
				case "step12": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("radio_Partial"), "Partial_Radio_Button");
				break;
				case "step13": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("Transfer_Amount"), "Transfer_Amount");
				break;
				case "step14": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("approve"), "Approve_Button");
				break;
				case "step15": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("validationMsg"), "Alert_Message");
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(balance_Transfer.balanceTransferPage("validationMsg"), "Alert_Message", "Alert_Message", 1);
				break;
				case "step17": stepStatus[step] = checkElementIsDisplayed(balance_Transfer.balanceTransferPage("valTransferAmount"), "Transfer_Amount");
				break;
				case "step18": stepStatus[step] = checkElementIsDisplayed(balance_Transfer.balanceTransferPage("valToMSISDN"), "To_MSISDN");
				break;
				case "step19": stepStatus[step] = checkElementIsDisplayed(balance_Transfer.balanceTransferPage("valPartialBalanceReason"), "Reason");
				break;
				case "step20": stepStatus[step] = checkElementIsDisplayed(balance_Transfer.balanceTransferPage("valComments"), "Comments");
				break;
				case "step21": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				case "step22": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PBT_Reset_Button(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 29;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step6": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("simButton"), "Sim_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("balance_Tns_Btn"), "Balance_Transfer_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("balance_Tns_Btn"), "Balance_Transfer_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("toMSISDN"), "To_MSISDN");
				break;
				case "step12": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("radio_Partial"), "Partial_Radio_Button");
				break;
				case "step13": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("Transfer_Amount"), "Transfer_Amount");
				break;
				case "step14": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("Transfer_Amount"), "Transfer_Amount", "Amount", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("toMSISDN"), "To_MSISDN", "To_MSISDN", 1);
				break;
				case "step16": stepStatus[step] = WebListSelect(balance_Transfer.balanceTransferPage("Partial_Balance_Reason"), "Reason", "Reason", 1);
				break;
				case "step17": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("ticketID"), "TicketID");
				break;
				case "step18": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("ticketID"), "TicketID", "TicketID", 1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("comments"), "Comments", "Comments", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("reset"), "Reset");
				break;
				case "step21": stepStatus[step] = sleepForFunction();
				break;
				case "step22": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("Transfer_Amount"), "Transfer_Amount");
				break;
				case "step23": stepStatus[step] = WebElementEmpty(balance_Transfer.balanceTransferPage("Transfer_Amount"), "Transfer_Amount");
				break;
				case "step24": stepStatus[step] = WebElementEmpty(balance_Transfer.balanceTransferPage("toMSISDN"), "To_MSISDN");
				break;
				case "step25": stepStatus[step] = WebListSelectedValue(balance_Transfer.balanceTransferPage("Partial_Balance_Reason"), "Reason", "Reason_Initial",1);
				break;
				case "step26": stepStatus[step] = WebElementEmpty(balance_Transfer.balanceTransferPage("comments"), "Comments");
				break;
				case "step27": stepStatus[step] = WebElementEmpty(balance_Transfer.balanceTransferPage("ticketID"), "TicketID");
				break;
				case "step28": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				case "step29": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PBT_Success_Agent(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 24;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step6": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("simButton"), "Sim_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("balance_Tns_Btn"), "Balance_Transfer_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("balance_Tns_Btn"), "Balance_Transfer_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("toMSISDN"), "To_MSISDN");
				break;
				case "step12": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("radio_Partial"), "Partial_Radio_Button");
				break;
				case "step13": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("Transfer_Amount"), "Transfer_Amount");
				break;
				case "step14": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("Transfer_Amount"), "Transfer_Amount", "Amount", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("toMSISDN"), "To_MSISDN", "To_MSISDN", 1);
				break;
				case "step16": stepStatus[step] = WebListSelect(balance_Transfer.balanceTransferPage("Partial_Balance_Reason"), "Reason", "Reason", 1);
				break;
				case "step17": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("ticketID"), "TicketID");
				break;
				case "step18": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("ticketID"), "TicketID", "TicketID", 1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("comments"), "Comments", "Comments", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("submit"), "Submit_Button");
				break;
				case "step21": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("confirm_Message"), "Confirm_Message");
				break;
				case "step22": stepStatus[step] = WebElementResxKeyValueStaticCompare(balance_Transfer.balanceTransferPage("confirm_Message"), "Confirm_Message", "Confirmation_Message", 1);
				break;
				case "step23": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				case "step24": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postcond_PBT_Agent(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=18;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBSelect("Table_Name", "MsisdnFrom_ColumnName", "Condition", "MsisdnFrom_ColumnValue", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Name", "MsisdnTo_ColumnName", "Condition", "MsisdnTo_ColumnValue", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("Table_Name", "TicketId_ColumnName", "Condition", "TicketId_ColumnValue", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_Name", "Reason_ColumnName", "Condition", "Reason_ColumnValue", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_Name", "Comments_ColumnName", "Condition", "Comments_ColumnValue", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("Table_Name", "TransferAmt_ColumnName", "Condition", "TransferAmt_ColumnValue", 1);
				break;
				case "step7": stepStatus[step] = SQLDBDateCompare("Table_Name", "RequestDate_ColumnName", "Condition", "dd/MM/yyyy", 1);
				break;
				case "step8": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Name","SubmitedBy_ColumnName","Condition","Param","CS_Username",1);
				break;
				case "step9": stepStatus[step] = SQLDBSelect("Table_Name", "status_ColumnName", "Condition", "status_ColumnValue", 1);
				break;
				case "step10": stepStatus[step] = SQLDBSelect("Table_Name","AuthorisedBy_ColumnName","Condition","AuthorisedBy_ColumnValue",1);
				break;
				case "step11": stepStatus[step] = SQLDBSelect("Table_Name", "AuthorisedDate_ColumnName", "Condition", "AuthorisedDate_ColumnValue", 1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("Table_Name", "OldBal_ColumnName", "Condition", "OldBal_ColumnValue", 1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("Table_Name", "NewBal_ColumnName", "Condition", "NewBal_ColumnValue", 1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("Table_Name", "Authcomments_ColumnName", "Condition", "Authcomments_ColumnValue", 1);
				break;
				case "step15": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","TOPUP_FACE_VALUE_FROM_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CON_FROM","TOPUP_FACE_VALUE_FROM_COLUMNVALUE",1);
				break;
				case "step16": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_FROM_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CON_FROM","ACCT_BALANCE_FROM_COLUMNVALUE",1);
				break;
				case "step17": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","TOPUP_FACE_VALUE_TO_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CON_TO","TOPUP_FACE_VALUE_TO_COLUMNVALUE",1);
				break;
				case "step18": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_TO_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CON_TO","ACCT_BALANCE_TO_COLUMNVALUE",1);
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Pending_Approval_PBT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 22;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = storeSQLDBValueInEnv("Table_Name", "ID_COLUMN", "SQL_CONDITION","EnvVaraibleName_ID", 1);
				break;
				case "step2": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "pendingApproval_Body");
				break;
				case "step3": stepStatus[step] = checkScrollBarIsPresent(pendingApproval.pendingApproval_Page_ScrollBar("scrollBar_JS"), "pendingApproval");
				break;
				//case "step4": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("partialbalanceTransfer"), "Partial_Balance_Transfer");
				case "step4": stepStatus[step] = PerformAction_MoveToElementAndClick(pendingApproval.pendingApproval_Page("partialbalanceTransfer"), "Partial_Balance_Transfer");
				break;
				case "step5": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Text"), "pendingApproval_Text");
				break;
				case "step6": stepStatus[step] = enterEnvValueAndClickEnter(pendingApproval.pendingApproval_Page("requestID_Text"),"EnvVaraibleName_ID","RequestID",1);
				break;
				case "step7": stepStatus[step] = waitUntilExist(pendingApproval.Sim_Block_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_SimBlockRID","EnvVaraibleName_ID"), "pendingApproval_MSISDN");
				break;
				case "step8": stepStatus[step] = WebElementClick(pendingApproval.Sim_Block_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_SimBlockRID", "EnvVaraibleName_ID"), "pendingApproval_MSISDN");
				break;
				case "step9": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("approve_Button"), "Approve_Button");
				break;
				case "step10": stepStatus[step] = WebElementValueCompare(pendingApproval.pendingApproval_Page("PBT_Transfer_Amount"), "Transfer_Amount", "Transfer_Amount", 1);
				break;
				case "step11": stepStatus[step] = WebElementValueCompare(pendingApproval.pendingApproval_Page("PBT_toMSISDN"), "To_MSISDN", "To_MSISDN", 1);
				break;
				case "step12": stepStatus[step] = WebListSelectedValue(pendingApproval.pendingApproval_Page("Partial_Balance_Reason"), "Reason", "Reason", 1);
				break;
				case "step13": stepStatus[step] = WebElementValueCompare(pendingApproval.pendingApproval_Page("PBT_ticketID"), "TicketID", "TicketID", 1);
				break;
				case "step14": stepStatus[step] = WebElementValueCompare(pendingApproval.pendingApproval_Page("PBT_Comments"), "Comments", "Comments", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(pendingApproval.pendingApproval_Page("PBT_Admin_Comments"), "Admin_Comments", "Admin_Comments", 1);
				break;
				case "step16": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("approve_Button"), "Approve_Button");
				break;
				case "step17": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("reject_Button"), "Reject_Button");
				break;
				case "step18": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("reject_Button"), "Reject_Button");
				break;
				case "step19": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("PBT_Confirm_Message"), "Confirm_Message");
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(pendingApproval.pendingApproval_Page("PBT_Confirm_Message"), "Confirm_Message","Response_Message",1);
				break;
				case "step21": stepStatus[step] = setScrollBarOFF("Pending_Approval");
				break;
				case "step22": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("close_button"), "Subscriber Logout");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postconditions_PBT_Admin(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=18;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBSelect("Table_Name", "MsisdnFrom_ColumnName", "Condition", "MsisdnFrom_ColumnValue", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Name", "MsisdnTo_ColumnName", "Condition", "MsisdnTo_ColumnValue", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("Table_Name", "TicketId_ColumnName", "Condition", "TicketId_ColumnValue", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_Name", "Reason_ColumnName", "Condition", "Reason_ColumnValue", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_Name", "Comments_ColumnName", "Condition", "Comments_ColumnValue", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("Table_Name", "TransferAmt_ColumnName", "Condition", "TransferAmt_ColumnValue", 1);
				break;
				case "step7": stepStatus[step] = SQLDBDateCompare("Table_Name", "RequestDate_ColumnName", "Condition", "dd/MM/yyyy", 1);
				break;
				case "step8": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Name","SubmitedBy_ColumnName","Condition","Param","CS_Username",1);
				break;
				case "step9": stepStatus[step] = SQLDBSelect("Table_Name", "status_ColumnName", "Condition", "status_ColumnValue", 1);
				break;
				case "step10": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Name","AuthorisedBy_ColumnName","Condition","Param","admin_Username",1);
				break;
				case "step11": stepStatus[step] = SQLDBDateCompare("Table_Name", "AuthorisedDate_ColumnName", "Condition", "dd/MM/yyyy", 1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("Table_Name", "OldBal_ColumnName", "Condition", "OldBal_ColumnValue", 1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("Table_Name", "NewBal_ColumnName", "Condition", "NewBal_ColumnValue", 1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("Table_Name", "Authcomments_ColumnName", "Condition", "Authcomments_ColumnValue", 1);
				break;
				case "step15": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","TOPUP_FACE_VALUE_FROM_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CON_FROM","TOPUP_FACE_VALUE_FROM_COLUMNVALUE",1);
				break;
				case "step16": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_FROM_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CON_FROM","ACCT_BALANCE_FROM_COLUMNVALUE",1);
				break;
				case "step17": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","TOPUP_FACE_VALUE_TO_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CON_TO","TOPUP_FACE_VALUE_TO_COLUMNVALUE",1);
				break;
				case "step18": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_TO_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CON_TO","ACCT_BALANCE_TO_COLUMNVALUE",1);
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Alert_Allinone(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=13;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step11": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step12": stepStatus[step] = waituntiltextpresent(online_TopUp.AllInOne_TopUp_Page("Alert_Message"), "Alert_Message");
				break;
				case "step13": stepStatus[step] = WebElementResxKeyValueStaticCompare(online_TopUp.AllInOne_TopUp_Page("Alert_Message"), "Alert_Message","Alert_Message",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Items_Allinone(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=34;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step11": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup_dropdown");
				break;
				case "step13": stepStatus[step] = WebElementisVisible(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup_dropdown");
				break;					
				case "step14": stepStatus[step] = WebElementisVisible(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Topup_Submit");
				break;	
				case "step15": stepStatus[step] = WebElementisVisible(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle_Type");
				break;	
				case "step16": stepStatus[step] = WebElementisVisible(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle_Number");
				break;	
				case "step17": stepStatus[step] = WebElementisVisible(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "Number_Of_Months");
				break;	
				case "step18": stepStatus[step] = WebElementisVisible(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Bundle_Submit");
				break;	
				case "step19": stepStatus[step] = WebElementisVisible(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment_Mode");
				break;	
				case "step20": stepStatus[step] = WebElementisVisible(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "Promo_Code");
				break;	
				case "step21": stepStatus[step] = WebElementisVisible(online_TopUp.AllInOne_TopUp_Page("Payment_Type"), "Payment_Type");
				break;	
				case "step22": stepStatus[step] = WebElementisVisible(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;	
				case "step23": stepStatus[step] = WebElementisVisible(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card");
				break;	
				case "step24": stepStatus[step] = WebElementisVisible(online_TopUp.Online_TopUp_Page("cardNumber1_TextBox"), "Card_Number_1");
				break;	
				case "step25": stepStatus[step] = WebElementisVisible(online_TopUp.Online_TopUp_Page("cardNumber2_TextBox"), "Card_Number_2");
				break;	
				case "step26": stepStatus[step] = WebElementisVisible(online_TopUp.Online_TopUp_Page("cardNumber3_TextBox"), "Card_Number_3");
				break;	
				case "step27": stepStatus[step] = WebElementisVisible(online_TopUp.Online_TopUp_Page("cardNumber4_TextBox"), "Card_Number_4");
				break;	
				case "step28": stepStatus[step] = WebElementisVisible(online_TopUp.Online_TopUp_Page("expiryDate_TextBox"), "Expiry_Date");
				break;	
				case "step29": stepStatus[step] = WebElementisVisible(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV");
				break;	
				case "step30": stepStatus[step] = WebElementisVisible(online_TopUp.AllInOne_TopUp_Page("Bundle_Table"), "Bundle_Table");
				break;	
				case "step31": stepStatus[step] = WebElementisVisible(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email");
				break;	
				case "step32": stepStatus[step] = WebElementisVisible(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country");
				break;	
				case "step33": stepStatus[step] = WebElementisVisible(online_TopUp.AllInOne_TopUp_Page("txtpostCode"), "Post_Code");
				break;
				case "step34": stepStatus[step] = WebElementisVisible(online_TopUp.AllInOne_TopUp_Page("btnallinoneCancel"), "Cancel");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PreConditions_AIO_CC(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=56;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_acct_balance","Column_Value_acct_balance","Condition_rrbs_subscriber_profile",1);
				break;
				case "step2":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_active_flag","Column_Value_active_flag","Condition_rrbs_subscriber_profile",1);
				break;
				case "step3":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_Sim_activated_date","Column_Value_Sim_activated_date","Condition_rrbs_subscriber_profile",1);
				break;
				case "step4":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_First_Usage_Date","Column_Value_First_Usage_Date","Condition_rrbs_subscriber_profile",1);	
				break;
				case "step5":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_acct_validity_date","Column_Value_acct_validity_date","Condition_rrbs_subscriber_profile",1);	
				break;
				case "step6":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_life_cycle_id","Column_Value_life_cycle_id","Condition_rrbs_subscriber_profile",1);
				break;
				case "step7":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_Life_Cycle_Chng_DT","Column_Value_Life_Cycle_Chng_DT","Condition_rrbs_subscriber_profile",1);	
				break;
				case "step8":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_plan_id","Column_Value_plan_id","Condition_rrbs_subscriber_profile",1);
				break;
				case "step9":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_NETWORK_ID","Column_Name_NETWORK_ID_value","Condition_rrbs_subscriber_profile",1);
				break;
				case "step10":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_balance1","Column_Value_balance1","Condition_rrbs_subscriber_profile",1);
				break;
				case "step11":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_balance1_exp_dt","Column_Value_balance1_exp_dt","Condition_rrbs_subscriber_profile",1);
				break;
				case "step12":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_balance2","Column_Value_balance2","Condition_rrbs_subscriber_profile",1);
				break;
				case "step13":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_balance2_exp_dt","Column_Value_balance2_exp_dt","Condition_rrbs_subscriber_profile",1);
				break;
				case "step14":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_subs_status","Column_Name_subs_status_value","Condition_rrbs_subscriber_profile",1);
				break;
				case "step15":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_sim_status","Column_Name_sim_status_value","Condition_rrbs_subscriber_profile",1);
				break;
				case "step16":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_subs_type","Column_Name_subs_type_value","Condition_rrbs_subscriber_profile",1);
				break;
				case "step17":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_sms","Column_Value_free_ofnet_sms","Condition_rrbs_subscriber_profile",1);
				break;
				case "step18":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_sms_EXP","Column_Value_free_ofnet_sms_EXP","Condition_rrbs_subscriber_profile",1);
				break;
				case "step19":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_MINS","Column_Value_free_ofnet_MINS","Condition_rrbs_subscriber_profile",1);
				break;
				case "step20":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_Ofnet_mins_exp","Column_Value_free_Ofnet_mins_exp","Condition_rrbs_subscriber_profile",1);
				break;
				case "step21":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_zone_id","Column_Value_free_zone_id","Condition_rrbs_subscriber_profile",1);
				break;
				case "step22":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_zone_id2","Column_Value_free_zone_id2","Condition_rrbs_subscriber_profile",1);
				break;
				case "step23":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_zone_id3","Column_Value_free_zone_id3","Condition_rrbs_subscriber_profile",1);
				break;
				case "step24":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_sms2","Column_Value_free_ofnet_sms2","Condition_rrbs_subscriber_profile",1);
				break;
				case "step25":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_mins2","Column_Value_free_ofnet_mins2","Condition_rrbs_subscriber_profile",1);
				break;
				case "step26":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_SMS3","Column_Value_free_ofnet_SMS3","Condition_rrbs_subscriber_profile",1);
				break;
				case "step27":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_Mins3","Column_Value_free_ofnet_Mins3","Condition_rrbs_subscriber_profile",1);
				break;
				case "step28":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_onet_zone_id","Column_Value_free_onet_zone_id","Condition_rrbs_subscriber_profile",1);
				break;
				case "step29":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_face_value_counter","Column_Value_face_value_counter","Condition_rrbs_subscriber_profile",1);
				break;
				case "step30":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_face_value_expiry","Column_Value_face_value_expiry","Condition_rrbs_subscriber_profile",1);
				break;
				case "step31":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_Last_Topup_Type","Column_Value_Last_Topup_Type","Condition_rrbs_subscriber_profile",1);
				break;
				case "step32":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_data","Column_Value_free_data","Condition_rrbs_subscriber_profile",1);
				break;
				case "step33":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_data_exp","Column_Value_free_data_exp","Condition_rrbs_subscriber_profile",1);
				break;
				case "step34":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_friend_list","Column_Name_friend_list_value","Condition_rrbs_subscriber_profile",1);
				break;
				case "step35":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_topup_face_value","Column_Value_topup_face_value","Condition_rrbs_subscriber_profile",1);	
				break;
				case "step36":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_sms_exp2","Column_Value_free_ofnet_sms_exp2","Condition_rrbs_subscriber_profile",1);
				break;
				case "step37":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_sms_exp3","Column_Value_free_ofnet_sms_exp3","Condition_rrbs_subscriber_profile",1);
				break;
				case "step38":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_mins_exp2","Column_Value_free_ofnet_mins_exp2","Condition_rrbs_subscriber_profile",1);
				break;
				case "step39":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_mins_exp3","Column_Value_free_ofnet_mins_exp3","Condition_rrbs_subscriber_profile",1);
				break;
				case "step40":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_topup_hit_counter","Column_Value_topup_hit_counter","Condition_rrbs_subscriber_profile",1);
				break;
				case "step41":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_promo_amount","Column_Value_promo_amount","Condition_rrbs_subscriber_profile",1);
				break;
				case "step42":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_promo_expiry","Column_Value_promo_expiry","Condition_rrbs_subscriber_profile",1);				
				break;
				case "step43":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_service_control","Column_Name_service_control_value","Condition_rrbs_subscriber_profile",1);	
				break;
				case "step44":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_ONNET_MT_Minutes","Column_Value_ONNET_MT_Mins","Condition_rrbs_subscriber_profile",1);				
				break;
				case "step45":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_ONNET_MT_SMS","Column_Value_ONNET_MT_SMS","Condition_rrbs_subscriber_profile",1);				
				break;
				case "step46":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_ONNET_MT_Expiry","Column_Value_ONNETMTEXPIRY","Condition_rrbs_subscriber_profile",1);				
				break;
				case "step47":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_ONNETMTBUCKETTYPE","Column_Value_ONNETMTBUCKETTYPE","Condition_rrbs_subscriber_profile",1);				
				break;
				case "step48":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_OFFNET_MT_Minutes","Column_Value_OFFNET_MT_Mins","Condition_rrbs_subscriber_profile",1);				
				break;
				case "step49":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_OFFNET_MT_SMS","Column_Value_OFFNET_MT_SMS","Condition_rrbs_subscriber_profile",1);				
				break;
				case "step50":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_OFFNET_MT_Expiry","Column_Value_OFFNETMTEXPIRY","Condition_rrbs_subscriber_profile",1);				
				break;
				case "step51":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_last_plan_change","Column_Name_last_plan_change_value","Condition_rrbs_subscriber_profile",1);
				break;
				case "step52":  stepStatus[step] = RRBSDBDelete("Table_Name_RRBS_SUBS_THRESH_LIMIT","Condition_RRBS_SUBS_THRESH_LIMIT",1);		
				break;
				case "step53":  stepStatus[step] = RRBSDBDelete("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Condition_RRBS_SUBS_BUNDLE_BUCKETS",1);
				break;
				case "step54": stepStatus[step] = SQLDBDelete("Table_Name_tbl_bundle_payments", "Condition_tbl_bundle_payments", 1);
				break;
				case "step55": stepStatus[step] = EshopSQLDBDelete("Table_Name_tblusercarddetails","Condition_tblusercarddetails",1);
				break;
				case "step56": stepStatus[step] = EshopSQLDBDelete("Table_Name_tbleShopTransactionStatus","Condition_tbleShopTransactionStatus",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_BP_CC_AIO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=63;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step11": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step19": stepStatus[step] = WebCheckboxON(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step20": stepStatus[step] = WebCheckboxOFF(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step21": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step22": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step23": stepStatus[step] = sleepForFunction();
				break;
				case "step24": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step25": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step26": stepStatus[step] = webTableRadioButton(online_TopUp.AllInOne_TopUp_Page("AIO_Paymnet_Type"), "Payment_Type", 1);
				break;
				case "step27": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step28": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type","Card_Type",1);
				break;
				case "step29": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card");
				break;
				case "step30": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card", "Name_On_Card", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber1_TextBox"), "Card_Number_1", "Card_Number_1", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber2_TextBox"), "Card_Number_2", "Card_Number_2", 1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber3_TextBox"), "Card_Number_3", "Card_Number_3", 1);
				break;
				case "step34": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber4_TextBox"), "Card_Number_4", "Card_Number_4", 1);
				break;
				case "step35": stepStatus[step] = javaScriptDatePicker(online_TopUp.Online_TopUp_Page("expiryDate_TextBox"), "Expiry_Date", "Expiry_Date", 1);
				break;
				case "step36": stepStatus[step] = JavaScriptWebEditEnterText(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV_Number", "CVV_Number", 1);
				break;
				case "step37": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Bundle_Table"), "Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step38": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step40": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtpostCode"), "Postcode", "Postcode", 1);
				break;
				case "step41": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconAddressSearch"), "Search Icon");
				break;
				case "step42": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step43": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","Address",1);
				break;
				case "step44": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number");
				break;
				case "step46": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number","House_Number",1);
				break;
				case "step47": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("labelstreetName"), "StreetName","View_Street",1);
				break;
				case "step48": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblcityName"), "City","View_City",1);
				break;
				case "step49": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblpostCode"), "Postcode","View_Postcode",1);
				break;
				case "step50": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step51": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step52": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table");
				break;
				case "step53": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total_Amount","Total_Amount",1);
				break;
				case "step55": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit");
				break;
				case "step56": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message");
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_MSISDN"), "Confirm_MSISDN","Mobile_Number",1);
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_Amount"), "Confirm_Amount","Confirm_Amount",1);
				break;
				case "step60": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Pattern",1);
				break;
				case "step61": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Env",1);
				break;
				case "step62": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Pattern",1);
				break;
				case "step63": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Env",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void CRM_Updation_GBR(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = XMLTextUpdate_TestData("Location","Attribute","Value_to_be_Updated",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void CRM_Updation_USA(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = XMLTextUpdate_TestData("Location","Attribute","Value_to_be_Updated",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void CRM_Updation_NOR(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = XMLTextUpdate_TestData("Location","Attribute","Value_to_be_Updated",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void CRM_Updation_FRA(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = XMLTextUpdate_TestData("Location","Attribute","Value_to_be_Updated",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void CRM_WebServ_WebConfig_Updation(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = XMLTextUpdate_TestData("Location","Attribute","Value_to_be_Updated",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postconditions_SS_Bundle_2(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=3;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBDeleteConditionEnvvar("TableName_mstFreeSimCustomerActivation","Condition_mstFreeSimCustomerActivation","Env_Transactionid",1);
				break;
				case "step2": stepStatus[step] = ESHOPSQLDBDeleteConditionEnvvar("TableName_tbleShopTransactionStatus","Condition_tbleShopTransactionStatus","Env_Transactionid",1);
				break;
				case "step3": stepStatus[step] = ESHOPSQLDBDeleteConditionEnvvar("TableName_tblUserCardDetails","Condition_tblUserCardDetails","Env_Subscriberid",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postconditions_AIO_CC(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=18;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS","Status_ColumnName","Condition_RRBS","STATUS_COLUMNVALUE_RRBS",1);
				break;
				case "step2": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS","Chargemode_ColumnName","Condition_RRBS","Chargemode_COLUMNVALUE_RRBS",1);
				break;
				case "step3": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Name","Transactionid_ColumnName","Condition","Runtime","Env_Trans_Number",1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_Name", "Bundlecode_ColumnName", "Condition", "Bundlecode_ColumnValue", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_Name", "Topupamount_ColumnName", "Condition", "Topupamount_ColumnValue", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("Table_Name", "Topupmode_ColumnName", "Condition", "Topupmode_ColumnValue", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("Table_Name", "Status_ColumnName", "Condition", "Status_ColumnValue", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("Table_Name", "Errordesc_ColumnName", "Condition", "Errordesc_ColumnValue", 1);
				break;
				case "step9": stepStatus[step] = SQLDBDateCompare("Table_Name", "RequestDate_ColumnName", "Condition", "dd/MM/yyyy", 1);
				break;
				case "step10": stepStatus[step] = SQLDBDateCompare("Table_Name", "ProcessedDate_ColumnName", "Condition", "dd/MM/yyyy", 1);
				break;
				case "step11": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Name","Redorderid_ColumnName","Condition","Runtime","Env_Ref_Number",1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("Table_Name", "isautotopup_ColumnName", "Condition", "isautotopup_ColumnValue", 1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("Table_Name", "Bundlename_ColumnName", "Condition", "Bundlename_ColumnValue", 1);
				break;
				case "step14" : stepStatus[step] = EShopSQLDBSelectFromEnv("Table_tbleshoptransactionstatus","Transactionid_ColumnName","SUBSCRIBERID_CONDITION","Transaction_Number_Env",1);
				break;
				case "step15" : stepStatus[step] = EShopSQLDBSelectFromEnv("Table_tbleshoptransactionstatus","Orderid_ColumnName","SUBSCRIBERID_CONDITION","Reference_Number_Env",1);
				break;
				case "step16" : stepStatus[step] = EShopSQLDBSelect("Table_tbleshoptransactionstatus","Amount_ColumnName","SUBSCRIBERID_CONDITION","Amount_Columnvalue",1);
				break;
				case "step17" : stepStatus[step] = EShopSQLDBSelect("Table_tbleshoptransactionstatus","Totalamount_ColumnName","SUBSCRIBERID_CONDITION","Totalamount_Columnvalue",1);
				break;
				case "step18" : stepStatus[step] = EShopSQLDBSelect("Table_tbluserbundledetails","ISRENEWAL_Columnname","SUBSCRIBERID_CONDITION","ISRENEWAL_Columnvalue",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_BP_Exist_CC_AIO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=41;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step3": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step8": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step10": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step12": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step13": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step14": stepStatus[step] = WebCheckboxON(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step15": stepStatus[step] = WebCheckboxOFF(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step17": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step18": stepStatus[step] = sleepForFunction();
				break;
				case "step19": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step21": stepStatus[step] = WebRadioSelect(online_TopUp.Online_TopUp_Page("existingCard_rdButton"), "Payment Using", "Existing Card");
				break;
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("ExCardNumberHead_Label"), "Existing Card Table");
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("ExCardNumber_Label"), "Existing Card Number","Existing_CardNo",1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("ExCardName_Label"), "Existing Card Name","Existing_NameOnCard",1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("ExCardType_Label"), "Existing Card Type","Existing_CardType",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("ExCardExpiryDate_Label"), "Existing Card ExpiryDate","Existing_ExpiryDate",1);
				break;
				case "step27": stepStatus[step] = javaScriptEnterText(online_TopUp.Online_TopUp_Page("ExCCNo_Label"), "Card CC Number","CVV_Number",1);
				break;
				case "step28": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step29": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step30": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table");
				break;
				case "step31": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total_Amount","Total_Amount",1);
				break;
				case "step33": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit");
				break;
				case "step34": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message");
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_MSISDN"), "Confirm_MSISDN","Mobile_Number",1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_Amount"), "Confirm_Amount","Confirm_Amount",1);
				break;
				case "step38": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Pattern",1);
				break;
				case "step39": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Env",1);
				break;
				case "step40": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Pattern",1);
				break;
				case "step41": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Env",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_BP_PROMO_CC_AIO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=66;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step11": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step19": stepStatus[step] = WebCheckboxON(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step22": stepStatus[step] = sleepForFunction();
				break;
				case "step23": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step24": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "Promo_Code");
				break;
				case "step25": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "Promo_Code", "Promo_Code", 1);
				break;
				case "step26": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinonePromo"), "Apply_Promo");
				break;
				case "step27": stepStatus[step] = waituntiltextpresent(online_TopUp.AllInOne_TopUp_Page("labelDiscountResponseAllInOne"), "Promo_Message");
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelDiscountResponseAllInOne"), "Promo_Message","Promo_Message",1);
				break;
				case "step29": stepStatus[step] = webTableRadioButton(online_TopUp.AllInOne_TopUp_Page("AIO_Paymnet_Type"), "Payment_Type", 1);
				break;
				case "step30": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step31": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type","Card_Type",1);
				break;
				case "step32": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card");
				break;
				case "step33": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card", "Name_On_Card", 1);
				break;
				case "step34": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber1_TextBox"), "Card_Number_1", "Card_Number_1", 1);
				break;
				case "step35": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber2_TextBox"), "Card_Number_2", "Card_Number_2", 1);
				break;
				case "step36": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber3_TextBox"), "Card_Number_3", "Card_Number_3", 1);
				break;
				case "step37": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber4_TextBox"), "Card_Number_4", "Card_Number_4", 1);
				break;
				case "step38": stepStatus[step] = javaScriptDatePicker(online_TopUp.Online_TopUp_Page("expiryDate_TextBox"), "Expiry_Date", "Expiry_Date", 1);
				break;
				case "step39": stepStatus[step] = JavaScriptWebEditEnterText(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV_Number", "CVV_Number", 1);
				break;
				case "step40": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Bundle_Table"), "Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step41": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step43": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtpostCode"), "Postcode", "Postcode", 1);
				break;
				case "step44": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconAddressSearch"), "Search Icon");
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step46": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","Address",1);
				break;
				case "step47": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step48": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number");
				break;
				case "step49": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number","House_Number",1);
				break;
				case "step50": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("labelstreetName"), "StreetName","View_Street",1);
				break;
				case "step51": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblcityName"), "City","View_City",1);
				break;
				case "step52": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblpostCode"), "Postcode","View_Postcode",1);
				break;
				case "step53": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step54": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step55": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table");
				break;
				case "step56": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total_Amount","Total_Amount",1);
				break;
				case "step58": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit");
				break;
				case "step59": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message");
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step61": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_MSISDN"), "Confirm_MSISDN","Mobile_Number",1);
				break;
				case "step62": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_Amount"), "Confirm_Amount","Confirm_Amount",1);
				break;
				case "step63": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Pattern",1);
				break;
				case "step64": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Env",1);
				break;
				case "step65": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Pattern",1);
				break;
				case "step66": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Env",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_BP_VAT_CC_AIO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=65;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step11": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step19": stepStatus[step] = WebCheckboxON(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step20": stepStatus[step] = WebCheckboxOFF(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step21": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step22": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step23": stepStatus[step] = sleepForFunction();
				break;
				case "step24": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step25": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step26": stepStatus[step] = webTableRadioButton(online_TopUp.AllInOne_TopUp_Page("AIO_Paymnet_Type"), "Payment_Type", 1);
				break;
				case "step27": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step28": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type","Card_Type",1);
				break;
				case "step29": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card");
				break;
				case "step30": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card", "Name_On_Card", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber1_TextBox"), "Card_Number_1", "Card_Number_1", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber2_TextBox"), "Card_Number_2", "Card_Number_2", 1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber3_TextBox"), "Card_Number_3", "Card_Number_3", 1);
				break;
				case "step34": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber4_TextBox"), "Card_Number_4", "Card_Number_4", 1);
				break;
				case "step35": stepStatus[step] = javaScriptDatePicker(online_TopUp.Online_TopUp_Page("expiryDate_TextBox"), "Expiry_Date", "Expiry_Date", 1);
				break;
				case "step36": stepStatus[step] = JavaScriptWebEditEnterText(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV_Number", "CVV_Number", 1);
				break;
				case "step37": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Bundle_Table"), "Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step38": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step40": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtpostCode"), "Postcode", "Postcode", 1);
				break;
				case "step41": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconAddressSearch"), "Search Icon");
				break;
				case "step42": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step43": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","Address",1);
				break;
				case "step44": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number");
				break;
				case "step46": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number","House_Number",1);
				break;
				case "step47": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("labelstreetName"), "StreetName","View_Street",1);
				break;
				case "step48": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblcityName"), "City","View_City",1);
				break;
				case "step49": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblpostCode"), "Postcode","View_Postcode",1);
				break;
				case "step50": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step51": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step52": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table");
				break;
				case "step53": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total_Amount","Total_Amount",1);
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("VAT_Amount"), "VAT_Amount","VAT_Amount",1);
				break;
				case "step56": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit");
				break;
				case "step57": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message");
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_MSISDN"), "Confirm_MSISDN","Mobile_Number",1);
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_Amount"), "Confirm_Amount","Confirm_Amount",1);
				break;
				case "step61": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_VAT_Amount"), "Confirm_VAT_Amount","Confirm_VAT_Amount",1);
				break;
				case "step62": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Pattern",1);
				break;
				case "step63": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Env",1);
				break;
				case "step64": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Pattern",1);
				break;
				case "step65": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Env",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}	

	public synchronized void assemblyBinding_Tag_Updation(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = XML_Find_and_Replace("Location_Config_File","From_Tag","To_Tag",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Message_DBS_GBR(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 23;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(data_Usage_Limit.Data_Usage_Limit_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(data_Usage_Limit.Data_Usage_Limit_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Data_Usage_Limit"), "Data_Usage_Limit");
				break;
				case "step11": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Data_Usage_Limit"), "Data_Usage_Limit");
				break;
				case "step12": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Home_Financial_Limit"), "Home_Financial_Limit");
				break;
				case "step13": stepStatus[step] = Webeditselectentertext(data_Usage_Limit.Data_Usage_Limit_Page("Home_Financial_Limit"), "Home_Financial_Limit", "Home_Financial_Limit", 1);
				break;
				case "step14": stepStatus[step] = WebListSelect(data_Usage_Limit.Data_Usage_Limit_Page("Roam_Data_Limit_Dropdown"), "Roam_Data_Limit_Dropdown", "Roam_Data_Limit_Size", 1);
				break;
				case "step15": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Roam_Data_Limit"), "Roam_Data_Limit");
				break;
				case "step16": stepStatus[step] = Webeditselectentertext(data_Usage_Limit.Data_Usage_Limit_Page("Roam_Data_Limit"), "Roam_Data_Limit", "Roam_Data_Limit", 1);
				break;					
				case "step17": stepStatus[step] = WebListSelect(data_Usage_Limit.Data_Usage_Limit_Page("Home_Network"), "Home_Network", "Home_Network", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Roam_Network"), "Roam_Network");
				break;					
				case "step19": stepStatus[step] = WebListSelect(data_Usage_Limit.Data_Usage_Limit_Page("Roam_Network"), "Roam_Network", "Roam_Network", 1);
				break;
				case "step20": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Submit"), "Submit");
				break;					
				case "step21": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Submit"), "Submit");
				break;					
				case "step22": stepStatus[step] = waituntiltextpresent(data_Usage_Limit.Data_Usage_Limit_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(data_Usage_Limit.Data_Usage_Limit_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_DBH_GBR(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 12;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step2": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step3": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step4": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step5": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Data_Usage_Limit"), "Data_Usage_Limit");
				break;
				case "step6": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Data_Usage_Limit"), "Data_Usage_Limit");
				break;
				case "step7": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Home_Financial_Limit"), "Home_Financial_Limit");
				break;
				case "step8": stepStatus[step] = WebElementValueCompare(data_Usage_Limit.Data_Usage_Limit_Page("Home_Financial_Limit"), "Home_Financial_Limit", "Home_Financial_Limit", 1);
				break;
				case "step9": stepStatus[step] = WebElementValueCompare(data_Usage_Limit.Data_Usage_Limit_Page("Roam_Data_Limit"), "Roam_Data_Limit", "Roam_Data_Limit", 1);
				break;					
				case "step10": stepStatus[step] = WebListSelectedValue(data_Usage_Limit.Data_Usage_Limit_Page("Roam_Data_Limit_Dropdown"), "Roam_Data_Limit_Dropdown", "Roam_Data_Limit_Size", 1);
				break;
				case "step11": stepStatus[step] = WebListSelectedValue(data_Usage_Limit.Data_Usage_Limit_Page("Home_Network"), "Home_Network", "Home_Network", 1);
				break;
				case "step12": stepStatus[step] = WebListSelectedValue(data_Usage_Limit.Data_Usage_Limit_Page("Roam_Network"), "Roam_Network", "Roam_Network", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Alert_Message_DBS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 20;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(data_Usage_Limit.Data_Usage_Limit_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(data_Usage_Limit.Data_Usage_Limit_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Data_Usage_Limit"), "Data_Usage_Limit");
				break;
				case "step11": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Data_Usage_Limit"), "Data_Usage_Limit");
				break;
				case "step12": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Home_Financial_Limit"), "Home_Financial_Limit");
				break;
				case "step13": stepStatus[step] = Webeditselectentertext(data_Usage_Limit.Data_Usage_Limit_Page("Home_Financial_Limit"), "Home_Financial_Limit", "Home_Financial_Limit", 1);
				break;
				case "step14": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Roam_Data_Limit"), "Roam_Data_Limit");
				break;						
				case "step15": stepStatus[step] = waituntiltextpresent(data_Usage_Limit.Data_Usage_Limit_Page("Home_Financial_Error"), "Home_Financial_Error");
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(data_Usage_Limit.Data_Usage_Limit_Page("Home_Financial_Error"), "Home_Financial_Error","Home_Financial_Message",1);
				break;					
				case "step17": stepStatus[step] = Webeditselectentertext(data_Usage_Limit.Data_Usage_Limit_Page("Roam_Data_Limit"), "Roam_Data_Limit", "Roam_Data_Limit", 1);
				break;
				case "step18": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Home_Financial_Limit"), "Home_Financial_Limit");
				break;						
				case "step19": stepStatus[step] = waituntiltextpresent(data_Usage_Limit.Data_Usage_Limit_Page("Roam_Data_Limit_Error"), "Roam_Data_Limit_Error");
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(data_Usage_Limit.Data_Usage_Limit_Page("Roam_Data_Limit_Error"), "Roam_Data_Limit_Error","Roam_Data_Limit_Message",1);
				break;	
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Reset_DBS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 27;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(data_Usage_Limit.Data_Usage_Limit_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(data_Usage_Limit.Data_Usage_Limit_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Data_Usage_Limit"), "Data_Usage_Limit");
				break;
				case "step11": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Data_Usage_Limit"), "Data_Usage_Limit");
				break;
				case "step12": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Home_Financial_Limit"), "Home_Financial_Limit");
				break;
				case "step13": stepStatus[step] = Webeditselectentertext(data_Usage_Limit.Data_Usage_Limit_Page("Home_Financial_Limit"), "Home_Financial_Limit", "Home_Financial_Limit", 1);
				break;
				case "step14": stepStatus[step] = WebListSelect(data_Usage_Limit.Data_Usage_Limit_Page("Roam_Data_Limit_Dropdown"), "Roam_Data_Limit_Dropdown", "Roam_Data_Limit_Size", 1);
				break;
				case "step15": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Roam_Data_Limit"), "Roam_Data_Limit");
				break;
				case "step16": stepStatus[step] = Webeditselectentertext(data_Usage_Limit.Data_Usage_Limit_Page("Roam_Data_Limit"), "Roam_Data_Limit", "Roam_Data_Limit", 1);
				break;					
				case "step17": stepStatus[step] = WebListSelect(data_Usage_Limit.Data_Usage_Limit_Page("Home_Network"), "Home_Network", "Home_Network", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Roam_Network"), "Roam_Network");
				break;					
				case "step19": stepStatus[step] = WebListSelect(data_Usage_Limit.Data_Usage_Limit_Page("Roam_Network"), "Roam_Network", "Roam_Network", 1);
				break;
				case "step20": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Clear"), "Clear");
				break;					
				case "step21": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Clear"), "Clear");
				break;
				case "step22": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Home_Financial_Limit"), "Home_Financial_Limit");
				break;
				case "step23": stepStatus[step] = WebElementEmpty(data_Usage_Limit.Data_Usage_Limit_Page("Roam_Data_Limit"), "Roam_Data_Limit");
				break;
				case "step24": stepStatus[step] = WebElementEmpty(data_Usage_Limit.Data_Usage_Limit_Page("Home_Financial_Limit"), "Home_Financial_Limit");
				break;
				case "step25": stepStatus[step] = WebListSelectedValue(data_Usage_Limit.Data_Usage_Limit_Page("Roam_Data_Limit_Dropdown"), "Roam_Data_Limit_Dropdown", "Roam_Data_Limit_Size_Initial", 1);
				break;
				case "step26": stepStatus[step] = WebListSelectedValue(data_Usage_Limit.Data_Usage_Limit_Page("Home_Network"), "Home_Network", "Home_Network_Initial", 1);
				break;
				case "step27": stepStatus[step] = WebListSelectedValue(data_Usage_Limit.Data_Usage_Limit_Page("Roam_Network"), "Roam_Network", "Roam_Network_Initial", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Mand_Alert_DBS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 15;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(data_Usage_Limit.Data_Usage_Limit_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(data_Usage_Limit.Data_Usage_Limit_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Data_Usage_Limit"), "Data_Usage_Limit");
				break;
				case "step11": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Data_Usage_Limit"), "Data_Usage_Limit");
				break;
				case "step12": stepStatus[step] = waitUntilExist(data_Usage_Limit.Data_Usage_Limit_Page("Home_Financial_Limit"), "Home_Financial_Limit");
				break;
				case "step13": stepStatus[step] = WebElementClick(data_Usage_Limit.Data_Usage_Limit_Page("Submit"), "Submit");
				break;					
				case "step14": stepStatus[step] = waituntiltextpresent(data_Usage_Limit.Data_Usage_Limit_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(data_Usage_Limit.Data_Usage_Limit_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Send_Sim_Promo(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 134;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step2": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step3": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Title"), "Title");
				break;
				case "step4": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Title"), "Title", "Title", 1);
				break;
				case "step5": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("First_Name"), "First_Name");
				break;
				case "step6": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("First_Name"), "First_Name", "First_Name", 1);
				break;
				case "step7": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Last_Name"), "Last_Name", "Last_Name", 1);
				break;						
				case "step8": stepStatus[step] = javaScriptDatePicker(send_Sim.Send_Sim_Page("Date_Of_Birth"), "Date_Of_Birth", "Date_Of_Birth", 1);
				break;
				case "step9": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Country"), "Country");
				break;
				case "step10": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Country"), "Country", "Country", 1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode_Initial", 1);
				break;
				case "step12": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Find_Address"), "Find_Address");
				break;
				case "step13": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Address_List"), "Address_List");
				break;
				case "step14": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Address_List"), "Address_List", "Address", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Accept_Address"), "Accept_Address");
				break;
				case "step16": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step17": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step18": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Postcode"), "Postcode");
				break;
				case "step19": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("City"), "City");
				break;
				case "step20": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Street"), "Street");
				break;
				case "step21": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("State"), "State", "State", 1);
				break;
				case "step22": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode", 1);
				break;
				case "step23": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("City"), "City", "City", 1);
				break;
				case "step24": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number_Initial", 1);
				break;
				case "step25": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Street"), "Street", "Street", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number", 1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Apartment_Number"), "Apartment_Number", "Apartment_Number", 1);
				break;
				case "step28": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("Billing_Address"), "Billing_Address");
				break;
				case "step29": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Billing_Postcode"), "Billing_Postcode");
				break;
				case "step30": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Billing_Country"), "Billing_Country", "Country", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_State"), "Billing_State", "Billing_State", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Postcode"), "Billing_Postcode", "Billing_Postcode", 1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_City"), "Billing_City", "Billing_City", 1);
				break;
				case "step34": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_House_Number"), "Billing_House_Number", "Billing_House_Number", 1);
				break;
				case "step35": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Street"), "Billing_Street", "Billing_Street", 1);
				break;
				case "step36": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Apartment_Number"), "Billing_Apartment_Number", "Billing_Apartment_Number", 1);
				break;
				case "step37": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Email"), "Email", "Email", 1);
				break;
				case "step38": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Contact_Number"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step39": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step40": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step41": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Check_Payment"), "Check_Payment");
				break;
				case "step42": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("Check_Payment"), "Check_Payment");
				break;
				case "step43": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims");
				break;
				case "step44": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims", "Number_Of_Sims", 1);
				break;
				case "step45": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1");
				break;
				case "step46": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1", "Sim_Type_1", 1);
				break;
				case "step47": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan");
				break;
				case "step48": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan", "Sim_Plan", 1);
				break;
				case "step49": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;
				case "step50": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;
				case "step51": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type");
				break;
				case "step52": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type", "Topup_Type", 1);
				break;
				case "step53": stepStatus[step] = waitUntilListLoads(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value");
				break;
				case "step54": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value", "Topup_Value", 1);
				break;
				case "step55": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step56": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step57": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step58": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_1","Primary_Key_Column_Value_2","Secondary_Key_Column_Values_1",1);
				break;
				case "step59": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Bundle"), "Bundle_Radio_Button");
				break;
				case "step60": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundle_Dropdown"), "Bundle_Dropdown");
				break;
				case "step61": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Bundle_Dropdown"), "Bundle_Dropdown", "Bundle", 1);
				break;
				case "step62": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Months"), "Number_Of_Months");
				break;
				case "step63": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Months"), "Number_Of_Months", "Number_Of_Months", 1);
				break;
				case "step64": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundle_Submit"), "Bundle_Submit");
				break;
				case "step65": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Bundle_Submit"), "Bundle_Submit");
				break;
				case "step66": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step67": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_1","Primary_Key_Column_Value_3","Secondary_Key_Column_Values_2",1);
				break;
				case "step68": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Addon"), "Addon_Radio_Button");
				break;
				case "step69": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Addon_Dropdown"), "Addon_Dropdown");
				break;
				case "step70": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Addon_Dropdown"), "Addon_Dropdown", "Addon", 1);
				break;
				case "step71": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Months_Addon"), "Number_Of_Months_Addon");
				break;
				case "step72": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Months_Addon"), "Number_Of_Months_Addon", "Number_Of_Months_Addon", 1);
				break;
				case "step73": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Addon_Submit"), "Addon_Submit");
				break;
				case "step74": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Addon_Submit"), "Addon_Submit");
				break;
				case "step75": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step76": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_1","Primary_Key_Column_Value_4","Secondary_Key_Column_Values_3",1);
				break;
				case "step77": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Promo_Code"), "Promo_Code", "Promo_Code", 1);
				break;					
				case "step78": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Apply_Promo"), "Apply_Promo");
				break;					
				case "step79": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step80": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message","Confirm_Message_Promo",1);
				break;
				case "step81": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_1","Primary_Key_Column_Value_3","Secondary_Key_Column_Values_4",1);
				break;
				case "step82": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Next_Sim_Type"), "Next_Sim_Type");
				break;						
				case "step83": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Sim_Type"), "Next_Sim_Type");
				break;
				case "step84": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Confirm_Title"), "Confirm_Title");
				break;
				case "step85": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Title"), "Confirm_Title","Title",1);
				break;
				case "step86": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_First_Name"), "Confirm_First_Name","First_Name",1);
				break;	
				case "step87": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Last_Name"), "Confirm_Last_Name","Last_Name",1);
				break;	
				case "step88": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Date_Of_Birth"), "Confirm_Date_Of_Birth","Date_Of_Birth",1);
				break;	
				case "step89": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Country"), "Confirm_Country","Country",1);
				break;	
				case "step90": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_State"), "Confirm_State","State",1);
				break;	
				case "step91": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Postcode"), "Confirm_Postcode","Postcode",1);
				break;	
				case "step92": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_City"), "Confirm_City","City",1);
				break;	
				case "step93": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_House_Number"), "Confirm_House_Number","House_Number",1);
				break;	
				case "step94": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Street"), "Confirm_Street","Street",1);
				break;	
				case "step95": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Apartment_Number"), "Confirm_Apartment_Number","Apartment_Number",1);
				break;	
				case "step96": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Country"), "Confirm_Billing_Country","Country",1);
				break;	
				case "step97": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_State"), "Confirm_Billing_State","Billing_State",1);
				break;	
				case "step98": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Postcode"), "Confirm_Billing_Postcode","Billing_Postcode",1);
				break;	
				case "step99": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_City"), "Confirm_Billing_City","Billing_City",1);
				break;	
				case "step100": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_House_Number"), "Confirm_Billing_House_Number","Billing_House_Number",1);
				break;	
				case "step101": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Street"), "Confirm_Billing_Street","Billing_Street",1);
				break;	
				case "step102": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Apartment_Number"), "Confirm_Billing_Apartment_Number","Billing_Apartment_Number",1);
				break;	
				case "step103": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Email"), "Confirm_Email","Email",1);
				break;	
				case "step104": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Contact_Number"), "Confirm_Contact_Number","Contact_Number",1);
				break;
				case "step105": stepStatus[step] = ScrollIntoElement(send_Sim.Send_Sim_Page("Next_Confirm_Page"), "Next_Confirm_Page");
				break;
				case "step106": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Confirm_Bundles_Table"), "Confirm_Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_1","Primary_Key_Column_Value_2","Secondary_Key_Column_Values_1",1);
				break;
				case "step107": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Confirm_Bundles_Table"), "Confirm_Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_1","Primary_Key_Column_Value_3","Secondary_Key_Column_Values_4",1);
				break;
				case "step108": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Confirm_Bundles_Table"), "Confirm_Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_1","Primary_Key_Column_Value_4","Secondary_Key_Column_Values_3",1);
				break;
				case "step109": stepStatus[step] = ScrollIntoElement(send_Sim.Send_Sim_Page("Next_Confirm_Page"), "Next_Confirm_Page");
				break;
				case "step110": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Confirm_Page"), "Next_Confirm_Page");
				break;
				case "step111": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Card_Type"), "Card_Type");
				break;
				case "step112": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Total_Amount"), "Total_Amount","Total_Amount",1);
				break;
				case "step113": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Card_Type"), "Card_Type", "Card_Type", 1);
				break;
				case "step114": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Name_On_Card"), "Name_On_Card");
				break;
				case "step115": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Name_On_Card"), "Name_On_Card", "Name_On_Card", 1);
				break;
				case "step116": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_1"), "Card_Number_1", "Card_Number_1", 1);
				break;
				case "step117": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_2"), "Card_Number_2", "Card_Number_2", 1);
				break;
				case "step118": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_3"), "Card_Number_3", "Card_Number_3", 1);
				break;
				case "step119": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Card_Number_4"), "Card_Number_4", "Card_Number_4", 1);
				break;
				case "step120": stepStatus[step] = javaScriptDatePicker(send_Sim.Send_Sim_Page("Expiry_Date"), "Expiry_Date", "Expiry_Date", 1);
				break;
				case "step121": stepStatus[step] = javaScriptEnterText(send_Sim.Send_Sim_Page("CVV_Number"), "CVV_Number", "CVV_Number", 1);
				break;
				case "step122": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Payments_Page"), "Next_Payments_Page");
				break;
				case "step123": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Submit_Payments_Page"), "Submit_Payments_Page");
				break;
				case "step124": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Total_Amount"), "Total_Amount","Total_Amount",1);
				break;					
				case "step125": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Submit_Payments_Page"), "Submit_Payments_Page");
				break;
				case "step126": stepStatus[step] = waituntiltextpresent(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step127": stepStatus[step] = ScrollIntoElement(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step128": stepStatus[step] = WebElementResxKeyValueStaticCompare(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step129": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Amount"), "Amount","Amount",1);
				break;
				case "step130": stepStatus[step] = WebElementDynamicStringVerify(send_Sim.Send_Sim_Page("Transaction_Number"), "Transaction_Number","Transaction_Number_Pattern",1);
				break;
				case "step131": stepStatus[step] = WebElementTextStoreDynamicValue(send_Sim.Send_Sim_Page("Transaction_Number"), "Transaction_Number","Transaction_Number_Env",1);
				break;
				case "step132": stepStatus[step] = WebElementDynamicStringVerify(send_Sim.Send_Sim_Page("Red_Order_Id"), "Red_Order_Id","Red_Order_Id_Pattern",1);
				break;
				case "step133": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("close_button"), "Close_Button");
				break;
				case "step134": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PBT_Ticketid(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 24;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step6": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("simButton"), "Sim_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("simButton"), "Sim_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("balance_Tns_Btn"), "Balance_Transfer_Button");
				break;
				case "step10": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("balance_Tns_Btn"), "Balance_Transfer_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("toMSISDN"), "To_MSISDN");
				break;
				case "step12": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("radio_Partial"), "Partial_Radio_Button");
				break;
				case "step13": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("Transfer_Amount"), "Transfer_Amount");
				break;
				case "step14": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("Transfer_Amount"), "Transfer_Amount", "Amount", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("toMSISDN"), "To_MSISDN", "To_MSISDN", 1);
				break;
				case "step16": stepStatus[step] = WebListSelect(balance_Transfer.balanceTransferPage("Partial_Balance_Reason"), "Reason", "Reason", 1);
				break;
				case "step17": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("ticketID"), "TicketID");
				break;
				case "step18": stepStatus[step] = WebEditEnterTextFromEnvVariable(balance_Transfer.balanceTransferPage("ticketID"), "TicketID", "TicketID", 1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(balance_Transfer.balanceTransferPage("comments"), "Comments", "Comments", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(balance_Transfer.balanceTransferPage("approve"), "Approve_Button");
				break;
				case "step21": stepStatus[step] = waitUntilExist(balance_Transfer.balanceTransferPage("confirm_Message"), "Confirm_Message");
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(balance_Transfer.balanceTransferPage("confirm_Message"), "Confirm_Message", "Confirmation_Message", 1);
				break;
				case "step23": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;
				case "step24": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postconditions_PBT_TKT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=18;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBSelect("Table_Name", "MsisdnFrom_ColumnName", "Condition", "MsisdnFrom_ColumnValue", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Name", "MsisdnTo_ColumnName", "Condition", "MsisdnTo_ColumnValue", 1);
				break;
				case "step3": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Name", "TicketId_ColumnName", "Condition","Runtime","New_TicketID", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_Name", "Reason_ColumnName", "Condition", "Reason_ColumnValue", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_Name", "Comments_ColumnName", "Condition", "Comments_ColumnValue", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("Table_Name", "TransferAmt_ColumnName", "Condition", "TransferAmt_ColumnValue", 1);
				break;
				case "step7": stepStatus[step] = SQLDBDateCompare("Table_Name", "RequestDate_ColumnName", "Condition", "dd/MM/yyyy", 1);
				break;
				case "step8": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Name","SubmitedBy_ColumnName","Condition","Param","admin_Username",1);
				break;
				case "step9": stepStatus[step] = SQLDBSelect("Table_Name", "status_ColumnName", "Condition", "status_ColumnValue", 1);
				break;
				case "step10": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Name","AuthorisedBy_ColumnName","Condition","Param","admin_Username",1);
				break;
				case "step11": stepStatus[step] = SQLDBDateCompare("Table_Name", "AuthorisedDate_ColumnName", "Condition", "dd/MM/yyyy", 1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("Table_Name", "OldBal_ColumnName", "Condition", "OldBal_ColumnValue", 1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("Table_Name", "NewBal_ColumnName", "Condition", "NewBal_ColumnValue", 1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("Table_Name", "Authcomments_ColumnName", "Condition", "Authcomments_ColumnValue", 1);
				break;
				case "step15": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","TOPUP_FACE_VALUE_FROM_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CON_FROM","TOPUP_FACE_VALUE_FROM_COLUMNVALUE",1);
				break;
				case "step16": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_FROM_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CON_FROM","ACCT_BALANCE_FROM_COLUMNVALUE",1);
				break;
				case "step17": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","TOPUP_FACE_VALUE_TO_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CON_TO","TOPUP_FACE_VALUE_TO_COLUMNVALUE",1);
				break;
				case "step18": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_TO_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CON_TO","ACCT_BALANCE_TO_COLUMNVALUE",1);
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Precond_Topup_History(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBPastDateUpdateCDR("Table_Name","Column_Name","Condition","-",0,"Envvar_ReportDB_Date",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}	

	public synchronized void Preconditions_EDR_History(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = SQLDBDateUpdateStoreinEnvVar("Table_Name_EDR","Column_Name_CDR_TimeStamp","Condition_EDR","Expected_Type_MONTHDB","Cdr_Year_Day","Call_date_Day","",0,"Env_Call_date",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Open_GBR_REPORTDB_Connection(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBOpenConnection(property.getProperty("SQL_Server_82"), property.getProperty("SQL_Server_GBR_REPORT_DB_Name"), property.getProperty("SQL_Server_UID_82"), property.getProperty("SQL_Server_PWD_82"));
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}	

	public synchronized void Open_GBR_MONTHDB_Connection(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBOpenConnection(property.getProperty("SQL_Server_82"), property.getProperty("SQL_Server_Month_DB_Name"), property.getProperty("SQL_Server_UID_82"), property.getProperty("SQL_Server_PWD_82"));
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Enter_TFH_Voucher_Details_Env(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 20;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(topup_Failure_History.Topup_Failure_History_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(topup_Failure_History.Topup_Failure_History_Page("Load_Parameter"), "Load_Parameter", "MSISDN", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Topup_Failure_History"), "Topup_Failure_History");
				break;
				case "step11": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Topup_Failure_History"), "Topup_Failure_History");
				break;
				case "step12": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Topup_Mode"), "Topup_Mode");
				break;
				case "step13": stepStatus[step] = javaScriptDatePickerEnv(topup_Failure_History.Topup_Failure_History_Page("From_Date"), "From_Date", "Envvar_ReportDB_Date");
				break;
				case "step14": stepStatus[step] = javaScriptDatePickerEnv(topup_Failure_History.Topup_Failure_History_Page("To_Date"), "To_Date", "Envvar_ReportDB_Date");
				break;					
				case "step15": stepStatus[step] = WebListSelect(topup_Failure_History.Topup_Failure_History_Page("Topup_Mode"), "Topup_Mode", "Topup_Mode", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Type"), "Type");
				break;
				case "step17": stepStatus[step] = WebListSelect(topup_Failure_History.Topup_Failure_History_Page("Type"), "Type", "Type", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Submit"), "Submit");
				break;
				case "step19": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Submit"), "Submit");
				break;
				case "step20": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Voucher_History_Table"), "Topup_History_Table");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_VS_Details_New(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 34;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(voucher_Status.Voucher_Status_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(voucher_Status.Voucher_Status_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Status"), "Voucher_Status");
				break;
				case "step11": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Voucher_Status"), "Voucher_Status");
				break;
				case "step12": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Type"), "Voucher_Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(voucher_Status.Voucher_Status_Page("Voucher_Type"), "Voucher_Type", "Voucher_Type", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Code"), "Voucher_Code");
				break;
				case "step15": stepStatus[step] = WebEditEnterText(voucher_Status.Voucher_Status_Page("Voucher_Code"), "Voucher_Code", "Voucher_Code", 1);
				break;	
				case "step16": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Apply"), "Apply");
				break;
				case "step17": stepStatus[step] = waituntiltextpresent(voucher_Status.Voucher_Status_Page("Alert_Message"), "Alert_Message");
				break;
				case "step18": stepStatus[step] = WebElementResxKeyValueStaticCompare(voucher_Status.Voucher_Status_Page("Alert_Message"), "Alert_Message","Alert_Message",1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Voucher_Number"), "Voucher_Number","Voucher_Number",1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Status"), "Status","Status",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Activation_Date"), "Activation_Date","Activation_Date",1);
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Used_MSISDN"), "Used_MSISDN","Used_MSISDN",1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Blocked_Date"), "Blocked_Date","Blocked_Date",1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Blocked_Reason"), "Blocked_Reason","Blocked_Reason",1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Recharge_Date"), "Recharge_Date","Recharge_Date",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Reseller_ID"), "Reseller_ID","Reseller_ID",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Activation_Level"), "Activation_Level","Activation_Level",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Reseller_Message"), "Reseller_Message","Reseller_Message",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Plan_Name"), "Plan_Name","Plan_Name",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Bundle"), "Bundle","Bundle",1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Face_Value"), "Face_Value","Face_Value",1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Total_Bundle_Price"), "Total_Bundle_Price","Total_Bundle_Price",1);
				break;	
				case "step33": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("close_button"), "Close_Button");
				break;
				case "step34": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Load_Type"), "Load_Type");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_VS_Details_Bundle(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 45;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(voucher_Status.Voucher_Status_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(voucher_Status.Voucher_Status_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Status"), "Voucher_Status");
				break;
				case "step11": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Voucher_Status"), "Voucher_Status");
				break;
				case "step12": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Type"), "Voucher_Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(voucher_Status.Voucher_Status_Page("Voucher_Type"), "Voucher_Type", "Voucher_Type", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Code"), "Voucher_Code");
				break;
				case "step15": stepStatus[step] = WebEditEnterText(voucher_Status.Voucher_Status_Page("Voucher_Code"), "Voucher_Code", "Voucher_Code", 1);
				break;	
				case "step16": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Apply"), "Apply");
				break;
				case "step17": stepStatus[step] = waituntiltextpresent(voucher_Status.Voucher_Status_Page("Alert_Message"), "Alert_Message");
				break;
				case "step18": stepStatus[step] = WebElementResxKeyValueStaticCompare(voucher_Status.Voucher_Status_Page("Alert_Message"), "Alert_Message","Alert_Message",1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Voucher_Number"), "Voucher_Number","Voucher_Number",1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Status"), "Status","Status",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Activation_Date"), "Activation_Date","Activation_Date",1);
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Used_MSISDN"), "Used_MSISDN","Used_MSISDN",1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Blocked_Date"), "Blocked_Date","Blocked_Date",1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Blocked_Reason"), "Blocked_Reason","Blocked_Reason",1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Recharge_Date"), "Recharge_Date","Recharge_Date",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Reseller_ID"), "Reseller_ID","Reseller_ID",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Activation_Level"), "Activation_Level","Activation_Level",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Reseller_Message"), "Reseller_Message","Reseller_Message",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Plan_Name"), "Plan_Name","Plan_Name",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Bundle"), "Bundle","Bundle",1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Face_Value"), "Face_Value","Face_Value",1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Onnet_Mins"), "Onnet_Mins","Onnet_Mins",1);
				break;
				case "step33": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Onnet_SMS"), "Onnet_SMS","Onnet_SMS",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("MTOnnet_Mins"), "MTOnnet_Mins","MTOnnet_Mins",1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("MTOnnet_SMS"), "MTOnnet_SMS","MTOnnet_SMS",1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("MTOffnet_Mins"), "MTOffnet_Mins","MTOffnet_Mins",1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("MTOffnet_SMS"), "MTOffnet_SMS","MTOffnet_SMS",1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Zone1_Mins"), "Zone1_Mins","Zone1_Mins",1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Zone1_SMS"), "Zone1_SMS","Zone1_SMS",1);
				break;
				case "step40": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Zone2_Mins"), "Zone2_Mins","Zone2_Mins",1);
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Zone2_SMS"), "Zone2_SMS","Zone2_SMS",1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Zone3_Mins"), "Zone3_Mins","Zone3_Mins",1);
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Zone3_SMS"), "Zone3_SMS","Zone3_SMS",1);
				break;
				case "step44": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("close_button"), "Close_Button");
				break;
				case "step45": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Load_Type"), "Load_Type");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Staff_Top_Up_Csagent(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 27;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("topUp_Button"), "TopUp_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount_Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("Topup_Type"), "Topup_Type", "Topup_Type", 1);
				break;					
				case "step12": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount_Dropdown");
				break;
				case "step13": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount", "Amount", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("bundle_Dropdown"), "Bundle");
				break;
				case "step15": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("bundle_Dropdown"), "Bundle", "Bundle", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("Bundle_Auto_Renewal"), "AutoRenewal");
				break;
				case "step17": stepStatus[step] = WebCheckboxON(staff_TopUp.staff_TopUp_Page("Bundle_Auto_Renewal"), "AutoRenewal");
				break;
				case "step18": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("radio_Account_Balance"), "Account_Balance_Radio_Button");
				break;
				case "step19": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("radio_Staff_Topup"), "Staff_Topup_Radio_Button");
				break;
				case "step20": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("ticketID_TextBox"), "TicketID");
				break;
				case "step21": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("ticketID_TextBox"), "TicketID", "TicketID", 1);
				break;
				case "step22": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("reason_Dropdown"), "Reason", "Reason", 1);
				break;
				case "step23": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("comments_TextBox_Staff"), "Comments");
				break;
				case "step24": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("comments_TextBox_Staff"), "Comments", "Comments", 1);
				break;
				case "step25": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("submit_Button"), "Submit");
				break;
				case "step26": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("confirm_Message"), "Confirm_Message");
				break;
				case "step27": stepStatus[step] = WebElementResxKeyValueStaticCompare(staff_TopUp.staff_TopUp_Page("confirm_Message"), "Confirm_Message", "Confirm_Message", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postcond_Staff_Topup_Agent(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=16;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_TopupAmount", "Condition_Trnstafftopup", "Amount", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Bundlecode", "Condition_Trnstafftopup", "Bundlecode", 1);
				break;					
				case "step3": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Ticketid", "Condition_Trnstafftopup", "Ticketid", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Subscribertype", "Condition_Trnstafftopup", "Subscribertype", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Isbundlerenewal", "Condition_Trnstafftopup", "Isbundlerenewal", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Paymenttype", "Condition_Trnstafftopup", "Paymenttype", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Reason", "Condition_Trnstafftopup", "Reason", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Comments", "Condition_Trnstafftopup", "Comments", 1);
				break;					
				case "step9": stepStatus[step] = SQLDBDateCompare("Table_Trnstafftopup", "Column_Requestdate", "Condition_Trnstafftopup", "dd/MM/yyyy", 1);
				break;
				case "step10": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trnstafftopup","Column_Submitedby","Condition_Trnstafftopup","Param","CS_Username",1);
				break;					
				case "step11": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Status", "Condition_Trnstafftopup", "Status", 1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_is_Autotopup", "Condition_Trnstafftopup", "IS_Autotopup", 1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Topup_Frequency", "Condition_Trnstafftopup", "Topup_Frequency", 1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Balance_Threshold", "Condition_Trnstafftopup", "Balance_Threshold", 1);
				break;
				case "step15": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Is_Immediate_Topup", "Condition_Trnstafftopup", "Is_Immediate_Topup", 1);
				break;					
				case "step16": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Disable_AutoTopup", "Condition_Trnstafftopup", "Disable_AutoTopup", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Staff_Top_Up_Alert(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 27;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("topUp_Button"), "TopUp_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount_Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("Topup_Type"), "Topup_Type", "Topup_Type", 1);
				break;					
				case "step12": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount_Dropdown");
				break;
				case "step13": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount", "Amount", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("bundle_Dropdown"), "Bundle");
				break;
				case "step15": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("bundle_Dropdown"), "Bundle", "Bundle", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("Bundle_Auto_Renewal"), "AutoRenewal");
				break;
				case "step17": stepStatus[step] = WebCheckboxON(staff_TopUp.staff_TopUp_Page("Bundle_Auto_Renewal"), "AutoRenewal");
				break;
				case "step18": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("radio_Account_Balance"), "Account_Balance_Radio_Button");
				break;
				case "step19": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("radio_Staff_Topup"), "Staff_Topup_Radio_Button");
				break;
				case "step20": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("ticketID_TextBox"), "TicketID");
				break;
				case "step21": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("ticketID_TextBox"), "TicketID", "TicketID", 1);
				break;
				case "step22": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("reason_Dropdown"), "Reason", "Reason", 1);
				break;
				case "step23": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("comments_TextBox_Staff"), "Comments");
				break;
				case "step24": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("comments_TextBox_Staff"), "Comments", "Comments", 1);
				break;
				case "step25": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("approve_Button"), "Approve");
				break;
				case "step26": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("highlighted_ValMessage"), "Alert_Message");
				break;
				case "step27": stepStatus[step] = WebElementResxKeyValueStaticCompare(staff_TopUp.staff_TopUp_Page("highlighted_ValMessage"), "Alert_Message", "Confirm_Message", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Staff_Top_Up_Mand_Alert(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 18;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("topUp_Button"), "TopUp_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount_Dropdown");
				break;
				case "step11": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("approve_Button"), "Approve");
				break;
				case "step12": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("highlighted_ValMessage"), "Alert_Message");
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(staff_TopUp.staff_TopUp_Page("highlighted_ValMessage"), "Alert_Message", "Confirm_Message", 1);
				break;
				case "step14": stepStatus[step] = checkElementIsDisplayed(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount");
				break;
				case "step15": stepStatus[step] = checkElementIsDisplayed(staff_TopUp.staff_TopUp_Page("bundleDropdown_Validation"), "Bundle");
				break;
				case "step16": stepStatus[step] = checkElementIsDisplayed(staff_TopUp.staff_TopUp_Page("ticketID_Validation"), "TicketID");
				break;
				case "step17": stepStatus[step] = checkElementIsDisplayed(staff_TopUp.staff_TopUp_Page("reasonDropdown_Validation"), "Reason");
				break;
				case "step18": stepStatus[step] = checkElementIsDisplayed(staff_TopUp.staff_TopUp_Page("comments_TextBox_Validation"), "Comments");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Staff_Top_Up_Sim_Alert(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 11;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("topUp_Button"), "TopUp_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("Sim_Alert_Message"), "Alert_Message");
				break;
				case "step11": stepStatus[step] = WebElementResxKeyValueStaticCompare(staff_TopUp.staff_TopUp_Page("Sim_Alert_Message"), "Alert_Message", "Confirm_Message", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}		

	public synchronized void Pending_Approval_StaffTopup(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 25;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = storeSQLDBValueInEnv("Table_Name", "ID_COLUMN", "SQL_CONDITION","EnvVaraibleName_ID", 1);
				break;
				case "step2": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "pendingApproval_Body");
				break;
				case "step3": stepStatus[step] = checkScrollBarIsPresent(pendingApproval.pendingApproval_Page_ScrollBar("scrollBar_JS"), "pendingApproval");
				break;
				//case "step4": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("staff_TopUp"), "Staff Topup");
				case "step4": stepStatus[step] = PerformAction_MoveToElementAndClick(pendingApproval.pendingApproval_Page("staff_TopUp"), "Staff Topup");
				break;
				case "step5": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Text"), "pendingApproval_Text");
				break;
				case "step6": stepStatus[step] = enterEnvValueAndClickEnter(pendingApproval.pendingApproval_Page("requestID_Text"),"EnvVaraibleName_ID","RequestID",1);
				break;
				case "step7": stepStatus[step] = waitUntilExist(pendingApproval.Sim_Block_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_SimBlockRID", "EnvVaraibleName_ID"), "pendingApproval_MSISDN");
				break;
				case "step8": stepStatus[step] = WebElementClick(pendingApproval.Sim_Block_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_SimBlockRID","EnvVaraibleName_ID"), "pendingApproval_MSISDN");
				break;
				case "step9": stepStatus[step] = sleepForFunction();
				break;
				case "step10": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("Stafftopup_Approve_Button"), "Approve_Button");
				break;
				case "step11": stepStatus[step] = WebListSelectedValue(pendingApproval.pendingApproval_Page("Stafftopup_Topup_Type"), "Topup_Type", "Topup_Type", 1);
				break;
				case "step12": stepStatus[step] = WebElementValueCompare(pendingApproval.pendingApproval_Page("Stafftopup_Amount"), "Amount", "Amount", 1);
				break;
				case "step13": stepStatus[step] = WebListSelectedValue(pendingApproval.pendingApproval_Page("Stafftopup_Bundle"), "Bundle", "Bundle", 1);
				break;
				case "step14": stepStatus[step] = webElementSelectedStatus(pendingApproval.pendingApproval_Page("Stafftopup_Bundle_Autorenewal"), "Bundle_Autoreneawal");
				break;
				case "step15": stepStatus[step] = webElementSelectedStatus(pendingApproval.pendingApproval_Page("Stafftopup_radio_StaffTopup"), "Radio_Staff_Topup");
				break;
				case "step16": stepStatus[step] = WebElementValueCompare(pendingApproval.pendingApproval_Page("Stafftopup_TicketID"), "TicketID", "TicketID", 1);
				break;
				case "step17": stepStatus[step] = WebListSelectedValue(pendingApproval.pendingApproval_Page("Stafftopup_Reason"), "Reason", "Reason", 1);
				break;
				case "step18": stepStatus[step] = WebElementValueCompare(pendingApproval.pendingApproval_Page("Stafftopup_Comments"), "Comments", "Comments", 1);
				break;
				case "step19": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("Stafftopup_Approve_Button"), "Approve_Button");
				break;
				case "step20": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("Stafftopup_Reject_Button"), "Reject_Button");
				break;
				case "step21": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("Stafftopup_Reject_Button"), "Reject_Button");
				break;
				case "step22": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("Stafftopup_Confirm_Message"), "Confirm_Message");
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(pendingApproval.pendingApproval_Page("Stafftopup_Confirm_Message"), "Confirm_Message","Response_Message",1);
				break;
				case "step24": stepStatus[step] = setScrollBarOFF("Pending_Approval");
				break;
				case "step25": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("close_button"), "Subscriber Logout");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postcond_Staff_Topup_Admin(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=39;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_TopupAmount", "Condition_Trnstafftopup", "Amount", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Bundlecode", "Condition_Trnstafftopup", "Bundlecode", 1);
				break;					
				case "step3": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Ticketid", "Condition_Trnstafftopup", "Ticketid", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Subscribertype", "Condition_Trnstafftopup", "Subscribertype", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Isbundlerenewal", "Condition_Trnstafftopup", "Isbundlerenewal", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Paymenttype", "Condition_Trnstafftopup", "Paymenttype", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Reason", "Condition_Trnstafftopup", "Reason", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Comments", "Condition_Trnstafftopup", "Comments", 1);
				break;					
				case "step9": stepStatus[step] = SQLDBDateCompare("Table_Trnstafftopup", "Column_Requestdate", "Condition_Trnstafftopup", "dd/MM/yyyy", 1);
				break;
				case "step10": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trnstafftopup","Column_Submitedby","Condition_Trnstafftopup","Param","CS_Username",1);
				break;
				case "step11": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trnstafftopup","Column_Submitedby","Condition_Trnstafftopup","Param","admin_Username",1);
				break;
				case "step12": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trnstafftopup","Column_Authorisedby","Condition_Trnstafftopup","Param","admin_Username",1);
				break;
				case "step13": stepStatus[step] = SQLDBDateCompare("Table_Trnstafftopup", "Column_Authoriseddate", "Condition_Trnstafftopup", "dd/MM/yyyy", 1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Process_Status", "Condition_Trnstafftopup", "Process_Status", 1);
				break;					
				case "step15": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Status", "Condition_Trnstafftopup", "Status", 1);
				break;
				case "step16": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_is_Autotopup", "Condition_Trnstafftopup", "IS_Autotopup", 1);
				break;
				case "step17": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Topup_Frequency", "Condition_Trnstafftopup", "Topup_Frequency", 1);
				break;
				case "step18": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Balance_Threshold", "Condition_Trnstafftopup", "Balance_Threshold", 1);
				break;
				case "step19": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Is_Immediate_Topup", "Condition_Trnstafftopup", "Is_Immediate_Topup", 1);
				break;					
				case "step20": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Disable_AutoTopup", "Condition_Trnstafftopup", "Disable_AutoTopup", 1);
				break;
				case "step21": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Oldbal", "Condition_Trnstafftopup", "Old_Balance", 1);
				break;
				case "step22": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Newbal", "Condition_Trnstafftopup", "New_Balance", 1);
				break;
				case "step23": stepStatus[step] = SQLDBSelect("Table_Mst_Staff_Customer", "Column_Auto_Topup_Period_Days", "Condition_Mst_Staff_Customer", "Auto_Topup_Period_Days", 1);
				break;
				case "step24": stepStatus[step] = SQLDBSelect("Table_Mst_Staff_Customer", "Column_Balance_Threshold", "Condition_Mst_Staff_Customer", "Balance_Threshold", 1);
				break;
				case "step25": stepStatus[step] = SQLDBSelect("Table_Mst_Staff_Customer", "Column_Is_Autotopup", "Condition_Mst_Staff_Customer", "Is_Autotopup", 1);
				break;
				case "step26": stepStatus[step] = SQLDBSelect("Table_Mst_Staff_Customer", "Column_Ismax", "Condition_Mst_Staff_Customer", "Ismax", 1);
				break;
				case "step27": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Mst_Staff_Customer","Column_Updatedby","Condition_Mst_Staff_Customer","Param","admin_Username",1);
				break;
				case "step28": stepStatus[step] = SQLDBDateCompare("Table_Mst_Staff_Customer", "Column_Updatedon", "Condition_Mst_Staff_Customer", "dd/MM/yyyy", 1);
				break;
				case "step29": stepStatus[step] = SQLDBSelect("Table_Mst_Staff_Customer", "Column_Subscriber_Type", "Condition_Mst_Staff_Customer", "Subscriber_Type", 1);
				break;
				case "step30": stepStatus[step] = SQLDBSelect("Table_Mst_Staff_Customer", "Column_Topup_Amount", "Condition_Mst_Staff_Customer", "Topup_Amount", 1);
				break;
				case "step31": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Mst_Staff_Customer","Column_Createdby","Condition_Mst_Staff_Customer","Param","admin_Username",1);
				break;
				case "step32": stepStatus[step] = SQLDBDateCompare("Table_Mst_Staff_Customer", "Column_Createdon", "Condition_Mst_Staff_Customer", "dd/MM/yyyy", 1);
				break;
				case "step33": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","TOPUP_FACE_VALUE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","TOPUP_FACE_VALUE_COLUMNVALUE",1);
				break;
				case "step34": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","ACCT_BALANCE_COLUMNVALUE",1);
				break;
				case "step35": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","LAST_TOPUP_TYPE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","LAST_TOPUP_TYPE_COLUMNVALUE",1);
				break;
				case "step36": stepStatus[step] = RRBSDBCheckValueExist("RRBS_SUBSCRIBER_PROFILE_TABLENAME","LAST_TOPUP_TIME_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION" ,1);
				break;
				case "step37": stepStatus[step] = RRBSDBSelect("RRBS_SUBS_BUNDLE_BUCKETS_TABLENAME", "BUNDLE_CODE_COLUMNNAME", "RRBS_SUBS_BUNDLE_BUCKETS_CONDITION", "BUNDLE_CODE_COLUMNVALUE", 1);
				break;
				case "step38": stepStatus[step] = RRBSDBSelect("RRBS_SUBS_THRESH_LIMIT_TABLENAME","ONNET_BUNDLE_COUNTER_COLUMNNAME","RRBS_SUBS_THRESH_LIMIT_CONDITION","ONNET_BUNDLE_COUNTER_COLUMNVALUE",1);
				break;
				case "step39": stepStatus[step] = RRBSDBSelect("RRBS_SUBS_THRESH_LIMIT_TABLENAME","OVERALL_BUNDLE_COUNTER_COLUMNNAME","RRBS_SUBS_THRESH_LIMIT_CONDITION","OVERALL_BUNDLE_COUNTER_COLUMNVALUE",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postcond_Staff_Topup_Reject(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=19;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_TopupAmount", "Condition_Trnstafftopup", "Amount", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Bundlecode", "Condition_Trnstafftopup", "Bundlecode", 1);
				break;					
				case "step3": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Ticketid", "Condition_Trnstafftopup", "Ticketid", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Subscribertype", "Condition_Trnstafftopup", "Subscribertype", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Isbundlerenewal", "Condition_Trnstafftopup", "Isbundlerenewal", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Paymenttype", "Condition_Trnstafftopup", "Paymenttype", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Reason", "Condition_Trnstafftopup", "Reason", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Comments", "Condition_Trnstafftopup", "Comments", 1);
				break;					
				case "step9": stepStatus[step] = SQLDBDateCompare("Table_Trnstafftopup", "Column_Requestdate", "Condition_Trnstafftopup", "dd/MM/yyyy", 1);
				break;
				case "step10": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trnstafftopup","Column_Submitedby","Condition_Trnstafftopup","Param","CS_Username",1);
				break;
				case "step11": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trnstafftopup","Column_Authorisedby","Condition_Trnstafftopup","Param","admin_Username",1);
				break;
				case "step12": stepStatus[step] = SQLDBDateCompare("Table_Trnstafftopup", "Column_Authoriseddate", "Condition_Trnstafftopup", "dd/MM/yyyy", 1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Process_Status", "Condition_Trnstafftopup", "Process_Status", 1);
				break;					
				case "step14": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Status", "Condition_Trnstafftopup", "Status", 1);
				break;
				case "step15": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_is_Autotopup", "Condition_Trnstafftopup", "IS_Autotopup", 1);
				break;
				case "step16": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Topup_Frequency", "Condition_Trnstafftopup", "Topup_Frequency", 1);
				break;
				case "step17": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Balance_Threshold", "Condition_Trnstafftopup", "Balance_Threshold", 1);
				break;
				case "step18": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Is_Immediate_Topup", "Condition_Trnstafftopup", "Is_Immediate_Topup", 1);
				break;					
				case "step19": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Disable_AutoTopup", "Condition_Trnstafftopup", "Disable_AutoTopup", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Staff_Top_Up_Admin(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 28;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("topUp_Button"), "TopUp_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount_Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("Topup_Type"), "Topup_Type", "Topup_Type", 1);
				break;					
				case "step12": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount_Dropdown");
				break;
				case "step13": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount", "Amount", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("bundle_Dropdown"), "Bundle");
				break;
				case "step15": stepStatus[step] = waitUntilListLoads(staff_TopUp.staff_TopUp_Page("bundle_Dropdown"), "Bundle");
				break;
				case "step16": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("bundle_Dropdown"), "Bundle", "Bundle", 1);
				break;
				case "step17": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("Bundle_Auto_Renewal"), "AutoRenewal");
				break;
				case "step18": stepStatus[step] = WebCheckboxON(staff_TopUp.staff_TopUp_Page("Bundle_Auto_Renewal"), "AutoRenewal");
				break;
				case "step19": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("radio_Account_Balance"), "Account_Balance_Radio_Button");
				break;
				case "step20": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("radio_Staff_Topup"), "Staff_Topup_Radio_Button");
				break;
				case "step21": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("ticketID_TextBox"), "TicketID");
				break;
				case "step22": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("ticketID_TextBox"), "TicketID", "TicketID", 1);
				break;
				case "step23": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("reason_Dropdown"), "Reason", "Reason", 1);
				break;
				case "step24": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("comments_TextBox_Staff"), "Comments");
				break;
				case "step25": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("comments_TextBox_Staff"), "Comments", "Comments", 1);
				break;
				case "step26": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("approve_Button"), "Approve");
				break;
				case "step27": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("confirm_Message"), "Confirm_Message");
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(staff_TopUp.staff_TopUp_Page("confirm_Message"), "Confirm_Message", "Confirm_Message", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Staff_Top_Up_Ticketid_Env(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 28;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("topUp_Button"), "TopUp_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount_Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("Topup_Type"), "Topup_Type", "Topup_Type", 1);
				break;					
				case "step12": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount_Dropdown");
				break;
				case "step13": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount", "Amount", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("bundle_Dropdown"), "Bundle");
				break;
				case "step15": stepStatus[step] = waitUntilListLoads(staff_TopUp.staff_TopUp_Page("bundle_Dropdown"), "Bundle");
				break;
				case "step16": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("bundle_Dropdown"), "Bundle", "Bundle", 1);
				break;
				case "step17": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("Bundle_Auto_Renewal"), "AutoRenewal");
				break;
				case "step18": stepStatus[step] = WebCheckboxON(staff_TopUp.staff_TopUp_Page("Bundle_Auto_Renewal"), "AutoRenewal");
				break;
				case "step19": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("radio_Account_Balance"), "Account_Balance_Radio_Button");
				break;
				case "step20": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("radio_Staff_Topup"), "Staff_Topup_Radio_Button");
				break;
				case "step21": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("ticketID_TextBox"), "TicketID");
				break;
				case "step22": stepStatus[step] = WebEditEnterTextFromEnvVariable(staff_TopUp.staff_TopUp_Page("ticketID_TextBox"), "TicketID", "TicketID_Env", 1);
				break;
				case "step23": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("reason_Dropdown"), "Reason", "Reason", 1);
				break;
				case "step24": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("comments_TextBox_Staff"), "Comments");
				break;
				case "step25": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("comments_TextBox_Staff"), "Comments", "Comments", 1);
				break;
				case "step26": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("approve_Button"), "Approve");
				break;
				case "step27": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("confirm_Message"), "Confirm_Message");
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(staff_TopUp.staff_TopUp_Page("confirm_Message"), "Confirm_Message", "Confirm_Message", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Post_Staff_Topup_Ticketid_Env(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=39;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_TopupAmount", "Condition_Trnstafftopup", "Amount", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Bundlecode", "Condition_Trnstafftopup", "Bundlecode", 1);
				break;					
				case "step3": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trnstafftopup", "Column_Ticketid", "Condition_Trnstafftopup", "Runtime","New_TicketID", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Subscribertype", "Condition_Trnstafftopup", "Subscribertype", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Isbundlerenewal", "Condition_Trnstafftopup", "Isbundlerenewal", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Paymenttype", "Condition_Trnstafftopup", "Paymenttype", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Reason", "Condition_Trnstafftopup", "Reason", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Comments", "Condition_Trnstafftopup", "Comments", 1);
				break;					
				case "step9": stepStatus[step] = SQLDBDateCompare("Table_Trnstafftopup", "Column_Requestdate", "Condition_Trnstafftopup", "dd/MM/yyyy", 1);
				break;
				case "step10": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trnstafftopup","Column_Submitedby","Condition_Trnstafftopup","Param","CS_Username",1);
				break;
				case "step11": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trnstafftopup","Column_Submitedby","Condition_Trnstafftopup","Param","admin_Username",1);
				break;
				case "step12": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trnstafftopup","Column_Authorisedby","Condition_Trnstafftopup","Param","admin_Username",1);
				break;
				case "step13": stepStatus[step] = SQLDBDateCompare("Table_Trnstafftopup", "Column_Authoriseddate", "Condition_Trnstafftopup", "dd/MM/yyyy", 1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Process_Status", "Condition_Trnstafftopup", "Process_Status", 1);
				break;					
				case "step15": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Status", "Condition_Trnstafftopup", "Status", 1);
				break;
				case "step16": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_is_Autotopup", "Condition_Trnstafftopup", "IS_Autotopup", 1);
				break;
				case "step17": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Topup_Frequency", "Condition_Trnstafftopup", "Topup_Frequency", 1);
				break;
				case "step18": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Balance_Threshold", "Condition_Trnstafftopup", "Balance_Threshold", 1);
				break;
				case "step19": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Is_Immediate_Topup", "Condition_Trnstafftopup", "Is_Immediate_Topup", 1);
				break;					
				case "step20": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Disable_AutoTopup", "Condition_Trnstafftopup", "Disable_AutoTopup", 1);
				break;
				case "step21": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Oldbal", "Condition_Trnstafftopup", "Old_Balance", 1);
				break;
				case "step22": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Newbal", "Condition_Trnstafftopup", "New_Balance", 1);
				break;
				case "step23": stepStatus[step] = SQLDBSelect("Table_Mst_Staff_Customer", "Column_Auto_Topup_Period_Days", "Condition_Mst_Staff_Customer", "Auto_Topup_Period_Days", 1);
				break;
				case "step24": stepStatus[step] = SQLDBSelect("Table_Mst_Staff_Customer", "Column_Balance_Threshold", "Condition_Mst_Staff_Customer", "Balance_Threshold", 1);
				break;
				case "step25": stepStatus[step] = SQLDBSelect("Table_Mst_Staff_Customer", "Column_Is_Autotopup", "Condition_Mst_Staff_Customer", "Is_Autotopup", 1);
				break;
				case "step26": stepStatus[step] = SQLDBSelect("Table_Mst_Staff_Customer", "Column_Ismax", "Condition_Mst_Staff_Customer", "Ismax", 1);
				break;
				case "step27": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Mst_Staff_Customer","Column_Updatedby","Condition_Mst_Staff_Customer","Param","admin_Username",1);
				break;
				case "step28": stepStatus[step] = SQLDBDateCompare("Table_Mst_Staff_Customer", "Column_Updatedon", "Condition_Mst_Staff_Customer", "dd/MM/yyyy", 1);
				break;
				case "step29": stepStatus[step] = SQLDBSelect("Table_Mst_Staff_Customer", "Column_Subscriber_Type", "Condition_Mst_Staff_Customer", "Subscriber_Type", 1);
				break;
				case "step30": stepStatus[step] = SQLDBSelect("Table_Mst_Staff_Customer", "Column_Topup_Amount", "Condition_Mst_Staff_Customer", "Topup_Amount", 1);
				break;
				case "step31": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Mst_Staff_Customer","Column_Createdby","Condition_Mst_Staff_Customer","Param","admin_Username",1);
				break;
				case "step32": stepStatus[step] = SQLDBDateCompare("Table_Mst_Staff_Customer", "Column_Createdon", "Condition_Mst_Staff_Customer", "dd/MM/yyyy", 1);
				break;
				case "step33": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","TOPUP_FACE_VALUE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","TOPUP_FACE_VALUE_COLUMNVALUE",1);
				break;
				case "step34": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","ACCT_BALANCE_COLUMNVALUE",1);
				break;
				case "step35": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","LAST_TOPUP_TYPE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","LAST_TOPUP_TYPE_COLUMNVALUE",1);
				break;
				case "step36": stepStatus[step] = RRBSDBCheckValueExist("RRBS_SUBSCRIBER_PROFILE_TABLENAME","LAST_TOPUP_TIME_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION" ,1);
				break;
				case "step37": stepStatus[step] = RRBSDBSelect("RRBS_SUBS_BUNDLE_BUCKETS_TABLENAME", "BUNDLE_CODE_COLUMNNAME", "RRBS_SUBS_BUNDLE_BUCKETS_CONDITION", "BUNDLE_CODE_COLUMNVALUE", 1);
				break;
				case "step38": stepStatus[step] = RRBSDBSelect("RRBS_SUBS_THRESH_LIMIT_TABLENAME","ONNET_BUNDLE_COUNTER_COLUMNNAME","RRBS_SUBS_THRESH_LIMIT_CONDITION","ONNET_BUNDLE_COUNTER_COLUMNVALUE",1);
				break;
				case "step39": stepStatus[step] = RRBSDBSelect("RRBS_SUBS_THRESH_LIMIT_TABLENAME","OVERALL_BUNDLE_COUNTER_COLUMNNAME","RRBS_SUBS_THRESH_LIMIT_CONDITION","OVERALL_BUNDLE_COUNTER_COLUMNVALUE",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Staff_Top_Up_History(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 13;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("topUp_Button"), "TopUp_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount_Dropdown");
				break;
				case "step11": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("History"), "History");
				break;
				case "step12": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("Topup_History_Table"), "Topup_History_Table");
				break;
				case "step13": stepStatus[step] = webTableVerifyDetailshashtable_2(staff_TopUp.staff_TopUp_Page("Topup_History_Table"), "Topup_History_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}	

	public synchronized void Postcond_Topup_Reject_Admin(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=19;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_TopupAmount", "Condition_Trnstafftopup", "Amount", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Bundlecode", "Condition_Trnstafftopup", "Bundlecode", 1);
				break;					
				case "step3": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Ticketid", "Condition_Trnstafftopup", "Ticketid", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Subscribertype", "Condition_Trnstafftopup", "Subscribertype", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Isbundlerenewal", "Condition_Trnstafftopup", "Isbundlerenewal", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Paymenttype", "Condition_Trnstafftopup", "Paymenttype", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Reason", "Condition_Trnstafftopup", "Reason", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Comments", "Condition_Trnstafftopup", "Comments", 1);
				break;					
				case "step9": stepStatus[step] = SQLDBDateCompare("Table_Trnstafftopup", "Column_Requestdate", "Condition_Trnstafftopup", "dd/MM/yyyy", 1);
				break;
				case "step10": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trnstafftopup","Column_Submitedby","Condition_Trnstafftopup","Param","admin_Username",1);
				break;
				case "step11": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trnstafftopup","Column_Authorisedby","Condition_Trnstafftopup","Param","admin_Username",1);
				break;
				case "step12": stepStatus[step] = SQLDBDateCompare("Table_Trnstafftopup", "Column_Authoriseddate", "Condition_Trnstafftopup", "dd/MM/yyyy", 1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Process_Status", "Condition_Trnstafftopup", "Process_Status", 1);
				break;					
				case "step14": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Status", "Condition_Trnstafftopup", "Status", 1);
				break;
				case "step15": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_is_Autotopup", "Condition_Trnstafftopup", "IS_Autotopup", 1);
				break;
				case "step16": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Topup_Frequency", "Condition_Trnstafftopup", "Topup_Frequency", 1);
				break;
				case "step17": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Balance_Threshold", "Condition_Trnstafftopup", "Balance_Threshold", 1);
				break;
				case "step18": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Is_Immediate_Topup", "Condition_Trnstafftopup", "Is_Immediate_Topup", 1);
				break;					
				case "step19": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Disable_AutoTopup", "Condition_Trnstafftopup", "Disable_AutoTopup", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Close_Subscriber_View(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 2;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("close_button"), "Close_Button");
				break;
				case "step2": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_BP_PROMO_VAT_CC_AIO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=68;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step11": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step19": stepStatus[step] = WebCheckboxON(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step22": stepStatus[step] = sleepForFunction();
				break;
				case "step23": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step24": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "Promo_Code");
				break;
				case "step25": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "Promo_Code", "Promo_Code", 1);
				break;
				case "step26": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinonePromo"), "Apply_Promo");
				break;
				case "step27": stepStatus[step] = waituntiltextpresent(online_TopUp.AllInOne_TopUp_Page("labelDiscountResponseAllInOne"), "Promo_Message");
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelDiscountResponseAllInOne"), "Promo_Message","Promo_Message",1);
				break;
				case "step29": stepStatus[step] = webTableRadioButton(online_TopUp.AllInOne_TopUp_Page("AIO_Paymnet_Type"), "Payment_Type", 1);
				break;
				case "step30": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step31": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type","Card_Type",1);
				break;
				case "step32": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card");
				break;
				case "step33": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card", "Name_On_Card", 1);
				break;
				case "step34": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber1_TextBox"), "Card_Number_1", "Card_Number_1", 1);
				break;
				case "step35": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber2_TextBox"), "Card_Number_2", "Card_Number_2", 1);
				break;
				case "step36": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber3_TextBox"), "Card_Number_3", "Card_Number_3", 1);
				break;
				case "step37": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber4_TextBox"), "Card_Number_4", "Card_Number_4", 1);
				break;
				case "step38": stepStatus[step] = javaScriptDatePicker(online_TopUp.Online_TopUp_Page("expiryDate_TextBox"), "Expiry_Date", "Expiry_Date", 1);
				break;
				case "step39": stepStatus[step] = JavaScriptWebEditEnterText(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV_Number", "CVV_Number", 1);
				break;
				case "step40": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Bundle_Table"), "Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step41": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step43": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtpostCode"), "Postcode", "Postcode", 1);
				break;
				case "step44": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconAddressSearch"), "Search Icon");
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step46": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","Address",1);
				break;
				case "step47": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step48": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number");
				break;
				case "step49": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number","House_Number",1);
				break;
				case "step50": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("labelstreetName"), "StreetName","View_Street",1);
				break;
				case "step51": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblcityName"), "City","View_City",1);
				break;
				case "step52": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblpostCode"), "Postcode","View_Postcode",1);
				break;
				case "step53": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step54": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step55": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table");
				break;
				case "step56": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total_Amount","Total_Amount",1);
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("VAT_Amount"), "VAT_Amount","VAT_Amount",1);
				break;
				case "step59": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit");
				break;
				case "step60": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message");
				break;
				case "step61": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step62": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_MSISDN"), "Confirm_MSISDN","Mobile_Number",1);
				break;
				case "step63": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_Amount"), "Confirm_Amount","Confirm_Amount",1);
				break;
				case "step64": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_VAT_Amount"), "Confirm_VAT_Amount","Confirm_VAT_Amount",1);
				break;
				case "step65": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Pattern",1);
				break;
				case "step66": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Env",1);
				break;
				case "step67": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Pattern",1);
				break;
				case "step68": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Env",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_FBP_VAT_CC_AIO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=72;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step11": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step19": stepStatus[step] = WebCheckboxON(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step20": stepStatus[step] = WebCheckboxOFF(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step21": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step22": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step23": stepStatus[step] = sleepForFunction();
				break;
				case "step24": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step25": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step26": stepStatus[step] = webTableRadioButton(online_TopUp.AllInOne_TopUp_Page("AIO_Paymnet_Type"), "Payment_Type", 1);
				break;
				case "step27": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step28": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type","Card_Type",1);
				break;
				case "step29": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card");
				break;
				case "step30": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card", "Name_On_Card", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber1_TextBox"), "Card_Number_1", "Card_Number_1", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber2_TextBox"), "Card_Number_2", "Card_Number_2", 1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber3_TextBox"), "Card_Number_3", "Card_Number_3", 1);
				break;
				case "step34": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber4_TextBox"), "Card_Number_4", "Card_Number_4", 1);
				break;
				case "step35": stepStatus[step] = javaScriptDatePicker(online_TopUp.Online_TopUp_Page("expiryDate_TextBox"), "Expiry_Date", "Expiry_Date", 1);
				break;
				case "step36": stepStatus[step] = JavaScriptWebEditEnterText(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV_Number", "CVV_Number", 1);
				break;
				case "step37": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Bundle_Table"), "Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step38": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step40": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtpostCode"), "Postcode", "Postcode", 1);
				break;
				case "step41": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconAddressSearch"), "Search Icon");
				break;
				case "step42": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step43": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","Address",1);
				break;
				case "step44": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number");
				break;
				case "step46": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number","House_Number",1);
				break;
				case "step47": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("labelstreetName"), "StreetName","View_Street",1);
				break;
				case "step48": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblcityName"), "City","View_City",1);
				break;
				case "step49": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblpostCode"), "Postcode","View_Postcode",1);
				break;
				case "step50": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step51": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step52": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table");
				break;
				case "step53": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total_Amount","Total_Amount",1);
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("VAT_Amount"), "VAT_Amount","VAT_Amount",1);
				break;
				case "step56": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit");
				break;
				case "step57": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message");
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_MSISDN"), "Confirm_MSISDN","Mobile_Number",1);
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_Amount"), "Confirm_Amount","Confirm_Amount",1);
				break;
				case "step61": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_VAT_Amount"), "Confirm_VAT_Amount","Confirm_VAT_Amount",1);
				break;
				case "step62": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Pattern",1);
				break;
				case "step63": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Env",1);
				break;
				case "step64": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Pattern",1);
				break;
				case "step65": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Env",1);
				break;
				case "step66": stepStatus[step] = RetrieveRRBSValueStoresInEnvVar("Table_Name_RRBS", "Column_Name_RRBS","Condition_RRBS","Env_Var_FamilyID",1);
				break;
				case "step67": stepStatus[step] = WebElementTextCompareFromEnv(online_TopUp.AllInOne_TopUp_Page("lblAllinoneFamilyAccountId"), "Family_AccountID", "Env_FamilyID", 1);
				break;
				case "step68": stepStatus[step] = RRBSDBConditionEnvVar("Select","Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Status","Condition_RRBS_MSISDN","Column_Value_Status","Env_Var_FamilyID",1);
				break;
				case "step69": stepStatus[step] = RRBSDBConditionEnvVar("Select","Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Chargemode","Condition_RRBS_MSISDN","Column_Value_Chargemode","Env_Var_FamilyID",1);
				break;
				case "step70": stepStatus[step] = RRBSDBConditionEnvVar("Delete","Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","","Condition_RRBS_MSISDN","","Env_Var_FamilyID",1);
				break;
				case "step71": stepStatus[step] = RRBSDBConditionEnvVar("Delete","Table_Name_RRBS_SUBS_THRESH_LIMIT","","Condition_RRBS_MSISDN","","Env_Var_FamilyID",1);
				break;
				case "step72": stepStatus[step] = RRBSDBConditionEnvVar("Delete","Table_Name_RRBS_SUBSCRIBER_PROFILE","","Condition_RRBS_MSISDN","","Env_Var_FamilyID",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_FBP_Exist_VAT_CC_AIO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=47;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step3": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step4": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step5": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step6": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step7": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step8": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step10": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step11": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step13": stepStatus[step] = WebCheckboxON(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step15": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step16": stepStatus[step] = sleepForFunction();
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step19": stepStatus[step] = WebRadioSelect(online_TopUp.Online_TopUp_Page("existingCard_rdButton"), "Payment Using", "Existing Card");
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("ExCardNumberHead_Label"), "Existing Card Table");
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("ExCardNumber_Label"), "Existing Card Number","Existing_CardNo",1);
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("ExCardName_Label"), "Existing Card Name","Existing_NameOnCard",1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("ExCardType_Label"), "Existing Card Type","Existing_CardType",1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(online_TopUp.Online_TopUp_Page("ExCardExpiryDate_Label"), "Existing Card ExpiryDate","Existing_ExpiryDate",1);
				break;
				case "step25": stepStatus[step] = javaScriptEnterText(online_TopUp.Online_TopUp_Page("ExCCNo_Label"), "Card CC Number","CVV_Number",1);
				break;
				case "step26": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step27": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step28": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table");
				break;
				case "step29": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total_Amount","Total_Amount",1);
				break;
				case "step31": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit");
				break;
				case "step32": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message");
				break;
				case "step33": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_MSISDN"), "Confirm_MSISDN","Mobile_Number",1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_Amount"), "Confirm_Amount","Confirm_Amount",1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_VAT_Amount"), "Confirm_VAT_Amount","Confirm_VAT_Amount",1);
				break;
				case "step37": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Pattern",1);
				break;
				case "step38": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Env",1);
				break;
				case "step39": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Pattern",1);
				break;
				case "step40": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Env",1);
				break;
				case "step41": stepStatus[step] = RetrieveRRBSValueStoresInEnvVar("Table_Name_RRBS", "Column_Name_RRBS","Condition_RRBS","Env_Var_FamilyID_2",1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompareFromEnv(online_TopUp.AllInOne_TopUp_Page("lblAllinoneFamilyAccountId"), "Family_AccountID", "Env_FamilyID", 1);
				break;
				case "step43": stepStatus[step] = RRBSDBConditionEnvVar("Select","Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Status","Condition_RRBS_MSISDN","Column_Value_Status","Env_Var_FamilyID_2",1);
				break;
				case "step44": stepStatus[step] = RRBSDBConditionEnvVar("Select","Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Chargemode","Condition_RRBS_MSISDN","Column_Value_Chargemode","Env_Var_FamilyID_2",1);
				break;
				case "step45": stepStatus[step] = RRBSDBConditionEnvVar("Delete","Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","","Condition_RRBS_MSISDN","","Env_Var_FamilyID_2",1);
				break;
				case "step46": stepStatus[step] = RRBSDBConditionEnvVar("Delete","Table_Name_RRBS_SUBS_THRESH_LIMIT","","Condition_RRBS_MSISDN","","Env_Var_FamilyID_2",1);
				break;
				case "step47": stepStatus[step] = RRBSDBConditionEnvVar("Delete","Table_Name_RRBS_SUBSCRIBER_PROFILE","","Condition_RRBS_MSISDN","","Env_Var_FamilyID_2",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_SL_BP_CC_AIO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=64;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step11": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step19": stepStatus[step] = WebCheckboxON(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step20": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtAssociatedMsisdn"), "Associated_MSISDN", "Associated_MSISDN", 1);
				break;
				case "step21": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step22": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step23": stepStatus[step] = sleepForFunction();
				break;
				case "step24": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step25": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step26": stepStatus[step] = webTableRadioButton(online_TopUp.AllInOne_TopUp_Page("AIO_Paymnet_Type"), "Payment_Type", 1);
				break;
				case "step27": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step28": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type","Card_Type",1);
				break;
				case "step29": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card");
				break;
				case "step30": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card", "Name_On_Card", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber1_TextBox"), "Card_Number_1", "Card_Number_1", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber2_TextBox"), "Card_Number_2", "Card_Number_2", 1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber3_TextBox"), "Card_Number_3", "Card_Number_3", 1);
				break;
				case "step34": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber4_TextBox"), "Card_Number_4", "Card_Number_4", 1);
				break;
				case "step35": stepStatus[step] = javaScriptDatePicker(online_TopUp.Online_TopUp_Page("expiryDate_TextBox"), "Expiry_Date", "Expiry_Date", 1);
				break;
				case "step36": stepStatus[step] = JavaScriptWebEditEnterText(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV_Number", "CVV_Number", 1);
				break;
				case "step37": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Bundle_Table"), "Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step38": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step40": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtpostCode"), "Postcode", "Postcode", 1);
				break;
				case "step41": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconAddressSearch"), "Search Icon");
				break;
				case "step42": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step43": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","Address",1);
				break;
				case "step44": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number");
				break;
				case "step46": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number","House_Number",1);
				break;
				case "step47": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("labelstreetName"), "StreetName","View_Street",1);
				break;
				case "step48": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblcityName"), "City","View_City",1);
				break;
				case "step49": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblpostCode"), "Postcode","View_Postcode",1);
				break;
				case "step50": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step51": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step52": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table");
				break;
				case "step53": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total_Amount","Total_Amount",1);
				break;
				case "step55": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit");
				break;
				case "step56": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message");
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_MSISDN"), "Confirm_MSISDN","Mobile_Number",1);
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_Amount"), "Confirm_Amount","Confirm_Amount",1);
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_VAT_Amount"), "Confirm_VAT_Amount","Confirm_VAT_Amount",1);
				break;
				case "step61": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Pattern",1);
				break;
				case "step62": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Env",1);
				break;
				case "step63": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Pattern",1);
				break;
				case "step64": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Env",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_OBABP_CC_AIO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=62;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step11": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step17": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step18": stepStatus[step] = webCheckBoxCheckStatus(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step19": stepStatus[step] = WebCheckboxON(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step22": stepStatus[step] = sleepForFunction();
				break;
				case "step23": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step24": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step25": stepStatus[step] = webTableRadioButton(online_TopUp.AllInOne_TopUp_Page("AIO_Paymnet_Type"), "Payment_Type", 1);
				break;
				case "step26": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step27": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type","Card_Type",1);
				break;
				case "step28": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card");
				break;
				case "step29": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card", "Name_On_Card", 1);
				break;
				case "step30": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber1_TextBox"), "Card_Number_1", "Card_Number_1", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber2_TextBox"), "Card_Number_2", "Card_Number_2", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber3_TextBox"), "Card_Number_3", "Card_Number_3", 1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber4_TextBox"), "Card_Number_4", "Card_Number_4", 1);
				break;
				case "step34": stepStatus[step] = javaScriptDatePicker(online_TopUp.Online_TopUp_Page("expiryDate_TextBox"), "Expiry_Date", "Expiry_Date", 1);
				break;
				case "step35": stepStatus[step] = JavaScriptWebEditEnterText(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV_Number", "CVV_Number", 1);
				break;
				case "step36": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Bundle_Table"), "Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step37": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step39": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtpostCode"), "Postcode", "Postcode", 1);
				break;
				case "step40": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconAddressSearch"), "Search Icon");
				break;
				case "step41": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step42": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","Address",1);
				break;
				case "step43": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step44": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number");
				break;
				case "step45": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number","House_Number",1);
				break;
				case "step46": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("labelstreetName"), "StreetName","View_Street",1);
				break;
				case "step47": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblcityName"), "City","View_City",1);
				break;
				case "step48": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblpostCode"), "Postcode","View_Postcode",1);
				break;
				case "step49": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step50": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step51": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table");
				break;
				case "step52": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total_Amount","Total_Amount",1);
				break;
				case "step54": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit");
				break;
				case "step55": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message");
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_MSISDN"), "Confirm_MSISDN","Mobile_Number",1);
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_Amount"), "Confirm_Amount","Confirm_Amount",1);
				break;
				case "step59": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Pattern",1);
				break;
				case "step60": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Env",1);
				break;
				case "step61": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Pattern",1);
				break;
				case "step62": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Env",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_OBABP_VAT_CC_AIO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=63;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step11": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step17": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step18": stepStatus[step] = webCheckBoxCheckStatus(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step19": stepStatus[step] = WebCheckboxON(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step21": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step22": stepStatus[step] = sleepForFunction();
				break;
				case "step23": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step24": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step25": stepStatus[step] = webTableRadioButton(online_TopUp.AllInOne_TopUp_Page("AIO_Paymnet_Type"), "Payment_Type", 1);
				break;
				case "step26": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step27": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type","Card_Type",1);
				break;
				case "step28": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card");
				break;
				case "step29": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card", "Name_On_Card", 1);
				break;
				case "step30": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber1_TextBox"), "Card_Number_1", "Card_Number_1", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber2_TextBox"), "Card_Number_2", "Card_Number_2", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber3_TextBox"), "Card_Number_3", "Card_Number_3", 1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber4_TextBox"), "Card_Number_4", "Card_Number_4", 1);
				break;
				case "step34": stepStatus[step] = javaScriptDatePicker(online_TopUp.Online_TopUp_Page("expiryDate_TextBox"), "Expiry_Date", "Expiry_Date", 1);
				break;
				case "step35": stepStatus[step] = JavaScriptWebEditEnterText(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV_Number", "CVV_Number", 1);
				break;
				case "step36": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Bundle_Table"), "Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step37": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step39": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtpostCode"), "Postcode", "Postcode", 1);
				break;
				case "step40": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconAddressSearch"), "Search Icon");
				break;
				case "step41": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step42": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","Address",1);
				break;
				case "step43": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step44": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number");
				break;
				case "step45": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number","House_Number",1);
				break;
				case "step46": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("labelstreetName"), "StreetName","View_Street",1);
				break;
				case "step47": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblcityName"), "City","View_City",1);
				break;
				case "step48": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblpostCode"), "Postcode","View_Postcode",1);
				break;
				case "step49": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step50": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step51": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table");
				break;
				case "step52": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total_Amount","Total_Amount",1);
				break;
				case "step54": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit");
				break;
				case "step55": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message");
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_MSISDN"), "Confirm_MSISDN","Mobile_Number",1);
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_Amount"), "Confirm_Amount","Confirm_Amount",1);
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_VAT_Amount"), "Confirm_VAT_Amount","Confirm_VAT_Amount",1);
				break;
				case "step60": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Pattern",1);
				break;
				case "step61": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Env",1);
				break;
				case "step62": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Pattern",1);
				break;
				case "step63": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Env",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Active_Topup_Amount_AIO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=19;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step11": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup_Amount_Dropdown");
				break;
				case "step13": stepStatus[step] = WeblistSQLDBitemsverify(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup_Amount_Dropdown","Table_Name","Column_Name","Condition",1,1);
				break;
				case "step14": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup_Amount_Dropdown", "Topup_Amount", 1);
				break;
				case "step15": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Topup_Submit");
				break;
				case "step16": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Topup_Submit");
				break;
				case "step17": stepStatus[step] = sleepForFunction();
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("Bundle_Table"), "Bundle_Table");
				break;
				case "step19": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Bundle_Table"), "Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Topup_VAT_CC_AIO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=57;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step11": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup_Amount_Dropdown");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup_Amount_Dropdown", "Topup_Amount", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Topup_Submit");
				break;
				case "step15": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Topup_Submit");
				break;
				case "step16": stepStatus[step] = sleepForFunction();
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step19": stepStatus[step] = webTableRadioButton(online_TopUp.AllInOne_TopUp_Page("AIO_Paymnet_Type"), "Payment_Type", 1);
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step21": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type","Card_Type",1);
				break;
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card");
				break;
				case "step23": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card", "Name_On_Card", 1);
				break;
				case "step24": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber1_TextBox"), "Card_Number_1", "Card_Number_1", 1);
				break;
				case "step25": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber2_TextBox"), "Card_Number_2", "Card_Number_2", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber3_TextBox"), "Card_Number_3", "Card_Number_3", 1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber4_TextBox"), "Card_Number_4", "Card_Number_4", 1);
				break;
				case "step28": stepStatus[step] = javaScriptDatePicker(online_TopUp.Online_TopUp_Page("expiryDate_TextBox"), "Expiry_Date", "Expiry_Date", 1);
				break;
				case "step29": stepStatus[step] = JavaScriptWebEditEnterText(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV_Number", "CVV_Number", 1);
				break;
				case "step30": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Bundle_Table"), "Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtpostCode"), "Postcode", "Postcode", 1);
				break;
				case "step34": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconAddressSearch"), "Search Icon");
				break;
				case "step35": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step36": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","Address",1);
				break;
				case "step37": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step38": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number");
				break;
				case "step39": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number","House_Number",1);
				break;
				case "step40": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("labelstreetName"), "StreetName","View_Street",1);
				break;
				case "step41": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblcityName"), "City","View_City",1);
				break;
				case "step42": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblpostCode"), "Postcode","View_Postcode",1);
				break;
				case "step43": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step44": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table");
				break;
				case "step46": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step47": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total_Amount","Total_Amount",1);
				break;
				case "step48": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit");
				break;
				case "step49": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message");
				break;
				case "step50": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step51": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_MSISDN"), "Confirm_MSISDN","Mobile_Number",1);
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_Amount"), "Confirm_Amount","Confirm_Amount",1);
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_VAT_Amount"), "Confirm_VAT_Amount","Confirm_VAT_Amount",1);
				break;
				case "step54": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Pattern",1);
				break;
				case "step55": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Env",1);
				break;
				case "step56": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Pattern",1);
				break;
				case "step57": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Env",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postcondition_Topup_VAT_AIO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=22;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","ACCT_BALANCE_COLUMNVALUE",1);
				break;
				case "step2": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_msttopup","Column_Transactionid","Condition_msttopup","Runtime","Env_Trans_Number",1);
				break;					
				case "step3": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_Topup_Amount", "Condition_msttopup", "Topup_Amount", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_Topup_Mode", "Condition_msttopup", "Topup_Mode", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_Status", "Condition_msttopup", "Status", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_Error_Desc", "Condition_msttopup", "Error_Desc", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_Promo_Code", "Condition_msttopup", "Promo_Code", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_Promo_Type", "Condition_msttopup", "Promo_Type", 1);
				break;
				case "step9": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_Promo_Discount_Type", "Condition_msttopup", "Promo_Discount_Type", 1);
				break;
				case "step10": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_Promo_Discount_Amount", "Condition_msttopup", "Promo_Discount_Amount", 1);
				break;
				case "step11": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_Tax_Amount", "Condition_msttopup", "Tax_Amount", 1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("Table_msttopup","Column_Subtransactionid","Condition_msttopup","Subtransactionid",1);
				break;
				case "step13": stepStatus[step] = SQLDBCheckValueExist("Table_msttopup", "Column_VAT_Transid", "Condition_msttopup", 1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_VAT_Amount", "Condition_msttopup", "VAT_Amount", 1);
				break;
				case "step15": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_VAT_Percentage", "Condition_msttopup", "VAT_Percentage", 1);
				break;
				case "step16": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_Total_Amount", "Condition_msttopup", "Total_Amount", 1);
				break;
				case "step17": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_Total_Discount", "Condition_msttopup", "Total_Discount", 1);
				break;
				case "step18": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_VAT_Type", "Condition_msttopup", "VAT_Type", 1);
				break;
				case "step19" : stepStatus[step] = EShopSQLDBSelectFromEnv("Table_tbleshoptransactionstatus","Transactionid_ColumnName","SUBSCRIBERID_CONDITION","Transaction_Number_Env",1);
				break;
				case "step20" : stepStatus[step] = EShopSQLDBSelectFromEnv("Table_tbleshoptransactionstatus","Orderid_ColumnName","SUBSCRIBERID_CONDITION","Reference_Number_Env",1);
				break;
				case "step21" : stepStatus[step] = EShopSQLDBSelect("Table_tbleshoptransactionstatus","Amount_ColumnName","SUBSCRIBERID_CONDITION","Amount_Columnvalue",1);
				break;
				case "step22" : stepStatus[step] = EShopSQLDBSelect("Table_tbleshoptransactionstatus","Totalamount_ColumnName","SUBSCRIBERID_CONDITION","Totalamount_Columnvalue",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Topup_PROMO_VAT_CC_AIO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=61;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step11": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup_Amount_Dropdown");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup_Amount_Dropdown", "Topup_Amount", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Topup_Submit");
				break;
				case "step15": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Topup_Submit");
				break;
				case "step16": stepStatus[step] = sleepForFunction();
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "Promo_Code");
				break;
				case "step19": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "Promo_Code", "Promo_Code", 1);
				break;
				case "step20": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinonePromo"), "Apply_Promo");
				break;
				case "step21": stepStatus[step] = waituntiltextpresent(online_TopUp.AllInOne_TopUp_Page("labelDiscountResponseAllInOne"), "Promo_Message");
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelDiscountResponseAllInOne"), "Promo_Message","Promo_Message",1);
				break;
				case "step23": stepStatus[step] = webTableRadioButton(online_TopUp.AllInOne_TopUp_Page("AIO_Paymnet_Type"), "Payment_Type", 1);
				break;
				case "step24": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step25": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type","Card_Type",1);
				break;
				case "step26": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card");
				break;
				case "step27": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card", "Name_On_Card", 1);
				break;
				case "step28": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber1_TextBox"), "Card_Number_1", "Card_Number_1", 1);
				break;
				case "step29": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber2_TextBox"), "Card_Number_2", "Card_Number_2", 1);
				break;
				case "step30": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber3_TextBox"), "Card_Number_3", "Card_Number_3", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber4_TextBox"), "Card_Number_4", "Card_Number_4", 1);
				break;
				case "step32": stepStatus[step] = javaScriptDatePicker(online_TopUp.Online_TopUp_Page("expiryDate_TextBox"), "Expiry_Date", "Expiry_Date", 1);
				break;
				case "step33": stepStatus[step] = JavaScriptWebEditEnterText(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV_Number", "CVV_Number", 1);
				break;
				case "step34": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Bundle_Table"), "Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step35": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step37": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtpostCode"), "Postcode", "Postcode", 1);
				break;
				case "step38": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconAddressSearch"), "Search Icon");
				break;
				case "step39": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step40": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","Address",1);
				break;
				case "step41": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step42": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number");
				break;
				case "step43": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number","House_Number",1);
				break;
				case "step44": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("labelstreetName"), "StreetName","View_Street",1);
				break;
				case "step45": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblcityName"), "City","View_City",1);
				break;
				case "step46": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblpostCode"), "Postcode","View_Postcode",1);
				break;
				case "step47": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step48": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step49": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table");
				break;
				case "step50": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step51": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total_Amount","Total_Amount",1);
				break;
				case "step52": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit");
				break;
				case "step53": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message");
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_MSISDN"), "Confirm_MSISDN","Mobile_Number",1);
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_Amount"), "Confirm_Amount","Confirm_Amount",1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_VAT_Amount"), "Confirm_VAT_Amount","Confirm_VAT_Amount",1);
				break;
				case "step58": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Pattern",1);
				break;
				case "step59": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Env",1);
				break;
				case "step60": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Pattern",1);
				break;
				case "step61": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Env",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}	

	public synchronized void Staff_Top_Up_VIP_Csagent(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 39;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("topUp_Button"), "TopUp_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step9": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount_Dropdown");
				break;
				case "step11": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("Topup_Type"), "Topup_Type", "Topup_Type", 1);
				break;					
				case "step12": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount_Dropdown");
				break;
				case "step13": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount", "Amount", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("Auto_Topup_Checkbox"), "Auto_Topup_Checkbox");
				break;					
				case "step15": stepStatus[step] = WebCheckboxON(staff_TopUp.staff_TopUp_Page("Auto_Topup_Checkbox"), "Auto_Topup_Checkbox");
				break;
				case "step16": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("Threshold_Limit"), "Threshold_Limit");
				break;					
				case "step17": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("Threshold_Limit"), "Threshold_Limit", "Threshold_Limit", 1);
				break;					
				case "step18": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("Frequency"), "Frequency", "Frequency", 1);
				break;
				case "step19": stepStatus[step] = waitUntilListLoads(staff_TopUp.staff_TopUp_Page("bundle_Dropdown"), "Bundle");
				break;			
				case "step20": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("bundle_Dropdown"), "Bundle", "Bundle", 1);
				break;
				case "step21": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("Bundle_Auto_Renewal"), "AutoRenewal");
				break;
				case "step22": stepStatus[step] = WebCheckboxON(staff_TopUp.staff_TopUp_Page("Bundle_Auto_Renewal"), "AutoRenewal");
				break;
				case "step23": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("radio_Account_Balance"), "Account_Balance_Radio_Button");
				break;
				case "step24": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("radio_Account_Balance"), "Account_Balance_Radio_Button");
				break;
				case "step25": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("ticketID_TextBox"), "TicketID");
				break;
				case "step26": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("ticketID_TextBox"), "TicketID", "TicketID", 1);
				break;
				case "step27": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("reason_Dropdown"), "Reason", "Reason", 1);
				break;
				case "step28": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("comments_TextBox_Staff"), "Comments");
				break;
				case "step29": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("comments_TextBox_Staff"), "Comments", "Comments", 1);
				break;
				case "step30": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("submit_Button"), "Submit");
				break;
				case "step31": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("approve_Button"), "Approve");
				break;
				case "step32": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("Popup_Alert_1"), "Popup_Alert");
				break;
				case "step33": stepStatus[step] = WebElementMultilineTextCompare(staff_TopUp.staff_TopUp_Page("Popup_Alert_1"), "Popup_Alert_1", "Alert_Message_Static_1", 1);
				break;
				case "step34": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("Yes_button_1"), "Yes");
				break;
				case "step35": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("Popup_Alert_2"), "Popup_Alert");
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(staff_TopUp.staff_TopUp_Page("Popup_Alert_2"), "Popup_Alert_2", "Alert_Message_Static_2", 1);
				break;
				case "step37": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("Yes_button_2"), "Yes");
				break;			
				case "step38": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("confirm_Message"), "Confirm_Message");
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(staff_TopUp.staff_TopUp_Page("confirm_Message"), "Confirm_Message", "Confirm_Message", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postcond_VIP_Topup_Agent(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=23;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_TopupAmount", "Condition_Trnstafftopup", "Amount", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Bundlecode", "Condition_Trnstafftopup", "Bundlecode", 1);
				break;					
				case "step3": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Ticketid", "Condition_Trnstafftopup", "Ticketid", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Subscribertype", "Condition_Trnstafftopup", "Subscribertype", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Isbundlerenewal", "Condition_Trnstafftopup", "Isbundlerenewal", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Paymenttype", "Condition_Trnstafftopup", "Paymenttype", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Reason", "Condition_Trnstafftopup", "Reason", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Comments", "Condition_Trnstafftopup", "Comments", 1);
				break;					
				case "step9": stepStatus[step] = SQLDBDateCompare("Table_Trnstafftopup", "Column_Requestdate", "Condition_Trnstafftopup", "dd/MM/yyyy", 1);
				break;
				case "step10": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trnstafftopup","Column_Submitedby","Condition_Trnstafftopup","Param","CS_Username",1);
				break;
				case "step11": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Trnstafftopup","Column_Submitedby","Condition_Trnstafftopup","Param","admin_Username",1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup","Column_Authorisedby","Condition_Trnstafftopup","Authorisedby",1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Authoriseddate", "Condition_Trnstafftopup", "Authoriseddate", 1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Process_Status", "Condition_Trnstafftopup", "Process_Status", 1);
				break;					
				case "step15": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Status", "Condition_Trnstafftopup", "Status", 1);
				break;
				case "step16": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_is_Autotopup", "Condition_Trnstafftopup", "IS_Autotopup", 1);
				break;
				case "step17": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Topup_Frequency", "Condition_Trnstafftopup", "Topup_Frequency", 1);
				break;
				case "step18": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Balance_Threshold", "Condition_Trnstafftopup", "Balance_Threshold", 1);
				break;
				case "step19": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Is_Immediate_Topup", "Condition_Trnstafftopup", "Is_Immediate_Topup", 1);
				break;					
				case "step20": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Disable_AutoTopup", "Condition_Trnstafftopup", "Disable_AutoTopup", 1);
				break;
				case "step21": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Oldbal", "Condition_Trnstafftopup", "Old_Balance", 1);
				break;
				case "step22": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Newbal", "Condition_Trnstafftopup", "New_Balance", 1);
				break;
				case "step23": stepStatus[step] = SQLDBSelect("Table_Trnstafftopup", "Column_Planid", "Condition_Trnstafftopup", "Planid", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Pending_Approval_VIPSTopup(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 28;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = storeSQLDBValueInEnv("Table_Name", "ID_COLUMN", "SQL_CONDITION","EnvVaraibleName_ID", 1);
				break;
				case "step2": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "pendingApproval_Body");
				break;
				case "step3": stepStatus[step] = checkScrollBarIsPresent(pendingApproval.pendingApproval_Page_ScrollBar("scrollBar_JS"), "pendingApproval");
				break;
				//case "step4": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("VIP_staff_TopUp"), "VIP_staff_TopUp");
				case "step4": stepStatus[step] = PerformAction_MoveToElementAndClick(pendingApproval.pendingApproval_Page("VIP_staff_TopUp"), "VIP_staff_TopUp");
				break;
				case "step5": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Text"), "pendingApproval_Text");
				break;
				case "step6": stepStatus[step] = enterEnvValueAndClickEnter(pendingApproval.pendingApproval_Page("requestID_Text"),"EnvVaraibleName_ID","RequestID",1);
				break;
				case "step7": stepStatus[step] = waitUntilExist(pendingApproval.Sim_Block_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_SimBlockRID", "EnvVaraibleName_ID"), "pendingApproval_MSISDN");
				break;
				case "step8": stepStatus[step] = WebElementClick(pendingApproval.Sim_Block_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_SimBlockRID", "EnvVaraibleName_ID"), "pendingApproval_MSISDN");
				break;
				case "step9": stepStatus[step] = sleepForFunction();
				break;
				case "step10": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("Stafftopup_Approve_Button"), "Approve_Button");
				break;
				case "step11": stepStatus[step] = WebListSelectedValue(pendingApproval.pendingApproval_Page("Stafftopup_Topup_Type"), "Topup_Type", "Topup_Type", 1);
				break;
				case "step12": stepStatus[step] = WebElementValueCompare(pendingApproval.pendingApproval_Page("Stafftopup_Amount"), "Amount", "Amount", 1);
				break;
				case "step13": stepStatus[step] = webElementSelectedStatus(pendingApproval.pendingApproval_Page("Auto_Topup_Checkbox"), "Auto_Topup_Checkbox");
				break;					
				case "step14": stepStatus[step] = WebElementValueCompare(pendingApproval.pendingApproval_Page("Threshold_Limit"), "Threshold_Limit", "Threshold_Limit", 1);
				break;
				case "step15": stepStatus[step] = WebListSelectedValue(pendingApproval.pendingApproval_Page("Frequency"), "Frequency", "Frequency", 1);
				break;				
				case "step16": stepStatus[step] = WebListSelectedValue(pendingApproval.pendingApproval_Page("Stafftopup_Bundle"), "Bundle", "Bundle", 1);
				break;
				case "step17": stepStatus[step] = webElementSelectedStatus(pendingApproval.pendingApproval_Page("Stafftopup_Bundle_Autorenewal"), "Bundle_Autoreneawal");
				break;
				case "step18": stepStatus[step] = webElementSelectedStatus(pendingApproval.pendingApproval_Page("radio_Account_Balance"), "radio_Account_Balance");
				break;
				case "step19": stepStatus[step] = WebElementValueCompare(pendingApproval.pendingApproval_Page("Stafftopup_TicketID"), "TicketID", "TicketID", 1);
				break;
				case "step20": stepStatus[step] = WebListSelectedValue(pendingApproval.pendingApproval_Page("Stafftopup_Reason"), "Reason", "Reason", 1);
				break;
				case "step21": stepStatus[step] = WebElementValueCompare(pendingApproval.pendingApproval_Page("Stafftopup_Comments"), "Comments", "Comments", 1);
				break;
				case "step22": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("Stafftopup_Approve_Button"), "Approve_Button");
				break;
				case "step23": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("Stafftopup_Reject_Button"), "Reject_Button");
				break;
				case "step24": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("Stafftopup_Reject_Button"), "Reject_Button");
				break;
				case "step25": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("Stafftopup_Confirm_Message"), "Confirm_Message");
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(pendingApproval.pendingApproval_Page("Stafftopup_Confirm_Message"), "Confirm_Message","Response_Message",1);
				break;
				case "step27": stepStatus[step] = setScrollBarOFF("Pending_Approval");
				break;
				case "step28": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("close_button"), "Subscriber Logout");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Enter_TFH_Details_Tooltip(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 18;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(topup_Failure_History.Topup_Failure_History_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(topup_Failure_History.Topup_Failure_History_Page("Load_Parameter"), "Load_Parameter", "MSISDN", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Topup_Failure_History"), "Topup_Failure_History");
				break;
				case "step11": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Topup_Failure_History"), "Topup_Failure_History");
				break;
				case "step12": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Topup_Mode"), "Topup_Mode");
				break;
				case "step13": stepStatus[step] = javaScriptDatePicker(topup_Failure_History.Topup_Failure_History_Page("From_Date"), "From_Date", "From_Date", 1);
				break;
				case "step14": stepStatus[step] = javaScriptDatePicker(topup_Failure_History.Topup_Failure_History_Page("To_Date"), "To_Date", "To_Date", 1);
				break;					
				case "step15": stepStatus[step] = WebListSelectTooltip(topup_Failure_History.Topup_Failure_History_Page("Topup_Mode"), "Topup_Mode", "Topup_Mode", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Submit"), "Submit");
				break;
				case "step17": stepStatus[step] = WebElementClick(topup_Failure_History.Topup_Failure_History_Page("Submit"), "Submit");
				break;
				case "step18": stepStatus[step] = waitUntilExist(topup_Failure_History.Topup_Failure_History_Page("Voucher_History_Table"), "Topup_History_Table");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Select_Multi_Topup_Bundle_2(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 34;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan");
				break;
				case "step2": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Plan"), "Sim_Plan", "Sim_Plan", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;					
				case "step4": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Topup"), "Topup_Radio_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type");
				break;
				case "step6": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Type"), "Topup_Type", "Topup_Type", 1);
				break;
				case "step7": stepStatus[step] = waitUntilListLoads(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value");
				break;
				case "step8": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Topup_Value"), "Topup_Value", "Topup_Value", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step10": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Topup_Submit"), "Topup_Submit");
				break;
				case "step11": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step12": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_1","Primary_Key_Column_Value_2","Secondary_Key_Column_Values_1",1);
				break;
				case "step13": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Bundle"), "Bundle_Radio_Button");
				break;
				case "step14": stepStatus[step] = waitUntilListLoads(send_Sim.Send_Sim_Page("Bundle_Dropdown"), "Bundle_Dropdown");
				break;
				case "step15": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Bundle_Dropdown"), "Bundle_Dropdown", "Bundle", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("NA_Auto_Renewal"), "NA_Auto_Renewal");
				break;
				case "step17": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("NA_Auto_Renewal"), "NA_Auto_Renewal");
				break;
				case "step18": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Months"), "Number_Of_Months");
				break;
				case "step19": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Months"), "Number_Of_Months", "Number_Of_Months", 1);
				break;
				case "step20": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundle_Submit"), "Bundle_Submit");
				break;
				case "step21": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Bundle_Submit"), "Bundle_Submit");
				break;
				case "step22": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step23": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_1","Primary_Key_Column_Value_3","Secondary_Key_Column_Values_2",1);
				break;
				case "step24": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("radio_Addon"), "Addon_Radio_Button");
				break;
				case "step25": stepStatus[step] = waitUntilListLoads(send_Sim.Send_Sim_Page("Addon_Dropdown"), "Addon_Dropdown");
				break;
				case "step26": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Addon_Dropdown"), "Addon_Dropdown", "Addon", 1);
				break;
				case "step27": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("INA_Auto_Renewal"), "INA_Auto_Renewal");
				break;
				case "step28": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("INA_Auto_Renewal"), "INA_Auto_Renewal");
				break;
				case "step29": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Months_Addon"), "Number_Of_Months_Addon");
				break;
				case "step30": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Months_Addon"), "Number_Of_Months_Addon", "Number_Of_Months_Addon", 1);
				break;
				case "step31": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Addon_Submit"), "Addon_Submit");
				break;
				case "step32": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Addon_Submit"), "Addon_Submit");
				break;
				case "step33": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table");
				break;
				case "step34": stepStatus[step] = webTableVerifyMultiDetailshashtable(send_Sim.Send_Sim_Page("Bundles_Table"), "Bundles_Table","Primary_Key_Column_Name_1","Primary_Key_Column_Name_2","Secondary_Key_Column_Names","Primary_Key_Column_Value_1","Primary_Key_Column_Value_4","Secondary_Key_Column_Values_3",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postcond_SS_Bundle_AR(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=14;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("Table_Name_mstFreeSimCustomer", "Column_Name_Count", "Condition_mstFreeSimCustomer", "Count_Value", 1);
				break;
				case "step2": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name_mstFreeSimCustomer","ColumnName_Transactionid","Condition_mstFreeSimCustomer","Env_Transactionid",1);
				break;
				case "step3": stepStatus[step] = ReplaceStringStoreEnvvar("Env_Transactionid","Env_Subscriberid","String_To_Replace","Replacement_String",1);
				break;
				case "step4": stepStatus[step] = SQLDBSelectMultiConditionEnvvar("TableName_mstFreeSimCustomerActivation", "Columnname_CardId", "Condition_mstFreeSimCustomerActivation", "Condition_mstFreeSimCustomerActivation_2","Env_Transactionid", "Column_Value_Cardid", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelectMultiConditionEnvvar("TableName_mstFreeSimCustomerActivation", "Columnname_Topupamount", "Condition_mstFreeSimCustomerActivation", "Condition_mstFreeSimCustomerActivation_2","Env_Transactionid", "Column_Value_Topupamount", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelectMultiConditionEnvvar("TableName_mstFreeSimCustomerActivation", "Columnname_NABundleAmount", "Condition_mstFreeSimCustomerActivation", "Condition_mstFreeSimCustomerActivation_3","Env_Transactionid", "Column_Value_NABundleAmount", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelectMultiConditionEnvvar("TableName_mstFreeSimCustomerActivation", "Columnname_INABundleAmount", "Condition_mstFreeSimCustomerActivation", "Condition_mstFreeSimCustomerActivation_4","Env_Transactionid", "Column_Value_INABundleAmount", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelectMultiConditionEnvvar("TableName_mstFreeSimCustomerActivation", "Columnname_Autorenewal", "Condition_mstFreeSimCustomerActivation", "Condition_mstFreeSimCustomerActivation_4","Env_Transactionid", "Column_Value_Autorenewal", 1);
				break;
				case "step9": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_mstFreeSimCustomerActivation", "Column_Name_Count", "Condition_mstFreeSimCustomerActivation", "Env_Transactionid", "Count_Value_mstFreeSimCustomerActivation", 1);
				break;
				case "step10": stepStatus[step] = ESHOPSQLDBSelectCompConditionEnvvar("TableName_tbleShopTransactionStatus", "Columnname_Subscriberid", "Condition_tbleShopTransactionStatus", "Env_Transactionid", "Env_Subscriberid", 1);
				break;						
				case "step11": stepStatus[step] = ESHOPSQLDBSelectConditionEnvvar("TableName_tblUserCardDetails", "Column_Name_Count", "Condition_tblUserCardDetails", "Env_Subscriberid", "Count_Value_tblUserCardDetails", 1);
				break;
				case "step12": stepStatus[step] = SQLDBDeleteConditionEnvvar("TableName_mstFreeSimCustomerActivation","Condition_mstFreeSimCustomerActivation","Env_Transactionid",1);
				break;
				case "step13": stepStatus[step] = ESHOPSQLDBDeleteConditionEnvvar("TableName_tbleShopTransactionStatus","Condition_tbleShopTransactionStatus","Env_Transactionid",1);
				break;
				case "step14": stepStatus[step] = ESHOPSQLDBDeleteConditionEnvvar("TableName_tblUserCardDetails","Condition_tblUserCardDetails","Env_Subscriberid",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Refund_Details(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 13;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(refund_Payment.Refund_Payment_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(refund_Payment.Refund_Payment_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step11": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step12": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid");
				break;
				case "step13": stepStatus[step] = webTableVerifyDetailshashtable_2(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Refund_Success(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 33;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step2": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step3": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step4": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step5": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step6": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step7": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid");
				break;
				case "step8": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name_bundle_payment","Column_Name_Transactionid","Condition_bundle_payment","Env_Transactionid",1);
				break;
				case "step9": stepStatus[step] = webTableVerifyDetailshashtableenvvar(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid","Primary_Key_Column_Name","Secondary_Key_Column_Names","Env_Transactionid","Secondary_Key_Column_Values",1);
				break;
				case "step10": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Refund_Bundle_Button"), "Refund_Bundle_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Confirm"), "Confirm");
				break;
				case "step12": stepStatus[step] = WebElementTextCompareEnvVar(refund_Payment.Refund_Payment_Page("TransactionID"), "TransactionID", "Env_Transactionid");
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Product"), "Product","Product",1);
				break;
				case "step14": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("OBA_Credit_Allocated"), "OBA_Credit_Allocated","OBA_Credit_Allocated",1);
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("OBA_Credit_Used"), "OBA_Credit_Used","OBA_Credit_Used",1);
				break;
				case "step16": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Tax_Amount"), "Tax_Amount","Attribute_Name","Attribute_Value_1",1);
				break;
				case "step17": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("VAT_Amount"), "VAT_Amount","Attribute_Name","Attribute_Value_2",1);
				break;
				case "step18": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Refund_Amount"), "Refund_Amount","Attribute_Name","Attribute_Value_3",1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(refund_Payment.Refund_Payment_Page("Refund_Amount"), "Refund_Amount", "Refund_Amount", 1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Total_Amount"), "Total_Amount","Total_Amount",1);
				break;
				case "step21": stepStatus[step] = WebListSelectedValue(refund_Payment.Refund_Payment_Page("Refund_To"), "Refund_To", "Refund_To_Initial", 1);
				break;					
				case "step22": stepStatus[step] = WebListSelect(refund_Payment.Refund_Payment_Page("Refund_To"), "Refund_To", "Refund_To", 1);
				break;
				case "step23": stepStatus[step] = waitUntilListLoads(refund_Payment.Refund_Payment_Page("Action"), "Action");
				break;
				case "step24": stepStatus[step] = WebListSelect(refund_Payment.Refund_Payment_Page("Action"), "Action", "Action", 1);
				break;					
				case "step25": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Reason"), "Refund_Reason");
				break;
				case "step26": stepStatus[step] = WebEditEnterText(refund_Payment.Refund_Payment_Page("Refund_Reason"), "Refund_Reason", "Refund_Reason", 1);
				break;					
				case "step27": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Confirm"), "Confirm");
				break;
				case "step28": stepStatus[step] = waitUntilDisappear(refund_Payment.Refund_Payment_Page("Loading_Image"), "Loading_Image");
				break;
				case "step29": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step30": stepStatus[step] = WebElementResxKeyValueStaticCompare(refund_Payment.Refund_Payment_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step31": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Close"), "Close");
				break;
				case "step32": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid");
				break;
				case "step33": stepStatus[step] = sleepForFunction();
				break;					
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Refund_Success_ACCBAL(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 33;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step2": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step3": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step4": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step5": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step6": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step7": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid");
				break;
				case "step8": stepStatus[step] = RetrieveRRBSValueStoresInEnvVar("Table_Name","Column_Name","Condition","Env_Transactionid",1);
				break;
				case "step9": stepStatus[step] = webTableVerifyDetailshashtableenvvar(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid","Primary_Key_Column_Name","Secondary_Key_Column_Names","Env_Transactionid","Secondary_Key_Column_Values",1);
				break;
				case "step10": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Refund_Bundle_Button"), "Refund_Bundle_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Confirm"), "Confirm");
				break;
				case "step12": stepStatus[step] = WebElementTextCompareEnvVar(refund_Payment.Refund_Payment_Page("TransactionID"), "TransactionID", "Env_Transactionid");
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Product"), "Product","Product",1);
				break;
				case "step14": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("OBA_Credit_Allocated"), "OBA_Credit_Allocated","OBA_Credit_Allocated",1);
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("OBA_Credit_Used"), "OBA_Credit_Used","OBA_Credit_Used",1);
				break;
				case "step16": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Tax_Amount"), "Tax_Amount","Attribute_Name","Attribute_Value_1",1);
				break;
				case "step17": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("VAT_Amount"), "VAT_Amount","Attribute_Name","Attribute_Value_2",1);
				break;
				case "step18": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Refund_Amount"), "Refund_Amount","Attribute_Name","Attribute_Value_3",1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(refund_Payment.Refund_Payment_Page("Refund_Amount"), "Refund_Amount", "Refund_Amount", 1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Total_Amount"), "Total_Amount","Total_Amount",1);
				break;
				case "step21": stepStatus[step] = WebListCheckSelectedExist(refund_Payment.Refund_Payment_Page("Refund_To"), "Refund_To", "Refund_To_Initial", 1,1);
				break;					
				case "step22": stepStatus[step] = WebListSelect(refund_Payment.Refund_Payment_Page("Refund_To"), "Refund_To", "Refund_To", 1);
				break;
				case "step23": stepStatus[step] = waitUntilListLoads(refund_Payment.Refund_Payment_Page("Action"), "Action");
				break;
				case "step24": stepStatus[step] = WebListSelect(refund_Payment.Refund_Payment_Page("Action"), "Action", "Action", 1);
				break;					
				case "step25": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Reason"), "Refund_Reason");
				break;
				case "step26": stepStatus[step] = WebEditEnterText(refund_Payment.Refund_Payment_Page("Refund_Reason"), "Refund_Reason", "Refund_Reason", 1);
				break;					
				case "step27": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Confirm"), "Confirm");
				break;
				case "step28": stepStatus[step] = waitUntilDisappear(refund_Payment.Refund_Payment_Page("Loading_Image"), "Loading_Image");
				break;
				case "step29": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step30": stepStatus[step] = WebElementResxKeyValueStaticCompare(refund_Payment.Refund_Payment_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step31": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Close"), "Close");
				break;
				case "step32": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid");
				break;
				case "step33": stepStatus[step] = sleepForFunction();
				break;					
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Allowance_ACCBAL(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 50;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step2": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step3": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step4": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step5": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step6": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step7": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid");
				break;
				case "step8": stepStatus[step] = RetrieveRRBSValueStoresInEnvVar("Table_Name","Column_Name","Condition","Env_Transactionid",1);
				break;
				case "step9": stepStatus[step] = webTableVerifyDetailshashtableenvvar(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid","Primary_Key_Column_Name","Secondary_Key_Column_Names","Env_Transactionid","Secondary_Key_Column_Values",1);
				break;
				case "step10": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Allowance_Button"), "Allowance_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Close"), "Close");
				break;
				case "step12": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Bundle_Type_Overview"), "Bundle_Type_Overview","Bundle_Type",1);
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Auto_Renewal_Status"), "Auto_Renewal_Status","Auto_Renewal_Status",1);
				break;
				case "step14": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Mode_Of_Renewal"), "Mode_Of_Renewal","Mode_Of_Renewal",1);
				break;
				case "step15": stepStatus[step] = webElementFutureDateCompare(refund_Payment.Refund_Payment_Page("Expiry_Date_Overview"),"Expiry_Date","DateFormatDisplayed","DaysToAdd",1);
				break;
				case "step16": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Voice_Tab"), "Voice_Tab");
				break;					
				case "step17": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Voice_MO_Onnet"), "Voice_MO_Onnet");
				break;					
				case "step18": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Voice_MO_Onnet"), "Voice_MO_Onnet","Voice_MO_Onnet",1);
				break;					
				case "step19": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Voice_MT_Onnet"), "Voice_MT_Onnet","Voice_MT_Onnet",1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Voice_MT_Offnet"), "Voice_MT_Offnet","Voice_MT_Offnet",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Voice_MO_Zone_1"), "Voice_MO_Zone_1","Voice_MO_Zone_1",1);
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Voice_MT_Zone_1"), "Voice_MT_Zone_1","Voice_MT_Zone_1",1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Voice_MO_Zone_2"), "Voice_MO_Zone_2","Voice_MO_Zone_2",1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Voice_MT_Zone_2"), "Voice_MT_Zone_2","Voice_MT_Zone_2",1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Voice_MO_Zone_3"), "Voice_MO_Zone_3","Voice_MO_Zone_3",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Voice_MT_Zone_3"), "Voice_MT_Zone_3","Voice_MT_Zone_3",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Voice_Roam"), "Voice_Roam","Voice_Roam",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Voice_Local_Roam"), "Voice_Local_Roam","Voice_Local_Roam",1);
				break;					
				case "step29": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("SMS_Tab"), "SMS_Tab");
				break;					
				case "step30": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("SMS_MO_Onnet"), "SMS_MO_Onnet");
				break;					
				case "step31": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("SMS_MO_Onnet"), "SMS_MO_Onnet","SMS_MO_Onnet",1);
				break;					
				case "step32": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("SMS_MT_Onnet"), "SMS_MT_Onnet","SMS_MT_Onnet",1);
				break;
				case "step33": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("SMS_MT_Offnet"), "SMS_MT_Offnet","SMS_MT_Offnet",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("SMS_MO_Zone_1"), "SMS_MO_Zone_1","SMS_MO_Zone_1",1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("SMS_MT_Zone_1"), "SMS_MT_Zone_1","SMS_MT_Zone_1",1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("SMS_MO_Zone_2"), "SMS_MO_Zone_2","SMS_MO_Zone_2",1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("SMS_MT_Zone_2"), "SMS_MT_Zone_2","SMS_MT_Zone_2",1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("SMS_MO_Zone_3"), "SMS_MO_Zone_3","SMS_MO_Zone_3",1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("SMS_MT_Zone_3"), "SMS_MT_Zone_3","SMS_MT_Zone_3",1);
				break;
				case "step40": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("SMS_Roam"), "SMS_Roam","SMS_Roam",1);
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("SMS_Local_Roam"), "SMS_Local_Roam","SMS_Local_Roam",1);
				break;						
				case "step42": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("VAS_Data_Tab"), "VAS_Data_Tab");
				break;					
				case "step43": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("VAS_Bundle_Balance"), "VAS_Bundle_Balance");
				break;					
				case "step44": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("VAS_Bundle_Balance"), "VAS_Bundle_Balance","VAS_Bundle_Balance",1);
				break;					
				case "step45": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("VAS_BParty_Number"), "VAS_BParty_Number","VAS_BParty_Number",1);
				break;
				case "step46": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("VAS_Add_On_Bundle"), "VAS_Add_On_Bundle","VAS_Add_On_Bundle",1);
				break;
				case "step47": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("VAS_Data"), "VAS_Data","VAS_Data",1);
				break;					
				case "step48": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Close"), "Close");
				break;
				case "step49": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid");
				break;
				case "step50": stepStatus[step] = sleepForFunction();
				break;					
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Refund_Details_ALLOW(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 25;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step2": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step3": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step4": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step5": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step6": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step7": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid");
				break;
				case "step8": stepStatus[step] = RetrieveRRBSValueStoresInEnvVar("Table_Name","Column_Name","Condition","Env_Transactionid",1);
				break;
				case "step9": stepStatus[step] = webTableVerifyDetailshashtableenvvar(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid","Primary_Key_Column_Name","Secondary_Key_Column_Names","Env_Transactionid","Secondary_Key_Column_Values",1);
				break;
				case "step10": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Allowance_Button"), "Allowance_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Confirm"), "Refund");
				break;
				case "step12": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Confirm"), "Refund");
				break;					
				case "step13": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("TransactionID"), "TransactionID");
				break;					
				case "step14": stepStatus[step] = WebElementTextCompareEnvVar(refund_Payment.Refund_Payment_Page("TransactionID"), "TransactionID", "Env_Transactionid");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Product"), "Product","Product",1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("OBA_Credit_Allocated"), "OBA_Credit_Allocated","OBA_Credit_Allocated",1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("OBA_Credit_Used"), "OBA_Credit_Used","OBA_Credit_Used",1);
				break;
				case "step18": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Tax_Amount"), "Tax_Amount","Attribute_Name","Attribute_Value_1",1);
				break;
				case "step19": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("VAT_Amount"), "VAT_Amount","Attribute_Name","Attribute_Value_2",1);
				break;
				case "step20": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Refund_Amount"), "Refund_Amount","Attribute_Name","Attribute_Value_3",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Total_Amount"), "Total_Amount","Total_Amount",1);
				break;
				case "step22": stepStatus[step] = WebListCheckSelectedExist(refund_Payment.Refund_Payment_Page("Refund_To"), "Refund_To", "Refund_To_Initial", 1,1);
				break;
				case "step23": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Close"), "Close");
				break;
				case "step24": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid");
				break;
				case "step25": stepStatus[step] = sleepForFunction();
				break;					
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Refund_Status(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 36;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step2": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step3": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step4": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step5": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step6": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step7": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid");
				break;
				case "step8": stepStatus[step] = RetrieveRRBSValueStoresInEnvVar("Table_Name","Column_Name","Condition","Env_Transactionid",1);
				break;
				case "step9": stepStatus[step] = webTableVerifyDetailshashtableenvvar(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid","Primary_Key_Column_Name","Secondary_Key_Column_Names","Env_Transactionid","Secondary_Key_Column_Values",1);
				break;
				case "step10": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Refund_Bundle_Button"), "Refund_Bundle_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Confirm"), "Confirm");
				break;
				case "step12": stepStatus[step] = WebElementTextCompareEnvVar(refund_Payment.Refund_Payment_Page("TransactionID"), "TransactionID", "Env_Transactionid");
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Product"), "Product","Product",1);
				break;
				case "step14": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("OBA_Credit_Allocated"), "OBA_Credit_Allocated","OBA_Credit_Allocated",1);
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("OBA_Credit_Used"), "OBA_Credit_Used","OBA_Credit_Used",1);
				break;
				case "step16": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Tax_Amount"), "Tax_Amount","Attribute_Name","Attribute_Value_1",1);
				break;
				case "step17": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("VAT_Amount"), "VAT_Amount","Attribute_Name","Attribute_Value_2",1);
				break;
				case "step18": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Refund_Amount"), "Refund_Amount","Attribute_Name","Attribute_Value_3",1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Total_Amount"), "Total_Amount","Total_Amount",1);
				break;
				case "step20": stepStatus[step] = WebListSelectedValue(refund_Payment.Refund_Payment_Page("Refund_To"), "Refund_To", "Refund_To_Initial", 1);
				break;					
				case "step21": stepStatus[step] = WebListSelect(refund_Payment.Refund_Payment_Page("Refund_To"), "Refund_To", "Refund_To", 1);
				break;
				case "step22": stepStatus[step] = waitUntilListLoads(refund_Payment.Refund_Payment_Page("Action"), "Action");
				break;
				case "step23": stepStatus[step] = WebListSelect(refund_Payment.Refund_Payment_Page("Action"), "Action", "Action", 1);
				break;					
				case "step24": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Reason"), "Refund_Reason");
				break;
				case "step25": stepStatus[step] = WebEditEnterText(refund_Payment.Refund_Payment_Page("Refund_Reason"), "Refund_Reason", "Refund_Reason", 1);
				break;					
				case "step26": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Confirm"), "Confirm");
				break;
				case "step27": stepStatus[step] = waitUntilDisappear(refund_Payment.Refund_Payment_Page("Loading_Image"), "Loading_Image");
				break;
				case "step28": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step29": stepStatus[step] = WebElementResxKeyValueStaticCompare(refund_Payment.Refund_Payment_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step30": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Close"), "Close");
				break;
				case "step31": stepStatus[step] = sleepForFunction();
				break;
				case "step32": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Status_Tab"), "Status_Tab");
				break;
				case "step33": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Status_Tab"), "Status_Tab");
				break;
				case "step34": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Status_Grid"), "Refund_Status_Grid");
				break;
				case "step35": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name_Refund","Column_Name_Requestid","Condition_Refund","Env_Requestid",1);
				break;
				case "step36": stepStatus[step] = webTableVerifyDetailshashtableenvvar(refund_Payment.Refund_Payment_Page("Refund_Status_Grid"), "Refund_Status_Grid","Primary_Key_Column_Name_2","Secondary_Key_Column_Names_2","Env_Requestid","Secondary_Key_Column_Values_2",1);
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Refund_Request_Det(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 64;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step2": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step3": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step4": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step5": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step6": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step7": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid");
				break;
				case "step8": stepStatus[step] = RetrieveRRBSValueStoresInEnvVar("Table_Name","Column_Name","Condition","Env_Transactionid",1);
				break;
				case "step9": stepStatus[step] = webTableVerifyDetailshashtableenvvar(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid","Primary_Key_Column_Name","Secondary_Key_Column_Names","Env_Transactionid","Secondary_Key_Column_Values",1);
				break;
				case "step10": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Refund_Bundle_Button"), "Refund_Bundle_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Confirm"), "Confirm");
				break;
				case "step12": stepStatus[step] = WebElementTextCompareEnvVar(refund_Payment.Refund_Payment_Page("TransactionID"), "TransactionID", "Env_Transactionid");
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Product"), "Product","Product",1);
				break;
				case "step14": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("OBA_Credit_Allocated"), "OBA_Credit_Allocated","OBA_Credit_Allocated",1);
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("OBA_Credit_Used"), "OBA_Credit_Used","OBA_Credit_Used",1);
				break;
				case "step16": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Tax_Amount"), "Tax_Amount","Attribute_Name","Attribute_Value_1",1);
				break;
				case "step17": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("VAT_Amount"), "VAT_Amount","Attribute_Name","Attribute_Value_2",1);
				break;
				case "step18": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Refund_Amount"), "Refund_Amount","Attribute_Name","Attribute_Value_3",1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Total_Amount"), "Total_Amount","Total_Amount",1);
				break;
				case "step20": stepStatus[step] = WebListSelectedValue(refund_Payment.Refund_Payment_Page("Refund_To"), "Refund_To", "Refund_To_Initial", 1);
				break;					
				case "step21": stepStatus[step] = WebListSelect(refund_Payment.Refund_Payment_Page("Refund_To"), "Refund_To", "Refund_To", 1);
				break;
				case "step22": stepStatus[step] = waitUntilListLoads(refund_Payment.Refund_Payment_Page("Action"), "Action");
				break;
				case "step23": stepStatus[step] = WebListSelect(refund_Payment.Refund_Payment_Page("Action"), "Action", "Action", 1);
				break;					
				case "step24": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Reason"), "Refund_Reason");
				break;
				case "step25": stepStatus[step] = WebEditEnterText(refund_Payment.Refund_Payment_Page("Refund_Reason"), "Refund_Reason", "Refund_Reason", 1);
				break;					
				case "step26": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Confirm"), "Confirm");
				break;
				case "step27": stepStatus[step] = waitUntilDisappear(refund_Payment.Refund_Payment_Page("Loading_Image"), "Loading_Image");
				break;
				case "step28": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step29": stepStatus[step] = WebElementResxKeyValueStaticCompare(refund_Payment.Refund_Payment_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step30": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Close"), "Close");
				break;
				case "step31": stepStatus[step] = sleepForFunction();
				break;
				case "step32": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Status_Tab"), "Status_Tab");
				break;
				case "step33": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Status_Tab"), "Status_Tab");
				break;
				case "step34": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Status_Grid"), "Refund_Status_Grid");
				break;
				case "step35": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name_Refund","Column_Name_Requestid","Condition_Refund","Env_Requestid",1);
				break;
				case "step36": stepStatus[step] = webTableVerifyDetailshashtableenvvar(refund_Payment.Refund_Payment_Page("Refund_Status_Grid"), "Refund_Status_Grid","Primary_Key_Column_Name_2","Secondary_Key_Column_Names_2","Env_Requestid","Secondary_Key_Column_Values_2",1);
				break;
				case "step37": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Request_Id_Link"), "Request_Id_Link");
				break;
				case "step38": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("RefundStatus_Close"), "RefundStatus_Close");
				break;
				case "step39": stepStatus[step] = sleepForFunction();
				break;
				case "step40": stepStatus[step] = WebElementTextCompareEnvVar(refund_Payment.Refund_Payment_Page("RefundStatus_RequestID"), "RequestID", "Env_Requestid");
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Status"), "RefundStatus_Status","Status",1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompareEnvVar(refund_Payment.Refund_Payment_Page("RefundStatus_TransactionID"), "TransactionID","Env_Transactionid");
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Topuptype"), "Topup_Type","Topup_Type",1);
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_OBACreditAllocated"), "OBA_Credit_Allocated","RefundStatus_OBACreditAllocated",1);
				break;
				case "step45": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_OBACreditUsed"), "OBA_Credit_Used","RefundStatus_OBACreditUsed",1);
				break;
				case "step46": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Taxamount"), "Tax_Amount","Tax_Amount",1);
				break;
				case "step47": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Vatamount"), "VAT_Amount","VAT_Amount",1);
				break;
				case "step48": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Refundamount"), "Refund_Amount","Refund_Amount",1);
				break;
				case "step49": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Refundto"), "Refund_To","Refund_To",1);
				break;
				case "step50": stepStatus[step] = WebElementValueCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Refundreason"), "Refund_Reason", "Refund_Reason", 1);
				break;
				case "step51": stepStatus[step] = WebElementValueCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Comments"), "Refund_Comments", "Refund_Comments", 1);
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Submittedby"), "SubmittedBy","SubmittedBy",1);
				break;
				case "step53": stepStatus[step] = webElementDateCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Submitteddate"), "dd/MM/yyyy");
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Reinitiationdate"), "Reinitiation_Date","Reinitiation_Date",1);
				break;					
				case "step55": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Authorisedby"), "AuthorisedBy","AuthorisedBy",1);
				break;
				case "step56": stepStatus[step] = webElementDateCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Authoriseddate"), "dd/MM/yyyy");
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Authoriseddate"), "Authorised_Date","Authorised_Date",1);
				break;					
				case "step58": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Rejectedby"), "RejectedBy","RejectedBy",1);
				break;
				case "step59": stepStatus[step] = webElementDateCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Rejecteddate"), "dd/MM/yyyy");
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Rejecteddate"), "Rejected_Date","Rejected_Date",1);
				break;
				case "step61": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Requestcount"), "Request_Count","Request_Count",1);
				break;					
				case "step62": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("RefundStatus_Close"), "Close");
				break;
				case "step63": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Status_Tab"), "Status_Tab");
				break;
				case "step64": stepStatus[step] = sleepForFunction();
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Refund_Allow_Success(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 34;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step2": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step3": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step4": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step5": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step6": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step7": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid");
				break;
				case "step8": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name_bundle_payment","Column_Name_Transactionid","Condition_bundle_payment","Env_Transactionid",1);
				break;
				case "step9": stepStatus[step] = webTableVerifyDetailshashtableenvvar(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid","Primary_Key_Column_Name","Secondary_Key_Column_Names","Env_Transactionid","Secondary_Key_Column_Values",1);
				break;
				case "step10": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Allowance_Button"), "Allowance_Button");
				break;
				case "step11": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Confirm"), "Refund");
				break;
				case "step12": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Confirm"), "Refund");
				break;					
				case "step13": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("TransactionID"), "TransactionID");
				break;					
				case "step14": stepStatus[step] = WebElementTextCompareEnvVar(refund_Payment.Refund_Payment_Page("TransactionID"), "TransactionID", "Env_Transactionid");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Product"), "Product","Product",1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("OBA_Credit_Allocated"), "OBA_Credit_Allocated","OBA_Credit_Allocated",1);
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("OBA_Credit_Used"), "OBA_Credit_Used","OBA_Credit_Used",1);
				break;
				case "step18": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Tax_Amount"), "Tax_Amount","Attribute_Name","Attribute_Value_1",1);
				break;
				case "step19": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("VAT_Amount"), "VAT_Amount","Attribute_Name","Attribute_Value_2",1);
				break;
				case "step20": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Refund_Amount"), "Refund_Amount","Attribute_Name","Attribute_Value_3",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Total_Amount"), "Total_Amount","Total_Amount",1);
				break;
				case "step22": stepStatus[step] = WebListSelectedValue(refund_Payment.Refund_Payment_Page("Refund_To"), "Refund_To", "Refund_To_Initial", 1);
				break;					
				case "step23": stepStatus[step] = WebListSelect(refund_Payment.Refund_Payment_Page("Refund_To"), "Refund_To", "Refund_To", 1);
				break;
				case "step24": stepStatus[step] = waitUntilListLoads(refund_Payment.Refund_Payment_Page("Action"), "Action");
				break;
				case "step25": stepStatus[step] = WebListSelect(refund_Payment.Refund_Payment_Page("Action"), "Action", "Action", 1);
				break;					
				case "step26": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Reason"), "Refund_Reason");
				break;
				case "step27": stepStatus[step] = WebEditEnterText(refund_Payment.Refund_Payment_Page("Refund_Reason"), "Refund_Reason", "Refund_Reason", 1);
				break;					
				case "step28": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Confirm"), "Confirm");
				break;
				case "step29": stepStatus[step] = waitUntilDisappear(refund_Payment.Refund_Payment_Page("Loading_Image"), "Loading_Image");
				break;
				case "step30": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step31": stepStatus[step] = WebElementResxKeyValueStaticCompare(refund_Payment.Refund_Payment_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step32": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Close"), "Close");
				break;
				case "step33": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid");
				break;
				case "step34": stepStatus[step] = sleepForFunction();
				break;					
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Refund_Success_CS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 37;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(refund_Payment.Refund_Payment_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(refund_Payment.Refund_Payment_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step11": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step12": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid");
				break;
				case "step13": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name_bundle_payment","Column_Name_Transactionid","Condition_bundle_payment","Env_Transactionid",1);
				break;
				case "step14": stepStatus[step] = webTableVerifyDetailshashtableenvvar(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid","Primary_Key_Column_Name","Secondary_Key_Column_Names","Env_Transactionid","Secondary_Key_Column_Values",1);
				break;
				case "step15": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Refund_Bundle_Button"), "Refund_Bundle_Button");
				break;
				case "step16": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Confirm"), "Confirm");
				break;
				case "step17": stepStatus[step] = WebElementTextCompareEnvVar(refund_Payment.Refund_Payment_Page("TransactionID"), "TransactionID", "Env_Transactionid");
				break;
				case "step18": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Product"), "Product","Product",1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("OBA_Credit_Allocated"), "OBA_Credit_Allocated","OBA_Credit_Allocated",1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("OBA_Credit_Used"), "OBA_Credit_Used","OBA_Credit_Used",1);
				break;
				case "step21": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Tax_Amount"), "Tax_Amount","Attribute_Name","Attribute_Value_1",1);
				break;
				case "step22": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("VAT_Amount"), "VAT_Amount","Attribute_Name","Attribute_Value_2",1);
				break;
				case "step23": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Refund_Amount"), "Refund_Amount","Attribute_Name","Attribute_Value_3",1);
				break;
				case "step24": stepStatus[step] = WebEditEnterText(refund_Payment.Refund_Payment_Page("Refund_Amount"), "Refund_Amount", "Refund_Amount", 1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Total_Amount"), "Total_Amount","Total_Amount",1);
				break;
				case "step26": stepStatus[step] = WebListSelectedValue(refund_Payment.Refund_Payment_Page("Refund_To"), "Refund_To", "Refund_To_Initial", 1);
				break;					
				case "step27": stepStatus[step] = WebListSelect(refund_Payment.Refund_Payment_Page("Refund_To"), "Refund_To", "Refund_To", 1);
				break;
				case "step28": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Reason"), "Refund_Reason");
				break;
				case "step29": stepStatus[step] = WebEditEnterText(refund_Payment.Refund_Payment_Page("Refund_Reason"), "Refund_Reason", "Refund_Reason", 1);
				break;					
				case "step30": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Confirm"), "Confirm");
				break;
				case "step31": stepStatus[step] = waitUntilDisappear(refund_Payment.Refund_Payment_Page("Loading_Image"), "Loading_Image");
				break;
				case "step32": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step33": stepStatus[step] = WebElementResxKeyValueStaticCompare(refund_Payment.Refund_Payment_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step34": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Close"), "Close");
				break;
				case "step35": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid");
				break;
				case "step36": stepStatus[step] = sleepForFunction();
				break;
				case "step37": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name", "Condition", "Column_Value", 1);
				break;					
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_BP_CC_AIO_USA(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=73;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step11": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleType"), "Bundle Type", "BundleType", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No");
				break;
				case "step15": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstBundleNo"), "Bundle No", "BundleNo", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months");
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstNoOfMonths"), "No of Months", "NoOfMonths", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step19": stepStatus[step] = WebCheckboxON(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step20": stepStatus[step] = WebCheckboxOFF(online_TopUp.AllInOne_TopUp_Page("chkAllinoneAutorenewal"), "AutoRenewal");
				break;
				case "step21": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step22": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnplanSubmit"), "Submit");
				break;
				case "step23": stepStatus[step] = sleepForFunction();
				break;
				case "step24": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step25": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step26": stepStatus[step] = webTableRadioButton(online_TopUp.AllInOne_TopUp_Page("AIO_Paymnet_Type"), "Payment_Type", 1);
				break;
				case "step27": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step28": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type","Card_Type",1);
				break;
				case "step29": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card");
				break;
				case "step30": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card", "Name_On_Card", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber1_TextBox"), "Card_Number_1", "Card_Number_1", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber2_TextBox"), "Card_Number_2", "Card_Number_2", 1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber3_TextBox"), "Card_Number_3", "Card_Number_3", 1);
				break;
				case "step34": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber4_TextBox"), "Card_Number_4", "Card_Number_4", 1);
				break;
				case "step35": stepStatus[step] = javaScriptDatePicker(online_TopUp.Online_TopUp_Page("expiryDate_TextBox"), "Expiry_Date", "Expiry_Date", 1);
				break;
				case "step36": stepStatus[step] = JavaScriptWebEditEnterText(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV_Number", "CVV_Number", 1);
				break;
				case "step37": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Bundle_Table"), "Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step38": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step40": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number", "House_Number_Initial", 1);
				break;					
				case "step41": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("labelstreetName"), "StreetName","Street_Initial",1);
				break;
				case "step42": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("lblcityName"), "City","City_Initial",1);
				break;
				case "step43": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("apartmentNo_Textbox"), "Apartment_Number","Apartment_Number",1);
				break;					
				case "step44": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtpostCode"), "Postcode", "Postcode", 1);
				break;
				case "step45": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconAddressSearch"), "Search Icon");
				break;
				case "step46": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step47": stepStatus[step] = WebListSelectFromGAFEnv(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","Address",1);
				break;
				case "step48": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step49": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number");
				break;
				case "step50": stepStatus[step] = WebElementValueCompareFromGAF(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number","House_Number",1);
				break;
				case "step51": stepStatus[step] = WebElementValueCompareFromGAF(online_TopUp.AllInOne_TopUp_Page("labelstreetName"), "StreetName","View_Street",1);
				break;
				case "step52": stepStatus[step] = WebElementValueCompareFromGAF(online_TopUp.AllInOne_TopUp_Page("lblcityName"), "City","View_City",1);
				break;
				case "step53": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblpostCode"), "Postcode","View_Postcode",1);
				break;
				case "step54": stepStatus[step] = WebListSelectFromGAFEnv(online_TopUp.AllInOne_TopUp_Page("list_State"), "State","State",1);
				break;				
				case "step55": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step56": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step57": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table");
				break;
				case "step58": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit");
				break;
				case "step59": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total_Amount","Total_Amount",1);
				break;
				case "step61": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("VAT_Amount"), "VAT_Amount","VAT_Amount",1);
				break;
				case "step62": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("TAX_Amount"), "TAX_Amount","TAX_Amount",1);
				break;
				case "step63": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit");
				break;
				case "step64": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message");
				break;
				case "step65": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step66": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_MSISDN"), "Confirm_MSISDN","Mobile_Number",1);
				break;
				case "step67": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_Amount"), "Confirm_Amount","Confirm_Amount",1);
				break;
				case "step68": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_VAT_Amount"), "Confirm_VAT_Amount","Confirm_VAT_Amount",1);
				break;
				case "step69": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_TAX_Amount"), "Confirm_TAX_Amount","Confirm_TAX_Amount",1);
				break;
				case "step70": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Pattern",1);
				break;
				case "step71": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Env",1);
				break;
				case "step72": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Pattern",1);
				break;
				case "step73": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Env",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Navigate_Config_Settings_USA(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 9;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.settings_Page("country_Dropdown_USA"), "country_Dropdown_USA");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.settings_Page("country_Dropdown_USA"), "country_Dropdown_USA");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.settings_Page("country_DropdownValues_USA"), "Country_Dropdown", "CountryBrand_DDValue", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Pending_Approval_Refund_Bundle(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 36;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = storeSQLDBValueInEnv("Table_Name", "ID_COLUMN", "SQL_CONDITION","EnvVaraibleName_ID", 1);
				break;
				case "step2": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "pendingApproval_Body");
				break;
				case "step3": stepStatus[step] = checkScrollBarIsPresent(pendingApproval.pendingApproval_Page_ScrollBar("scrollBar_JS"), "pendingApproval");
				break;
				case "step4": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step5": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Text"), "pendingApproval_Text");
				break;
				case "step6": stepStatus[step] = enterEnvValueAndClickEnter(pendingApproval.pendingApproval_Page("requestID_Text"),"EnvVaraibleName_ID","RequestID",1);
				break;
				case "step7": stepStatus[step] = waitUntilExist(pendingApproval.Sim_Block_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_SimBlockRID","EnvVaraibleName_ID"), "pendingApproval_MSISDN");
				break;
				case "step8": stepStatus[step] = WebElementClick(pendingApproval.Sim_Block_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_SimBlockRID", "EnvVaraibleName_ID"), "pendingApproval_MSISDN");
				break;
				case "step9": stepStatus[step] = sleepForFunction();
				break;
				case "step10": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("Refund_Payment_Accept_Button"), "Accept");
				break;
				case "step11": stepStatus[step] = WebElementTextCompareEnvVar(pendingApproval.pendingApproval_Page("Refund_Payment_RequestID"), "Refund_Payment_RequestID", "getIDFromTable");
				break;
				case "step12": stepStatus[step] = WebElementTextCompareEnvVar(pendingApproval.pendingApproval_Page("Refund_Payment_Transaction_ID"), "Refund_Payment_Transaction_ID", "Env_Transactionid");
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(pendingApproval.pendingApproval_Page("Refund_Payment_Topup_Type"), "Refund_Payment_Topup_Type","Topup_Type",1);
				break;
				case "step14": stepStatus[step] = WebElementTextCompare(pendingApproval.pendingApproval_Page("Refund_Payment_OBA_Credit_Allocated"), "OBA_Credit_Allocated","OBA_Credit_Allocated",1);
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(pendingApproval.pendingApproval_Page("Refund_Payment_OBA_Credit_Used"), "OBA_Credit_Used","OBA_Credit_Used",1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(pendingApproval.pendingApproval_Page("Refund_Payment_Refund_To"), "Refund_Payment_Refund_To","Refund_To",1);
				break;
				case "step17": stepStatus[step] = WebElementAttributeValueCompare(pendingApproval.pendingApproval_Page("Refund_Payment_TAX_Amount"), "Tax_Amount","Attribute_Name","Attribute_Value_1",1);
				break;
				case "step18": stepStatus[step] = WebElementAttributeValueCompare(pendingApproval.pendingApproval_Page("Refund_Payment_VAT_Amount"), "VAT_Amount","Attribute_Name","Attribute_Value_2",1);
				break;
				case "step19": stepStatus[step] = WebElementAttributeValueCompare(pendingApproval.pendingApproval_Page("Refund_Payment_Refund_Amount"), "Refund_Amount","Attribute_Name","Attribute_Value_3",1);
				break;
				case "step20": stepStatus[step] = WebElementValueCompare(pendingApproval.pendingApproval_Page("Refund_Payment_Refund_Reason"), "Reason","Reason",1);
				break;					
				case "step21": stepStatus[step] = WebElementTextCompare(pendingApproval.pendingApproval_Page("Refund_Payment_Submitted_By"), "SubmittedBy","SubmittedBy",1);
				break;
				case "step22": stepStatus[step] = webElementDateCompare(pendingApproval.pendingApproval_Page("Refund_Payment_Submitted_Date"), "dd/MM/yyyy");
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(pendingApproval.pendingApproval_Page("Refund_Payment_Reinitiation_Date"), "Reinitiation_Date","Reinitiation_Date",1);
				break;					
				case "step24": stepStatus[step] = WebElementTextCompare(pendingApproval.pendingApproval_Page("Refund_Payment_Request_Count"), "Request_Count","Request_Count",1);
				break;					
				case "step25": stepStatus[step] = WebListSelect(pendingApproval.pendingApproval_Page("Refund_Payment_Action"), "Action", "Action", 1);
				break;					
				case "step26": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("Refund_Payment_Comments"), "Comments");
				break;
				case "step27": stepStatus[step] = WebEditEnterText(pendingApproval.pendingApproval_Page("Refund_Payment_Comments"), "Comments", "Comments", 1);
				break;	
				case "step28": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("Refund_Payment_Accept_Button"), "Accept");
				break;
				case "step29": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("Refund_Payment_Reject_Button"), "Reject_Button");
				break;
				case "step30": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("Refund_Payment_Reject_Button"), "Reject_Button");
				break;
				case "step31": stepStatus[step] = waitUntilDisappear(refund_Payment.Refund_Payment_Page("Loading_Image"), "Loading_Image");
				break;
				case "step32": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("Refund_Payment_Message"), "Confirm_Message");
				break;
				case "step33": stepStatus[step] = WebElementResxKeyValueStaticCompare(pendingApproval.pendingApproval_Page("Refund_Payment_Message"), "Confirm_Message","Response_Message",1);
				break;
				case "step34": stepStatus[step] = setScrollBarOFF("Pending_Approval");
				break;
				case "step35": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("close_button"), "Subscriber Logout");
				break;
				case "step36": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postcond_Refund_Bundle(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=2;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBDateCompare("Table_Name", "Column_Rejecteddate", "Condition", "dd/MM/yyyy", 1);
				break;
				case "step2": stepStatus[step] = SQLDBEnvironmentVariableCompare("Table_Name","Column_Rejectedby","Condition","Param","admin_Username",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Refund_Topup_Details(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 11;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step2": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step3": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step4": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step5": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step6": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step7": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid");
				break;
				case "step8": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Topup_Tab"), "Topup_Tab");
				break;
				case "step9": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Topup_Grid"), "Refund_Topup_Grid");
				break;
				case "step10": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name_Msttopup","Column_Name_Transactionid","Condition_Msttopup","Env_Transactionid",1);
				break;
				case "step11": stepStatus[step] = webTableVerifyDetailshashtableenvvar(refund_Payment.Refund_Payment_Page("Refund_Topup_Grid"), "Refund_Topup_Grid","Primary_Key_Column_Name","Secondary_Key_Column_Names","Env_Transactionid","Secondary_Key_Column_Values",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Pre_AllinoneTopup_Eshop(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=4;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = EshopSQLDBUpdate("TBL_FEATUREGATEWAYMAPPING","PRIMARYGATEWAYVENDOR_COLUMNNAME","PRIMARYGATEWAYVENDOR_COLUMNVALUE","ESHOPSQLDB_UPDATE_CONDITION",1);
				break;
				case "step2": stepStatus[step] = EshopSQLDBDelete("TBL_USERCARDDETAILS","ESHOPSQLDB_DELETE_CONDITION",1);
				break;
				case "step3": stepStatus[step] = EshopSQLDBDelete("TBL_WPTRASACTIONLOG","ESHOPSQLDB_DELETE_CONDITION",1);
				break;
				case "step4": stepStatus[step] = EshopSQLDBDelete("TABLE_NAME_tbleShopTransactionStatus","ESHOPSQLDB_DELETE_CONDITION",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Refund_Topup_Success(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 31;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step2": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step3": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step4": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step5": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step6": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step7": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid");
				break;
				case "step8": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Topup_Tab"), "Topup_Tab");
				break;
				case "step9": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Topup_Grid"), "Refund_Topup_Grid");
				break;
				case "step10": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name_Msttopup","Column_Name_Transactionid","Condition_Msttopup","Env_Transactionid",1);
				break;
				case "step11": stepStatus[step] = webTableVerifyDetailshashtableenvvar(refund_Payment.Refund_Payment_Page("Refund_Topup_Grid"), "Refund_Topup_Grid","Primary_Key_Column_Name","Secondary_Key_Column_Names","Env_Transactionid","Secondary_Key_Column_Values",1);
				break;
				case "step12": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Refund_Topup_Button"), "Refund_Topup_Button");
				break;
				case "step13": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Topup_Confirm"), "Topup_Confirm");
				break;
				case "step14": stepStatus[step] = WebElementTextCompareEnvVar(refund_Payment.Refund_Payment_Page("Topup_TransactionID"), "TransactionID", "Env_Transactionid");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Topup_Product"), "Product","Product",1);
				break;
				case "step16": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Topup_Tax_Amount"), "Tax_Amount","Attribute_Name","Attribute_Value_1",1);
				break;
				case "step17": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Topup_VAT_Amount"), "VAT_Amount","Attribute_Name","Attribute_Value_2",1);
				break;
				case "step18": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Topup_Refund_Amount"), "Refund_Amount","Attribute_Name","Attribute_Value_3",1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(refund_Payment.Refund_Payment_Page("Topup_Tax_Amount"), "Tax_Amount", "Tax_Amount_Final", 1);
				break;
				case "step20": stepStatus[step] = WebEditEnterText(refund_Payment.Refund_Payment_Page("Topup_VAT_Amount"), "VAT_Amount", "VAT_Amount_Final", 1);
				break;
				case "step21": stepStatus[step] = WebEditEnterText(refund_Payment.Refund_Payment_Page("Topup_Refund_Amount"), "Refund_Amount", "Refund_Amount", 1);
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Topup_Total_Amount"), "Total_Amount","Total_Amount",1);
				break;
				case "step23": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Topup_Refund_Reason"), "Refund_Reason");
				break;
				case "step24": stepStatus[step] = WebEditEnterText(refund_Payment.Refund_Payment_Page("Topup_Refund_Reason"), "Refund_Reason", "Refund_Reason", 1);
				break;					
				case "step25": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Topup_Confirm"), "Confirm");
				break;
				case "step26": stepStatus[step] = waitUntilDisappear(refund_Payment.Refund_Payment_Page("Topup_Loading_Image"), "Loading_Image");
				break;
				case "step27": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Topup_Confirm_Message"), "Confirm_Message");
				break;
				case "step28": stepStatus[step] = WebElementResxKeyValueStaticCompare(refund_Payment.Refund_Payment_Page("Topup_Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step29": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Topup_Close"), "Close");
				break;
				case "step30": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Topup_Grid"), "Refund_Topup_Grid");
				break;
				case "step31": stepStatus[step] = sleepForFunction();
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Refund_Topup_Status(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 60;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step2": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step3": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step4": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step5": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step6": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step7": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid");
				break;
				case "step8": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Topup_Tab"), "Topup_Tab");
				break;
				case "step9": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Topup_Grid"), "Refund_Topup_Grid");
				break;
				case "step10": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name_Msttopup","Column_Name_Transactionid","Condition_Msttopup","Env_Transactionid",1);
				break;
				case "step11": stepStatus[step] = webTableVerifyDetailshashtableenvvar(refund_Payment.Refund_Payment_Page("Refund_Topup_Grid"), "Refund_Topup_Grid","Primary_Key_Column_Name","Secondary_Key_Column_Names","Env_Transactionid","Secondary_Key_Column_Values",1);
				break;
				case "step12": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Refund_Topup_Button"), "Refund_Topup_Button");
				break;
				case "step13": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Topup_Confirm"), "Topup_Confirm");
				break;
				case "step14": stepStatus[step] = WebElementTextCompareEnvVar(refund_Payment.Refund_Payment_Page("Topup_TransactionID"), "TransactionID", "Env_Transactionid");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Topup_Product"), "Product","Product",1);
				break;
				case "step16": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Topup_Tax_Amount"), "Tax_Amount","Attribute_Name","Attribute_Value_1",1);
				break;
				case "step17": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Topup_VAT_Amount"), "VAT_Amount","Attribute_Name","Attribute_Value_2",1);
				break;
				case "step18": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Topup_Refund_Amount"), "Refund_Amount","Attribute_Name","Attribute_Value_3",1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(refund_Payment.Refund_Payment_Page("Topup_Refund_Amount"), "Refund_Amount", "Refund_Amount", 1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Topup_Total_Amount"), "Total_Amount","Total_Amount",1);
				break;
				case "step21": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Topup_Refund_Reason"), "Refund_Reason");
				break;
				case "step22": stepStatus[step] = WebEditEnterText(refund_Payment.Refund_Payment_Page("Topup_Refund_Reason"), "Refund_Reason", "Refund_Reason", 1);
				break;					
				case "step23": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Topup_Confirm"), "Confirm");
				break;
				case "step24": stepStatus[step] = waitUntilDisappear(refund_Payment.Refund_Payment_Page("Topup_Loading_Image"), "Loading_Image");
				break;
				case "step25": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Topup_Confirm_Message"), "Confirm_Message");
				break;
				case "step26": stepStatus[step] = WebElementResxKeyValueStaticCompare(refund_Payment.Refund_Payment_Page("Topup_Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step27": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Topup_Close"), "Close");
				break;
				case "step28": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Topup_Grid"), "Refund_Topup_Grid");
				break;
				case "step29": stepStatus[step] = sleepForFunction();
				break;
				case "step30": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Status_Tab"), "Status_Tab");
				break;
				case "step31": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Status_Tab"), "Status_Tab");
				break;
				case "step32": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Status_Grid"), "Refund_Status_Grid");
				break;
				case "step33": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name_Refund","Column_Name_Requestid","Condition_Refund","Env_Requestid",1);
				break;
				case "step34": stepStatus[step] = webTableVerifyDetailshashtableenvvar(refund_Payment.Refund_Payment_Page("Refund_Status_Grid"), "Refund_Status_Grid","Primary_Key_Column_Name_2","Secondary_Key_Column_Names_2","Env_Requestid","Secondary_Key_Column_Values_2",1);
				break;
				case "step35": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Request_Id_Link"), "Request_Id_Link");
				break;
				case "step36": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("RefundStatus_Close"), "RefundStatus_Close");
				break;
				case "step37": stepStatus[step] = sleepForFunction();
				break;
				case "step38": stepStatus[step] = WebElementTextCompareEnvVar(refund_Payment.Refund_Payment_Page("RefundStatus_RequestID"), "RequestID", "Env_Requestid");
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Status"), "RefundStatus_Status","Status",1);
				break;
				case "step40": stepStatus[step] = WebElementTextCompareEnvVar(refund_Payment.Refund_Payment_Page("RefundStatus_TransactionID"), "TransactionID","Env_Transactionid");
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Topuptype"), "Topup_Type","Topup_Type",1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Taxamount"), "Tax_Amount","Tax_Amount",1);
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Vatamount"), "VAT_Amount","VAT_Amount",1);
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Refundamount"), "Refund_Amount","Refund_Amount",1);
				break;
				case "step45": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Refundto"), "Refund_To","Refund_To",1);
				break;
				case "step46": stepStatus[step] = WebElementValueCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Refundreason"), "Refund_Reason", "Refund_Reason", 1);
				break;
				case "step47": stepStatus[step] = WebElementValueCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Comments"), "Refund_Comments", "Refund_Comments", 1);
				break;
				case "step48": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Submittedby"), "SubmittedBy","SubmittedBy",1);
				break;
				case "step49": stepStatus[step] = webElementDateCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Submitteddate"), "dd/MM/yyyy");
				break;
				case "step50": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Reinitiationdate"), "Reinitiation_Date","Reinitiation_Date",1);
				break;					
				case "step51": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Authorisedby"), "AuthorisedBy","AuthorisedBy",1);
				break;
				case "step52": stepStatus[step] = webElementDateCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Authoriseddate"), "dd/MM/yyyy");
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Authoriseddate"), "Authorised_Date","Authorised_Date",1);
				break;					
				case "step54": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Rejectedby"), "RejectedBy","RejectedBy",1);
				break;
				case "step55": stepStatus[step] = webElementDateCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Rejecteddate"), "dd/MM/yyyy");
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Rejecteddate"), "Rejected_Date","Rejected_Date",1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Requestcount"), "Request_Count","Request_Count",1);
				break;					
				case "step58": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("RefundStatus_Close"), "Close");
				break;
				case "step59": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Status_Tab"), "Status_Tab");
				break;
				case "step60": stepStatus[step] = sleepForFunction();
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Refund_Topup_CS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 35;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(refund_Payment.Refund_Payment_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(refund_Payment.Refund_Payment_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step11": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step12": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid");
				break;
				case "step13": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Topup_Tab"), "Topup_Tab");
				break;
				case "step14": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Topup_Grid"), "Refund_Topup_Grid");
				break;
				case "step15": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name_Msttopup","Column_Name_Transactionid","Condition_Msttopup","Env_Transactionid",1);
				break;
				case "step16": stepStatus[step] = webTableVerifyDetailshashtableenvvar(refund_Payment.Refund_Payment_Page("Refund_Topup_Grid"), "Refund_Topup_Grid","Primary_Key_Column_Name","Secondary_Key_Column_Names","Env_Transactionid","Secondary_Key_Column_Values",1);
				break;
				case "step17": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Refund_Topup_Button"), "Refund_Topup_Button");
				break;
				case "step18": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Topup_Confirm"), "Topup_Confirm");
				break;
				case "step19": stepStatus[step] = WebElementTextCompareEnvVar(refund_Payment.Refund_Payment_Page("Topup_TransactionID"), "TransactionID", "Env_Transactionid");
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Topup_Product"), "Product","Product",1);
				break;
				case "step21": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Topup_Tax_Amount"), "Tax_Amount","Attribute_Name","Attribute_Value_1",1);
				break;
				case "step22": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Topup_VAT_Amount"), "VAT_Amount","Attribute_Name","Attribute_Value_2",1);
				break;
				case "step23": stepStatus[step] = WebElementAttributeValueCompare(refund_Payment.Refund_Payment_Page("Topup_Refund_Amount"), "Refund_Amount","Attribute_Name","Attribute_Value_3",1);
				break;
				case "step24": stepStatus[step] = WebEditEnterText(refund_Payment.Refund_Payment_Page("Topup_Refund_Amount"), "Refund_Amount", "Refund_Amount", 1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("Topup_Total_Amount"), "Total_Amount","Total_Amount",1);
				break;
				case "step26": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Topup_Refund_Reason"), "Refund_Reason");
				break;
				case "step27": stepStatus[step] = WebEditEnterText(refund_Payment.Refund_Payment_Page("Topup_Refund_Reason"), "Refund_Reason", "Refund_Reason", 1);
				break;					
				case "step28": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Topup_Confirm"), "Confirm");
				break;
				case "step29": stepStatus[step] = waitUntilDisappear(refund_Payment.Refund_Payment_Page("Topup_Loading_Image"), "Loading_Image");
				break;
				case "step30": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Topup_Confirm_Message"), "Confirm_Message");
				break;
				case "step31": stepStatus[step] = WebElementResxKeyValueStaticCompare(refund_Payment.Refund_Payment_Page("Topup_Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step32": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Topup_Close"), "Close");
				break;
				case "step33": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Topup_Grid"), "Refund_Topup_Grid");
				break;
				case "step34": stepStatus[step] = sleepForFunction();
				break;
				case "step35": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name", "Condition", "Column_Value", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Refund_Re_Initiate(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 46;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(refund_Payment.Refund_Payment_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(refund_Payment.Refund_Payment_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Load_Subscriber"), "Load_Subscriber");
				break;					
				case "step6": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step11": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step12": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Bundle_Grid"), "Refund_Bundle_Grid");
				break;
				case "step13": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Status_Tab"), "Status_Tab");
				break;
				case "step14": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Refund_Status_Grid"), "Refund_Status_Grid");
				break;
				case "step15": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name_Refund","Column_Name_Requestid","Condition_Refund","Env_Requestid",1);
				break;
				case "step16": stepStatus[step] = webTableVerifyDetailshashtableenvvar(refund_Payment.Refund_Payment_Page("Refund_Status_Grid"), "Refund_Status_Grid","Primary_Key_Column_Name_2","Secondary_Key_Column_Names_2","Env_Requestid","Secondary_Key_Column_Values_2",1);
				break;
				case "step17": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("Request_Id_Link"), "Request_Id_Link");
				break;
				case "step18": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("RefundStatus_Close"), "RefundStatus_Close");
				break;
				case "step19": stepStatus[step] = sleepForFunction();
				break;
				case "step20": stepStatus[step] = WebElementTextCompareEnvVar(refund_Payment.Refund_Payment_Page("RefundStatus_RequestID"), "RequestID", "Env_Requestid");
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Status"), "RefundStatus_Status","Status",1);
				break;
				case "step22": stepStatus[step] = WebElementTextCompareEnvVar(refund_Payment.Refund_Payment_Page("RefundStatus_TransactionID"), "TransactionID","Env_Transactionid");
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Topuptype"), "Topup_Type","Topup_Type",1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Taxamount"), "Tax_Amount","Tax_Amount",1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Vatamount"), "VAT_Amount","VAT_Amount",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Refundamount"), "Refund_Amount","Refund_Amount",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Refundto"), "Refund_To","Refund_To",1);
				break;
				case "step28": stepStatus[step] = WebElementValueCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Refundreason"), "Refund_Reason", "Refund_Reason", 1);
				break;
				case "step29": stepStatus[step] = WebElementValueCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Comments"), "Refund_Comments", "Refund_Comments", 1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Submittedby"), "SubmittedBy","SubmittedBy",1);
				break;
				case "step31": stepStatus[step] = webElementDateCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Submitteddate"), "dd/MM/yyyy");
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Reinitiationdate"), "Reinitiation_Date","Reinitiation_Date",1);
				break;					
				case "step33": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Authorisedby"), "AuthorisedBy","AuthorisedBy",1);
				break;
				case "step34": stepStatus[step] = webElementDateCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Authoriseddate"), "dd/MM/yyyy");
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Authoriseddate"), "Authorised_Date","Authorised_Date",1);
				break;					
				case "step36": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Rejectedby"), "RejectedBy","RejectedBy",1);
				break;
				case "step37": stepStatus[step] = webElementDateCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Rejecteddate"), "dd/MM/yyyy");
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Rejecteddate"), "Rejected_Date","Rejected_Date",1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Requestcount"), "Request_Count","Request_Count",1);
				break;
				case "step40": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("RefundStatus_Reinitiate"), "Re_Initiate");
				break;
				case "step41": stepStatus[step] = waitUntilDisappear(refund_Payment.Refund_Payment_Page("Reinitiate_Loading_Image"), "Loading_Image");
				break;
				case "step42": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("RefundStatus_Reinitiate_Message"), "Confirm_Message");
				break;
				case "step43": stepStatus[step] = WebElementResxKeyValueStaticCompare(refund_Payment.Refund_Payment_Page("RefundStatus_Reinitiate_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step44": stepStatus[step] = WebElementClick(refund_Payment.Refund_Payment_Page("RefundStatus_Close"), "Close");
				break;
				case "step45": stepStatus[step] = waitUntilExist(refund_Payment.Refund_Payment_Page("Status_Tab"), "Status_Tab");
				break;
				case "step46": stepStatus[step] = sleepForFunction();
				break;					
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Check_Reinitiated_Topup_Req(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 7;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = storeSQLDBValueInEnv("Table_Name", "ID_COLUMN", "SQL_CONDITION","EnvVaraibleName_ID", 1);
				break;
				case "step2": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "pendingApproval_Body");
				break;
				case "step3": stepStatus[step] = checkScrollBarIsPresent(pendingApproval.pendingApproval_Page_ScrollBar("scrollBar_JS"), "pendingApproval");
				break;
				case "step4": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("Refund_Payment"), "Refund_Payment");
				break;
				case "step5": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Text"), "pendingApproval_Text");
				break;
				case "step6": stepStatus[step] = enterEnvValueAndClickEnter(pendingApproval.pendingApproval_Page("requestID_Text"),"EnvVaraibleName_ID","RequestID",1);
				break;
				case "step7": stepStatus[step] = waitUntilExist(pendingApproval.Sim_Block_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_SimBlockRID", Runtimevalue.getProperty("getIDFromTable")), "pendingApproval_MSISDN");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Topup_VAT_TAX_AIO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=66;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step11": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup_Amount_Dropdown");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup_Amount_Dropdown", "Topup_Amount", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Topup_Submit");
				break;
				case "step15": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Topup_Submit");
				break;
				case "step16": stepStatus[step] = sleepForFunction();
				break;
				case "step17": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step19": stepStatus[step] = webTableRadioButton(online_TopUp.AllInOne_TopUp_Page("AIO_Paymnet_Type"), "Payment_Type", 1);
				break;
				case "step20": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step21": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type","Card_Type",1);
				break;
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card");
				break;
				case "step23": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card", "Name_On_Card", 1);
				break;
				case "step24": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber1_TextBox"), "Card_Number_1", "Card_Number_1", 1);
				break;
				case "step25": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber2_TextBox"), "Card_Number_2", "Card_Number_2", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber3_TextBox"), "Card_Number_3", "Card_Number_3", 1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber4_TextBox"), "Card_Number_4", "Card_Number_4", 1);
				break;
				case "step28": stepStatus[step] = javaScriptDatePicker(online_TopUp.Online_TopUp_Page("expiryDate_TextBox"), "Expiry_Date", "Expiry_Date", 1);
				break;
				case "step29": stepStatus[step] = JavaScriptWebEditEnterText(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV_Number", "CVV_Number", 1);
				break;
				case "step30": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Bundle_Table"), "Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number", "House_Number_Initial", 1);
				break;					
				case "step34": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("labelstreetName"), "StreetName","Street_Initial",1);
				break;
				case "step35": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("lblcityName"), "City","City_Initial",1);
				break;
				case "step36": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("apartmentNo_Textbox"), "Apartment_Number","Apartment_Number",1);
				break;					
				case "step37": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtpostCode"), "Postcode", "Postcode", 1);
				break;
				case "step38": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconAddressSearch"), "Search Icon");
				break;
				case "step39": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step40": stepStatus[step] = WebListSelectFromGAFEnv(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","Address",1);
				break;
				case "step41": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step42": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number");
				break;
				case "step43": stepStatus[step] = WebElementValueCompareFromGAF(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number","House_Number",1);
				break;
				case "step44": stepStatus[step] = WebElementValueCompareFromGAF(online_TopUp.AllInOne_TopUp_Page("labelstreetName"), "StreetName","View_Street",1);
				break;
				case "step45": stepStatus[step] = WebElementValueCompareFromGAF(online_TopUp.AllInOne_TopUp_Page("lblcityName"), "City","View_City",1);
				break;
				case "step46": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblpostCode"), "Postcode","View_Postcode",1);
				break;
				case "step47": stepStatus[step] = WebListSelectFromGAFEnv(online_TopUp.AllInOne_TopUp_Page("list_State"), "State","State",1);
				break;
				case "step48": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step49": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step50": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table");
				break;
				case "step51": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit");
				break;
				case "step52": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total_Amount","Total_Amount",1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("VAT_Amount"), "VAT_Amount","VAT_Amount",1);
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("TAX_Amount"), "TAX_Amount","TAX_Amount",1);
				break;
				case "step56": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit");
				break;
				case "step57": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message");
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_MSISDN"), "Confirm_MSISDN","Mobile_Number",1);
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_Amount"), "Confirm_Amount","Confirm_Amount",1);
				break;
				case "step61": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_VAT_Amount"), "Confirm_VAT_Amount","Confirm_VAT_Amount",1);
				break;
				case "step62": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("Confirm_TAX_Amount"), "Confirm_TAX_Amount","Confirm_TAX_Amount",1);
				break;
				case "step63": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Pattern",1);
				break;
				case "step64": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Reference_Number"), "Confirm_Reference_Number","Reference_Number_Env",1);
				break;
				case "step65": stepStatus[step] = WebElementDynamicStringVerify(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Pattern",1);
				break;
				case "step66": stepStatus[step] = WebElementTextStoreDynamicValue(online_TopUp.AllInOne_TopUp_Page("Confirm_Transaction_Number"), "Confirm_Transaction_Number","Transaction_Number_Env",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void NF_Activate_Deactivate(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 25;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(network_Feature.Network_Feature_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(network_Feature.Network_Feature_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(network_Feature.Network_Feature_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(network_Feature.Network_Feature_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(network_Feature.Network_Feature_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(network_Feature.Network_Feature_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(network_Feature.Network_Feature_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(network_Feature.Network_Feature_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(network_Feature.Network_Feature_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(network_Feature.Network_Feature_Page("Network_Feature"), "Network_Feature");
				break;
				case "step11": stepStatus[step] = WebElementClick(network_Feature.Network_Feature_Page("Network_Feature"), "Network_Feature");
				break;
				case "step12": stepStatus[step] = waitUntilExist(network_Feature.Network_Feature_Page("TicketID"), "TicketID");
				break;
				case "step13": stepStatus[step] = WebEditEnterText(network_Feature.Network_Feature_Page("TicketID"), "TicketID", "TicketID", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(network_Feature.Network_Feature_Page("Reason"), "Reason", "Reason", 1);
				break;					
				case "step15": stepStatus[step] = DynamicElementClick(network_Feature.Network_Feature_Page(network_Feature.Get_Network_Feature(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"Network_Feature",1)), network_Feature.Get_Network_Feature(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"Network_Feature",1));
				break;
				case "step16": stepStatus[step] = waitUntilDisappear(network_Feature.Network_Feature_Page("Loading_Image"), "Loading_Image");
				break;					
				case "step17": stepStatus[step] = waitUntilExist(network_Feature.Network_Feature_Page("Menu_Items"), "Menu_Items");
				break;
				case "step18": stepStatus[step] = WebElementClick(network_Feature.Network_Feature_Page("Menu_Items"), "Menu_Items");
				break;
				case "step19": stepStatus[step] = waitUntilExist(network_Feature.Network_Feature_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step20": stepStatus[step] = WebElementClick(network_Feature.Network_Feature_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step21": stepStatus[step] = waitUntilExist(network_Feature.Network_Feature_Page("Network_Feature"), "Network_Feature");
				break;
				case "step22": stepStatus[step] = WebElementClick(network_Feature.Network_Feature_Page("Network_Feature"), "Network_Feature");
				break;
				case "step23": stepStatus[step] = waitUntilExist(network_Feature.Network_Feature_Page("TicketID"), "TicketID");
				break;
				case "step24": stepStatus[step] = WebCheckboxUncheckedStatus(network_Feature.Network_Feature_Page(network_Feature.Get_Network_Feature(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"Network_Feature_Toggle",1)), network_Feature.Get_Network_Feature(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"Network_Feature_Toggle",1));
				break;
				case "step25": stepStatus[step] = WebCheckboxcheckedStatus(network_Feature.Network_Feature_Page(network_Feature.Get_Network_Feature(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"Network_Feature_Toggle",1)), network_Feature.Get_Network_Feature(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"Network_Feature_Toggle",1));
				break;					
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void NF_Feature_Disabled(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 13;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(network_Feature.Network_Feature_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(network_Feature.Network_Feature_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(network_Feature.Network_Feature_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(network_Feature.Network_Feature_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(network_Feature.Network_Feature_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(network_Feature.Network_Feature_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(network_Feature.Network_Feature_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(network_Feature.Network_Feature_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(network_Feature.Network_Feature_Page("Billing_Menu"), "Billing_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(network_Feature.Network_Feature_Page("Network_Feature"), "Network_Feature");
				break;
				case "step11": stepStatus[step] = WebElementClick(network_Feature.Network_Feature_Page("Network_Feature"), "Network_Feature");
				break;
				case "step12": stepStatus[step] = waitUntilExist(network_Feature.Network_Feature_Page("TicketID"), "TicketID");
				break;
				case "step13": stepStatus[step] = Togglecheckdisabled(network_Feature.Network_Feature_Page(network_Feature.Get_Network_Feature(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"Network_Feature_Toggle",1)), network_Feature.Get_Network_Feature(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"Network_Feature_Toggle",1));
				break;				
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void NF_Details_Verify(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 12;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = WebElementClick(network_Feature.Network_Feature_Page(network_Feature.Get_Network_Feature(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"Network_Feature_Button",1)), network_Feature.Get_Network_Feature(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"Network_Feature_Button",1));
				break;
				case "step2": stepStatus[step] = waitUntilExist(network_Feature.Network_Feature_Page("Close"), "Close");
				break;
				case "step3": stepStatus[step] = sleepForFunction();
				break;					
				case "step4": stepStatus[step] = WebElementTextCompare(network_Feature.Network_Feature_Page("Feature_Type"), "Feature_Type","Feature_Type",1);
				break;
				case "step5": stepStatus[step] = WebElementTextCompare(network_Feature.Network_Feature_Page("Status"), "Status","Status",1);
				break;
				case "step6": stepStatus[step] = WebElementTextCompare(network_Feature.Network_Feature_Page("Ticket_ID"), "Ticket_ID","Ticket_ID",1);
				break;
				case "step7": stepStatus[step] = WebElementTextCompare(network_Feature.Network_Feature_Page("Submitted_By"), "Submitted_By","Submitted_By",1);
				break;
				case "step8": stepStatus[step] = webElementDateCompare(network_Feature.Network_Feature_Page("Submitted_Date"), "dd/MM/yyyy");
				break;
				case "step9": stepStatus[step] = WebElementTextCompare(network_Feature.Network_Feature_Page("Status_Reason"), "Status_Reason","Status_Reason",1);
				break;					
				case "step10": stepStatus[step] = WebElementClick(network_Feature.Network_Feature_Page("Close"), "Close");
				break;
				case "step11": stepStatus[step] = waitUntilExist(network_Feature.Network_Feature_Page("TicketID"), "TicketID");
				break;
				case "step12": stepStatus[step] = sleepForFunction();
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Topup_Other_Amount_AIO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=57;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step7": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step8": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step9": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("topUp_Button"), "Top Up");
				break;
				case "step10": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step11": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("AllInOne_TopUp_Image"), "AllInOne_TopUp_Image");
				break;
				case "step12": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup_Amount_Dropdown");
				break;
				case "step13": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinoneAmount"), "Topup_Amount_Dropdown", "Topup_Amount_Other", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("OthersAmount_TextBox"), "Topup_Other_Amount");
				break;					
				case "step15": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("OthersAmount_TextBox"), "Topup_Other_Amount", "Topup_Amount", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("OthersConfirmAmount_TextBox"), "Topup_Other_Confirm_Amount", "Confirm_Amount_Other", 1);
				break;					
				case "step17": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("OthersSubmit_Button"), "Topup_Other_Submit");
				break;					
				case "step18": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Topup_Submit");
				break;
				case "step19": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinOneTopup"), "Topup_Submit");
				break;
				case "step20": stepStatus[step] = sleepForFunction();
				break;
				case "step21": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAllinonePaymentMode"), "Payment Mode","PaymentMode",1);
				break;
				case "step22": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "Promo_Code");
				break;
				case "step23": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtAllinonepromoCode"), "Promo_Code", "Promo_Code", 1);
				break;
				case "step24": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnAllinonePromo"), "Apply_Promo");
				break;
				case "step25": stepStatus[step] = waituntiltextpresent(online_TopUp.AllInOne_TopUp_Page("labelDiscountResponseAllInOne"), "Promo_Message");
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelDiscountResponseAllInOne"), "Promo_Message","Promo_Message",1);
				break;
				case "step27": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type");
				break;
				case "step28": stepStatus[step] = WebListSelect(online_TopUp.Online_TopUp_Page("cardType_Dropdown"), "Card_Type","Card_Type",1);
				break;
				case "step29": stepStatus[step] = waitUntilExist(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card");
				break;
				case "step30": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardName_TextBox"), "Name_On_Card", "Name_On_Card", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber1_TextBox"), "Card_Number_1", "Card_Number_1", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber2_TextBox"), "Card_Number_2", "Card_Number_2", 1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber3_TextBox"), "Card_Number_3", "Card_Number_3", 1);
				break;
				case "step34": stepStatus[step] = WebEditEnterText(online_TopUp.Online_TopUp_Page("cardNumber4_TextBox"), "Card_Number_4", "Card_Number_4", 1);
				break;
				case "step35": stepStatus[step] = javaScriptDatePicker(online_TopUp.Online_TopUp_Page("expiryDate_TextBox"), "Expiry_Date", "Expiry_Date", 1);
				break;
				case "step36": stepStatus[step] = JavaScriptWebEditEnterText(online_TopUp.Online_TopUp_Page("cvv_TextBox"), "CVV_Number", "CVV_Number", 1);
				break;
				case "step37": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Bundle_Table"), "Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step38": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtEmail"), "Email", "Email", 1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblCountry"), "Country","Country",1);
				break;
				case "step40": stepStatus[step] = WebEditEnterText(online_TopUp.AllInOne_TopUp_Page("txtpostCode"), "Postcode", "Postcode", 1);
				break;
				case "step41": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconAddressSearch"), "Search Icon");
				break;
				case "step42": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List");
				break;
				case "step43": stepStatus[step] = WebListSelect(online_TopUp.AllInOne_TopUp_Page("lstAddressResult"), "Address List","Address",1);
				break;
				case "step44": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("iconSelectAddress"), "Accept Icon");
				break;
				case "step45": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number");
				break;
				case "step46": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("txthouseNumber"), "House_Number","House_Number",1);
				break;
				case "step47": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("labelstreetName"), "StreetName","View_Street",1);
				break;
				case "step48": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblcityName"), "City","View_City",1);
				break;
				case "step49": stepStatus[step] = WebElementValueCompare(online_TopUp.AllInOne_TopUp_Page("lblpostCode"), "Postcode","View_Postcode",1);
				break;
				case "step50": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step51": stepStatus[step] = PerformAction_MoveToElementAndClick(online_TopUp.AllInOne_TopUp_Page("btnallinonePaynow"), "Pay Now");
				break;
				case "step52": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table");
				break;
				case "step53": stepStatus[step] = webTableVerifyDetailshashtable(online_TopUp.AllInOne_TopUp_Page("Confirm_Bundle_Table"), "Confirm_Bundle_Table","Primary_Key_Column_Name","Secondary_Key_Column_Names","Primary_Key_Column_Value","Secondary_Key_Column_Values",1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("lblAllinoneVatTotalAmt"), "Total_Amount","Total_Amount",1);
				break;
				case "step55": stepStatus[step] = WebElementClick(online_TopUp.AllInOne_TopUp_Page("btnCardPaymentSubmit"), "Submit");
				break;
				case "step56": stepStatus[step] = waitUntilExist(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message");
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(online_TopUp.AllInOne_TopUp_Page("labelResponseAllInOne"), "Confirm_Message","Confirm_Message",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Post_Invalid_Amt_Topup_VAT_AIO(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=22;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = RRBSDBSelect("RRBS_SUBSCRIBER_PROFILE_TABLENAME","ACCT_BALANCE_COLUMNNAME","RRBS_SUBSCRIBER_PROFILE_CONDITION","ACCT_BALANCE_COLUMNVALUE",1);
				break;
				case "step2": stepStatus[step] = SQLDBCheckValueExist("Table_msttopup","Column_Transactionid","Condition_msttopup",1);
				break;					
				case "step3": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_Topup_Amount", "Condition_msttopup", "Topup_Amount", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_Topup_Mode", "Condition_msttopup", "Topup_Mode", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_Status", "Condition_msttopup", "Status", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_Error_Desc", "Condition_msttopup", "Error_Desc", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_Promo_Code", "Condition_msttopup", "Promo_Code", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_Promo_Type", "Condition_msttopup", "Promo_Type", 1);
				break;
				case "step9": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_Promo_Discount_Type", "Condition_msttopup", "Promo_Discount_Type", 1);
				break;
				case "step10": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_Promo_Discount_Amount", "Condition_msttopup", "Promo_Discount_Amount", 1);
				break;
				case "step11": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_Tax_Amount", "Condition_msttopup", "Tax_Amount", 1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("Table_msttopup","Column_Subtransactionid","Condition_msttopup","Subtransactionid",1);
				break;
				case "step13": stepStatus[step] = SQLDBCheckValueExist("Table_msttopup", "Column_VAT_Transid", "Condition_msttopup", 1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_VAT_Amount", "Condition_msttopup", "VAT_Amount", 1);
				break;
				case "step15": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_VAT_Percentage", "Condition_msttopup", "VAT_Percentage", 1);
				break;
				case "step16": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_Total_Amount", "Condition_msttopup", "Total_Amount", 1);
				break;
				case "step17": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_Total_Discount", "Condition_msttopup", "Total_Discount", 1);
				break;
				case "step18": stepStatus[step] = SQLDBSelect("Table_msttopup", "Column_VAT_Type", "Condition_msttopup", "VAT_Type", 1);
				break;
				case "step19" : stepStatus[step] = eShopSQLDBCheckValueExist("Table_tbleshoptransactionstatus","Transactionid_ColumnName","SUBSCRIBERID_CONDITION",1);
				break;
				case "step20" : stepStatus[step] = eShopSQLDBCheckValueExist("Table_tbleshoptransactionstatus","Orderid_ColumnName","SUBSCRIBERID_CONDITION",1);
				break;
				case "step21" : stepStatus[step] = EShopSQLDBSelect("Table_tbleshoptransactionstatus","Amount_ColumnName","SUBSCRIBERID_CONDITION","Amount_Columnvalue",1);
				break;
				case "step22" : stepStatus[step] = EShopSQLDBSelect("Table_tbleshoptransactionstatus","Totalamount_ColumnName","SUBSCRIBERID_CONDITION","Totalamount_Columnvalue",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void REG_AUT_Alert_Home(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 6;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Text_Parameter"), "MSISDN");
				break;
				case "step2": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Text_Parameter"), "MSISDN", "MSISDN", 1);
				break;
				case "step3": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Btn_Register"), "Register");
				break;
				case "step4": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Alert_Message_Register"), "Alert_Message");
				break;
				case "step5": stepStatus[step] = WebElementResxKeyValueStaticCompare(registration.Registration_AUT_Page("Alert_Message_Register"), "Alert_Message","Alert_Message",1);
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Title"), "Title");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void REG_AUT_Addr_Finder_Verify(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 6;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Text_Parameter"), "MSISDN");
				break;
				case "step2": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Text_Parameter"), "MSISDN", "MSISDN", 1);
				break;
				case "step3": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Btn_Register"), "Register");
				break;
				case "step4": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Title"), "Title");
				break;
				case "step5": stepStatus[step] = WebElementisVisible(registration.Registration_AUT_Page("Btn_FindAddress"), "Find_Address");
				break;
				case "step6": stepStatus[step] = WebElementisNotVisible(registration.Registration_AUT_Page("Btn_FindAddress"), "Find_Address");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Navigate_Config_Settings_AUT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 9;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.settings_Page("country_Dropdown_AUT"), "country_Dropdown_AUT");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.settings_Page("country_Dropdown_AUT"), "country_Dropdown_AUT");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.settings_Page("country_DropdownValues_AUT"), "Country_Dropdown", "CountryBrand_DDValue", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void REG_AUT_Email_Alert(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 12;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Text_Parameter"), "MSISDN");
				break;
				case "step2": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Text_Parameter"), "MSISDN", "MSISDN", 1);
				break;
				case "step3": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Btn_Register"), "Register");
				break;
				case "step4": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Title"), "Title");
				break;
				case "step5": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Text_Email"), "Email", "Email", 1);
				break;
				case "step6": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Btn_Next"), "Next");
				break;					
				case "step7": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Alert_Message_Email"), "Alert_Message");
				break;
				case "step8": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Alert_Message_Email"), "Alert_Message","Alert_Message",1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Restricted_Email_Alert"), "Alert_Message");
				break;
				case "step10": stepStatus[step] = WebElementResxKeyValueStaticCompare(registration.Registration_AUT_Page("Restricted_Email_Alert"), "Alert_Message","Alert_Message",1);
				break;
				case "step11": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Error_Message"), "Alert_Message");
				break;
				case "step12": stepStatus[step] = WebElementisNotVisible(registration.Registration_AUT_Page("Restricted_Email_Alert"), "Restricted_Email_Alert");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Open_SQL_Connection_AUT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBOpenConnection(property.getProperty("SQL_Server"), property.getProperty("SQL_Server_DB_Name_AUT"), property.getProperty("SQL_Server_UID"), property.getProperty("SQL_Server_PWD"));
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void REG_AUT_Disable_GAF(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 70;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Text_Parameter"), "MSISDN");
				break;
				case "step2": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Text_Parameter"), "MSISDN", "MSISDN", 1);
				break;
				case "step3": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Btn_Register"), "Register");
				break;
				case "step4": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Title"), "Title");
				break;
				case "step5": stepStatus[step] = WebListSelect(registration.Registration_AUT_Page("Title"), "Title", "Title", 1);
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("First_Name"), "First_Name");
				break;
				case "step7": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("First_Name"), "First_Name", "First_Name", 1);
				break;
				case "step8": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Last_Name"), "Last_Name", "Last_Name", 1);
				break;
				case "step9": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Academic_Title"), "Academic_Title", "Academic_Title", 1);
				break;
				case "step10": stepStatus[step] = javaScriptDatePicker(registration.Registration_AUT_Page("Date_Of_Birth"), "Date_Of_Birth", "Date_Of_Birth", 1);
				break;					
				case "step11": stepStatus[step] = WebListSelectedValue(registration.Registration_AUT_Page("Country"), "Country","Country",1);
				break;					
				case "step12": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("State"), "State", "State", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Post_Code"), "Post_Code", "Post_Code", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("City"), "City", "City", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Street"), "Street", "Street", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("House_Number"), "House_Number", "House_Number", 1);
				break;
				case "step17": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("House_Name"), "House_Name", "House_Name", 1);
				break;
				case "step18": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Apartment_Number"), "Apartment_Number", "Apartment_Number", 1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Text_Email"), "Email", "Email", 1);
				break;
				case "step20": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Contact_Number"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step21": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Qualification"), "Qualification", "Qualification", 1);
				break;
				case "step22": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Occupation"), "Occupation", "Occupation", 1);
				break;					
				case "step23": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("MSISDN"), "MSISDN","MSISDN",1);
				break;					
				case "step24": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("PUK_Code"), "PUK_Code", "PUK_Code", 1);
				break;					
				case "step25": stepStatus[step] = WebListSelect(registration.Registration_AUT_Page("Country_Call_Most"), "Country_Call_Most", "Country_Call_Most", 1);
				break;
				case "step26": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Hear_About_Us"), "Hear_About_Us");
				break;					
				case "step27": stepStatus[step] = WebListSelect(registration.Registration_AUT_Page("Hear_About_Us"), "Hear_About_Us", "Hear_About_Us", 1);
				break;
				case "step28": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Secret_Question"), "Secret_Question");
				break;						
				case "step29": stepStatus[step] = WebListSelect(registration.Registration_AUT_Page("Secret_Question"), "Secret_Question", "Secret_Question", 1);
				break;
				case "step30": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Secret_Answer"), "Secret_Answer");
				break;					
				case "step31": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Secret_Answer"), "Secret_Answer", "Secret_Answer", 1);
				break;					
				case "step32": stepStatus[step] = WebListSelect(registration.Registration_AUT_Page("IVR_Language"), "IVR_Language", "IVR_Language", 1);
				break;
				case "step33": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Phone_Book"), "Phone_Book");
				break;						
				case "step34": stepStatus[step] = WebListSelect(registration.Registration_AUT_Page("Phone_Book"), "Phone_Book", "Phone_Book", 1);
				break;
				case "step35": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Terms_Conditions"), "Terms_Conditions");
				break;					
				case "step36": stepStatus[step] = WebCheckboxON(registration.Registration_AUT_Page("Terms_Conditions"), "Terms_Conditions");
				break;					
				case "step37": stepStatus[step] = WebCheckboxON(registration.Registration_AUT_Page("Marketing_SMS"), "Marketing_SMS");
				break;					
				case "step38": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Btn_Next"), "Next");
				break;					
				case "step39": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Btn_Submit"), "Submit");
				break;
				case "step40": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Title"), "Confirm_Title","Title",1);
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_First_Name"), "Confirm_First_Name","First_Name",1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Last_Name"), "Confirm_Last_Name","Last_Name",1);
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Academic_Title"), "Confirm_Academic_Title","Academic_Title",1);
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Date_Of_Birth"), "Confirm_Date_Of_Birth","Date_Of_Birth",1);
				break;
				case "step45": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Country"), "Confirm_Country","Country",1);
				break;
				case "step46": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_State"), "Confirm_State","State",1);
				break;
				case "step47": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Post_Code"), "Confirm_Post_Code","Post_Code",1);
				break;
				case "step48": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_City"), "Confirm_City","City",1);
				break;
				case "step49": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Street"), "Confirm_Street","Street",1);
				break;
				case "step50": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_House_Number"), "Confirm_House_Number","House_Number",1);
				break;
				case "step51": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_House_Name"), "Confirm_House_Name","House_Name",1);
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Apartment_Number"), "Confirm_Apartment_Number","Apartment_Number",1);
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Email"), "Confirm_Email","Email",1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Contact_Number"), "Confirm_Contact_Number","Contact_Number",1);
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Qualification"), "Confirm_Qualification","Qualification",1);
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Occupation"), "Confirm_Occupation","Occupation",1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_MSISDN"), "Confirm_MSISDN","MSISDN",1);
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_PUK_Code"), "Confirm_PUK_Code","PUK_Code",1);
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Call_Country_Most"), "Confirm_Call_Country_Most","Country_Call_Most",1);
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Hear_About_Us"), "Confirm_Hear_About_Us","Hear_About_Us",1);
				break;
				case "step61": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Secret_Question"), "Confirm_Secret_Question","Secret_Question",1);
				break;
				case "step62": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Secret_Answer"), "Confirm_Secret_Answer","Secret_Answer",1);
				break;
				case "step63": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_IVR_Language"), "Confirm_IVR_Language","IVR_Language",1);
				break;
				case "step64": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Phone_Book"), "Confirm_Phone_Book","Phone_Book",1);
				break;					
				case "step65": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Btn_Submit"), "Submit");
				break;					
				case "step66": stepStatus[step] = waitUntilDisappear(registration.Registration_AUT_Page("Loading_Image"), "Loading_Image");
				break;						
				case "step67": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step68": stepStatus[step] = WebElementResxKeyValueStaticCompare(registration.Registration_AUT_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step69": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("close_button"), "Close_Button");
				break;
				case "step70": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Btn_Register"), "Register");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void REG_AUT_Enable_GAF(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 69;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Text_Parameter"), "MSISDN");
				break;
				case "step2": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Text_Parameter"), "MSISDN", "MSISDN", 1);
				break;
				case "step3": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Btn_Register"), "Register");
				break;
				case "step4": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Title"), "Title");
				break;
				case "step5": stepStatus[step] = WebListSelect(registration.Registration_AUT_Page("Title"), "Title", "Title", 1);
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("First_Name"), "First_Name");
				break;
				case "step7": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("First_Name"), "First_Name", "First_Name", 1);
				break;
				case "step8": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Last_Name"), "Last_Name", "Last_Name", 1);
				break;
				case "step9": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Academic_Title"), "Academic_Title", "Academic_Title", 1);
				break;
				case "step10": stepStatus[step] = javaScriptDatePicker(registration.Registration_AUT_Page("Date_Of_Birth"), "Date_Of_Birth", "Date_Of_Birth", 1);
				break;					
				case "step11": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("GAF_Country"), "Country","Country",1);
				break;					
				case "step12": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("State"), "State", "State", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterTextFromGAFEnv(registration.Registration_AUT_Page("Post_Code"), "Post_Code", "Post_Code", 1);
				break;
				case "step14": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Btn_FindAddress"), "Find_Address");
				break;					
				case "step15": stepStatus[step] = waitUntilListLoads(registration.Registration_AUT_Page("list_City"), "City");
				break;					
				case "step16": stepStatus[step] = WebListSelectFromGAFEnv(registration.Registration_AUT_Page("list_City"), "City", "City", 1);
				break;					
				case "step17": stepStatus[step] = waitUntilListLoads(registration.Registration_AUT_Page("list_Street"), "Street");
				break;					
				case "step18": stepStatus[step] = WebListSelectFromGAFEnv(registration.Registration_AUT_Page("list_Street"), "Street", "Street", 1);
				break;					
				case "step19": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("GAF_House_Number"), "House_Number", "House_Number", 1);
				break;
				case "step20": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Apartment_Number"), "Apartment_Number", "Apartment_Number", 1);
				break;
				case "step21": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Text_Email"), "Email", "Email", 1);
				break;
				case "step22": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Contact_Number"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step23": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Qualification"), "Qualification", "Qualification", 1);
				break;
				case "step24": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Occupation"), "Occupation", "Occupation", 1);
				break;
				case "step25": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("MSISDN"), "MSISDN","MSISDN",1);
				break;					
				case "step26": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("PUK_Code"), "PUK_Code", "PUK_Code", 1);
				break;
				case "step27": stepStatus[step] = WebListSelect(registration.Registration_AUT_Page("Country_Call_Most"), "Country_Call_Most", "Country_Call_Most", 1);
				break;
				case "step28": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Hear_About_Us"), "Hear_About_Us");
				break;					
				case "step29": stepStatus[step] = WebListSelect(registration.Registration_AUT_Page("Hear_About_Us"), "Hear_About_Us", "Hear_About_Us", 1);
				break;
				case "step30": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Secret_Question"), "Secret_Question");
				break;						
				case "step31": stepStatus[step] = WebListSelect(registration.Registration_AUT_Page("Secret_Question"), "Secret_Question", "Secret_Question", 1);
				break;
				case "step32": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Secret_Answer"), "Secret_Answer");
				break;					
				case "step33": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Secret_Answer"), "Secret_Answer", "Secret_Answer", 1);
				break;					
				case "step34": stepStatus[step] = WebListSelect(registration.Registration_AUT_Page("IVR_Language"), "IVR_Language", "IVR_Language", 1);
				break;
				case "step35": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Phone_Book"), "Phone_Book");
				break;						
				case "step36": stepStatus[step] = WebListSelect(registration.Registration_AUT_Page("Phone_Book"), "Phone_Book", "Phone_Book", 1);
				break;
				case "step37": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Terms_Conditions"), "Terms_Conditions");
				break;					
				case "step38": stepStatus[step] = WebCheckboxON(registration.Registration_AUT_Page("Terms_Conditions"), "Terms_Conditions");
				break;					
				case "step39": stepStatus[step] = WebCheckboxON(registration.Registration_AUT_Page("Marketing_SMS"), "Marketing_SMS");
				break;					
				case "step40": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Btn_Next"), "Next");
				break;					
				case "step41": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Btn_Submit"), "Submit");
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Title"), "Confirm_Title","Title",1);
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_First_Name"), "Confirm_First_Name","First_Name",1);
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Last_Name"), "Confirm_Last_Name","Last_Name",1);
				break;
				case "step45": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Academic_Title"), "Confirm_Academic_Title","Academic_Title",1);
				break;
				case "step46": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Date_Of_Birth"), "Confirm_Date_Of_Birth","Date_Of_Birth",1);
				break;
				case "step47": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Country"), "Confirm_Country","Country",1);
				break;
				case "step48": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_State"), "Confirm_State","State",1);
				break;
				case "step49": stepStatus[step] = WebElementTextCompareFromGAF(registration.Registration_AUT_Page("Confirm_Post_Code"), "Confirm_Post_Code","Post_Code",1);
				break;
				case "step50": stepStatus[step] = WebElementTextCompareFromGAF(registration.Registration_AUT_Page("Confirm_City"), "Confirm_City","City",1);
				break;
				case "step51": stepStatus[step] = WebElementTextCompareFromGAF(registration.Registration_AUT_Page("Confirm_Street"), "Confirm_Street","Street",1);
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_House_Number"), "Confirm_House_Number","House_Number",1);
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Apartment_Number"), "Confirm_Apartment_Number","Apartment_Number",1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Email"), "Confirm_Email","Email",1);
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Contact_Number"), "Confirm_Contact_Number","Contact_Number",1);
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Qualification"), "Confirm_Qualification","Qualification",1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Occupation"), "Confirm_Occupation","Occupation",1);
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_MSISDN"), "Confirm_MSISDN","MSISDN",1);
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_PUK_Code"), "Confirm_PUK_Code","PUK_Code",1);
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Call_Country_Most"), "Confirm_Call_Country_Most","Country_Call_Most",1);
				break;
				case "step61": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Hear_About_Us"), "Confirm_Hear_About_Us","Hear_About_Us",1);
				break;
				case "step62": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Secret_Question"), "Confirm_Secret_Question","Secret_Question",1);
				break;
				case "step63": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Secret_Answer"), "Confirm_Secret_Answer","Secret_Answer",1);
				break;
				case "step64": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_IVR_Language"), "Confirm_IVR_Language","IVR_Language",1);
				break;
				case "step65": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Phone_Book"), "Confirm_Phone_Book","Phone_Book",1);
				break;					
				case "step66": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Btn_Submit"), "Submit");
				break;					
				case "step67": stepStatus[step] = waitUntilDisappear(registration.Registration_AUT_Page("Loading_Image"), "Loading_Image");
				break;						
				case "step68": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step69": stepStatus[step] = WebElementResxKeyValueStaticCompare(registration.Registration_AUT_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void SQLDB_Select_GAF(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelectFromGAFEnv("Table_Name", "Column_Name", "Condition", "Column_Value", 1);
				break;

				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void REG_AUT_SIM_Alert(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 47;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Text_Parameter"), "MSISDN");
				break;
				case "step2": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Text_Parameter"), "MSISDN", "MSISDN", 1);
				break;
				case "step3": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Btn_Register"), "Register");
				break;
				case "step4": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Title"), "Title");
				break;
				case "step5": stepStatus[step] = WebListSelect(registration.Registration_AUT_Page("Title"), "Title", "Title", 1);
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("First_Name"), "First_Name");
				break;
				case "step7": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("First_Name"), "First_Name", "First_Name", 1);
				break;
				case "step8": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Last_Name"), "Last_Name", "Last_Name", 1);
				break;
				case "step9": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Academic_Title"), "Academic_Title", "Academic_Title", 1);
				break;
				case "step10": stepStatus[step] = javaScriptDatePicker(registration.Registration_AUT_Page("Date_Of_Birth"), "Date_Of_Birth", "Date_Of_Birth", 1);
				break;					
				case "step11": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("GAF_Country"), "Country","Country",1);
				break;					
				case "step12": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("State"), "State", "State", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterTextFromGAFEnv(registration.Registration_AUT_Page("Post_Code"), "Post_Code", "Post_Code", 1);
				break;
				case "step14": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Btn_FindAddress"), "Find_Address");
				break;					
				case "step15": stepStatus[step] = waitUntilListLoads(registration.Registration_AUT_Page("list_City"), "City");
				break;					
				case "step16": stepStatus[step] = WebListSelectFromGAFEnv(registration.Registration_AUT_Page("list_City"), "City", "City", 1);
				break;					
				case "step17": stepStatus[step] = waitUntilListLoads(registration.Registration_AUT_Page("list_Street"), "Street");
				break;					
				case "step18": stepStatus[step] = WebListSelectFromGAFEnv(registration.Registration_AUT_Page("list_Street"), "Street", "Street", 1);
				break;					
				case "step19": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("GAF_House_Number"), "House_Number", "House_Number", 1);
				break;
				case "step20": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Apartment_Number"), "Apartment_Number", "Apartment_Number", 1);
				break;
				case "step21": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Text_Email"), "Email", "Email", 1);
				break;
				case "step22": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Contact_Number"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step23": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Qualification"), "Qualification", "Qualification", 1);
				break;
				case "step24": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Occupation"), "Occupation", "Occupation", 1);
				break;
				case "step25": stepStatus[step] = Webeditselectentertext(registration.Registration_AUT_Page("MSISDN"), "MSISDN","MSISDN_2",1);
				break;					
				case "step26": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("PUK_Code"), "PUK_Code", "PUK_Code", 1);
				break;
				case "step27": stepStatus[step] = WebListSelect(registration.Registration_AUT_Page("Country_Call_Most"), "Country_Call_Most", "Country_Call_Most", 1);
				break;
				case "step28": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Hear_About_Us"), "Hear_About_Us");
				break;					
				case "step29": stepStatus[step] = WebListSelect(registration.Registration_AUT_Page("Hear_About_Us"), "Hear_About_Us", "Hear_About_Us", 1);
				break;
				case "step30": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Secret_Question"), "Secret_Question");
				break;						
				case "step31": stepStatus[step] = WebListSelect(registration.Registration_AUT_Page("Secret_Question"), "Secret_Question", "Secret_Question", 1);
				break;
				case "step32": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Secret_Answer"), "Secret_Answer");
				break;					
				case "step33": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Secret_Answer"), "Secret_Answer", "Secret_Answer", 1);
				break;					
				case "step34": stepStatus[step] = WebListSelect(registration.Registration_AUT_Page("IVR_Language"), "IVR_Language", "IVR_Language", 1);
				break;
				case "step35": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Phone_Book"), "Phone_Book");
				break;						
				case "step36": stepStatus[step] = WebListSelect(registration.Registration_AUT_Page("Phone_Book"), "Phone_Book", "Phone_Book", 1);
				break;
				case "step37": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Terms_Conditions"), "Terms_Conditions");
				break;					
				case "step38": stepStatus[step] = WebCheckboxON(registration.Registration_AUT_Page("Terms_Conditions"), "Terms_Conditions");
				break;					
				case "step39": stepStatus[step] = WebCheckboxON(registration.Registration_AUT_Page("Marketing_SMS"), "Marketing_SMS");
				break;					
				case "step40": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Btn_Next"), "Next");
				break;					
				case "step41": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Btn_Submit"), "Submit");
				break;
				case "step42": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Btn_Submit"), "Submit");
				break;					
				case "step43": stepStatus[step] = waitUntilDisappear(registration.Registration_AUT_Page("Loading_Image"), "Loading_Image");
				break;						
				case "step44": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step45": stepStatus[step] = WebElementResxKeyValueStaticCompare(registration.Registration_AUT_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step46": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("close_button"), "Close");
				break;					
				case "step47": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Text_Parameter"), "MSISDN");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void REG_AUT_Mand_Alert(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 10;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Text_Parameter"), "MSISDN");
				break;
				case "step2": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Text_Parameter"), "MSISDN", "MSISDN", 1);
				break;
				case "step3": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Btn_Register"), "Register");
				break;
				case "step4": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Title"), "Title");
				break;
				case "step5": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("House_Name"), "House_Name", "House_Name", 1);
				break;
				case "step6": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Qualification"), "Qualification", "Qualification", 1);
				break;
				case "step7": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Occupation"), "Occupation", "Occupation", 1);
				break;
				case "step8": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Btn_Next"), "Next");
				break;					
				case "step9": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Error_Message"), "Alert_Message");
				break;
				case "step10": stepStatus[step] = WebElementResxKeyValueStaticCompare(registration.Registration_AUT_Page("Error_Message"), "Alert_Message","Alert_Message",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void REG_AUT_Char_Validation(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 38;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Text_Parameter"), "MSISDN");
				break;
				case "step2": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Text_Parameter"), "MSISDN", "MSISDN", 1);
				break;
				case "step3": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Btn_Register"), "Register");
				break;
				case "step4": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Title"), "Title");
				break;
				case "step5": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("First_Name"), "First_Name", "First_Name_Initial", 1);
				break;
				case "step6": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Last_Name"), "Last_Name", "Last_Name_Initial", 1);
				break;
				case "step7": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Academic_Title"), "Academic_Title", "Academic_Title_Initial", 1);
				break;
				case "step8": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("State"), "State", "State_Initial", 1);
				break;
				case "step9": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Post_Code"), "Post_Code", "Post_Code_Initial", 1);
				break;
				case "step10": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("City"), "City", "City_Initial", 1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Street"), "Street", "Street_Initial", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("House_Number"), "House_Number", "House_Number_Initial", 1);
				break;
				case "step13": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("House_Name"), "House_Name", "House_Name_Initial", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Apartment_Number"), "Apartment_Number", "Apartment_Number_Initial", 1);
				break;
				case "step15": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Text_Email"), "Email", "Email_Initial", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Contact_Number"), "Contact_Number", "Contact_Number_Initial", 1);
				break;
				case "step17": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Qualification"), "Qualification", "Qualification_Initial", 1);
				break;
				case "step18": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Occupation"), "Occupation", "Occupation_Initial", 1);
				break;					
				case "step19": stepStatus[step] = Webeditselectentertext(registration.Registration_AUT_Page("MSISDN"), "MSISDN","MSISDN_Initial",1);
				break;					
				case "step20": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("PUK_Code"), "PUK_Code", "PUK_Code_Initial", 1);
				break;					
				case "step21": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Secret_Answer"), "Secret_Answer", "Secret_Answer_Initial", 1);
				break;
				case "step22": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("First_Name"), "First_Name", "First_Name_Final", 1);
				break;
				case "step23": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Last_Name"), "Last_Name", "Last_Name_Final", 1);
				break;
				case "step24": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Academic_Title"), "Academic_Title", "Academic_Title_Final", 1);
				break;
				case "step25": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("State"), "State", "State_Final", 1);
				break;
				case "step26": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Post_Code"), "Post_Code", "Post_Code_Final", 1);
				break;
				case "step27": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("City"), "City", "City_Final", 1);
				break;
				case "step28": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Street"), "Street", "Street_Final", 1);
				break;
				case "step29": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("House_Number"), "House_Number", "House_Number_Final", 1);
				break;
				case "step30": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("House_Name"), "House_Name", "House_Name_Final", 1);
				break;
				case "step31": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Apartment_Number"), "Apartment_Number", "Apartment_Number_Final", 1);
				break;
				case "step32": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Text_Email"), "Email", "Email_Final", 1);
				break;
				case "step33": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Contact_Number"), "Contact_Number", "Contact_Number_Final", 1);
				break;
				case "step34": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Qualification"), "Qualification", "Qualification_Final", 1);
				break;
				case "step35": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Occupation"), "Occupation", "Occupation_Final", 1);
				break;					
				case "step36": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("MSISDN"), "MSISDN","MSISDN_Final",1);
				break;					
				case "step37": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("PUK_Code"), "PUK_Code", "PUK_Code_Final", 1);
				break;					
				case "step38": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Secret_Answer"), "Secret_Answer", "Secret_Answer_Final", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void SQLDB_Date_Compare(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBDateCompare("Table_Name", "Column_Name", "Condition", "dd/MM/yyyy", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void View_Registration_AUT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 42;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(registration.Registration_AUT_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Load_Parameter"), "Load_Parameter", "MSISDN", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Subscriber_View"), "Subscriber_View");
				break;
				case "step7": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Subscriber_View"), "Subscriber_View");
				break;
				case "step8": stepStatus[step] = sleepForFunction();
				break;
				case "step9": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("View_Registration"), "View_Registration");
				break;
				case "step10": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("View_Registration"), "View_Registration");
				break;
				case "step11": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("View_Title"), "View_Title");
				break;
				case "step12": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_Title"), "View_Title","Title",1);
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_First_Name"), "View_First_Name","First_Name",1);
				break;
				case "step14": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_Last_Name"), "View_Last_Name","Last_Name",1);
				break;					
				case "step15": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_Academic_Title"), "View_Academic_Title","Academic_Title",1);
				break;						
				case "step16": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_Date_Of_Birth"), "View_Date_Of_Birth","Date_Of_Birth",1);
				break;					
				case "step17": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_Account_Number"), "View_Account_Number","Account_Number",1);
				break;					
				case "step18": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_Country"), "View_Country","Country",1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_State"), "View_State","State",1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_Post_Code"), "View_Post_Code","Post_Code",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_City"), "View_City","City",1);
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_Street"), "View_Street","Street",1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_House_Number"), "View_House_Number","House_Number",1);
				break;					
				case "step24": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_Apartment_Number"), "View_Apartment_Number","Apartment_Number",1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_Contact_Number"), "View_Contact_Number","Contact_Number",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_Email"), "View_Email","Email",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_Qualification"), "View_Qualification","Qualification",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_Occupation"), "View_Occupation","Occupation",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_MSISDN"), "View_MSISDN","MSISDN",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_Puk_Code"), "View_Puk_Code","Puk_Code",1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_IMSI_1"), "View_IMSI_1","IMSI_1",1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_IMSI_2"), "View_IMSI_2","IMSI_2",1);
				break;
				case "step33": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_ICCID"), "View_ICCID","ICCID",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_Country_Call_Most"), "View_Country_Call_Most","Country_Call_Most",1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_Hear_About_Us"), "View_Hear_About_Us","Hear_About_Us",1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_Secret_Question"), "View_Secret_Question","Secret_Question",1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_Secret_Answer"), "View_Secret_Answer","Secret_Answer",1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_IVR_Language"), "View_IVR_Language","IVR_Language",1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("View_Phone_Book"), "View_Phone_Book","Phone_Book",1);
				break;					
				case "step40": stepStatus[step] = webElementSelectedStatus(registration.Registration_AUT_Page("View_SMS_Marketing"), "View_SMS_Marketing");
				break;
				case "step41": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("View_Cancel"), "Cancel_Button_View_Registration");
				break;
				case "step42": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("View_Registration"), "View_Registration_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void EDR_AUT_Email_Alert(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 15;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(registration.Registration_AUT_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Load_Parameter"), "Load_Parameter", "MSISDN", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Subscriber_View"), "Subscriber_View");
				break;
				case "step7": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Subscriber_View"), "Subscriber_View");
				break;
				case "step8": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Edit_Registration"), "Edit_Registration");
				break;
				case "step9": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Edit_Registration"), "Edit_Registration");
				break;
				case "step10": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Title"), "Title");
				break;
				case "step11": stepStatus[step] = Webeditselectentertext(registration.Registration_AUT_Page("Text_Email"), "Email", "Email", 1);
				break;
				case "step12": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("First_Name"), "First_Name");
				break;
				case "step13": stepStatus[step] = waitUntilListLoads(registration.Registration_AUT_Page("list_City"), "City");
				break;
				case "step14": stepStatus[step] = WebElementResxKeyValueStaticCompare(registration.Registration_AUT_Page("Restricted_Email_Alert"), "Restricted_Email_Alert","Alert_Message",1);
				break;
				case "step15": stepStatus[step] = WebElementisNotVisible(registration.Registration_AUT_Page("Restricted_Email_Alert"), "Restricted_Email_Alert");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Edit_Registration_AUT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 90;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(registration.Registration_AUT_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(registration.Registration_AUT_Page("Load_Parameter"), "Load_Parameter", "MSISDN", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Subscriber_View"), "Subscriber_View");
				break;
				case "step7": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Subscriber_View"), "Subscriber_View");
				break;
				case "step8": stepStatus[step] = sleepForFunction();
				break;
				case "step9": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Edit_Registration"), "Edit_Registration");
				break;
				case "step10": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Edit_Registration"), "Edit_Registration");
				break;
				case "step11": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Title"), "Title");
				break;
				case "step12": stepStatus[step] = WebListSelectedValue(registration.Registration_AUT_Page("Title"), "Title", "Title", 1);
				break;
				case "step13": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("First_Name"), "First_Name", "First_Name", 1);
				break;
				case "step14": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Last_Name"), "Last_Name", "Last_Name", 1);
				break;
				case "step15": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Academic_Title"), "Academic_Title", "Academic_Title", 1);
				break;
				case "step16": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Date_Of_Birth"), "Date_Of_Birth", "Date_Of_Birth", 1);
				break;
				case "step17": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Edit_Account_Number"), "Account_Number", "Account_Number", 1);
				break;					
				case "step18": stepStatus[step] = WebListSelectedValue(registration.Registration_AUT_Page("Country"), "Country","Country",1);
				break;					
				case "step19": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("State"), "State", "State", 1);
				break;
				case "step20": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Post_Code"), "Post_Code", "Post_Code", 1);
				break;
				case "step21": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("City"), "City", "City", 1);
				break;
				case "step22": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Street"), "Street", "Street", 1);
				break;
				case "step23": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("House_Number"), "House_Number", "House_Number", 1);
				break;
				case "step24": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("House_Name"), "House_Name", "House_Name", 1);
				break;
				case "step25": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Apartment_Number"), "Apartment_Number", "Apartment_Number", 1);
				break;
				case "step26": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Text_Email"), "Email", "Email", 1);
				break;
				case "step27": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Contact_Number"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step28": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Qualification"), "Qualification", "Qualification", 1);
				break;
				case "step29": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Occupation"), "Occupation", "Occupation", 1);
				break;					
				case "step30": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Edit_PUK_Code"), "Edit_Puk_Code", "PUK_Code", 1);
				break;
				case "step31": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Edit_ICCID"), "Edit_ICCID", "ICCID", 1);
				break;
				case "step32": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Edit_IMSI_1"), "Edit_IMSI_1", "IMSI_1", 1);
				break;
				case "step33": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Edit_IMSI_2"), "Edit_IMSI_2", "IMSI_2", 1);
				break;
				case "step34": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Edit_MSISDN"), "Edit_MSISDN", "MSISDN", 1);
				break;					
				case "step35": stepStatus[step] = WebListSelectedValue(registration.Registration_AUT_Page("Country_Call_Most"), "Country_Call_Most", "Country_Call_Most", 1);
				break;
				case "step36": stepStatus[step] = WebListSelectedValue(registration.Registration_AUT_Page("Hear_About_Us"), "Hear_About_Us", "Hear_About_Us", 1);
				break;
				case "step37": stepStatus[step] = WebListSelectedValue(registration.Registration_AUT_Page("Secret_Question"), "Secret_Question", "Secret_Question", 1);
				break;
				case "step38": stepStatus[step] = WebElementValueCompare(registration.Registration_AUT_Page("Secret_Answer"), "Secret_Answer", "Secret_Answer", 1);
				break;					
				case "step39": stepStatus[step] = WebListSelectedValue(registration.Registration_AUT_Page("IVR_Language"), "IVR_Language", "IVR_Language", 1);
				break;
				case "step40": stepStatus[step] = WebListSelectedValue(registration.Registration_AUT_Page("Phone_Book"), "Phone_Book", "Phone_Book", 1);
				break;					
				case "step41": stepStatus[step] = Webeditselectentertext(registration.Registration_AUT_Page("First_Name"), "First_Name", "First_Name_Final", 1);
				break;
				case "step42": stepStatus[step] = Webeditselectentertext(registration.Registration_AUT_Page("Last_Name"), "Last_Name", "Last_Name_Final", 1);
				break;
				case "step43": stepStatus[step] = Webeditselectentertext(registration.Registration_AUT_Page("Academic_Title"), "Academic_Title", "Academic_Title_Final", 1);
				break;
				case "step44": stepStatus[step] = Webeditselectentertext(registration.Registration_AUT_Page("State"), "State", "State_Final", 1);
				break;
				case "step45": stepStatus[step] = Webeditselectentertext(registration.Registration_AUT_Page("Post_Code"), "Post_Code", "Post_Code_Final", 1);
				break;
				case "step46": stepStatus[step] = Webeditselectentertext(registration.Registration_AUT_Page("City"), "City", "City_Final", 1);
				break;
				case "step47": stepStatus[step] = Webeditselectentertext(registration.Registration_AUT_Page("Street"), "Street", "Street_Final", 1);
				break;
				case "step48": stepStatus[step] = Webeditselectentertext(registration.Registration_AUT_Page("House_Number"), "House_Number", "House_Number_Final", 1);
				break;
				case "step49": stepStatus[step] = Webeditselectentertext(registration.Registration_AUT_Page("House_Name"), "House_Name", "House_Name_Final", 1);
				break;
				case "step50": stepStatus[step] = Webeditselectentertext(registration.Registration_AUT_Page("Apartment_Number"), "Apartment_Number", "Apartment_Number_Final", 1);
				break;
				case "step51": stepStatus[step] = Webeditselectentertext(registration.Registration_AUT_Page("Text_Email"), "Email", "Email_Final", 1);
				break;
				case "step52": stepStatus[step] = Webeditselectentertext(registration.Registration_AUT_Page("Contact_Number"), "Contact_Number", "Contact_Number_Final", 1);
				break;
				case "step53": stepStatus[step] = Webeditselectentertext(registration.Registration_AUT_Page("Qualification"), "Qualification", "Qualification_Final", 1);
				break;
				case "step54": stepStatus[step] = Webeditselectentertext(registration.Registration_AUT_Page("Occupation"), "Occupation", "Occupation_Final", 1);
				break;					
				case "step55": stepStatus[step] = WebEditClickAndEnterText(registration.Registration_AUT_Page("Secret_Answer"), "Secret_Answer", "Secret_Answer_Final", 1);
				break;					
				case "step56": stepStatus[step] = WebCheckboxON(registration.Registration_AUT_Page("Terms_Conditions"), "Terms_Conditions");
				break;					
				case "step57": stepStatus[step] = WebCheckboxON(registration.Registration_AUT_Page("Marketing_SMS"), "Marketing_SMS");
				break;					
				case "step58": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Btn_Next"), "Next");
				break;					
				case "step59": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Btn_Submit"), "Submit");
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Title"), "Confirm_Title","Title",1);
				break;
				case "step61": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_First_Name"), "Confirm_First_Name","First_Name_Final",1);
				break;
				case "step62": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Last_Name"), "Confirm_Last_Name","Last_Name_Final",1);
				break;
				case "step63": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Academic_Title"), "Confirm_Academic_Title","Academic_Title_Final",1);
				break;
				case "step64": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Date_Of_Birth"), "Confirm_Date_Of_Birth","Date_Of_Birth",1);
				break;
				case "step65": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Country"), "Confirm_Country","Country",1);
				break;
				case "step66": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_State"), "Confirm_State","State_Final",1);
				break;
				case "step67": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Post_Code"), "Confirm_Post_Code","Post_Code_Final",1);
				break;
				case "step68": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_City"), "Confirm_City","City_Final",1);
				break;
				case "step69": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Street"), "Confirm_Street","Street_Final",1);
				break;
				case "step70": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_House_Number"), "Confirm_House_Number","House_Number_Final",1);
				break;
				case "step71": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_House_Name"), "Confirm_House_Name","House_Name_Final",1);
				break;
				case "step72": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Apartment_Number"), "Confirm_Apartment_Number","Apartment_Number_Final",1);
				break;
				case "step73": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Email"), "Confirm_Email","Email_Final",1);
				break;
				case "step74": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Contact_Number"), "Confirm_Contact_Number","Contact_Number_Final",1);
				break;
				case "step75": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Qualification"), "Confirm_Qualification","Qualification_Final",1);
				break;
				case "step76": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Occupation"), "Confirm_Occupation","Occupation_Final",1);
				break;
				case "step77": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_MSISDN"), "Confirm_MSISDN","MSISDN",1);
				break;
				case "step78": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_PUK_Code"), "Confirm_PUK_Code","PUK_Code",1);
				break;
				case "step79": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Call_Country_Most"), "Confirm_Call_Country_Most","Country_Call_Most",1);
				break;
				case "step80": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Hear_About_Us"), "Confirm_Hear_About_Us","Hear_About_Us",1);
				break;
				case "step81": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Secret_Question"), "Confirm_Secret_Question","Secret_Question",1);
				break;
				case "step82": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Secret_Answer"), "Confirm_Secret_Answer","Secret_Answer_Final",1);
				break;
				case "step83": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_IVR_Language"), "Confirm_IVR_Language","IVR_Language",1);
				break;
				case "step84": stepStatus[step] = WebElementTextCompare(registration.Registration_AUT_Page("Confirm_Phone_Book"), "Confirm_Phone_Book","Phone_Book",1);
				break;					
				case "step85": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Btn_Submit"), "Submit");
				break;					
				case "step86": stepStatus[step] = waitUntilDisappear(registration.Registration_AUT_Page("Loading_Image"), "Loading_Image");
				break;						
				case "step87": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step88": stepStatus[step] = WebElementResxKeyValueStaticCompare(registration.Registration_AUT_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step89": stepStatus[step] = WebElementClick(registration.Registration_AUT_Page("Edit_Cancel"), "Cancel");
				break;
				case "step90": stepStatus[step] = waitUntilExist(registration.Registration_AUT_Page("Subscriber_View"), "Subscriber_View_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Alert_Invalid_DocNumber_NOR(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=12;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = pageLoadCheck();
				break;
				case "step2": stepStatus[step] = waitUntilExist(registration_GBR.Registration_Page("txtNewRegistration"), "New Subscriber TextBox");
				break;
				case "step3": stepStatus[step] = WebEditEnterText(registration_GBR.Registration_Page("txtNewRegistration"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(registration_GBR.Registration_Page("btnNewRegister"), "Register Button");
				break;
				case "step5": stepStatus[step] = pageLoadCheck();
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("withPersonalOptions"), "Options");
				break;
				case "step7": stepStatus[step] = WebRadioSelect(registration_NOR.Registration_Page("withoutPersonalOptions"), "Options","Without Personal");
				break;
				case "step8": stepStatus[step] = WebListSelect(registration_NOR.Registration_Page("TypeofID_WOP"), "Type_of_ID","Type_of_ID",1);
				break;
				case "step9": stepStatus[step] = WebEditEnterText(registration_NOR.Registration_Page("PersonalInformation_WOP"), "PersonalInformation","Personal_Number",1);
				break;
				case "step10": stepStatus[step] = WebListSelect(registration_NOR.Registration_Page("ddlTitle"), "Title","Title",1);
				break;
				case "step11": stepStatus[step] = waitUntilExist(registration_NOR.Registration_Page("ID_Number_Alert"), "Alert_Message");
				break;
				case "step12": stepStatus[step] = WebElementResxKeyValueStaticCompare(registration_NOR.Registration_Page("ID_Number_Alert"), "Alert_Message","Alert_Message",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}
	
	//Missing Components
	
	public synchronized void Postconditions_USA_Edit_REG(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 26;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("Table_Name","Columnname_Title","Condition","Title",1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_firstname", "Condition", "First_Name", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_lastname", "Condition", "Last_Name", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_postcode", "Condition", "Post_Code", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Houseno", "Condition", "House_Number", 1); 
				break;
				case "step6": stepStatus[step] = SQLDBSelect("Table_Name","Columnname_street", "Condition", "Street", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Cityname", "Condition", "City", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Country", "Condition", "Country", 1);
				break;					
				case "step9": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_birthdd", "Condition", "DOB_Date", 1); 
				break;
				case "step10": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_birthmm", "Condition", "DOB_Month", 1);
				break;	
				case "step11": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_birthyy", "Condition", "DOB_Year", 1); 
				break;
				case "step12": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_email", "Condition", "Email", 1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Simnumber", "Condition", "Simnumber", 1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Pukcode", "Condition", "Pukcode", 1);
				break;
				case "step15": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Accountnumber", "Condition", "Accountnumber", 1);
				break;
				case "step16": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_landlineno", "Condition", "Landlineno", 1);
				break;
				case "step17": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_chkTerms", "Condition", "chkTerms", 1);
				break;
				case "step18": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_modereg", "Condition", "modereg", 1);
				break;
				case "step19": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Whereabout", "Condition", "Where_About", 1);
				break;
				case "step20": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Callcountry", "Condition", "Call_Country", 1);
				break;
				case "step21": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_chkEmail", "Condition", "chkEmail", 1);
				break;
				case "step22": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Secretquestion", "Condition", "Secretquestion", 1);
				break;
				case "step23": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Secretanswer", "Condition", "Secretanswer", 1);
				break;
				case "step24": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_preflanguage", "Condition", "Language", 1);
				break;
				case "step25": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_state", "Condition", "State", 1);
				break;
				case "step26": stepStatus[step] = RRBSDBSelect("RRBS_TABLENAME", "COLUMNNAME_LANG_ID", "RRBS_CONDITION", "LANG_ID", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postconditions_USA_REG_CustLog(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 25;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("Table_Name","Columnname_Title","Condition","Title",1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_firstname", "Condition", "First_Name", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_lastname", "Condition", "Last_Name", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_postcode", "Condition", "Post_Code", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Houseno", "Condition", "House_Number", 1); 
				break;
				case "step6": stepStatus[step] = SQLDBSelect("Table_Name","Columnname_street", "Condition", "Street", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Cityname", "Condition", "City", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Country", "Condition", "Country", 1);
				break;					
				case "step9": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_birthdd", "Condition", "DOB_Date", 1); 
				break;
				case "step10": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_birthmm", "Condition", "DOB_Month", 1);
				break;	
				case "step11": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_birthyy", "Condition", "DOB_Year", 1); 
				break;
				case "step12": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_email", "Condition", "Email", 1);
				break;
				case "step13": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Simnumber", "Condition", "Simnumber", 1);
				break;
				case "step14": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Pukcode", "Condition", "Pukcode", 1);
				break;
				case "step15": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Accountnumber", "Condition", "Accountnumber", 1);
				break;
				case "step16": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_landlineno", "Condition", "Landlineno", 1);
				break;
				case "step17": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_chkTerms", "Condition", "chkTerms", 1);
				break;
				case "step18": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_modereg", "Condition", "modereg", 1);
				break;
				case "step19": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Whereabout", "Condition", "Where_About", 1);
				break;
				case "step20": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Callcountry", "Condition", "Call_Country", 1);
				break;
				case "step21": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_chkEmail", "Condition", "chkEmail", 1);
				break;
				case "step22": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Secretquestion", "Condition", "Secretquestion", 1);
				break;
				case "step23": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_Secretanswer", "Condition", "Secretanswer", 1);
				break;
				case "step24": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_preflanguage", "Condition", "Language", 1);
				break;
				case "step25": stepStatus[step] = SQLDBSelect("Table_Name", "Columnname_state", "Condition", "State", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Update_Delete_RRBS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=2;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = RRBSDBUpdate("Table_Name", "Column_Name", "Column_Value", "Condition", 1);
				break;
				case "step2": stepStatus[step] = RRBSDBDelete("Table_Name_Delete", "Condition_Delete", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}
	
	public synchronized void Verify_Alert_Invalid(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 15;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step11": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step12": stepStatus[step] = waituntiltextpresent(bundle_Purchase.Bundle_Purchase_Page("Alert_Message"), "Alert_Message");
				break;
				case "step13": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Alert_Message"), "Alert_Message","Alert_Message",1);
				break;
				case "step14": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("close_button"), "Close_Button");
				break;
				case "step15": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Update_Configuration_Settings(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 15;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step5": stepStatus[step] = WebElementClick(settings.settings_Page("configuration_Button"), "Configuration_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step7": stepStatus[step] = WebElementClick(settings.settings_Page("country_Dropdown_GBR"), "Country_Dropdown_GBR");
				break;
				case "step8": stepStatus[step] = webListDropdownClick(settings.settings_Page("country_DropdownValues_GBR"), "Country_Dropdown", "CountryBrand_DDValue", 1);
				break;
				case "step9": stepStatus[step] = waitUntilExist(settings.settings_Page("sim_TypeText"), "Sim_TypeText");
				break;
				case "step10": stepStatus[step] = enterValuesAndClickEnterBtn(settings.settings_Page("keyEnter"), "Key_Search", "Config_Name", 1);
				break;
				case "step11": stepStatus[step] = doubleClickOnElement(settings.Settings_Obj_runtime(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"key_Configuration","sim_Type","Config_Name",1), "key_Configuration");
				break;
				case "step12": stepStatus[step] = enterValuesAndClickEnterBtn(settings.Settings_Obj_runtime(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"value_Configuration","sim_Type","Config_Name",1), "value_Configuration", "key_Value_1", 1);
				break;
				case "step13": stepStatus[step] = enterValuesAndClickEnterBtn(settings.Settings_Obj_runtime(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"value_Configuration","sim_Type","Config_Name",1), "value_Configuration", "key_Value_2", 1);
				break;
				case "step14": stepStatus[step] = WebElementClick(settings.settings_Page("close_Btn"), "Close_Button");
				break;
				case "step15": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Active_Bundles(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 15;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step11": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step12": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name");
				break;
				case "step13": stepStatus[step] = WeblistSQLDBitemsverify(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name","Table_Name","Column_Name","Condition",1,1);
				break;
				case "step14": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("close_button"), "Close_Button");
				break;
				case "step15": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_FV_Bundles(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 17;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step11": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step12": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name");
				break;
				case "step13": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name", "Bundle_Name", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Amount"), "Bundle_Amount");
				break;
				case "step15": stepStatus[step] = WebListVerifyValue(bundle_Purchase.Bundle_Purchase_Page("Bundle_Amount"),"Bundle_Amount","Bundle_Amount",1);
				break;
				case "step16": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("close_button"), "Close_Button");
				break;
				case "step17": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Bundle_Message(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 27;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step11": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step12": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name");
				break;
				case "step13": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name", "Bundle_Name", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"), "Bundle_Months");
				break;
				case "step15": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"), "Bundle_Months", "Bundle_Months", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Amount"), "Bundle_Amount");
				break;
				case "step17": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Amount"), "Bundle_Amount", "Bundle_Amount", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Query_Bundle"), "Query_Bundle_Setting");
				break;
				case "step19": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Query_Bundle"), "Query_Bundle_Setting");
				break;
				case "step20": stepStatus[step] = waituntiltextpresent(bundle_Purchase.Bundle_Purchase_Page("Query_Bundle_Response"), "Query_Bundle_Response");
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Query_Bundle_Response"), "Query_Bundle_Response","Query_Bundle_Response",1);
				break;
				case "step22": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Submit"), "Submit");
				break;
				case "step23": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Submit"), "Submit");
				break;
				case "step24": stepStatus[step] = waituntiltextpresent(bundle_Purchase.Bundle_Purchase_Page("Bundle_Alert_Message"), "Bundle_Alert_Message");
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Bundle_Alert_Message"), "Bundle_Alert_Message","Alert_Message",1);
				break;
				case "step26": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("close_button"), "Close_Button");
				break;
				case "step27": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void SQLDB_Update(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBUpdate("Table_Name", "Column_Name", "Column_Value", "Condition", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Bundle_Category(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 26;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step11": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step12": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name");
				break;
				case "step13": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name", "Bundle_Name_1", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"), "Bundle_Months");
				break;
				case "step15": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Bundle_Category"), "Bundle_Category","Bundle_Category_1",1);
				break;
				case "step16": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Bundle_Description"), "Bundle_Description","Bundle_Description_1",1);
				break;
				case "step17": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name", "Bundle_Name_2", 1);
				break;
				case "step18": stepStatus[step] = sleepForFunction();
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Bundle_Category"), "Bundle_Category","Bundle_Category_2",1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Bundle_Description"), "Bundle_Description","Bundle_Description_2",1);
				break;
				case "step21": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name", "Bundle_Name_3", 1);
				break;
				case "step22": stepStatus[step] = sleepForFunction();
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Bundle_Category"), "Bundle_Category","Bundle_Category_3",1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Bundle_Description"), "Bundle_Description","Bundle_Description_3",1);
				break;
				case "step25": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("close_button"), "Close_Button");
				break;
				case "step26": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}

	}

	public synchronized void Admin_Top_Up(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 18;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select");
				break;
				case "step2": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("services_Select"), "Services_Select", "Select_Service", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("mobileNo_Textbox"), "MobileNo", "Mobile_Number", 1);
				break;
				case "step4": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("loadSubscriber_Button"), "LoadSubscriber_Button");
				break;
				case "step5": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown");
				break;
				case "step6": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_MenuDropdown"), "Staff_MenuDropdown_Button");
				break;
				case "step7": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("topUp_Button"), "TopUp_Button");
				break;
				case "step8": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("staff_TopUp_Button"), "Staff_TopUp_Button");
				break;
				case "step9": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount_Dropdown");
				break;
				case "step10": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("amount_Dropdown"), "Amount", "Amount", 1);
				break;
				case "step11": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("bundle_Dropdown"), "Bundle", "Bundle", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("ticketID_TextBox"), "TicketID", "TicketID", 1);
				break;
				case "step13": stepStatus[step] = WebListSelect(staff_TopUp.staff_TopUp_Page("reason_Dropdown"), "Reason", "Reason", 1);
				break;
				case "step14": stepStatus[step] = WebEditEnterText(staff_TopUp.staff_TopUp_Page("comments_TextBox_Staff"), "Comments", "Comments", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("approve_Button"), "Approve_Button");
				break;
				case "step16": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("confirm_Message"), "Confirm_Message");
				break;
				case "step17": stepStatus[step] = WebElementTextCompare(staff_TopUp.staff_TopUp_Page("confirm_Message"), "Confirm_Message", "Confirmation_Message", 1);
				break;
				case "step18": stepStatus[step] = WebElementClick(staff_TopUp.staff_TopUp_Page("header_CloseBtn"), "Header_Close_Button");
				break;


				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Top_Up_Request_Admin_Submit(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 12;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = storeSQLDBValueInEnv("TrnStaffTopup_TableName", "id_ColumnName", "TrnStaffTopup_Condition", "EnvVariableColumnName", 1);
				break;
				case "step2": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "pendingApproval_Body");
				break;
				case "step3": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("pendingApproval_Body"), "pendingApproval_Body");
				break;
				case "step4": stepStatus[step] = checkScrollBarIsPresent(pendingApproval.pendingApproval_Page_ScrollBar("scrollBar_JS"), "pendingApproval");
				break;
				case "step5": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("staff_TopUp"), "Staff_TopUp_Button");
				break;
				case "step6": stepStatus[step] = waitUntilExist(pendingApproval.pendingApproval_Page("pendingApproval_Text"), "pendingApproval_Text");
				break;
				case "step7": stepStatus[step] = getValueFromPagination(pendingApproval.staff_TopUp_Pending_Approvals(testDataFilePathStatic,testComponentNameStatic,String.valueOf(gblrecordsCounterStatic),"pendingApproval_MSISDN", Runtimevalue.getProperty("getIDValueForpendingApprovals")), pendingApproval.pendingApproval_Page("nextBtn"), pendingApproval.pendingApproval_Page("pageCount"), "pendingApproval");
				break;
				case "step8": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("ticket_Scroll"), "Ticket_ScrollBar");
				break;
				case "step9": stepStatus[step] = WebElementClick(pendingApproval.pendingApproval_Page("approve_Button"), "Approve_Button");
				break;
				case "step10": stepStatus[step] = waitUntilExist(staff_TopUp.staff_TopUp_Page("confirm_Message"), "Confirm_Message");
				break;
				case "step11": stepStatus[step] = WebElementTextCompare(staff_TopUp.staff_TopUp_Page("confirm_Message"), "Confirm_Message", "Confirmation_Message", 1);
				break;
				case "step12": stepStatus[step] = setScrollBarOFF("Pending_Approval");
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Bundle_Months_1(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 17;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step11": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step12": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name");
				break;
				case "step13": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name", "Bundle_Name", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"), "Bundle_Months");
				break;
				case "step15": stepStatus[step] = WebListVerifyValue(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"),"Bundle_Months","Bundle_Months_1",1);
				break;
				case "step16": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("close_button"), "Close_Button");
				break;
				case "step17": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Bundle_Months_2(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 19;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step11": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step12": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name");
				break;
				case "step13": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name", "Bundle_Name", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"), "Bundle_Months");
				break;
				case "step15": stepStatus[step] = WebListVerifyValue(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"),"Bundle_Months","Bundle_Months_1",1);
				break;
				case "step16": stepStatus[step] = WebListVerifyValue(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"),"Bundle_Months","Bundle_Months_2",1);
				break;
				case "step17": stepStatus[step] = WebListVerifyValue(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"),"Bundle_Months","Bundle_Months_3",1);
				break;
				case "step18": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("close_button"), "Close_Button");
				break;
				case "step19": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void PreConditions_BSS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=54;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_acct_balance","Column_Value_acct_balance","Condition_rrbs_subscriber_profile",1);
				break;
				case "step2":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_active_flag","Column_Value_active_flag","Condition_rrbs_subscriber_profile",1);
				break;
				case "step3":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_Sim_activated_date","Column_Value_Sim_activated_date","Condition_rrbs_subscriber_profile",1);
				break;
				case "step4":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_First_Usage_Date","Column_Value_First_Usage_Date","Condition_rrbs_subscriber_profile",1);	
				break;
				case "step5":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_acct_validity_date","Column_Value_acct_validity_date","Condition_rrbs_subscriber_profile",1);	
				break;
				case "step6":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_life_cycle_id","Column_Value_life_cycle_id","Condition_rrbs_subscriber_profile",1);
				break;
				case "step7":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_Life_Cycle_Chng_DT","Column_Value_Life_Cycle_Chng_DT","Condition_rrbs_subscriber_profile",1);	
				break;
				case "step8":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_plan_id","Column_Value_plan_id","Condition_rrbs_subscriber_profile",1);
				break;
				case "step9":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_NETWORK_ID","Column_Name_NETWORK_ID_value","Condition_rrbs_subscriber_profile",1);
				break;
				case "step10":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_balance1","Column_Value_balance1","Condition_rrbs_subscriber_profile",1);
				break;
				case "step11":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_balance1_exp_dt","Column_Value_balance1_exp_dt","Condition_rrbs_subscriber_profile",1);
				break;
				case "step12":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_balance2","Column_Value_balance2","Condition_rrbs_subscriber_profile",1);
				break;
				case "step13":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_balance2_exp_dt","Column_Value_balance2_exp_dt","Condition_rrbs_subscriber_profile",1);
				break;
				case "step14":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_subs_status","Column_Name_subs_status_value","Condition_rrbs_subscriber_profile",1);
				break;
				case "step15":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_sim_status","Column_Name_sim_status_value","Condition_rrbs_subscriber_profile",1);
				break;
				case "step16":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_subs_type","Column_Name_subs_type_value","Condition_rrbs_subscriber_profile",1);
				break;
				case "step17":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_sms","Column_Value_free_ofnet_sms","Condition_rrbs_subscriber_profile",1);
				break;
				case "step18":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_sms_EXP","Column_Value_free_ofnet_sms_EXP","Condition_rrbs_subscriber_profile",1);
				break;
				case "step19":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_MINS","Column_Value_free_ofnet_MINS","Condition_rrbs_subscriber_profile",1);
				break;
				case "step20":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_Ofnet_mins_exp","Column_Value_free_Ofnet_mins_exp","Condition_rrbs_subscriber_profile",1);
				break;
				case "step21":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_zone_id","Column_Value_free_zone_id","Condition_rrbs_subscriber_profile",1);
				break;
				case "step22":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_zone_id2","Column_Value_free_zone_id2","Condition_rrbs_subscriber_profile",1);
				break;
				case "step23":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_zone_id3","Column_Value_free_zone_id3","Condition_rrbs_subscriber_profile",1);
				break;
				case "step24":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_sms2","Column_Value_free_ofnet_sms2","Condition_rrbs_subscriber_profile",1);
				break;
				case "step25":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_mins2","Column_Value_free_ofnet_mins2","Condition_rrbs_subscriber_profile",1);
				break;
				case "step26":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_SMS3","Column_Value_free_ofnet_SMS3","Condition_rrbs_subscriber_profile",1);
				break;
				case "step27":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_Mins3","Column_Value_free_ofnet_Mins3","Condition_rrbs_subscriber_profile",1);
				break;
				case "step28":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_onet_zone_id","Column_Value_free_onet_zone_id","Condition_rrbs_subscriber_profile",1);
				break;
				case "step29":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_face_value_counter","Column_Value_face_value_counter","Condition_rrbs_subscriber_profile",1);
				break;
				case "step30":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_face_value_expiry","Column_Value_face_value_expiry","Condition_rrbs_subscriber_profile",1);
				break;
				case "step31":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_Last_Topup_Type","Column_Value_Last_Topup_Type","Condition_rrbs_subscriber_profile",1);
				break;
				case "step32":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_data","Column_Value_free_data","Condition_rrbs_subscriber_profile",1);
				break;
				case "step33":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_data_exp","Column_Value_free_data_exp","Condition_rrbs_subscriber_profile",1);
				break;
				case "step34":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_friend_list","Column_Name_friend_list_value","Condition_rrbs_subscriber_profile",1);
				break;
				case "step35":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_topup_face_value","Column_Value_topup_face_value","Condition_rrbs_subscriber_profile",1);	
				break;
				case "step36":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_sms_exp2","Column_Value_free_ofnet_sms_exp2","Condition_rrbs_subscriber_profile",1);
				break;
				case "step37":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_sms_exp3","Column_Value_free_ofnet_sms_exp3","Condition_rrbs_subscriber_profile",1);
				break;
				case "step38":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_mins_exp2","Column_Value_free_ofnet_mins_exp2","Condition_rrbs_subscriber_profile",1);
				break;
				case "step39":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_mins_exp3","Column_Value_free_ofnet_mins_exp3","Condition_rrbs_subscriber_profile",1);
				break;
				case "step40":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_topup_hit_counter","Column_Value_topup_hit_counter","Condition_rrbs_subscriber_profile",1);
				break;
				case "step41":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_promo_amount","Column_Value_promo_amount","Condition_rrbs_subscriber_profile",1);
				break;
				case "step42":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_promo_expiry","Column_Value_promo_expiry","Condition_rrbs_subscriber_profile",1);				
				break;
				case "step43":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_service_control","Column_Name_service_control_value","Condition_rrbs_subscriber_profile",1);	
				break;
				case "step44":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_ONNET_MT_Minutes","Column_Value_ONNET_MT_Mins","Condition_rrbs_subscriber_profile",1);				
				break;
				case "step45":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_ONNET_MT_SMS","Column_Value_ONNET_MT_SMS","Condition_rrbs_subscriber_profile",1);				
				break;
				case "step46":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_ONNET_MT_Expiry","Column_Value_ONNETMTEXPIRY","Condition_rrbs_subscriber_profile",1);				
				break;
				case "step47":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_ONNETMTBUCKETTYPE","Column_Value_ONNETMTBUCKETTYPE","Condition_rrbs_subscriber_profile",1);				
				break;
				case "step48":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_OFFNET_MT_Minutes","Column_Value_OFFNET_MT_Mins","Condition_rrbs_subscriber_profile",1);				
				break;
				case "step49":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_OFFNET_MT_SMS","Column_Value_OFFNET_MT_SMS","Condition_rrbs_subscriber_profile",1);				
				break;
				case "step50":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_OFFNET_MT_Expiry","Column_Value_OFFNETMTEXPIRY","Condition_rrbs_subscriber_profile",1);				
				break;
				case "step51":  stepStatus[step] = RRBSDBUpdate("Table_Name_rrbs_subscriber_profile","Column_Name_last_plan_change","Column_Name_last_plan_change_value","Condition_rrbs_subscriber_profile",1);
				break;
				case "step52":  stepStatus[step] = RRBSDBUpdate("Table_Name_RRBS_TOPUP_THRESHOLD_LIMIT","Column_Name_BUNDLE_PROMO_BAL","Column_Name_BUNDLE_PROMO_BAL_value","Condition_RRBS_TOPUP_THRESHOLD_LIMIT",1);
				break;
				case "step53":  stepStatus[step] = RRBSDBDelete("Table_Name_RRBS_SUBS_THRESH_LIMIT","Condition_RRBS_SUBS_THRESH_LIMIT",1);		
				break;
				case "step54":  stepStatus[step] = RRBSDBDelete("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Condition_RRBS_SUBS_BUNDLE_BUCKETS",1);
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Bundle_Success(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 35;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step11": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step12": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name");
				break;
				case "step13": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name", "Bundle_Name", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"), "Bundle_Months");
				break;
				case "step15": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"), "Bundle_Months", "Bundle_Months", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Amount"), "Bundle_Amount");
				break;
				case "step17": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Amount"), "Bundle_Amount", "Bundle_Amount", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Query_Bundle"), "Query_Bundle_Setting");
				break;
				case "step19": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Query_Bundle"), "Query_Bundle_Setting");
				break;
				case "step20": stepStatus[step] = waituntiltextpresent(bundle_Purchase.Bundle_Purchase_Page("Query_Bundle_Response"), "Query_Bundle_Response");
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Query_Bundle_Response"), "Query_Bundle_Response","Query_Bundle_Response",1);
				break;
				case "step22": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Submit"), "Submit");
				break;
				case "step23": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Submit"), "Submit");
				break;
				case "step24": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase_Message"), "bundle_Purchase_Message");
				break;				
				case "step25": stepStatus[step] = waituntiltextpresent(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase_Message"), "bundle_Purchase_Message");
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase_Message"), "bundle_Purchase_Message","Confirm_Message",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Total_Minutes"), "Total_Minutes","TotalMinsReceived",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Total_SMS"), "Total_SMS","TotalSMS",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Onnet_SMS"), "Onnet_SMS","FreeMTOnnetSMS",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Onnet_Mins"), "Onnet_Mins","FreeMTOnnetCalls",1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Offnet_SMS"), "Offnet_SMS","FreeMTOtherSMS",1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Offnet_Mins"), "Offnet_Mins","FreeMTOtherCalls",1);
				break;
				case "step33": stepStatus[step] = webElementFutureDateCompare(bundle_Purchase.Bundle_Purchase_Page("Bundle_Expiry_Date"),"Bundle_Expiry_Date","DateFormatDisplayed","DaysToAdd",1);
				break;
				case "step34": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("close_button"), "Close_Button");
				break;
				case "step35": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void rrbs_Checks_BSS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 51;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1":  stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_acct_balance","Condition_rrbs_subscriber_profile","Column_Value_acct_balance",1);	
				break;
				case "step2":  stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_active_flag","Condition_rrbs_subscriber_profile","Column_Value_active_flag",1);
				break;
				case "step3":  stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_Sim_activated_date","Condition_rrbs_subscriber_profile","Column_Value_Sim_activated_date",1);				
				break;
				case "step4":  stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_First_Usage_Date","Condition_rrbs_subscriber_profile","Column_Value_First_Usage_Date",1);		
				break;
				case "step5":  stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_acct_validity_date","Condition_rrbs_subscriber_profile","Column_Value_acct_validity_date_Days",1);				
				break;
				case "step6":  stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_life_cycle_id","Condition_rrbs_subscriber_profile","Column_Value_life_cycle_id",1);
				break;
				case "step7":  stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_Life_Cycle_Chng_DT","Condition_rrbs_subscriber_profile","Column_Value_Life_Cycle_Chng_DT",1);		
				break;
				case "step8":  stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_plan_id","Condition_rrbs_subscriber_profile","Column_Value_plan_id",1);
				break;
				case "step9":  stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_network_id","Condition_rrbs_subscriber_profile","Column_Name_network_id_value",1);
				break;
				case "step10": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_balance1","Condition_rrbs_subscriber_profile","Column_Value_balance1",1);				
				break;
				case "step11": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_balance1_exp_dt","Condition_rrbs_subscriber_profile","Column_Value_balance1_exp_dt_Days",1);
				break;
				case "step12": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_balance2","Condition_rrbs_subscriber_profile","Column_Value_balance2",1);
				break;
				case "step13": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_balance2_exp_dt","Condition_rrbs_subscriber_profile","Column_Value_balance2_exp_dt_Days",1);
				break;
				case "step14": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_subs_status","Condition_rrbs_subscriber_profile","Column_Name_subs_status_value",1);
				break;
				case "step15": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_sim_status","Condition_rrbs_subscriber_profile","Column_Name_sim_status_value",1);
				break;
				case "step16": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_subs_type","Condition_rrbs_subscriber_profile","Column_Name_subs_type_value",1);
				break;
				case "step17": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_sms","Condition_rrbs_subscriber_profile","Column_Value_free_ofnet_sms",1);
				break;
				case "step18": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_sms_EXP","Condition_rrbs_subscriber_profile","Column_Value_free_ofnet_sms_EXP_Days",1);
				break;
				case "step19": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_MINS","Condition_rrbs_subscriber_profile","Column_Value_free_ofnet_MINS",1);
				break;
				case "step20": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_free_Ofnet_mins_exp","Condition_rrbs_subscriber_profile","Column_Value_free_Ofnet_mins_exp_Days",1);
				break;
				case "step21": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_free_zone_id","Condition_rrbs_subscriber_profile","Column_Value_free_zone_id",1);
				break;
				case "step22": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_free_zone_id2","Condition_rrbs_subscriber_profile","Column_Value_free_zone_id2",1);
				break;
				case "step23": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_free_zone_id3","Condition_rrbs_subscriber_profile","Column_Value_free_zone_id3",1);
				break;
				case "step24": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_sms2","Condition_rrbs_subscriber_profile","Column_Value_free_ofnet_sms2",1);
				break;
				case "step25": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_mins2","Condition_rrbs_subscriber_profile","Column_Value_free_ofnet_mins2",1);
				break;
				case "step26": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_SMS3","Condition_rrbs_subscriber_profile","Column_Value_free_ofnet_SMS3",1);
				break;
				case "step27": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_Mins3","Condition_rrbs_subscriber_profile","Column_Value_free_ofnet_Mins3",1);
				break;
				case "step28": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_free_onet_zone_id","Condition_rrbs_subscriber_profile","Column_Value_free_onet_zone_id",1);
				break;
				case "step29": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_face_value_counter","Condition_rrbs_subscriber_profile","Column_Value_face_value_counter",1);
				break;
				case "step30": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_face_value_expiry","Condition_rrbs_subscriber_profile","Column_Value_face_value_expiry_Days",1);
				break;
				case "step31": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_Last_Topup_Type","Condition_rrbs_subscriber_profile","Column_Value_Last_Topup_Type",1);
				break;
				case "step32": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_free_data","Condition_rrbs_subscriber_profile","Column_Value_free_data",1);
				break;
				case "step33": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_free_data_exp","Condition_rrbs_subscriber_profile","Column_Value_free_data_exp_Days",1);
				break;
				case "step34": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_friend_list","Condition_rrbs_subscriber_profile","Column_Name_friend_list_value",1);
				break;
				case "step35": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_topup_face_value","Condition_rrbs_subscriber_profile","Column_Value_topup_face_value",1);		
				break;
				case "step36": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_sms_exp2","Condition_rrbs_subscriber_profile","Column_Value_free_ofnet_sms_exp2_Days",1);
				break;
				case "step37": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_sms_exp3","Condition_rrbs_subscriber_profile","Column_Value_free_ofnet_sms_exp3_Days",1);
				break;
				case "step38": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_mins_exp2","Condition_rrbs_subscriber_profile","Column_Value_free_ofnet_mins_exp2_Days",1);
				break;
				case "step39": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_free_ofnet_mins_exp3","Condition_rrbs_subscriber_profile","Column_Value_free_ofnet_mins_exp3_Days",1);
				break;
				case "step40": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_topup_hit_counter","Condition_rrbs_subscriber_profile","Column_Value_topup_hit_counter",1);
				break;
				case "step41": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_promo_amount","Condition_rrbs_subscriber_profile","Column_Value_promo_amount",1);
				break;
				case "step42": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_rrbs_subscriber_profile","Column_Name_promo_expiry","Condition_rrbs_subscriber_profile","dd/MM/yyyy","Column_Value_promo_expiry_Days",1);		
				break;
				case "step43": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_service_control","Condition_rrbs_subscriber_profile","Column_Name_service_control_value",1);
				break;
				case "step44": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_ONNET_MT_Minutes","Condition_rrbs_subscriber_profile","Column_Value_ONNET_MT_Mins",1);		
				break;
				case "step45": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_ONNET_MT_SMS","Condition_rrbs_subscriber_profile","Column_Value_ONNET_MT_SMS",1);		
				break;
				case "step46": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_ONNET_MT_Expiry","Condition_rrbs_subscriber_profile","Column_Value_ONNETMTEXPIRY",1);		
				break;
				case "step47": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_ONNETMTBUCKETTYPE","Condition_rrbs_subscriber_profile","Column_Value_ONNETMTBUCKETTYPE",1);		
				break;
				case "step48": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_OFFNET_MT_Minutes","Condition_rrbs_subscriber_profile","Column_Value_OFFNET_MT_Mins",1);		
				break;
				case "step49": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_OFFNET_MT_SMS","Condition_rrbs_subscriber_profile","Column_Value_OFFNET_MT_SMS",1);		
				break;
				case "step50": stepStatus[step] = RRBSDBSelect("Table_Name_rrbs_subscriber_profile","Column_Name_OFFNET_MT_Expiry","Condition_rrbs_subscriber_profile","Column_Value_OFFNETMTEXPIRY",1);		
				break;
				case "step51": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_rrbs_subscriber_profile","Column_Name_last_plan_change","Condition_rrbs_subscriber_profile","dd/MM/yyyy","Column_Name_last_plan_change_value",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void THRESH_LIMIT_Checks_BSS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 17;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1":  stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_THRESH_LIMIT","Column_Name_THRES_COUNTER","Condition_RRBS_SUBS_THRESH_LIMIT","Column_Name_THRES_COUNTER_value",1);	
				break;
				case "step2":  stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_THRESH_LIMIT","Column_Name_THRES_EXP","Condition_RRBS_SUBS_THRESH_LIMIT","Column_Name_THRES_EXP_value",1);	
				break;
				case "step3":  stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_THRESH_LIMIT","Column_Name_SERVICE_CODE","Condition_RRBS_SUBS_THRESH_LIMIT","Column_Name_SERVICE_CODE_value",1);	
				break;
				case "step4":  stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_THRESH_LIMIT","Column_Name_SUB_STATUS","Condition_RRBS_SUBS_THRESH_LIMIT","Column_Name_SUB_STATUS_value",1);	
				break;
				case "step5":  stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_THRESH_LIMIT","Column_Name_THRES_EXP2","Condition_RRBS_SUBS_THRESH_LIMIT","Column_Name_THRES_EXP2_value",1);	
				break;
				case "step6":  stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_THRESH_LIMIT","Column_Name_THRES_EXP3","Condition_RRBS_SUBS_THRESH_LIMIT","Column_Name_THRES_EXP3_value",1);	
				break;
				case "step7":  stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_THRESH_LIMIT","Column_Name_SERVICE_CODE2","Condition_RRBS_SUBS_THRESH_LIMIT","Column_Name_SERVICE_CODE2_value",1);	
				break;
				case "step8":  stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_THRESH_LIMIT","Column_Name_SERVICE_CODE3","Condition_RRBS_SUBS_THRESH_LIMIT","Column_Name_SERVICE_CODE3_value",1);	
				break;
				case "step9":  stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_THRESH_LIMIT","Column_Name_BUNDLE1_CHARGE_MODE","Condition_RRBS_SUBS_THRESH_LIMIT","Column_Name_BUNDLE1_CHARGE_MODE_value",1);	
				break;
				case "step10": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_THRESH_LIMIT","Column_Name_THRES_COUNTER2","Condition_RRBS_SUBS_THRESH_LIMIT","Column_Name_THRES_COUNTER2_value",1);	
				break;
				case "step11": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_THRESH_LIMIT","Column_Name_THRES_COUNTER3","Condition_RRBS_SUBS_THRESH_LIMIT","Column_Name_THRES_COUNTER3_value",1);	
				break;
				case "step12": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_THRESH_LIMIT","Column_Name_SUB_STATUS2","Condition_RRBS_SUBS_THRESH_LIMIT","Column_Name_SUB_STATUS2_value",1);	
				break;
				case "step13": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_THRESH_LIMIT","Column_Name_SUB_STATUS3","Condition_RRBS_SUBS_THRESH_LIMIT","Column_Name_SUB_STATUS3_value",1);	
				break;
				case "step14": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_THRESH_LIMIT","Column_Name_DATA_BUNDLE_COUNTER","Condition_RRBS_SUBS_THRESH_LIMIT","Column_Name_DATA_BUNDLE_COUNTER_value",1);	
				break;
				case "step15": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_THRESH_LIMIT","Column_Name_ONNET_BUNDLE_COUNTER","Condition_RRBS_SUBS_THRESH_LIMIT","Column_Name_ONNET_BUNDLE_COUNTER_value",1);	
				break;
				case "step16": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_THRESH_LIMIT","Column_Name_BUNDLE2_CHARGE_MODE","Condition_RRBS_SUBS_THRESH_LIMIT","Column_Name_BUNDLE2_CHARGE_MODE_value",1);	
				break;
				case "step17": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_THRESH_LIMIT","Column_Name_BUNDLE3_CHARGE_MODE","Condition_RRBS_SUBS_THRESH_LIMIT","Column_Name_BUNDLE3_CHARGE_MODE_value",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void BUNDLE_BUCKETS_BSS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 40;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_BUNDLE_CODE","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_BUNDLE_CODE_value",1);	
				break;
				case "step2": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_MINS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_MINS_value",1);	
				break;
				case "step3": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_SMS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_SMS_value",1);	
				break;
				case "step4": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_DATA","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_DATA_value",1);	
				break;
				case "step5": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_MINS_EXP","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Name_MINS_EXP_value",1);	
				break;
				case "step6": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_SMS_EXP","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Name_SMS_EXP_value",1);	
				break;
				case "step7": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_DATA_EXP","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Name_DATA_EXP_value",1);	
				break;
				case "step8": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_ZONE","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_ZONE_value",1);	
				break;
				case "step9": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_BUNDLE_TYPE","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_BUNDLE_TYPE_value",1);	
				break;
				case "step10": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_BUNDLE_EXP","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Name_BUNDLE_EXP_value",1);	
				break;
				case "step11": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_STATUS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_STATUS_value",1);	
				break;
				case "step12": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_CHARGE_MODE","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_CHARGE_MODE_value",1);	
				break;
				case "step13": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_DISCOUNT_COUNTER","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_DISCOUNT_COUNTER_value",1);	
				break;
				case "step14": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_ONNET_MT_Minutes","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_ONNET_MT_Mins",1);		
				break;
				case "step15": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_ONNET_MT_SMS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_ONNET_MT_SMS",1);		
				break;
				case "step16": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_ONNET_MT_Expiry","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Value_ONNETMTEXPIRY",1);		
				break;
				case "step17": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_ONNETMTBUCKETTYPE","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_ONNETMTBUCKETTYPE",1);		
				break;
				case "step18": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_OFFNET_MT_Minutes","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_OFFNET_MT_Mins",1);		
				break;
				case "step19": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_OFFNET_MT_SMS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_OFFNET_MT_SMS",1);		
				break;
				case "step20": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_OFFNET_MT_Expiry","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Value_OFFNETMTEXPIRY",1);		
				break;
				case "step21": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_sms","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_sms",1);
				break;
				case "step22": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_sms_EXP","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Value_free_ofnet_sms_EXP_Days",1);
				break;
				case "step23": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_MINS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_MINS",1);
				break;
				case "step24": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_Ofnet_mins_exp","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Value_free_Ofnet_mins_exp_Days",1);
				break;
				case "step25": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_zone_id","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_zone_id",1);
				break;
				case "step26": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_zone_id2","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_zone_id2",1);
				break;
				case "step27": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_zone_id3","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_zone_id3",1);
				break;
				case "step28": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_sms2","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_sms2",1);
				break;
				case "step29": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_mins2","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_mins2",1);
				break;
				case "step30": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_SMS3","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_SMS3",1);
				break;
				case "step31": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_Mins3","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_Mins3",1);
				break;
				case "step32": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_sms_exp2","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Value_free_ofnet_sms_exp2_Days",1);
				break;
				case "step33": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_sms_exp3","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Value_free_ofnet_sms_exp3_Days",1);
				break;
				case "step34": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_mins_exp2","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Value_free_ofnet_mins_exp2_Days",1);
				break;
				case "step35": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_mins_exp3","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Value_free_ofnet_mins_exp3_Days",1);
				break;
				case "step36": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Bundle_Balance","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_Bundle_Balance",1);
				break;
				case "step37": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Bundle_Reserve_Amount","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_Bundle_Reserve_Amount",1);
				break;
				case "step38": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Bundle_Fzone","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_Bundle_Fzone",1);
				break;
				case "step39": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Topup_Type","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_Topup_Type",1);
				break;
				case "step40": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Bundle_Counter","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_Bundle_Counter",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Reset_bundle_Purchase(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 21;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step11": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step12": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name");
				break;
				case "step13": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name", "Bundle_Name", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"), "Bundle_Months");
				break;
				case "step15": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"), "Bundle_Months", "Bundle_Months", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Amount"), "Bundle_Amount");
				break;
				case "step17": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Amount"), "Bundle_Amount", "Bundle_Amount", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Query_Bundle"), "Query_Bundle_Setting");
				break;
				case "step19": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Reset_Bundle"), "Reset_Bundle");
				break;
				case "step20": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name");
				break;
				case "step21": stepStatus[step] = WebListSelectedValue(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"),"Bundle_Name","Bundle_Name_Initial",1);
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void BUNDLE_BUCK_ON_MT_BSS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 40;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_BUNDLE_CODE","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_BUNDLE_CODE_value",1);	
				break;
				case "step2": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_MINS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_MINS_value",1);	
				break;
				case "step3": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_SMS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_SMS_value",1);	
				break;
				case "step4": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_DATA","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_DATA_value",1);	
				break;
				case "step5": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_MINS_EXP","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Name_MINS_EXP_value",1);	
				break;
				case "step6": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_SMS_EXP","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Name_SMS_EXP_value",1);	
				break;
				case "step7": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_DATA_EXP","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_DATA_EXP_value",1);	
				break;
				case "step8": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_ZONE","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_ZONE_value",1);	
				break;
				case "step9": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_BUNDLE_TYPE","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_BUNDLE_TYPE_value",1);	
				break;
				case "step10": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_BUNDLE_EXP","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Name_BUNDLE_EXP_value",1);	
				break;
				case "step11": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_STATUS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_STATUS_value",1);	
				break;
				case "step12": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_CHARGE_MODE","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_CHARGE_MODE_value",1);	
				break;
				case "step13": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_DISCOUNT_COUNTER","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_DISCOUNT_COUNTER_value",1);	
				break;
				case "step14": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_ONNET_MT_Minutes","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_ONNET_MT_Mins",1);		
				break;
				case "step15": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_ONNET_MT_SMS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_ONNET_MT_SMS",1);		
				break;
				case "step16": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_ONNET_MT_Expiry","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Value_ONNETMTEXPIRY",1);		
				break;
				case "step17": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_ONNETMTBUCKETTYPE","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_ONNETMTBUCKETTYPE",1);		
				break;
				case "step18": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_OFFNET_MT_Minutes","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_OFFNET_MT_Mins",1);		
				break;
				case "step19": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_OFFNET_MT_SMS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_OFFNET_MT_SMS",1);		
				break;
				case "step20": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_OFFNET_MT_Expiry","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_OFFNETMTEXPIRY",1);		
				break;
				case "step21": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_sms","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_sms",1);
				break;
				case "step22": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_sms_EXP","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_sms_EXP_Days",1);
				break;
				case "step23": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_MINS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_MINS",1);
				break;
				case "step24": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_Ofnet_mins_exp","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_Ofnet_mins_exp_Days",1);
				break;
				case "step25": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_zone_id","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_zone_id",1);
				break;
				case "step26": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_zone_id2","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_zone_id2",1);
				break;
				case "step27": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_zone_id3","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_zone_id3",1);
				break;
				case "step28": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_sms2","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_sms2",1);
				break;
				case "step29": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_mins2","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_mins2",1);
				break;
				case "step30": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_SMS3","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_SMS3",1);
				break;
				case "step31": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_Mins3","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_Mins3",1);
				break;
				case "step32": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_sms_exp2","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_sms_exp2_Days",1);
				break;
				case "step33": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_sms_exp3","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_sms_exp3_Days",1);
				break;
				case "step34": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_mins_exp2","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_mins_exp2_Days",1);
				break;
				case "step35": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_mins_exp3","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_mins_exp3_Days",1);
				break;
				case "step36": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Bundle_Balance","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_Bundle_Balance",1);
				break;
				case "step37": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Bundle_Reserve_Amount","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_Bundle_Reserve_Amount",1);
				break;
				case "step38": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Bundle_Fzone","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_Bundle_Fzone",1);
				break;
				case "step39": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Topup_Type","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_Topup_Type",1);
				break;
				case "step40": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Bundle_Counter","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_Bundle_Counter",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void BUNDLE_BUCKETS_OffMTONMT(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 40;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_BUNDLE_CODE","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_BUNDLE_CODE_value",1);	
				break;
				case "step2": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_MINS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_MINS_value",1);	
				break;
				case "step3": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_SMS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_SMS_value",1);	
				break;
				case "step4": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_DATA","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_DATA_value",1);	
				break;
				case "step5": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_MINS_EXP","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_MINS_EXP_value",1);	
				break;
				case "step6": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_SMS_EXP","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_SMS_EXP_value",1);	
				break;
				case "step7": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_DATA_EXP","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_DATA_EXP_value",1);	
				break;
				case "step8": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_ZONE","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_ZONE_value",1);	
				break;
				case "step9": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_BUNDLE_TYPE","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_BUNDLE_TYPE_value",1);	
				break;
				case "step10": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_BUNDLE_EXP","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Name_BUNDLE_EXP_value",1);	
				break;
				case "step11": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_STATUS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_STATUS_value",1);	
				break;
				case "step12": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_CHARGE_MODE","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_CHARGE_MODE_value",1);	
				break;
				case "step13": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_DISCOUNT_COUNTER","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_DISCOUNT_COUNTER_value",1);	
				break;
				case "step14": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_ONNET_MT_Minutes","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_ONNET_MT_Mins",1);		
				break;
				case "step15": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_ONNET_MT_SMS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_ONNET_MT_SMS",1);		
				break;
				case "step16": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_ONNET_MT_Expiry","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Value_ONNETMTEXPIRY",1);		
				break;
				case "step17": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_ONNETMTBUCKETTYPE","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_ONNETMTBUCKETTYPE",1);		
				break;
				case "step18": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_OFFNET_MT_Minutes","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_OFFNET_MT_Mins",1);		
				break;
				case "step19": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_OFFNET_MT_SMS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_OFFNET_MT_SMS",1);		
				break;
				case "step20": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_OFFNET_MT_Expiry","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Value_OFFNETMTEXPIRY",1);		
				break;
				case "step21": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_sms","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_sms",1);
				break;
				case "step22": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_sms_EXP","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Value_free_ofnet_sms_EXP_Days",1);
				break;
				case "step23": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_MINS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_MINS",1);
				break;
				case "step24": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_Ofnet_mins_exp","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Value_free_Ofnet_mins_exp_Days",1);
				break;
				case "step25": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_zone_id","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_zone_id",1);
				break;
				case "step26": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_zone_id2","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_zone_id2",1);
				break;
				case "step27": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_zone_id3","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_zone_id3",1);
				break;
				case "step28": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_sms2","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_sms2",1);
				break;
				case "step29": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_mins2","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_mins2",1);
				break;
				case "step30": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_SMS3","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_SMS3",1);
				break;
				case "step31": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_Mins3","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_Mins3",1);
				break;
				case "step32": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_sms_exp2","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Value_free_ofnet_sms_exp2_Days",1);
				break;
				case "step33": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_sms_exp3","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Value_free_ofnet_sms_exp3_Days",1);
				break;
				case "step34": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_mins_exp2","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Value_free_ofnet_mins_exp2_Days",1);
				break;
				case "step35": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_mins_exp3","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Value_free_ofnet_mins_exp3_Days",1);
				break;
				case "step36": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Bundle_Balance","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_Bundle_Balance",1);
				break;
				case "step37": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Bundle_Reserve_Amount","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_Bundle_Reserve_Amount",1);
				break;
				case "step38": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Bundle_Fzone","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_Bundle_Fzone",1);
				break;
				case "step39": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Topup_Type","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_Topup_Type",1);
				break;
				case "step40": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Bundle_Counter","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_Bundle_Counter",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_SLBundle_Success(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 37;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step11": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step12": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name");
				break;
				case "step13": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name", "Bundle_Name", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Pre_Receiver_MSISDN"), "Pre_Receiver_MSISDN");
				break;
				case "step15": stepStatus[step] = WebEditEnterText(bundle_Purchase.Bundle_Purchase_Page("Pre_Receiver_MSISDN"), "Pre_Receiver_MSISDN", "Pre_Receiver_MSISDN", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"), "Bundle_Months");
				break;
				case "step17": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"), "Bundle_Months", "Bundle_Months", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Amount"), "Bundle_Amount");
				break;
				case "step19": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Amount"), "Bundle_Amount", "Bundle_Amount", 1);
				break;
				case "step20": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Query_Bundle"), "Query_Bundle_Setting");
				break;
				case "step21": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Query_Bundle"), "Query_Bundle_Setting");
				break;
				case "step22": stepStatus[step] = waituntiltextpresent(bundle_Purchase.Bundle_Purchase_Page("Query_Bundle_Response"), "Query_Bundle_Response");
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Query_Bundle_Response"), "Query_Bundle_Response","Query_Bundle_Response",1);
				break;
				case "step24": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Submit"), "Submit");
				break;
				case "step25": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Submit"), "Submit");
				break;
				case "step26": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase_Message"), "bundle_Purchase_Message");
				break;
				case "step27": stepStatus[step] = waituntiltextpresent(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase_Message"), "bundle_Purchase_Message");
				break;
				case "step28": stepStatus[step] = WebElementMultilineTextCompare(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase_Message"), "bundle_Purchase_Message","Confirm_Message",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Total_Minutes"), "Total_Minutes","TotalMinsReceived",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Total_SMS"), "Total_SMS","TotalSMS",1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Onnet_SMS"), "Onnet_SMS","FreeMTOnnetSMS",1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Onnet_Mins"), "Onnet_Mins","FreeMTOnnetCalls",1);
				break;
				case "step33": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Offnet_SMS"), "Offnet_SMS","FreeMTOtherSMS",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Offnet_Mins"), "Offnet_Mins","FreeMTOtherCalls",1);
				break;
				case "step35": stepStatus[step] = webElementFutureDateCompare(bundle_Purchase.Bundle_Purchase_Page("Bundle_Expiry_Date"),"Bundle_Expiry_Date","DateFormatDisplayed","DaysToAdd",1);
				break;
				case "step36": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("close_button"), "Close_Button");
				break;
				case "step37": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
			e.printStackTrace();
		}
	}

	public synchronized void BUNDLE_BUCKETS_OFFMINS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 40;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_BUNDLE_CODE","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_BUNDLE_CODE_value",1);	
				break;
				case "step2": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_MINS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_MINS_value",1);	
				break;
				case "step3": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_SMS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_SMS_value",1);	
				break;
				case "step4": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_DATA","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_DATA_value",1);	
				break;
				case "step5": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_MINS_EXP","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_MINS_EXP_value",1);	
				break;
				case "step6": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_SMS_EXP","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_SMS_EXP_value",1);	
				break;
				case "step7": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_DATA_EXP","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_DATA_EXP_value",1);	
				break;
				case "step8": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_ZONE","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_FREE_ZONE_value",1);	
				break;
				case "step9": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_BUNDLE_TYPE","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_BUNDLE_TYPE_value",1);	
				break;
				case "step10": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_BUNDLE_EXP","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Name_BUNDLE_EXP_value",1);	
				break;
				case "step11": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_STATUS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_STATUS_value",1);	
				break;
				case "step12": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_CHARGE_MODE","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_CHARGE_MODE_value",1);	
				break;
				case "step13": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_DISCOUNT_COUNTER","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_DISCOUNT_COUNTER_value",1);	
				break;
				case "step14": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_ONNET_MT_Minutes","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_ONNET_MT_Mins",1);		
				break;
				case "step15": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_ONNET_MT_SMS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_ONNET_MT_SMS",1);		
				break;
				case "step16": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_ONNET_MT_Expiry","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_ONNETMTEXPIRY",1);		
				break;
				case "step17": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_ONNETMTBUCKETTYPE","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_ONNETMTBUCKETTYPE",1);		
				break;
				case "step18": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_OFFNET_MT_Minutes","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_OFFNET_MT_Mins",1);		
				break;
				case "step19": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_OFFNET_MT_SMS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_OFFNET_MT_SMS",1);		
				break;
				case "step20": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_OFFNET_MT_Expiry","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_OFFNETMTEXPIRY",1);		
				break;
				case "step21": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_sms","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_sms",1);
				break;
				case "step22": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_sms_EXP","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_sms_EXP_Days",1);
				break;
				case "step23": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_MINS","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_MINS",1);
				break;
				case "step24": stepStatus[step] = RRBSDBFutureDateCompare("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_Ofnet_mins_exp","Condition_RRBS_SUBS_BUNDLE_BUCKETS","dd/MM/yyyy","Column_Value_free_Ofnet_mins_exp_Days",1);
				break;
				case "step25": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_zone_id","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_zone_id",1);
				break;
				case "step26": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_zone_id2","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_zone_id2",1);
				break;
				case "step27": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_zone_id3","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_zone_id3",1);
				break;
				case "step28": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_sms2","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_sms2",1);
				break;
				case "step29": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_mins2","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_mins2",1);
				break;
				case "step30": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_SMS3","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_SMS3",1);
				break;
				case "step31": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_Mins3","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_Mins3",1);
				break;
				case "step32": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_sms_exp2","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_sms_exp2_Days",1);
				break;
				case "step33": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_sms_exp3","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_sms_exp3_Days",1);
				break;
				case "step34": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_mins_exp2","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_mins_exp2_Days",1);
				break;
				case "step35": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_free_ofnet_mins_exp3","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_free_ofnet_mins_exp3_Days",1);
				break;
				case "step36": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Bundle_Balance","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_Bundle_Balance",1);
				break;
				case "step37": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Bundle_Reserve_Amount","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_Bundle_Reserve_Amount",1);
				break;
				case "step38": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Bundle_Fzone","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_Bundle_Fzone",1);
				break;
				case "step39": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Topup_Type","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_Topup_Type",1);
				break;
				case "step40": stepStatus[step] = RRBSDBSelect("Table_Name_RRBS_SUBS_BUNDLE_BUCKETS","Column_Name_Bundle_Counter","Condition_RRBS_SUBS_BUNDLE_BUCKETS","Column_Value_Bundle_Counter",1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Bundle_Promo(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 41;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step11": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "bundle_Purchase");
				break;
				case "step12": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name");
				break;
				case "step13": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name", "Bundle_Name", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"), "Bundle_Months");
				break;
				case "step15": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"), "Bundle_Months", "Bundle_Months", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Amount"), "Bundle_Amount");
				break;
				case "step17": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Amount"), "Bundle_Amount", "Bundle_Amount", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Query_Bundle"), "Query_Bundle_Setting");
				break;
				case "step19": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Query_Bundle"), "Query_Bundle_Setting");
				break;
				case "step20": stepStatus[step] = waituntiltextpresent(bundle_Purchase.Bundle_Purchase_Page("Query_Bundle_Response"), "Query_Bundle_Response");
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Query_Bundle_Response"), "Query_Bundle_Response","Query_Bundle_Response",1);
				break;
				case "step22": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Avail_Promo_Button"), "Avail_Promo_Button");
				break;
				case "step23": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Edit_Promo_Code"), "Edit_Promo_Code");
				break;
				case "step24": stepStatus[step] = WebEditEnterText(bundle_Purchase.Bundle_Purchase_Page("Edit_Promo_Code"), "Edit_Promo_Code", "Promo_Code", 1);
				break;
				case "step25": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Apply_Promo_Button"), "Apply_Promo_Button");
				break;
				case "step26": stepStatus[step] = waituntiltextpresent(bundle_Purchase.Bundle_Purchase_Page("Query_Bundle_Response"), "Query_Bundle_Response");
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Query_Bundle_Response"), "Query_Bundle_Response","Promo_Discount_Message",1);
				break;
				case "step28": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Submit"), "Submit");
				break;
				case "step29": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Submit"), "Submit");
				break;
				case "step30": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase_Message"), "bundle_Purchase_Message");
				break;
				case "step31": stepStatus[step] = waituntiltextpresent(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase_Message"), "bundle_Purchase_Message");
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase_Message"), "bundle_Purchase_Message","Confirm_Message",1);
				break;
				case "step33": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Total_Minutes"), "Total_Minutes","TotalMinsReceived",1);
				break;
				case "step34": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Total_SMS"), "Total_SMS","TotalSMS",1);
				break;
				case "step35": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Onnet_SMS"), "Onnet_SMS","FreeMTOnnetSMS",1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Onnet_Mins"), "Onnet_Mins","FreeMTOnnetCalls",1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Offnet_SMS"), "Offnet_SMS","FreeMTOtherSMS",1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(bundle_Purchase.Bundle_Purchase_Page("Offnet_Mins"), "Offnet_Mins","FreeMTOtherCalls",1);
				break;
				case "step39": stepStatus[step] = webElementFutureDateCompare(bundle_Purchase.Bundle_Purchase_Page("Bundle_Expiry_Date"),"Bundle_Expiry_Date","DateFormatDisplayed","DaysToAdd",1);
				break;
				case "step40": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("close_button"), "Close_Button");
				break;
				case "step41": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Update_Delete_EXIBS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=2;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = EXIBSDBUpdate("Table_Name", "Column_Name", "Column_Value", "Condition", 1);
				break;
				case "step2": stepStatus[step] = EXIBSDBDelete("Table_Name_Delete", "Condition_Delete", 1);
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}		

	public synchronized void Send_Sim_WO_Payments(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 77;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step2": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				case "step3": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Title"), "Title");
				break;
				case "step4": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Title"), "Title", "Title", 1);
				break;
				case "step5": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("First_Name"), "First_Name");
				break;
				case "step6": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("First_Name"), "First_Name", "First_Name", 1);
				break;
				case "step7": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Last_Name"), "Last_Name", "Last_Name", 1);
				break;						
				case "step8": stepStatus[step] = javaScriptDatePicker(send_Sim.Send_Sim_Page("Date_Of_Birth"), "Date_Of_Birth", "Date_Of_Birth", 1);
				break;
				case "step9": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Country"), "Country");
				break;
				case "step10": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Country"), "Country", "Country", 1);
				break;
				case "step11": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode_Initial", 1);
				break;
				case "step12": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Find_Address"), "Find_Address");
				break;
				case "step13": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Address_List"), "Address_List");
				break;
				case "step14": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Address_List"), "Address_List", "Address", 1);
				break;
				case "step15": stepStatus[step] = WebElementClick(send_Sim.Send_Sim_Page("Accept_Address"), "Accept_Address");
				break;
				case "step16": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step17": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("State"), "State");
				break;
				case "step18": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Postcode"), "Postcode");
				break;
				case "step19": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("City"), "City");
				break;
				case "step20": stepStatus[step] = WebElementDisabled(send_Sim.Send_Sim_Page("Street"), "Street");
				break;
				case "step21": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("State"), "State", "State", 1);
				break;
				case "step22": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Postcode"), "Postcode", "Postcode", 1);
				break;
				case "step23": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("City"), "City", "City", 1);
				break;
				case "step24": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number_Initial", 1);
				break;
				case "step25": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Street"), "Street", "Street", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("House_Number"), "House_Number", "House_Number", 1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Apartment_Number"), "Apartment_Number", "Apartment_Number", 1);
				break;
				case "step28": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("Billing_Address"), "Billing_Address");
				break;
				case "step29": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Billing_Postcode"), "Billing_Postcode");
				break;
				case "step30": stepStatus[step] = WebElementValueCompare(send_Sim.Send_Sim_Page("Billing_Country"), "Billing_Country", "Country", 1);
				break;
				case "step31": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_State"), "Billing_State", "Billing_State", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Postcode"), "Billing_Postcode", "Billing_Postcode", 1);
				break;
				case "step33": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_City"), "Billing_City", "Billing_City", 1);
				break;
				case "step34": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_House_Number"), "Billing_House_Number", "Billing_House_Number", 1);
				break;
				case "step35": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Street"), "Billing_Street", "Billing_Street", 1);
				break;
				case "step36": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Billing_Apartment_Number"), "Billing_Apartment_Number", "Billing_Apartment_Number", 1);
				break;
				case "step37": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Email"), "Email", "Email", 1);
				break;
				case "step38": stepStatus[step] = WebEditEnterText(send_Sim.Send_Sim_Page("Contact_Number"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step39": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step40": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Personal_Details"), "Next_Personal_Details");
				break;
				case "step41": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims");
				break;
				case "step42": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Number_Of_Sims"), "Number_Of_Sims", "Number_Of_Sims", 1);
				break;
				case "step43": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1");
				break;
				case "step44": stepStatus[step] = WebListSelect(send_Sim.Send_Sim_Page("Sim_Type_1"), "Sim_Type_1", "Sim_Type_1", 1);
				break;
				case "step45": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Next_Sim_Type"), "Next_Sim_Type");
				break;						
				case "step46": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Sim_Type"), "Next_Sim_Type");
				break;
				case "step47": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Confirm_Title"), "Confirm_Title");
				break;
				case "step48": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Title"), "Confirm_Title","Title",1);
				break;
				case "step49": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_First_Name"), "Confirm_First_Name","First_Name",1);
				break;	
				case "step50": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Last_Name"), "Confirm_Last_Name","Last_Name",1);
				break;	
				case "step51": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Date_Of_Birth"), "Confirm_Date_Of_Birth","Date_Of_Birth",1);
				break;	
				case "step52": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Country"), "Confirm_Country","Country",1);
				break;	
				case "step53": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_State"), "Confirm_State","State",1);
				break;	
				case "step54": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Postcode"), "Confirm_Postcode","Postcode",1);
				break;	
				case "step55": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_City"), "Confirm_City","City",1);
				break;	
				case "step56": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_House_Number"), "Confirm_House_Number","House_Number",1);
				break;	
				case "step57": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Street"), "Confirm_Street","Street",1);
				break;	
				case "step58": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Apartment_Number"), "Confirm_Apartment_Number","Apartment_Number",1);
				break;	
				case "step59": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Country"), "Confirm_Billing_Country","Country",1);
				break;	
				case "step60": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_State"), "Confirm_Billing_State","Billing_State",1);
				break;	
				case "step61": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Postcode"), "Confirm_Billing_Postcode","Billing_Postcode",1);
				break;	
				case "step62": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_City"), "Confirm_Billing_City","Billing_City",1);
				break;	
				case "step63": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_House_Number"), "Confirm_Billing_House_Number","Billing_House_Number",1);
				break;	
				case "step64": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Street"), "Confirm_Billing_Street","Billing_Street",1);
				break;	
				case "step65": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Billing_Apartment_Number"), "Confirm_Billing_Apartment_Number","Billing_Apartment_Number",1);
				break;	
				case "step66": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Email"), "Confirm_Email","Email",1);
				break;	
				case "step67": stepStatus[step] = WebElementTextCompare(send_Sim.Send_Sim_Page("Confirm_Contact_Number"), "Confirm_Contact_Number","Contact_Number",1);
				break;	
				case "step68": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Confirm_Page"), "Next_Confirm_Page");
				break;
				case "step69": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Next_Payments_Page"), "Next_Payments_Page");
				break;
				case "step70": stepStatus[step] = WebElementResxKeyValueStaticCompare(send_Sim.Send_Sim_Page("Alert_Message_Without_Credit"), "Alert_Message_Without_Credit","Alert_Message",1);
				break;
				case "step71": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Next_Payments_Page"), "Next_Payments_Page");
				break;
				case "step72": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Submit_Payments_Page"), "Submit_Payments_Page");
				break;
				case "step73": stepStatus[step] = WebButtonClickEnter(send_Sim.Send_Sim_Page("Submit_Payments_Page"), "Submit_Payments_Page");
				break;
				case "step74": stepStatus[step] = waituntiltextpresent(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step75": stepStatus[step] = WebElementResxKeyValueStaticCompare(send_Sim.Send_Sim_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step76": stepStatus[step] = Webelementjavascriptclick(send_Sim.Send_Sim_Page("close_button"), "Close_Button");
				break;
				case "step77": stepStatus[step] = waitUntilExist(send_Sim.Send_Sim_Page("Send_Sim"), "Send_Sim_Button");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void SQLDB_Delete(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBDelete("Table_Name","Condition", 1);
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Open_SQL_Connection_FRA(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBOpenConnection(property.getProperty("SQL_Server_82"), property.getProperty("SQL_Server_DB_Name_FRA"), property.getProperty("SQL_Server_UID_82"), property.getProperty("SQL_Server_PWD_82"));
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void REG_FRA_PUK1(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=69;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelectDelete("Table_Name","ColumnName","Condition","TableName_Idproof","Columnname_Idproof",1);
				break;
				case "step2": stepStatus[step] = SQLDBDelete("Table_Name", "Condition", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("MSISDN_New_Registration"), "MSISDN");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("MSISDN_New_Registration"), "MSISDN", "MSISDN", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("NewRegister"), "NewRegister");
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Title"), "Title");
				break;
				case "step7": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("radio_Pukcode"), "radio_Pukcode");
				break;
				case "step8": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Puk_Code_1"), "Puk_Code_1");
				break;
				case "step9": stepStatus[step] = webTableRadioButton(registration_FRA.Registration_Page("Number_Of_Sims_Pukcode"), "Number_Of_Sims", 1);
				break;
				case "step10": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Puk_Code_1"), "Puk_Code_1");
				break;
				case "step11": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Puk_Code_1"), "Puk_Code_1", "Puk_Code_1", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Puk_Code_Sim_1"), "Puk_Code_Sim_1", "Puk_Code_Sim_1", 1);
				break;
				case "step13": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("Title"), "Title", "Title", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("First_Name"), "First_Name");
				break;
				case "step15": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("First_Name"), "First_Name", "First_Name", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Last_Name"), "Last_Name", "Last_Name", 1);
				break;
				case "step17": stepStatus[step] = javaScriptDatePicker(registration_FRA.Registration_Page("Date_Of_Birth"), "Date_Of_Birth", "Date_Of_Birth", 1);
				break;
				case "step18": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Contact_Number"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Email"), "Email", "Email", 1);
				break;
				case "step20": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Country"), "Country", "Country", 1);
				break;
				case "step21": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Post_Code"), "Post_Code", "Post_Code", 1);
				break;
				case "step22": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Find_Address"), "Find_Address");
				break;
				case "step23": stepStatus[step] = waitUntilDisappear(registration_FRA.Registration_Page("Loading_Image"), "Loading_Image");
				break;
				case "step24": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("City"), "City", "City", 1);
				break;
				case "step25": stepStatus[step] = waitUntilDisappear(registration_FRA.Registration_Page("Loading_Image"), "Loading_Image");
				break;
				case "step26": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("Street"), "Street", "Street", 1);
				break;
				case "step27": stepStatus[step] = waitUntilDisappear(registration_FRA.Registration_Page("Loading_Image"), "Loading_Image");
				break;							
				case "step28": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("House_Number"), "House_Number", "House_Number", 1);
				break;
				case "step29": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("ID_Form"), "ID_Form");
				break;								
				case "step30": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("ID_Form"), "ID_Form", "ID_Form", 1);
				break;
				case "step31": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("ID_Number"), "ID_Number");
				break;
				case "step32": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("ID_Number"), "ID_Number", "ID_Number", 1);
				break;
				case "step33": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("ID_Proof"), "ID_Proof");
				break;
				case "step34": stepStatus[step] = Uploadfiletestdata("testSupportfilespath", "File_Name_With_Type",1);
				break;						
				case "step35": stepStatus[step] = waituntiltextpresent(registration_FRA.Registration_Page("Uploaded_File"), "Uploaded_File");
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Uploaded_File"), "Uploaded_File","Uploaded_File",1);
				break;
				case "step37": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("Language"), "Language", "Language", 1);
				break;
				case "step38": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Marketing_SMS"), "Marketing_SMS");
				break;
				case "step39": stepStatus[step] = WebCheckboxON(registration_FRA.Registration_Page("Marketing_SMS"), "Marketing_SMS");
				break;
				case "step40": stepStatus[step] = WebCheckboxON(registration_FRA.Registration_Page("Terms_Conditions"), "Terms_Conditions");
				break;
				case "step41": stepStatus[step] = ScrollIntoElement(registration_FRA.Registration_Page("Next"), "Next");
				break;
				case "step42": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Next"), "Next");
				break;
				case "step43": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Submit"), "Submit");
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Puk_Code_1"), "Confirm_Puk_Code_1","Puk_Code_1",1);
				break;
				case "step45": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Puk_Code_SIM_1"), "Confirm_Puk_Code_SIM_1","Puk_Code_Sim_1",1);
				break;
				case "step46": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Title"), "Confirm_Title","Title",1);
				break;
				case "step47": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_First_Name"), "Confirm_First_Name","First_Name",1);
				break;
				case "step48": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Last_Name"), "Confirm_Last_Name","Last_Name",1);
				break;
				case "step49": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Date_Of_Birth"), "Confirm_Date_Of_Birth","Date_Of_Birth",1);
				break;
				case "step50": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Contact_Number"), "Confirm_Contact_Number","Contact_Number",1);
				break;
				case "step51": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Email"), "Confirm_Email","Email",1);
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Country"), "Confirm_Country","Country",1);
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Post_Code"), "Confirm_Post_Code","Post_Code",1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_City"), "Confirm_City","City",1);
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Street"), "Confirm_Street","Street",1);
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_House_Number"), "Confirm_House_Number","House_Number",1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_ID_Form"), "Confirm_ID_Form","ID_Form",1);
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_ID_Number"), "Confirm_ID_Number","ID_Number",1);
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Uploaded_File"), "Confirm_Uploaded_File","Uploaded_File",1);
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Language"), "Confirm_Language","Language",1);
				break;
				case "step61": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Submit"), "Submit");
				break;
				case "step62": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Confirm_Message_Table"), "Confirm_Message_Table");
				break;
				case "step63": stepStatus[step] = waituntiltextpresent(registration_FRA.Registration_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step64": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step65": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("close_button"), "Close_Button");
				break;
				case "step66": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("MSISDN_New_Registration"), "MSISDN");
				break;
				case "step67": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name","ColumnName","Condition","Env_Customerid",1);
				break;
				case "step68": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Idproofname", "Columnname_Idproof", "Env_Customerid", "Column_Value_Idproofname", 1);
				break;
				case "step69": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Count", "Columnname_Idproof", "Env_Customerid", "Count_Value", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void REG_FRA_MSISDN1(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=69;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelectDelete("Table_Name","ColumnName","Condition","TableName_Idproof","Columnname_Idproof",1);
				break;
				case "step2": stepStatus[step] = SQLDBDelete("Table_Name", "Condition", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("MSISDN_New_Registration"), "MSISDN");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("MSISDN_New_Registration"), "MSISDN", "MSISDN", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("NewRegister"), "NewRegister");
				break;
				case "step6": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Title"), "Title");
				break;
				case "step7": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("radio_MSISDN"), "radio_MSISDN");
				break;
				case "step8": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("MSISDN_1"), "MSISDN_1");
				break;
				case "step9": stepStatus[step] = webTableRadioButton(registration_FRA.Registration_Page("Number_Of_Sims_MSISDN"), "Number_Of_Sims", 1);
				break;
				case "step10": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("MSISDN_1"), "MSISDN_1");
				break;
				case "step11": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("MSISDN_1"), "MSISDN_1", "MSISDN_1", 1);
				break;
				case "step12": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("MSISDN_Sim_1"), "MSISDN_Sim_1", "MSISDN_Sim_1", 1);
				break;
				case "step13": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("Title"), "Title", "Title", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("First_Name"), "First_Name");
				break;
				case "step15": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("First_Name"), "First_Name", "First_Name", 1);
				break;
				case "step16": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Last_Name"), "Last_Name", "Last_Name", 1);
				break;
				case "step17": stepStatus[step] = javaScriptDatePicker(registration_FRA.Registration_Page("Date_Of_Birth"), "Date_Of_Birth", "Date_Of_Birth", 1);
				break;
				case "step18": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Contact_Number"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step19": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Email"), "Email", "Email", 1);
				break;
				case "step20": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Country"), "Country", "Country", 1);
				break;
				case "step21": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Post_Code"), "Post_Code", "Post_Code", 1);
				break;
				case "step22": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Find_Address"), "Find_Address");
				break;
				case "step23": stepStatus[step] = waitUntilDisappear(registration_FRA.Registration_Page("Loading_Image"), "Loading_Image");
				break;
				case "step24": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("City"), "City", "City", 1);
				break;
				case "step25": stepStatus[step] = waitUntilDisappear(registration_FRA.Registration_Page("Loading_Image"), "Loading_Image");
				break;
				case "step26": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("Street"), "Street", "Street", 1);
				break;
				case "step27": stepStatus[step] = waitUntilDisappear(registration_FRA.Registration_Page("Loading_Image"), "Loading_Image");
				break;							
				case "step28": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("House_Number"), "House_Number", "House_Number", 1);
				break;
				case "step29": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("ID_Form"), "ID_Form");
				break;								
				case "step30": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("ID_Form"), "ID_Form", "ID_Form", 1);
				break;
				case "step31": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("ID_Number"), "ID_Number");
				break;
				case "step32": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("ID_Number"), "ID_Number", "ID_Number", 1);
				break;
				case "step33": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("ID_Proof"), "ID_Proof");
				break;
				case "step34": stepStatus[step] = Uploadfiletestdata("testSupportfilespath", "File_Name_With_Type",1);
				break;						
				case "step35": stepStatus[step] = waituntiltextpresent(registration_FRA.Registration_Page("Uploaded_File"), "Uploaded_File");
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Uploaded_File"), "Uploaded_File","Uploaded_File",1);
				break;
				case "step37": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("Language"), "Language", "Language", 1);
				break;
				case "step38": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Marketing_SMS"), "Marketing_SMS");
				break;
				case "step39": stepStatus[step] = WebCheckboxON(registration_FRA.Registration_Page("Marketing_SMS"), "Marketing_SMS");
				break;
				case "step40": stepStatus[step] = WebCheckboxON(registration_FRA.Registration_Page("Terms_Conditions"), "Terms_Conditions");
				break;
				case "step41": stepStatus[step] = ScrollIntoElement(registration_FRA.Registration_Page("Next"), "Next");
				break;
				case "step42": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Next"), "Next");
				break;
				case "step43": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Submit"), "Submit");
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_MSISDN_1"), "Confirm_MSISDN_1","MSISDN_1",1);
				break;
				case "step45": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_MSISDN_SIM_1"), "Confirm_MSISDN_SIM_1","MSISDN_Sim_1",1);
				break;
				case "step46": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Title"), "Confirm_Title","Title",1);
				break;
				case "step47": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_First_Name"), "Confirm_First_Name","First_Name",1);
				break;
				case "step48": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Last_Name"), "Confirm_Last_Name","Last_Name",1);
				break;
				case "step49": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Date_Of_Birth"), "Confirm_Date_Of_Birth","Date_Of_Birth",1);
				break;
				case "step50": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Contact_Number"), "Confirm_Contact_Number","Contact_Number",1);
				break;
				case "step51": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Email"), "Confirm_Email","Email",1);
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Country"), "Confirm_Country","Country",1);
				break;
				case "step53": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Post_Code"), "Confirm_Post_Code","Post_Code",1);
				break;
				case "step54": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_City"), "Confirm_City","City",1);
				break;
				case "step55": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Street"), "Confirm_Street","Street",1);
				break;
				case "step56": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_House_Number"), "Confirm_House_Number","House_Number",1);
				break;
				case "step57": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_ID_Form"), "Confirm_ID_Form","ID_Form",1);
				break;
				case "step58": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_ID_Number"), "Confirm_ID_Number","ID_Number",1);
				break;
				case "step59": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Uploaded_File"), "Confirm_Uploaded_File","Uploaded_File",1);
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Language"), "Confirm_Language","Language",1);
				break;
				case "step61": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Submit"), "Submit");
				break;
				case "step62": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Confirm_Message_Table"), "Confirm_Message_Table");
				break;
				case "step63": stepStatus[step] = waituntiltextpresent(registration_FRA.Registration_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step64": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step65": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("close_button"), "Close_Button");
				break;
				case "step66": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("MSISDN_New_Registration"), "MSISDN");
				break;
				case "step67": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name","ColumnName","Condition","Env_Customerid",1);
				break;
				case "step68": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Idproofname", "Columnname_Idproof", "Env_Customerid", "Column_Value_Idproofname", 1);
				break;
				case "step69": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Count", "Columnname_Idproof", "Env_Customerid", "Count_Value", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postconditions_FRA_REG(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=13;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelect("Table_Name_mstnfblockreason", "Column_Name_Count", "Condition", "Column_Value_Count", 1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_Firstname", "Condition", "First_Name", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_Lastname", "Condition", "Last_Name", 1);
				break;
				case "step4": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_Postcode", "Condition", "Post_Code", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_Housenumber", "Condition", "House_Number", 1);
				break;
				case "step6": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_Street", "Condition", "Street", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_City", "Condition", "City", 1);
				break;
				case "step8": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_County", "Condition", "County", 1);
				break;
				case "step9": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_Country", "Condition", "Country", 1);
				break;
				case "step10": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_Email", "Condition", "Email", 1);
				break;
				case "step11": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_Pukcode", "Condition", "Puk_Code", 1);
				break;
				case "step12": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Name_Chkterms", "Condition", "Check_Terms", 1);
				break;
				case "step13": stepStatus[step] = RRBSDBSelect("RRBS_TABLENAME", "COLUMNNAME_LANGID", "RRBS_CONDITION", "COLUMNVALUE_LANGID", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Open_Command_Prompt(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = jsh_Unix_Open_Connection("Unix_Server_IP","Unix_Server_Username","Unix_Server_Password");
				break;

				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Close_Command_Prompt(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = Jsh_closeUnixSession();
				break;

				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Update_Preconditions_Unix(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = Delete_File_Unix("Unix_Upload_Files_Path", "File_Name_With_Type", 1);
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Postconditions_Unix(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = Check_File_Unix("Unix_Upload_Files_Path", "File_Name_With_Type", 1);
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void REG_FRA_PUK5(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=107;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelectDelete("Table_Name","ColumnName","Condition_1","TableName_Idproof","Columnname_Idproof",1);
				break;
				case "step2": stepStatus[step] = SQLDBDelete("Table_Name", "Condition_1", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelectDelete("Table_Name","ColumnName","Condition_2","TableName_Idproof","Columnname_Idproof",1);
				break;
				case "step4": stepStatus[step] = SQLDBDelete("Table_Name", "Condition_2", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelectDelete("Table_Name","ColumnName","Condition_3","TableName_Idproof","Columnname_Idproof",1);
				break;
				case "step6": stepStatus[step] = SQLDBDelete("Table_Name", "Condition_3", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelectDelete("Table_Name","ColumnName","Condition_4","TableName_Idproof","Columnname_Idproof",1);
				break;
				case "step8": stepStatus[step] = SQLDBDelete("Table_Name", "Condition_4", 1);
				break;
				case "step9": stepStatus[step] = SQLDBSelectDelete("Table_Name","ColumnName","Condition_5","TableName_Idproof","Columnname_Idproof",1);
				break;
				case "step10": stepStatus[step] = SQLDBDelete("Table_Name", "Condition_5", 1);
				break;
				case "step11": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("MSISDN_New_Registration"), "MSISDN");
				break;
				case "step12": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("MSISDN_New_Registration"), "MSISDN", "MSISDN", 1);
				break;
				case "step13": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("NewRegister"), "NewRegister");
				break;
				case "step14": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Title"), "Title");
				break;
				case "step15": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("radio_Pukcode"), "radio_Pukcode");
				break;
				case "step16": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Puk_Code_1"), "Puk_Code_1");
				break;
				case "step17": stepStatus[step] = webTableRadioButton(registration_FRA.Registration_Page("Number_Of_Sims_Pukcode"), "Number_Of_Sims", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Puk_Code_1"), "Puk_Code_1");
				break;
				case "step19": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Puk_Code_1"), "Puk_Code_1", "Puk_Code_1", 1);
				break;
				case "step20": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Puk_Code_Sim_1"), "Puk_Code_Sim_1", "Puk_Code_Sim_1", 1);
				break;
				case "step21": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Puk_Code_2"), "Puk_Code_2", "Puk_Code_2", 1);
				break;
				case "step22": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Puk_Code_Sim_2"), "Puk_Code_Sim_2", "Puk_Code_Sim_2", 1);
				break;
				case "step23": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Puk_Code_3"), "Puk_Code_3", "Puk_Code_3", 1);
				break;
				case "step24": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Puk_Code_Sim_3"), "Puk_Code_Sim_3", "Puk_Code_Sim_3", 1);
				break;
				case "step25": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Puk_Code_4"), "Puk_Code_4", "Puk_Code_4", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Puk_Code_Sim_4"), "Puk_Code_Sim_4", "Puk_Code_Sim_4", 1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Puk_Code_5"), "Puk_Code_5", "Puk_Code_5", 1);
				break;
				case "step28": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Puk_Code_Sim_5"), "Puk_Code_Sim_5", "Puk_Code_Sim_5", 1);
				break;
				case "step29": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("Title"), "Title", "Title", 1);
				break;
				case "step30": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("First_Name"), "First_Name");
				break;
				case "step31": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("First_Name"), "First_Name", "First_Name", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Last_Name"), "Last_Name", "Last_Name", 1);
				break;
				case "step33": stepStatus[step] = javaScriptDatePicker(registration_FRA.Registration_Page("Date_Of_Birth"), "Date_Of_Birth", "Date_Of_Birth", 1);
				break;
				case "step34": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Contact_Number"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step35": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Email"), "Email", "Email", 1);
				break;
				case "step36": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Country"), "Country", "Country", 1);
				break;
				case "step37": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Post_Code"), "Post_Code", "Post_Code", 1);
				break;
				case "step38": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Find_Address"), "Find_Address");
				break;
				case "step39": stepStatus[step] = waitUntilDisappear(registration_FRA.Registration_Page("Loading_Image"), "Loading_Image");
				break;
				case "step40": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("City"), "City", "City", 1);
				break;
				case "step41": stepStatus[step] = waitUntilDisappear(registration_FRA.Registration_Page("Loading_Image"), "Loading_Image");
				break;
				case "step42": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("Street"), "Street", "Street", 1);
				break;
				case "step43": stepStatus[step] = waitUntilDisappear(registration_FRA.Registration_Page("Loading_Image"), "Loading_Image");
				break;							
				case "step44": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("House_Number"), "House_Number", "House_Number", 1);
				break;
				case "step45": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("ID_Form"), "ID_Form");
				break;								
				case "step46": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("ID_Form"), "ID_Form", "ID_Form", 1);
				break;
				case "step47": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("ID_Number"), "ID_Number");
				break;
				case "step48": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("ID_Number"), "ID_Number", "ID_Number", 1);
				break;
				case "step49": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("ID_Proof"), "ID_Proof");
				break;
				case "step50": stepStatus[step] = Uploadfiletestdata("testSupportfilespath", "File_Name_With_Type",1);
				break;						
				case "step51": stepStatus[step] = waituntiltextpresent(registration_FRA.Registration_Page("Uploaded_File"), "Uploaded_File");
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Uploaded_File"), "Uploaded_File","Uploaded_File",1);
				break;
				case "step53": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("Language"), "Language", "Language", 1);
				break;
				case "step54": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Marketing_SMS"), "Marketing_SMS");
				break;
				case "step55": stepStatus[step] = WebCheckboxON(registration_FRA.Registration_Page("Marketing_SMS"), "Marketing_SMS");
				break;
				case "step56": stepStatus[step] = WebCheckboxON(registration_FRA.Registration_Page("Terms_Conditions"), "Terms_Conditions");
				break;
				case "step57": stepStatus[step] = ScrollIntoElement(registration_FRA.Registration_Page("Next"), "Next");
				break;
				case "step58": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Next"), "Next");
				break;
				case "step59": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Submit"), "Submit");
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Puk_Code_1"), "Confirm_Puk_Code_1","Puk_Code_1",1);
				break;
				case "step61": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Puk_Code_SIM_1"), "Confirm_Puk_Code_SIM_1","Puk_Code_Sim_1",1);
				break;
				case "step62": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Puk_Code_2"), "Confirm_Puk_Code_2","Puk_Code_2",1);
				break;
				case "step63": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Puk_Code_SIM_2"), "Confirm_Puk_Code_SIM_2","Puk_Code_Sim_2",1);
				break;
				case "step64": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Puk_Code_3"), "Confirm_Puk_Code_3","Puk_Code_3",1);
				break;
				case "step65": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Puk_Code_SIM_3"), "Confirm_Puk_Code_SIM_3","Puk_Code_Sim_3",1);
				break;
				case "step66": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Puk_Code_4"), "Confirm_Puk_Code_4","Puk_Code_4",1);
				break;
				case "step67": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Puk_Code_SIM_4"), "Confirm_Puk_Code_SIM_4","Puk_Code_Sim_4",1);
				break;
				case "step68": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Puk_Code_5"), "Confirm_Puk_Code_5","Puk_Code_5",1);
				break;
				case "step69": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Puk_Code_SIM_5"), "Confirm_Puk_Code_SIM_5","Puk_Code_Sim_5",1);
				break;
				case "step70": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Title"), "Confirm_Title","Title",1);
				break;
				case "step71": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_First_Name"), "Confirm_First_Name","First_Name",1);
				break;
				case "step72": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Last_Name"), "Confirm_Last_Name","Last_Name",1);
				break;
				case "step73": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Date_Of_Birth"), "Confirm_Date_Of_Birth","Date_Of_Birth",1);
				break;
				case "step74": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Contact_Number"), "Confirm_Contact_Number","Contact_Number",1);
				break;
				case "step75": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Email"), "Confirm_Email","Email",1);
				break;
				case "step76": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Country"), "Confirm_Country","Country",1);
				break;
				case "step77": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Post_Code"), "Confirm_Post_Code","Post_Code",1);
				break;
				case "step78": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_City"), "Confirm_City","City",1);
				break;
				case "step79": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Street"), "Confirm_Street","Street",1);
				break;
				case "step80": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_House_Number"), "Confirm_House_Number","House_Number",1);
				break;
				case "step81": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_ID_Form"), "Confirm_ID_Form","ID_Form",1);
				break;
				case "step82": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_ID_Number"), "Confirm_ID_Number","ID_Number",1);
				break;
				case "step83": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Uploaded_File"), "Confirm_Uploaded_File","Uploaded_File",1);
				break;
				case "step84": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Language"), "Confirm_Language","Language",1);
				break;
				case "step85": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Submit"), "Submit");
				break;
				case "step86": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Confirm_Message_Table"), "Confirm_Message_Table");
				break;
				case "step87": stepStatus[step] = waituntiltextpresent(registration_FRA.Registration_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step88": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step89": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Message_2"), "Confirm_Message_2","Confirm_Message",1);
				break;
				case "step90": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Message_3"), "Confirm_Message_3","Confirm_Message",1);
				break;
				case "step91": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Message_4"), "Confirm_Message_4","Confirm_Message",1);
				break;
				case "step92": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Message_5"), "Confirm_Message_5","Confirm_Message",1);
				break;
				case "step93": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name","ColumnName","Condition_1","Env_Customerid_1",1);
				break;
				case "step94": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Idproofname", "Columnname_Idproof", "Env_Customerid_1", "Column_Value_Idproofname_1", 1);
				break;
				case "step95": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Count", "Columnname_Idproof", "Env_Customerid_1", "Count_Value", 1);
				break;
				case "step96": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name","ColumnName","Condition_2","Env_Customerid_2",1);
				break;
				case "step97": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Idproofname", "Columnname_Idproof", "Env_Customerid_2", "Column_Value_Idproofname_2", 1);
				break;
				case "step98": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Count", "Columnname_Idproof", "Env_Customerid_2", "Count_Value", 1);
				break;
				case "step99": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name","ColumnName","Condition_3","Env_Customerid_3",1);
				break;
				case "step100": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Idproofname", "Columnname_Idproof", "Env_Customerid_3", "Column_Value_Idproofname_3", 1);
				break;
				case "step101": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Count", "Columnname_Idproof", "Env_Customerid_3", "Count_Value", 1);
				break;
				case "step102": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name","ColumnName","Condition_4","Env_Customerid_4",1);
				break;
				case "step103": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Idproofname", "Columnname_Idproof", "Env_Customerid_4", "Column_Value_Idproofname_4", 1);
				break;
				case "step104": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Count", "Columnname_Idproof", "Env_Customerid_4", "Count_Value", 1);
				break;
				case "step105": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name","ColumnName","Condition_5","Env_Customerid_5",1);
				break;
				case "step106": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Idproofname", "Columnname_Idproof", "Env_Customerid_5", "Column_Value_Idproofname_5", 1);
				break;
				case "step107": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Count", "Columnname_Idproof", "Env_Customerid_5", "Count_Value", 1);

				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void REG_FRA_MSISDN5(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=107;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBSelectDelete("Table_Name","ColumnName","Condition_1","TableName_Idproof","Columnname_Idproof",1);
				break;
				case "step2": stepStatus[step] = SQLDBDelete("Table_Name", "Condition_1", 1);
				break;
				case "step3": stepStatus[step] = SQLDBSelectDelete("Table_Name","ColumnName","Condition_2","TableName_Idproof","Columnname_Idproof",1);
				break;
				case "step4": stepStatus[step] = SQLDBDelete("Table_Name", "Condition_2", 1);
				break;
				case "step5": stepStatus[step] = SQLDBSelectDelete("Table_Name","ColumnName","Condition_3","TableName_Idproof","Columnname_Idproof",1);
				break;
				case "step6": stepStatus[step] = SQLDBDelete("Table_Name", "Condition_3", 1);
				break;
				case "step7": stepStatus[step] = SQLDBSelectDelete("Table_Name","ColumnName","Condition_4","TableName_Idproof","Columnname_Idproof",1);
				break;
				case "step8": stepStatus[step] = SQLDBDelete("Table_Name", "Condition_4", 1);
				break;
				case "step9": stepStatus[step] = SQLDBSelectDelete("Table_Name","ColumnName","Condition_5","TableName_Idproof","Columnname_Idproof",1);
				break;
				case "step10": stepStatus[step] = SQLDBDelete("Table_Name", "Condition_5", 1);
				break;
				case "step11": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("MSISDN_New_Registration"), "MSISDN");
				break;
				case "step12": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("MSISDN_New_Registration"), "MSISDN", "MSISDN", 1);
				break;
				case "step13": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("NewRegister"), "NewRegister");
				break;
				case "step14": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Title"), "Title");
				break;
				case "step15": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("radio_MSISDN"), "radio_MSISDN");
				break;
				case "step16": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("MSISDN_1"), "MSISDN_1");
				break;
				case "step17": stepStatus[step] = webTableRadioButton(registration_FRA.Registration_Page("Number_Of_Sims_MSISDN"), "Number_Of_Sims", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("MSISDN_1"), "MSISDN_1");
				break;
				case "step19": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("MSISDN_1"), "MSISDN_1", "MSISDN_1", 1);
				break;
				case "step20": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("MSISDN_Sim_1"), "MSISDN_Sim_1", "MSISDN_Sim_1", 1);
				break;
				case "step21": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("MSISDN_2"), "MSISDN_2", "MSISDN_2", 1);
				break;
				case "step22": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("MSISDN_Sim_2"), "MSISDN_Sim_2", "MSISDN_Sim_2", 1);
				break;
				case "step23": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("MSISDN_3"), "MSISDN_3", "MSISDN_3", 1);
				break;
				case "step24": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("MSISDN_Sim_3"), "MSISDN_Sim_3", "MSISDN_Sim_3", 1);
				break;
				case "step25": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("MSISDN_4"), "MSISDN_4", "MSISDN_4", 1);
				break;
				case "step26": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("MSISDN_Sim_4"), "MSISDN_Sim_4", "MSISDN_Sim_4", 1);
				break;
				case "step27": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("MSISDN_5"), "MSISDN_5", "MSISDN_5", 1);
				break;
				case "step28": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("MSISDN_Sim_5"), "MSISDN_Sim_5", "MSISDN_Sim_5", 1);
				break;
				case "step29": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("Title"), "Title", "Title", 1);
				break;
				case "step30": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("First_Name"), "First_Name");
				break;
				case "step31": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("First_Name"), "First_Name", "First_Name", 1);
				break;
				case "step32": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Last_Name"), "Last_Name", "Last_Name", 1);
				break;
				case "step33": stepStatus[step] = javaScriptDatePicker(registration_FRA.Registration_Page("Date_Of_Birth"), "Date_Of_Birth", "Date_Of_Birth", 1);
				break;
				case "step34": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Contact_Number"), "Contact_Number", "Contact_Number", 1);
				break;
				case "step35": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Email"), "Email", "Email", 1);
				break;
				case "step36": stepStatus[step] = WebElementValueCompare(registration_FRA.Registration_Page("Country"), "Country", "Country", 1);
				break;
				case "step37": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("Post_Code"), "Post_Code", "Post_Code", 1);
				break;
				case "step38": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Find_Address"), "Find_Address");
				break;
				case "step39": stepStatus[step] = waitUntilDisappear(registration_FRA.Registration_Page("Loading_Image"), "Loading_Image");
				break;
				case "step40": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("City"), "City", "City", 1);
				break;
				case "step41": stepStatus[step] = waitUntilDisappear(registration_FRA.Registration_Page("Loading_Image"), "Loading_Image");
				break;
				case "step42": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("Street"), "Street", "Street", 1);
				break;
				case "step43": stepStatus[step] = waitUntilDisappear(registration_FRA.Registration_Page("Loading_Image"), "Loading_Image");
				break;							
				case "step44": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("House_Number"), "House_Number", "House_Number", 1);
				break;
				case "step45": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("ID_Form"), "ID_Form");
				break;								
				case "step46": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("ID_Form"), "ID_Form", "ID_Form", 1);
				break;
				case "step47": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("ID_Number"), "ID_Number");
				break;
				case "step48": stepStatus[step] = WebEditEnterText(registration_FRA.Registration_Page("ID_Number"), "ID_Number", "ID_Number", 1);
				break;
				case "step49": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("ID_Proof"), "ID_Proof");
				break;
				case "step50": stepStatus[step] = Uploadfiletestdata("testSupportfilespath", "File_Name_With_Type",1);
				break;						
				case "step51": stepStatus[step] = waituntiltextpresent(registration_FRA.Registration_Page("Uploaded_File"), "Uploaded_File");
				break;
				case "step52": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Uploaded_File"), "Uploaded_File","Uploaded_File",1);
				break;
				case "step53": stepStatus[step] = WebListSelect(registration_FRA.Registration_Page("Language"), "Language", "Language", 1);
				break;
				case "step54": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Marketing_SMS"), "Marketing_SMS");
				break;
				case "step55": stepStatus[step] = WebCheckboxON(registration_FRA.Registration_Page("Marketing_SMS"), "Marketing_SMS");
				break;
				case "step56": stepStatus[step] = WebCheckboxON(registration_FRA.Registration_Page("Terms_Conditions"), "Terms_Conditions");
				break;
				case "step57": stepStatus[step] = ScrollIntoElement(registration_FRA.Registration_Page("Next"), "Next");
				break;
				case "step58": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Next"), "Next");
				break;
				case "step59": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Submit"), "Submit");
				break;
				case "step60": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_MSISDN_1"), "Confirm_MSISDN_1","MSISDN_1",1);
				break;
				case "step61": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_MSISDN_SIM_1"), "Confirm_MSISDN_SIM_1","MSISDN_Sim_1",1);
				break;
				case "step62": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_MSISDN_2"), "Confirm_MSISDN_2","MSISDN_2",1);
				break;
				case "step63": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_MSISDN_SIM_2"), "Confirm_MSISDN_SIM_2","MSISDN_Sim_2",1);
				break;
				case "step64": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_MSISDN_3"), "Confirm_MSISDN_3","MSISDN_3",1);
				break;
				case "step65": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_MSISDN_SIM_3"), "Confirm_MSISDN_SIM_3","MSISDN_Sim_3",1);
				break;
				case "step66": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_MSISDN_4"), "Confirm_MSISDN_4","MSISDN_4",1);
				break;
				case "step67": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_MSISDN_SIM_4"), "Confirm_MSISDN_SIM_4","MSISDN_Sim_4",1);
				break;
				case "step68": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_MSISDN_5"), "Confirm_MSISDN_5","MSISDN_5",1);
				break;
				case "step69": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_MSISDN_SIM_5"), "Confirm_MSISDN_SIM_5","MSISDN_Sim_5",1);
				break;
				case "step70": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Title"), "Confirm_Title","Title",1);
				break;
				case "step71": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_First_Name"), "Confirm_First_Name","First_Name",1);
				break;
				case "step72": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Last_Name"), "Confirm_Last_Name","Last_Name",1);
				break;
				case "step73": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Date_Of_Birth"), "Confirm_Date_Of_Birth","Date_Of_Birth",1);
				break;
				case "step74": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Contact_Number"), "Confirm_Contact_Number","Contact_Number",1);
				break;
				case "step75": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Email"), "Confirm_Email","Email",1);
				break;
				case "step76": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Country"), "Confirm_Country","Country",1);
				break;
				case "step77": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Post_Code"), "Confirm_Post_Code","Post_Code",1);
				break;
				case "step78": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_City"), "Confirm_City","City",1);
				break;
				case "step79": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Street"), "Confirm_Street","Street",1);
				break;
				case "step80": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_House_Number"), "Confirm_House_Number","House_Number",1);
				break;
				case "step81": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_ID_Form"), "Confirm_ID_Form","ID_Form",1);
				break;
				case "step82": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_ID_Number"), "Confirm_ID_Number","ID_Number",1);
				break;
				case "step83": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Uploaded_File"), "Confirm_Uploaded_File","Uploaded_File",1);
				break;
				case "step84": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Language"), "Confirm_Language","Language",1);
				break;
				case "step85": stepStatus[step] = WebElementClick(registration_FRA.Registration_Page("Submit"), "Submit");
				break;
				case "step86": stepStatus[step] = waitUntilExist(registration_FRA.Registration_Page("Confirm_Message_Table"), "Confirm_Message_Table");
				break;
				case "step87": stepStatus[step] = waituntiltextpresent(registration_FRA.Registration_Page("Confirm_Message"), "Confirm_Message");
				break;
				case "step88": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step89": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Message_2"), "Confirm_Message_2","Confirm_Message",1);
				break;
				case "step90": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Message_3"), "Confirm_Message_3","Confirm_Message",1);
				break;
				case "step91": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Message_4"), "Confirm_Message_4","Confirm_Message",1);
				break;
				case "step92": stepStatus[step] = WebElementTextCompare(registration_FRA.Registration_Page("Confirm_Message_5"), "Confirm_Message_5","Confirm_Message",1);
				break;
				case "step93": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name","ColumnName","Condition_1","Env_Customerid_1",1);
				break;
				case "step94": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Idproofname", "Columnname_Idproof", "Env_Customerid_1", "Column_Value_Idproofname_1", 1);
				break;
				case "step95": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Count", "Columnname_Idproof", "Env_Customerid_1", "Count_Value", 1);
				break;
				case "step96": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name","ColumnName","Condition_2","Env_Customerid_2",1);
				break;
				case "step97": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Idproofname", "Columnname_Idproof", "Env_Customerid_2", "Column_Value_Idproofname_2", 1);
				break;
				case "step98": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Count", "Columnname_Idproof", "Env_Customerid_2", "Count_Value", 1);
				break;
				case "step99": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name","ColumnName","Condition_3","Env_Customerid_3",1);
				break;
				case "step100": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Idproofname", "Columnname_Idproof", "Env_Customerid_3", "Column_Value_Idproofname_3", 1);
				break;
				case "step101": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Count", "Columnname_Idproof", "Env_Customerid_3", "Count_Value", 1);
				break;
				case "step102": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name","ColumnName","Condition_4","Env_Customerid_4",1);
				break;
				case "step103": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Idproofname", "Columnname_Idproof", "Env_Customerid_4", "Column_Value_Idproofname_4", 1);
				break;
				case "step104": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Count", "Columnname_Idproof", "Env_Customerid_4", "Count_Value", 1);
				break;
				case "step105": stepStatus[step] = RetrieveSQLValueStoresInEnvVar("Table_Name","ColumnName","Condition_5","Env_Customerid_5",1);
				break;
				case "step106": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Idproofname", "Columnname_Idproof", "Env_Customerid_5", "Column_Value_Idproofname_5", 1);
				break;
				case "step107": stepStatus[step] = SQLDBSelectConditionEnvvar("TableName_Idproof", "Columnname_Count", "Columnname_Idproof", "Env_Customerid_5", "Count_Value", 1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Reset_Bundle_Purchase(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=21;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(bundle_Purchase.Bundle_Purchase_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Menu"), "Bundle_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "Bundle_Purchase");
				break;
				case "step11": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Bundle_Purchase"), "Bundle_Purchase");
				break;
				case "step12": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name");
				break;
				case "step13": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name", "Bundle_Name", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"), "Bundle_Months");
				break;
				case "step15": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Months"), "Bundle_Months", "Bundle_Months", 1);
				break;
				case "step16": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Amount"), "Bundle_Amount");
				break;
				case "step17": stepStatus[step] = WebListSelect(bundle_Purchase.Bundle_Purchase_Page("Bundle_Amount"), "Bundle_Amount", "Bundle_Amount", 1);
				break;
				case "step18": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Query_Bundle"), "Query_Bundle_Setting");
				break;
				case "step19": stepStatus[step] = WebElementClick(bundle_Purchase.Bundle_Purchase_Page("Reset_Bundle"), "Reset_Bundle");
				break;
				case "step20": stepStatus[step] = waitUntilExist(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"), "Bundle_Name");
				break;
				case "step21": stepStatus[step] = WebListSelectedValue(bundle_Purchase.Bundle_Purchase_Page("Bundle_Name"),"Bundle_Name","Bundle_Name_Initial",1);
				break;
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}
	
	public synchronized void SQLDB_SelectNoOfRows(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=1;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBCheckNoOfRowsExist("Table_Name", "Column_Name", "Condition", "Column_Value", 1);
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}


			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Details_SEC_POL(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 14;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(security_Policy.Security_Policy_Page("Old_Password"), "Old_Password");
				break;
				case "step2": stepStatus[step] = WebElementTextCompare(security_Policy.Security_Policy_Page("Alert_Message"), "Alert_Message","Alert_Message",1);
				break;
				case "step3": stepStatus[step] = WebElementisVisible(security_Policy.Security_Policy_Page("Old_Password"), "Old_Password");
				break;
				case "step4": stepStatus[step] = WebElementisVisible(security_Policy.Security_Policy_Page("New_Password"), "New_Password");
				break;
				case "step5": stepStatus[step] = WebElementisVisible(security_Policy.Security_Policy_Page("Retype_Password"), "Confirm_New_Password");
				break;
				case "step6": stepStatus[step] = WebElementisVisible(security_Policy.Security_Policy_Page("Update"), "Update");
				break;
				case "step7": stepStatus[step] = WebElementisVisible(security_Policy.Security_Policy_Page("Cancel"), "Cancel");
				break;				
				case "step8": stepStatus[step] = WebElementTextCompare(security_Policy.Security_Policy_Page("Password_Help_1"), "Password_Help_1","Password_Help_1",1);
				break;
				case "step9": stepStatus[step] = WebElementTextCompare(security_Policy.Security_Policy_Page("Password_Help_2"), "Password_Help_2","Password_Help_2",1);
				break;
				case "step10": stepStatus[step] = WebElementTextCompare(security_Policy.Security_Policy_Page("Password_Help_3"), "Password_Help_3","Password_Help_3",1);
				break;
				case "step11": stepStatus[step] = WebElementTextCompare(security_Policy.Security_Policy_Page("Password_Help_4"), "Password_Help_4","Password_Help_4",1);
				break;
				case "step12": stepStatus[step] = WebElementTextCompare(security_Policy.Security_Policy_Page("Password_Help_5"), "Password_Help_5","Password_Help_5",1);
				break;
				case "step13": stepStatus[step] = WebElementClick(security_Policy.Security_Policy_Page("Cancel"), "Cancel");
				break;
				case "step14": stepStatus[step] = waitUntilExist(cRM_Login_Page.Login_Page("txtbox_UserName"), "Username");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Mand_Alert_SEC_POL(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 6;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(security_Policy.Security_Policy_Page("Old_Password"), "Old_Password");
				break;
				case "step2": stepStatus[step] = WebElementClick(security_Policy.Security_Policy_Page("Update"), "Update");
				break;
				case "step3": stepStatus[step] = waituntiltextpresent(security_Policy.Security_Policy_Page("Alert_Message"), "Alert_Message");
				break;
				case "step4": stepStatus[step] = WebElementTextCompare(security_Policy.Security_Policy_Page("Alert_Message"), "Alert_Message","Alert_Message",1);
				break;
				case "step5": stepStatus[step] = WebElementClick(security_Policy.Security_Policy_Page("Cancel"), "Cancel");
				break;
				case "step6": stepStatus[step] = waitUntilExist(cRM_Login_Page.Login_Page("txtbox_UserName"), "Username");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Update_Policy_Settings(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 16;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(security_Policy.Security_Policy_Page("Role_Management"), "Role_Management");
				break;
				case "step5": stepStatus[step] = WebElementClick(security_Policy.Security_Policy_Page("Role_Management"), "Role_Management");
				break;
				case "step6": stepStatus[step] = waitUntilExist(security_Policy.Security_Policy_Page("Admin_Settings"), "Admin_Settings");
				break;				
				case "step7": stepStatus[step] = WebElementClick(security_Policy.Security_Policy_Page("Admin_Settings"), "Admin_Settings");
				break;				
				case "step8": stepStatus[step] = waitUntilExist(security_Policy.Security_Policy_Page("Password_Policy"), "Password_Policy");
				break;				
				case "step9": stepStatus[step] = WebCheckboxON(security_Policy.Security_Policy_Page("Password_Policy"), "Password_Policy");
				break;
				case "step10": stepStatus[step] = WebCheckboxOFF(security_Policy.Security_Policy_Page("Password_Policy"), "Password_Policy");
				break;				
				case "step11": stepStatus[step] = WebElementClick(security_Policy.Security_Policy_Page("OK_Button"), "OK_Button");
				break;				
				case "step12": stepStatus[step] = waituntiltextpresent(security_Policy.Security_Policy_Page("Confirm_Message"), "Confirm_Message");
				break;				
				case "step13": stepStatus[step] = WebElementTextCompare(security_Policy.Security_Policy_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step14": stepStatus[step] = WebElementClick(security_Policy.Security_Policy_Page("Close_Button"), "Close_Button");
				break;
				case "step15": stepStatus[step] = sleepForFunction();
				break;	
				case "step16": stepStatus[step] = waitUntilExist(security_Policy.Security_Policy_Page("Admin_Settings"), "Admin_Settings");
				break;				
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Update_Password_SEC_POL(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 8;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(security_Policy.Security_Policy_Page("Old_Password"), "Old_Password");
				break;
				case "step2": stepStatus[step] = WebEditEnterPassword(security_Policy.Security_Policy_Page("Old_Password"), "Old_Password","Login_Password", 1);  
				break;
				case "step3": stepStatus[step] = WebEditEnterPassword(security_Policy.Security_Policy_Page("New_Password"), "New_Password","Login_Password_1", 1);  
				break;
				case "step4": stepStatus[step] = WebEditEnterPassword(security_Policy.Security_Policy_Page("Retype_Password"), "Retype_Password","Login_Password_1", 1);  
				break;				
				case "step5": stepStatus[step] = WebElementClick(security_Policy.Security_Policy_Page("Update"), "Update");
				break;
				case "step6": stepStatus[step] = waituntiltextpresent(security_Policy.Security_Policy_Page("Update_Password_Message"), "Alert_Message");
				break;				
				case "step7": stepStatus[step] = WebElementTextCompare(security_Policy.Security_Policy_Page("Update_Password_Message"), "Update_Password_Message","Alert_Message",1);
				break;				
				case "step8": stepStatus[step] = waitUntilExist(cRM_Login_Page.Login_Page("txtbox_UserName"), "Username");
				break;			
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}	

	public synchronized void Verify_Questions_DD_SEC_POL(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 10;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(security_Policy.Security_Policy_Page("Secret_Question_1"), "Secret_Question_1");
				break;
				case "step2": stepStatus[step] = WebElementisVisible(security_Policy.Security_Policy_Page("Secret_Question_1"), "Secret_Question_1");
				break;
				case "step3": stepStatus[step] = WebElementisVisible(security_Policy.Security_Policy_Page("Secret_Answer_1"), "Secret_Answer_1");
				break;
				case "step4": stepStatus[step] = WebElementisVisible(security_Policy.Security_Policy_Page("Secret_Question_2"), "Secret_Question_2");
				break;
				case "step5": stepStatus[step] = WebElementisVisible(security_Policy.Security_Policy_Page("Secret_Answer_2"), "Secret_Answer_2");
				break;
				case "step6": stepStatus[step] = WebElementisVisible(security_Policy.Security_Policy_Page("Secret_Question_3"), "Secret_Question_3");
				break;
				case "step7": stepStatus[step] = WebElementisVisible(security_Policy.Security_Policy_Page("Secret_Answer_3"), "Secret_Answer_3");
				break;				
				case "step8": stepStatus[step] = WeblistItemsCountVerify(security_Policy.Security_Policy_Page("Secret_Question_1"), "Secret_Question_1","Drop_Down_Items_Count",1,1);
				break;
				case "step9": stepStatus[step] = WeblistItemsCountVerify(security_Policy.Security_Policy_Page("Secret_Question_2"), "Secret_Question_2","Drop_Down_Items_Count",1,1);
				break;
				case "step10": stepStatus[step] = WeblistItemsCountVerify(security_Policy.Security_Policy_Page("Secret_Question_3"), "Secret_Question_3","Drop_Down_Items_Count",1,1);
				break;				
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Close_Broswer(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 1;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];

				switch (stepNo) {
				case "step1": stepStatus[step] = CloseWebBrowser();
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Login_App_CSAgent_2(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}

		int totalSteps= 6;
		stepStatus = initializeSteps(totalSteps);
		try{
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {

				case "step1": stepStatus[step] = waitUntilExist(cRM_Login_Page.Login_Page("txtbox_UserName"), "Username");
				break;
				case "step2": stepStatus[step] = WebEditEnterUsername(cRM_Login_Page.Login_Page("txtbox_UserName"), "Username", "Login_User_ID", 1);
				break;
				case "step3": stepStatus[step] = WebEditEnterPassword(cRM_Login_Page.Login_Page("txtbox_Password"), "Password","Login_Password", 1);  
				break;
				case "step4": stepStatus[step] = WebElementClick(cRM_Login_Page.Login_Page("btn_LogIn"), "Login");
				break;
				case "step5": stepStatus[step] = pageLoadCheck(); 
				break;
				case "step6": stepStatus[step] = waitUntilExist(cRM_Logout.Logout_Page("menu_Dropdown"), "Menu_Dropdown"); 
				break;

				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}

			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Update_Policy_Settings_CS(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 16;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step2": stepStatus[step] = WebElementClick(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;
				case "step3": stepStatus[step] = WebElementClick(settings.settings_Page("settings_Button"), "Settings_Button");
				break;
				case "step4": stepStatus[step] = waitUntilExist(security_Policy.Security_Policy_Page("Role_Management"), "Role_Management");
				break;
				case "step5": stepStatus[step] = WebElementClick(security_Policy.Security_Policy_Page("Role_Management"), "Role_Management");
				break;
				case "step6": stepStatus[step] = waitUntilExist(security_Policy.Security_Policy_Page("Csagent_Settings"), "Csagent_Settings");
				break;				
				case "step7": stepStatus[step] = WebElementClick(security_Policy.Security_Policy_Page("Csagent_Settings"), "Csagent_Settings");
				break;				
				case "step8": stepStatus[step] = waitUntilExist(security_Policy.Security_Policy_Page("Password_Policy"), "Password_Policy");
				break;				
				case "step9": stepStatus[step] = WebCheckboxON(security_Policy.Security_Policy_Page("Password_Policy"), "Password_Policy");
				break;
				case "step10": stepStatus[step] = WebCheckboxOFF(security_Policy.Security_Policy_Page("Password_Policy"), "Password_Policy");
				break;				
				case "step11": stepStatus[step] = WebElementClick(security_Policy.Security_Policy_Page("OK_Button"), "OK_Button");
				break;				
				case "step12": stepStatus[step] = waituntiltextpresent(security_Policy.Security_Policy_Page("Confirm_Message"), "Confirm_Message");
				break;				
				case "step13": stepStatus[step] = WebElementTextCompare(security_Policy.Security_Policy_Page("Confirm_Message"), "Confirm_Message","Confirm_Message",1);
				break;
				case "step14": stepStatus[step] = WebElementClick(security_Policy.Security_Policy_Page("Close_Button"), "Close_Button");
				break;
				case "step15": stepStatus[step] = sleepForFunction();
				break;	
				case "step16": stepStatus[step] = waitUntilExist(security_Policy.Security_Policy_Page("Admin_Settings"), "Admin_Settings");
				break;				
				default:
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Ques_Mand_Alert_SEC_POL(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 5;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(security_Policy.Security_Policy_Page("Secret_Question_1"), "Secret_Question_1");
				break;
				case "step2": stepStatus[step] = WebElementClick(security_Policy.Security_Policy_Page("Update_Secret_Question"), "Update_Secret_Question");
				break;				
				case "step3": stepStatus[step] = waitUntilExist(security_Policy.Security_Policy_Page("Alert_Message"), "Alert_Message");
				break;
				case "step4": stepStatus[step] = waituntiltextpresent(security_Policy.Security_Policy_Page("Alert_Message"), "Alert_Message");
				break;				
				case "step5": stepStatus[step] = WebElementTextCompare(security_Policy.Security_Policy_Page("Alert_Message"), "Alert_Message","Alert_Message",1);
				break;				
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Reset_SEC_POL(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 18;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(security_Policy.Security_Policy_Page("Secret_Question_1"), "Secret_Question_1");
				break;
				case "step2": stepStatus[step] = WebListSelect(security_Policy.Security_Policy_Page("Secret_Question_1"), "Secret_Question_1", "Question_1", 1);
				break;				
				case "step3": stepStatus[step] = waitUntilExist(security_Policy.Security_Policy_Page("Secret_Answer_1"), "Secret_Answer_1");
				break;				
				case "step4": stepStatus[step] = WebEditEnterText(security_Policy.Security_Policy_Page("Secret_Answer_1"), "Secret_Answer_1", "Answer_1", 1);
				break;				
				case "step5": stepStatus[step] = WebListSelect(security_Policy.Security_Policy_Page("Secret_Question_2"), "Secret_Question_2", "Question_2", 1);
				break;				
				case "step6": stepStatus[step] = waitUntilExist(security_Policy.Security_Policy_Page("Secret_Answer_2"), "Secret_Answer_2");
				break;				
				case "step7": stepStatus[step] = WebEditEnterText(security_Policy.Security_Policy_Page("Secret_Answer_2"), "Secret_Answer_2", "Answer_2", 1);
				break;
				case "step8": stepStatus[step] = WebListSelect(security_Policy.Security_Policy_Page("Secret_Question_3"), "Secret_Question_3", "Question_3", 1);
				break;				
				case "step9": stepStatus[step] = waitUntilExist(security_Policy.Security_Policy_Page("Secret_Answer_3"), "Secret_Answer_3");
				break;				
				case "step10": stepStatus[step] = WebEditEnterText(security_Policy.Security_Policy_Page("Secret_Answer_3"), "Secret_Answer_3", "Answer_3", 1);
				break;				
				case "step11": stepStatus[step] = WebElementClick(security_Policy.Security_Policy_Page("Reset_Secret_Question"), "Reset_Secret_Question");
				break;				
				case "step12": stepStatus[step] = sleepForFunction();
				break;				
				case "step13": stepStatus[step] = WebListSelectedValue(security_Policy.Security_Policy_Page("Secret_Question_1"),"Secret_Question_1","Initial_Value",1);
				break;
				case "step14": stepStatus[step] = WebListSelectedValue(security_Policy.Security_Policy_Page("Secret_Question_2"),"Secret_Question_2","Initial_Value",1);
				break;
				case "step15": stepStatus[step] = WebListSelectedValue(security_Policy.Security_Policy_Page("Secret_Question_3"),"Secret_Question_3","Initial_Value",1);
				break;				
				case "step16": stepStatus[step] = WebElementEmpty(security_Policy.Security_Policy_Page("Secret_Answer_1"), "Secret_Answer_1");
				break;		
				case "step17": stepStatus[step] = WebElementEmpty(security_Policy.Security_Policy_Page("Secret_Answer_2"), "Secret_Answer_2");
				break;
				case "step18": stepStatus[step] = WebElementEmpty(security_Policy.Security_Policy_Page("Secret_Answer_3"), "Secret_Answer_3");
				break;				
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Postconditions_SEC_POL(String testdatasheet,String compName, String disableSteps, int noOfDataSet){
		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps=3;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = SQLDBCheckValueExist("Table_Name", "Column_Password", "Condition",1);
				break;
				case "step2": stepStatus[step] = SQLDBSelect("Table_Name", "Column_Passwordpolicy", "Condition", "Passwordpolicy", 1);
				break;
				case "step3": stepStatus[step] = SQLDBDateCompare("Table_Name", "Column_Last_Password_Change_Date", "Condition", "dd/MM/yyyy", 1);
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Update_Secret_Question_POL(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 14;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(security_Policy.Security_Policy_Page("Secret_Question_1"), "Secret_Question_1");
				break;
				case "step2": stepStatus[step] = WebListSelect(security_Policy.Security_Policy_Page("Secret_Question_1"), "Secret_Question_1", "Question_1", 1);
				break;				
				case "step3": stepStatus[step] = waitUntilExist(security_Policy.Security_Policy_Page("Secret_Answer_1"), "Secret_Answer_1");
				break;				
				case "step4": stepStatus[step] = WebEditEnterText(security_Policy.Security_Policy_Page("Secret_Answer_1"), "Secret_Answer_1", "Answer_1", 1);
				break;				
				case "step5": stepStatus[step] = WebListSelect(security_Policy.Security_Policy_Page("Secret_Question_2"), "Secret_Question_2", "Question_2", 1);
				break;				
				case "step6": stepStatus[step] = waitUntilExist(security_Policy.Security_Policy_Page("Secret_Answer_2"), "Secret_Answer_2");
				break;				
				case "step7": stepStatus[step] = WebEditEnterText(security_Policy.Security_Policy_Page("Secret_Answer_2"), "Secret_Answer_2", "Answer_2", 1);
				break;
				case "step8": stepStatus[step] = WebListSelect(security_Policy.Security_Policy_Page("Secret_Question_3"), "Secret_Question_3", "Question_3", 1);
				break;				
				case "step9": stepStatus[step] = waitUntilExist(security_Policy.Security_Policy_Page("Secret_Answer_3"), "Secret_Answer_3");
				break;				
				case "step10": stepStatus[step] = WebEditEnterText(security_Policy.Security_Policy_Page("Secret_Answer_3"), "Secret_Answer_3", "Answer_3", 1);
				break;				
				case "step11": stepStatus[step] = WebElementClick(security_Policy.Security_Policy_Page("Update_Secret_Question"), "Update_Secret_Question");
				break;				
				case "step12": stepStatus[step] = waituntiltextpresent(security_Policy.Security_Policy_Page("Update_Password_Message"), "Alert_Message");
				break;				
				case "step13": stepStatus[step] = WebElementTextCompare(security_Policy.Security_Policy_Page("Update_Password_Message"), "Update_Password_Message","Alert_Message",1);
				break;				
				case "step14": stepStatus[step] = waitUntilExist(settings.settings_Page("menu_Dropdown"), "Menu_Dropdown");
				break;				
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_VS_Details_2(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 49;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
				case "step1": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Load_Type"), "Load_Type");
				break;
				case "step2": stepStatus[step] = WebListSelect(voucher_Status.Voucher_Status_Page("Load_Type"), "Load_Type", "Load_Type", 1);
				break;
				case "step3": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Load_Parameter"), "Load_Parameter");
				break;
				case "step4": stepStatus[step] = WebEditEnterText(voucher_Status.Voucher_Status_Page("Load_Parameter"), "Load_Parameter", "Mobile_Number", 1);
				break;
				case "step5": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Load_Subscriber"), "Load_Subscriber");
				break;
				case "step6": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Menu_Items"), "Menu_Items");
				break;
				case "step7": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Menu_Items"), "Menu_Items");
				break;
				case "step8": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step9": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Topup_Menu"), "Topup_Menu");
				break;
				case "step10": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Status"), "Voucher_Status");
				break;
				case "step11": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Voucher_Status"), "Voucher_Status");
				break;
				case "step12": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Type"), "Voucher_Type");
				break;
				case "step13": stepStatus[step] = WebListSelect(voucher_Status.Voucher_Status_Page("Voucher_Type"), "Voucher_Type", "Voucher_Type", 1);
				break;
				case "step14": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Voucher_Code"), "Voucher_Code");
				break;
				case "step15": stepStatus[step] = WebEditEnterText(voucher_Status.Voucher_Status_Page("Voucher_Code"), "Voucher_Code", "Voucher_Code", 1);
				break;	
				case "step16": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Apply"), "Apply");
				break;
				case "step17": stepStatus[step] = waituntiltextpresent(voucher_Status.Voucher_Status_Page("Alert_Message"), "Alert_Message");
				break;
				case "step18": stepStatus[step] = WebElementResxKeyValueStaticCompare(voucher_Status.Voucher_Status_Page("Alert_Message"), "Alert_Message","Alert_Message",1);
				break;
				case "step19": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Voucher_Number"), "Voucher_Number","Voucher_Number",1);
				break;
				case "step20": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Status"), "Status","Status",1);
				break;
				case "step21": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Activation_Date"), "Activation_Date","Activation_Date",1);
				break;
				case "step22": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Used_MSISDN"), "Used_MSISDN","Used_MSISDN",1);
				break;
				case "step23": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Blocked_Date"), "Blocked_Date","Blocked_Date",1);
				break;
				case "step24": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Blocked_Reason"), "Blocked_Reason","Blocked_Reason",1);
				break;
				case "step25": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Recharge_Date"), "Recharge_Date","Recharge_Date",1);
				break;
				case "step26": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Reseller_ID"), "Reseller_ID","Reseller_ID",1);
				break;
				case "step27": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Activation_Level"), "Activation_Level","Activation_Level",1);
				break;
				case "step28": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Reseller_Message"), "Reseller_Message","Reseller_Message",1);
				break;
				case "step29": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Plan_Name"), "Plan_Name","Plan_Name",1);
				break;
				case "step30": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Bundle"), "Bundle","Bundle",1);
				break;
				case "step31": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Face_Value"), "Face_Value","Face_Value",1);
				break;
				case "step32": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Total_Bundle_Price"), "Total_Bundle_Price","Total_Bundle_Price",1);
				break;				
				case "step33": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Bundle"), "Bundle");
				break;
				case "step34": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Close_Popup"), "Close_Popup");
				break;				
				case "step35": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Bundle_Name_Popup"), "Bundle_Name_Popup","Bundle_Name_Popup",1);
				break;
				case "step36": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Bundle_Code_Popup"), "Bundle_Code_Popup","Bundle_Code_Popup",1);
				break;
				case "step37": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Validity_Popup"), "Validity_Popup","Validity_Popup",1);
				break;
				case "step38": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Bundle_Mode_Popup"), "Bundle_Mode_Popup","Bundle_Mode_Popup",1);
				break;
				case "step39": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Bundle_Type_Popup"), "Bundle_Type_Popup","Bundle_Type_Popup",1);
				break;
				case "step40": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Face_Value_Popup"), "Face_Value_Popup","Face_Value_Popup",1);
				break;
				case "step41": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Onnet_Mins_Popup"), "Onnet_Mins_Popup","Onnet_Mins_Popup",1);
				break;
				case "step42": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Offnet_Mins_Popup"), "Offnet_Mins_Popup","Offnet_Mins_Popup",1);
				break;
				case "step43": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Onnet_SMS_Popup"), "Onnet_SMS_Popup","Onnet_SMS_Popup",1);
				break;
				case "step44": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Offnet_SMS_Popup"), "Offnet_SMS_Popup","Offnet_SMS_Popup",1);
				break;
				case "step45": stepStatus[step] = WebElementTextCompare(voucher_Status.Voucher_Status_Page("Free_Data_Popup"), "Free_Data_Popup","Free_Data_Popup",1);
				break;
				case "step46": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("Close_Popup"), "Close_Popup");
				break;				
				case "step47": stepStatus[step] = sleepForFunction();
				break;
				case "step48": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("close_button"), "close_button");
				break;				
				case "step49": stepStatus[step] = WebElementClick(voucher_Status.Voucher_Status_Page("close_button"), "Close_Button");
				break;
				case "step50": stepStatus[step] = waitUntilExist(voucher_Status.Voucher_Status_Page("Load_Type"), "Load_Type");
				break;
				default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}

	public synchronized void Verify_Agent_Profile_Details(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 16;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
					case "step1": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("menu_Dropdown"), "Menu_Dropdown");
					break;
					case "step2": stepStatus[step] = WebElementClick(agent_Profile.Agent_Profile_Page("menu_Dropdown"), "Menu_Dropdown");
					break;
					case "step3": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("Agent_Profile"), "Agent_Profile");
					break;
					case "step4": stepStatus[step] = WebElementClick(agent_Profile.Agent_Profile_Page("Agent_Profile"), "Agent_Profile");
					break;
					case "step5": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("Agent_Full_Name"), "Agent_Full_Name");
					break;
					case "step6": stepStatus[step] = WebElementValueCompare(agent_Profile.Agent_Profile_Page("Agent_Full_Name"), "Agent_Full_Name", "Agent_Full_Name", 1);
					break;
					case "step7": stepStatus[step] = WebElementValueCompare(agent_Profile.Agent_Profile_Page("Agent_User_Name"), "Agent_User_Name", "Agent_User_Name", 1);
					break;
					case "step8": stepStatus[step] = WebElementValueCompare(agent_Profile.Agent_Profile_Page("Phone"), "Phone", "Phone", 1);
					break;
					case "step9": stepStatus[step] = WebElementValueCompare(agent_Profile.Agent_Profile_Page("Email"), "Email", "Email", 1);
					break;					
					case "step10": stepStatus[step] = WebCheckboxcheckedStatus(agent_Profile.Agent_Profile_Page("Status"), "Status");
					break;						
					case "step11": stepStatus[step] = webElementDateCompare(agent_Profile.Agent_Profile_Page("Last_Login"), "dd/MM/yyyy");
					break;					
					case "step12": stepStatus[step] = WebElementValueCompare(agent_Profile.Agent_Profile_Page("Access_Level"), "Access_Level", "Access_Level", 1);
					break;					
					case "step13": stepStatus[step] = checkElementIsDisplayed(agent_Profile.Agent_Profile_Page("Old_Password"), "Old_Password");
					break;
					case "step14": stepStatus[step] = checkElementIsDisplayed(agent_Profile.Agent_Profile_Page("New_Password"), "New_Password");
					break;
					case "step15": stepStatus[step] = checkElementIsDisplayed(agent_Profile.Agent_Profile_Page("Retype_New_Password"), "Retype_New_Password");
					break;
					case "step16": stepStatus[step] = checkElementIsDisplayed(agent_Profile.Agent_Profile_Page("Upload_Profile_Image"), "Upload_Profile_Image");
					break;
					default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}
	
	public synchronized void Verify_Agent_Invalid_Details(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 15;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
					case "step1": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("menu_Dropdown"), "Menu_Dropdown");
					break;
					case "step2": stepStatus[step] = WebElementClick(agent_Profile.Agent_Profile_Page("menu_Dropdown"), "Menu_Dropdown");
					break;
					case "step3": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("Agent_Profile"), "Agent_Profile");
					break;
					case "step4": stepStatus[step] = WebElementClick(agent_Profile.Agent_Profile_Page("Agent_Profile"), "Agent_Profile");
					break;
					case "step5": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("Agent_Full_Name"), "Agent_Full_Name");
					break;
					case "step6": stepStatus[step] = WebEditEnterText(agent_Profile.Agent_Profile_Page("Old_Password"), "Old_Password","Old_Password", 1);
					break;
					case "step7": stepStatus[step] = WebEditEnterText(agent_Profile.Agent_Profile_Page("New_Password"), "New_Password", "New_Password", 1);
					break;
					case "step8": stepStatus[step] = WebEditEnterText(agent_Profile.Agent_Profile_Page("Retype_New_Password"), "Retype_New_Password", "Retype_New_Password", 1);
					break;
					case "step9": stepStatus[step] = WebElementClick(agent_Profile.Agent_Profile_Page("Update"), "Update");
					break;
					case "step10": stepStatus[step] = waituntiltextpresent(agent_Profile.Agent_Profile_Page("Alert_Message"), "Alert_Message");
					break;
					case "step11": stepStatus[step] = WebElementTextCompare(agent_Profile.Agent_Profile_Page("Alert_Message"), "Alert_Message","Alert_Message",1);
					break;
					case "step12": stepStatus[step] = waituntiltextpresent(agent_Profile.Agent_Profile_Page("Agent_Confirm_Password_Alert"), "Alert_Message");
					break;
					case "step13": stepStatus[step] = WebElementTextCompare(agent_Profile.Agent_Profile_Page("Agent_Confirm_Password_Alert"), "Alert_Message","Alert_Message",1);
					break;
					case "step14": stepStatus[step] = waituntiltextpresent(agent_Profile.Agent_Profile_Page("Change_Password_Message"), "Alert_Message");
					break;
					case "step15": stepStatus[step] = WebElementTextCompare(agent_Profile.Agent_Profile_Page("Change_Password_Message"), "Alert_Message","Alert_Message",1);
					break;
					default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}
	
	public synchronized void Postcondition_Agent_Profile(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 2;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
					case "step1": stepStatus[step] = SQLDBCheckValueExist("Table_Name", "Column_Name_Password", "Condition", 1);
					break;
					case "step2": stepStatus[step] = SQLDBDateCompare("Table_Name", "Column_Name_LAST_PWD_CHANGE_DATE", "Condition", "dd/MM/yyyy", 1);
					break;
					default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}
	
	public synchronized void Upload_Agent_Image(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 45;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
					case "step1": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("menu_Dropdown"), "Menu_Dropdown");
					break;
					case "step2": stepStatus[step] = WebElementClick(agent_Profile.Agent_Profile_Page("menu_Dropdown"), "Menu_Dropdown");
					break;
					case "step3": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("Agent_Profile"), "Agent_Profile");
					break;
					case "step4": stepStatus[step] = WebElementClick(agent_Profile.Agent_Profile_Page("Agent_Profile"), "Agent_Profile");
					break;
					case "step5": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("Agent_Full_Name"), "Agent_Full_Name");
					break;
					case "step6": stepStatus[step] = WebElementClick(agent_Profile.Agent_Profile_Page("Upload_Profile_Image"), "Upload_Profile_Image");
					break;
					case "step7": stepStatus[step] = Uploadfiletestdata("testSupportfilespath", "File_Name_With_Type_JPG",1);
					break;						
					case "step8": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("Close_Button"), "Close_Button");
					break;					
					case "step9": stepStatus[step] = WebElementResxKeyValueStaticCompare(agent_Profile.Agent_Profile_Page("Upload_Profile_Message"), "Upload_Profile_Message","Upload_Profile_Message",1);
					break;
					case "step10": stepStatus[step] = WebElementClick(agent_Profile.Agent_Profile_Page("Close_Button"), "Close_Button");
					break;
					case "step11": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("Remove_Profile_Image"), "Remove_Profile_Image");
					break;					
					case "step12": stepStatus[step] = javascriptWebElementClick(agent_Profile.Agent_Profile_Page("Remove_Profile_Image"), "Remove_Profile_Image");
					break;					
					case "step13": stepStatus[step] = sleepForFunction();
					break;					
					case "step14": stepStatus[step] = WebElementClick(agent_Profile.Agent_Profile_Page("Upload_Profile_Image"), "Upload_Profile_Image");
					break;
					case "step15": stepStatus[step] = Uploadfiletestdata("testSupportfilespath", "File_Name_With_Type_TIFF",1);
					break;						
					case "step16": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("Close_Button"), "Close_Button");
					break;					
					case "step17": stepStatus[step] = WebElementResxKeyValueStaticCompare(agent_Profile.Agent_Profile_Page("Upload_Profile_Message"), "Upload_Profile_Message","Upload_Profile_Message",1);
					break;
					case "step18": stepStatus[step] = WebElementClick(agent_Profile.Agent_Profile_Page("Close_Button"), "Close_Button");
					break;
					case "step19": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("Remove_Profile_Image"), "Remove_Profile_Image");
					break;					
					case "step20": stepStatus[step] = javascriptWebElementClick(agent_Profile.Agent_Profile_Page("Remove_Profile_Image"), "Remove_Profile_Image");
					break;					
					case "step21": stepStatus[step] = sleepForFunction();
					break;
					case "step22": stepStatus[step] = WebElementClick(agent_Profile.Agent_Profile_Page("Upload_Profile_Image"), "Upload_Profile_Image");
					break;
					case "step23": stepStatus[step] = Uploadfiletestdata("testSupportfilespath", "File_Name_With_Type_PNG",1);
					break;						
					case "step24": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("Close_Button"), "Close_Button");
					break;					
					case "step25": stepStatus[step] = WebElementResxKeyValueStaticCompare(agent_Profile.Agent_Profile_Page("Upload_Profile_Message"), "Upload_Profile_Message","Upload_Profile_Message",1);
					break;
					case "step26": stepStatus[step] = WebElementClick(agent_Profile.Agent_Profile_Page("Close_Button"), "Close_Button");
					break;
					case "step27": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("Remove_Profile_Image"), "Remove_Profile_Image");
					break;					
					case "step28": stepStatus[step] = javascriptWebElementClick(agent_Profile.Agent_Profile_Page("Remove_Profile_Image"), "Remove_Profile_Image");
					break;					
					case "step29": stepStatus[step] = sleepForFunction();
					break;
					case "step30": stepStatus[step] = WebElementClick(agent_Profile.Agent_Profile_Page("Upload_Profile_Image"), "Upload_Profile_Image");
					break;
					case "step31": stepStatus[step] = Uploadfiletestdata("testSupportfilespath", "File_Name_With_Type_GIF",1);
					break;						
					case "step32": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("Close_Button"), "Close_Button");
					break;					
					case "step33": stepStatus[step] = WebElementResxKeyValueStaticCompare(agent_Profile.Agent_Profile_Page("Upload_Profile_Message"), "Upload_Profile_Message","Upload_Profile_Message",1);
					break;
					case "step34": stepStatus[step] = WebElementClick(agent_Profile.Agent_Profile_Page("Close_Button"), "Close_Button");
					break;
					case "step35": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("Remove_Profile_Image"), "Remove_Profile_Image");
					break;					
					case "step36": stepStatus[step] = javascriptWebElementClick(agent_Profile.Agent_Profile_Page("Remove_Profile_Image"), "Remove_Profile_Image");
					break;					
					case "step37": stepStatus[step] = sleepForFunction();
					break;
					case "step38": stepStatus[step] = WebElementClick(agent_Profile.Agent_Profile_Page("Upload_Profile_Image"), "Upload_Profile_Image");
					break;
					case "step39": stepStatus[step] = Uploadfiletestdata("testSupportfilespath", "File_Name_With_Type_BMP",1);
					break;						
					case "step40": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("Close_Button"), "Close_Button");
					break;					
					case "step41": stepStatus[step] = WebElementResxKeyValueStaticCompare(agent_Profile.Agent_Profile_Page("Upload_Profile_Message"), "Upload_Profile_Message","Upload_Profile_Message",1);
					break;
					case "step42": stepStatus[step] = WebElementClick(agent_Profile.Agent_Profile_Page("Close_Button"), "Close_Button");
					break;
					case "step43": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("Remove_Profile_Image"), "Remove_Profile_Image");
					break;					
					case "step44": stepStatus[step] = javascriptWebElementClick(agent_Profile.Agent_Profile_Page("Remove_Profile_Image"), "Remove_Profile_Image");
					break;					
					case "step45": stepStatus[step] = sleepForFunction();
					break;
					default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}
	
	
	public synchronized void Upload_Agent_Image_Alert(String testdatasheet,String compName, String disableSteps, int noOfDataSet){

		boolean[] stepStatus=null;
		int[] reorderedSteps = null;
		boolean defaultBreak = false;

		testDataFilePathStatic=testdatasheet;
		testComponentNameStatic=getMethodName();
		gblrecordsCounterStatic=noOfDataSet;

		if(skipAllComponentsVariable){
			log.info("Skip Variable is set to TRUE by previous Component. Skiping the Component.");
			ExtentTestManager.reportStepSkip("<b>Skipping the Component as previous Component FAILED</b>");
			throw new SkipException("Skipping the Component as Previous Component is failed.");
		}
		try{
			int totalSteps = 11;
			stepStatus = initializeSteps(totalSteps);
			reorderedSteps=dropDisableSteps(totalSteps,disableSteps);

			for (int step=0; step<reorderedSteps.length; step++){
				String stepNo="step" + reorderedSteps[step];
				switch (stepNo) {
										case "step1": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("menu_Dropdown"), "Menu_Dropdown");
					break;
					case "step2": stepStatus[step] = WebElementClick(agent_Profile.Agent_Profile_Page("menu_Dropdown"), "Menu_Dropdown");
					break;
					case "step3": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("Agent_Profile"), "Agent_Profile");
					break;
					case "step4": stepStatus[step] = WebElementClick(agent_Profile.Agent_Profile_Page("Agent_Profile"), "Agent_Profile");
					break;
					case "step5": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("Agent_Full_Name"), "Agent_Full_Name");
					break;
					case "step6": stepStatus[step] = WebElementClick(agent_Profile.Agent_Profile_Page("Upload_Profile_Image"), "Upload_Profile_Image");
					break;
					case "step7": stepStatus[step] = Uploadfiletestdata("testSupportfilespath", "File_Name_With_Type",1);
					break;						
					case "step8": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("Close_Button"), "Close_Button");
					break;					
					case "step9": stepStatus[step] = WebElementDynamicStringVerify(agent_Profile.Agent_Profile_Page("Upload_Profile_Message"), "Upload_Profile_Message","Upload_Profile_Message",1);
					break;
					case "step10": stepStatus[step] = WebElementClick(agent_Profile.Agent_Profile_Page("Close_Button"), "Close_Button");
					break;
					case "step11": stepStatus[step] = waitUntilExist(agent_Profile.Agent_Profile_Page("Agent_Full_Name"), "Agent_Full_Name");
					break;
					default: 
					ExtentTestManager.reportStepFail("Number of Steps mis-match with the Spreadsheet Total/Disable Steps and Steps written in Component", false);
					defaultBreak=true;
					break;
				}

				if(!stepStatus[step]){
					eventInACaseFailed=true;
					if((sysProperty.getProperty("Skip_Component_on_Step_Failure")).equalsIgnoreCase("True")){
						ExtentTestManager.reportStepInfo("<b>Skipping the Component as EVENT failed</b>");
						if((sysProperty.getProperty("Skip_All_Components_on_Step_Failure")).equalsIgnoreCase("True")){
							skipAllComponentsVariable=true;
						}
						break;
					}
				}
			}
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());

		}catch(Exception e){
			log.info("Exception occured in Component --> "+e);
			validateComponentStatus(reorderedSteps, stepStatus, defaultBreak, Thread.currentThread().getStackTrace()[1].getMethodName());
		}
	}
	
	/*---------------------------YOGENDRA CODE END------------------------------------*/
	

}
